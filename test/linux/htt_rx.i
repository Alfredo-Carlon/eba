# 1 "drivers/net/wireless/ath/ath10k/htt_rx.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "././include/linux/kconfig.h" 1



# 1 "include/generated/autoconf.h" 1
# 5 "././include/linux/kconfig.h" 2
# 1 "<command-line>" 2
# 1 "drivers/net/wireless/ath/ath10k/htt_rx.c"
# 18 "drivers/net/wireless/ath/ath10k/htt_rx.c"
# 1 "drivers/net/wireless/ath/ath10k/core.h" 1
# 21 "drivers/net/wireless/ath/ath10k/core.h"
# 1 "include/linux/completion.h" 1
# 11 "include/linux/completion.h"
# 1 "include/linux/wait.h" 1





# 1 "include/linux/list.h" 1



# 1 "include/linux/types.h" 1




# 1 "include/uapi/linux/types.h" 1



# 1 "./arch/x86/include/uapi/asm/types.h" 1



# 1 "./include/uapi/asm-generic/types.h" 1





# 1 "include/asm-generic/int-ll64.h" 1
# 10 "include/asm-generic/int-ll64.h"
# 1 "include/uapi/asm-generic/int-ll64.h" 1
# 11 "include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/x86/include/uapi/asm/bitsperlong.h" 1
# 10 "./arch/x86/include/uapi/asm/bitsperlong.h"
# 1 "include/asm-generic/bitsperlong.h" 1



# 1 "include/uapi/asm-generic/bitsperlong.h" 1
# 5 "include/asm-generic/bitsperlong.h" 2
# 11 "./arch/x86/include/uapi/asm/bitsperlong.h" 2
# 12 "include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 11 "include/asm-generic/int-ll64.h" 2




typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;
# 7 "./include/uapi/asm-generic/types.h" 2
# 5 "./arch/x86/include/uapi/asm/types.h" 2
# 5 "include/uapi/linux/types.h" 2
# 13 "include/uapi/linux/types.h"
# 1 "./include/uapi/linux/posix_types.h" 1



# 1 "include/linux/stddef.h" 1



# 1 "include/uapi/linux/stddef.h" 1
# 1 "include/linux/compiler.h" 1
# 60 "include/linux/compiler.h"
# 1 "include/linux/compiler-gcc.h" 1
# 61 "include/linux/compiler.h" 2
# 89 "include/linux/compiler.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};
# 203 "include/linux/compiler.h"
# 1 "include/uapi/linux/types.h" 1
# 204 "include/linux/compiler.h" 2
# 219 "include/linux/compiler.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}
# 238 "include/linux/compiler.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size_nocheck(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
 case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
 case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
 case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
 default:
  __asm__ __volatile__("": : :"memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("": : :"memory");
 }
}
# 2 "include/uapi/linux/stddef.h" 2
# 5 "include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 5 "./include/uapi/linux/posix_types.h" 2
# 24 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/x86/include/asm/posix_types.h" 1



# 1 "./arch/x86/include/uapi/asm/posix_types_64.h" 1
# 10 "./arch/x86/include/uapi/asm/posix_types_64.h"
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 14 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 71 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 18 "./arch/x86/include/uapi/asm/posix_types_64.h" 2
# 5 "./arch/x86/include/asm/posix_types.h" 2
# 36 "./include/uapi/linux/posix_types.h" 2
# 14 "include/uapi/linux/types.h" 2
# 32 "include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 6 "include/linux/types.h" 2






typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef __u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 54 "include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef __u8 u_int8_t;
typedef __s8 int8_t;
typedef __u16 u_int16_t;
typedef __s16 int16_t;
typedef __u32 u_int32_t;
typedef __s32 int32_t;



typedef __u8 uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;


typedef __u64 uint64_t;
typedef __u64 u_int64_t;
typedef __s64 int64_t;
# 133 "include/linux/types.h"
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
# 152 "include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned gfp_t;
typedef unsigned fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;


typedef struct {
 long counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 222 "include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);


typedef u64 cycle_t;
# 5 "include/linux/list.h" 2

# 1 "include/linux/poison.h" 1
# 7 "include/linux/list.h" 2
# 1 "./include/uapi/linux/const.h" 1
# 8 "include/linux/list.h" 2
# 1 "include/linux/kernel.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 6 "include/linux/kernel.h" 2
# 1 "include/linux/linkage.h" 1




# 1 "include/linux/stringify.h" 1
# 6 "include/linux/linkage.h" 2
# 1 "include/linux/export.h" 1
# 26 "include/linux/export.h"
struct kernel_symbol
{
 unsigned long value;
 const char *name;
};
# 7 "include/linux/linkage.h" 2
# 1 "./arch/x86/include/asm/linkage.h" 1
# 8 "include/linux/linkage.h" 2
# 7 "include/linux/kernel.h" 2



# 1 "include/linux/bitops.h" 1
# 27 "include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "./arch/x86/include/asm/bitops.h" 1
# 16 "./arch/x86/include/asm/bitops.h"
# 1 "./arch/x86/include/asm/alternative.h" 1
# 9 "./arch/x86/include/asm/alternative.h"
# 1 "./arch/x86/include/asm/asm.h" 1
# 10 "./arch/x86/include/asm/alternative.h" 2
# 47 "./arch/x86/include/asm/alternative.h"
struct alt_instr {
 s32 instr_offset;
 s32 repl_offset;
 u16 cpuid;
 u8 instrlen;
 u8 replacementlen;
 u8 padlen;
} __attribute__((packed));





extern int alternatives_patched;

extern void alternative_instructions(void);
extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

struct module;


extern void alternatives_smp_module_add(struct module *mod, char *name,
     void *locks, void *locks_end,
     void *text, void *text_end);
extern void alternatives_smp_module_del(struct module *mod);
extern void alternatives_enable_smp(void);
extern int alternatives_text_reserved(void *start, void *end);
extern bool skip_smp_alternatives;
# 17 "./arch/x86/include/asm/bitops.h" 2
# 1 "./arch/x86/include/asm/rmwcc.h" 1
# 18 "./arch/x86/include/asm/bitops.h" 2
# 1 "./arch/x86/include/asm/barrier.h" 1




# 1 "./arch/x86/include/asm/nops.h" 1
# 142 "./arch/x86/include/asm/nops.h"
extern const unsigned char * const *ideal_nops;
extern void arch_init_ideal_nops(void);
# 6 "./arch/x86/include/asm/barrier.h" 2
# 83 "./arch/x86/include/asm/barrier.h"
# 1 "include/asm-generic/barrier.h" 1
# 84 "./arch/x86/include/asm/barrier.h" 2
# 19 "./arch/x86/include/asm/bitops.h" 2
# 71 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
set_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7)))
   : "memory");
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "bts %1,%0"
   : "+m" (*(volatile long *) (addr)) : "Ir" (nr) : "memory");
 }
}
# 94 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __set_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("bts %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr) : "memory");
}
# 109 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
clear_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)~(1 << ((nr) & 7))));
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btr %1,%0"
   : "+m" (*(volatile long *) (addr))
   : "Ir" (nr));
 }
}
# 131 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(nr, addr);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __clear_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("btr %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr));
}
# 154 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 __clear_bit(nr, addr);
}
# 169 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __change_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("btc %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr));
}
# 183 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void change_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xorb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7))));
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btc %1,%0"
   : "+m" (*(volatile long *) (addr))
   : "Ir" (nr));
 }
}
# 204 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int test_and_set_bit(long nr, volatile unsigned long *addr)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 216 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int
test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 return test_and_set_bit(nr, addr);
}
# 231 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int __test_and_set_bit(long nr, volatile unsigned long *addr)
{
 int oldbit;

 asm("bts %2,%1\n\t"
     "sbb %0,%0"
     : "=r" (oldbit), "+m" (*(volatile long *) (addr))
     : "Ir" (nr));
 return oldbit;
}
# 250 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 271 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int __test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 int oldbit;

 asm volatile("btr %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*(volatile long *) (addr))
       : "Ir" (nr));
 return oldbit;
}


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int __test_and_change_bit(long nr, volatile unsigned long *addr)
{
 int oldbit;

 asm volatile("btc %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*(volatile long *) (addr))
       : "Ir" (nr) : "memory");

 return oldbit;
}
# 303 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int test_and_change_bit(long nr, volatile unsigned long *addr)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int constant_test_bit(long nr, const volatile unsigned long *addr)
{
 return ((1UL << (nr & (64 -1))) &
  (addr[nr >> 6])) != 0;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int variable_test_bit(long nr, volatile const unsigned long *addr)
{
 int oldbit;

 asm volatile("bt %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit)
       : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}
# 346 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __ffs(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "rm" (word));
 return word;
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long ffz(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "r" (~word));
 return word;
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __fls(unsigned long word)
{
 asm("bsr %1,%0"
     : "=r" (word)
     : "rm" (word));
 return word;
}
# 396 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int ffs(int x)
{
 int r;
# 410 "./arch/x86/include/asm/bitops.h"
 asm("bsfl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 423 "./arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 437 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls(int x)
{
 int r;
# 451 "./arch/x86/include/asm/bitops.h"
 asm("bsrl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 464 "./arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 479 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls64(__u64 x)
{
 int bitpos = -1;





 asm("bsrq %1,%q0"
     : "+r" (bitpos)
     : "rm" (x));
 return bitpos + 1;
}




# 1 "include/asm-generic/bitops/find.h" 1
# 14 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
  size, unsigned long offset);
# 28 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned
  long size, unsigned long offset);
# 42 "include/asm-generic/bitops/find.h"
extern unsigned long find_first_bit(const unsigned long *addr,
        unsigned long size);
# 53 "include/asm-generic/bitops/find.h"
extern unsigned long find_first_zero_bit(const unsigned long *addr,
      unsigned long size);
# 497 "./arch/x86/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/sched.h" 1
# 12 "include/asm-generic/bitops/sched.h"
static inline __attribute__((no_instrument_function)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 29 "include/asm-generic/bitops/sched.h"
}
# 499 "./arch/x86/include/asm/bitops.h" 2

# 1 "./arch/x86/include/asm/arch_hweight.h" 1



# 1 "./arch/x86/include/asm/cpufeatures.h" 1




# 1 "./arch/x86/include/asm/required-features.h" 1
# 6 "./arch/x86/include/asm/cpufeatures.h" 2



# 1 "./arch/x86/include/asm/disabled-features.h" 1
# 10 "./arch/x86/include/asm/cpufeatures.h" 2
# 5 "./arch/x86/include/asm/arch_hweight.h" 2
# 26 "./arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned int __arch_hweight32(unsigned int w)
{
 unsigned int res = 0;

 asm ("661:\n\t" "call __sw_hweight32" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0xf3,0x40,0x0f,0xb8,0xc7" "\n" "665""1" ":\n\t" ".popsection"
       : "=""a" (res)
       : "D" (w));

 return res;
}

static inline __attribute__((no_instrument_function)) unsigned int __arch_hweight16(unsigned int w)
{
 return __arch_hweight32(w & 0xffff);
}

static inline __attribute__((no_instrument_function)) unsigned int __arch_hweight8(unsigned int w)
{
 return __arch_hweight32(w & 0xff);
}
# 54 "./arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __arch_hweight64(__u64 w)
{
 unsigned long res = 0;

 asm ("661:\n\t" "call __sw_hweight64" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0xf3,0x48,0x0f,0xb8,0xc7" "\n" "665""1" ":\n\t" ".popsection"
       : "=""a" (res)
       : "D" (w));

 return res;
}
# 501 "./arch/x86/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/const_hweight.h" 1
# 503 "./arch/x86/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/le.h" 1




# 1 "./arch/x86/include/uapi/asm/byteorder.h" 1



# 1 "include/linux/byteorder/little_endian.h" 1



# 1 "include/uapi/linux/byteorder/little_endian.h" 1
# 12 "include/uapi/linux/byteorder/little_endian.h"
# 1 "include/linux/swab.h" 1



# 1 "include/uapi/linux/swab.h" 1





# 1 "./arch/x86/include/uapi/asm/swab.h" 1






static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __arch_swab32(__u32 val)
{
 asm("bswapl %0" : "=r" (val) : "0" (val));
 return val;
}


static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __arch_swab64(__u64 val)
{
# 30 "./arch/x86/include/uapi/asm/swab.h"
 asm("bswapq %0" : "=r" (val) : "0" (val));
 return val;

}
# 7 "include/uapi/linux/swab.h" 2
# 46 "include/uapi/linux/swab.h"
static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __arch_swab32(val);



}

static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return __arch_swab64(val);







}

static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 160 "include/uapi/linux/swab.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __swab32p(const __u32 *p)
{



 return (__u32)__builtin_bswap32((__u32)(*p));

}





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __swab64p(const __u64 *p)
{



 return (__u64)__builtin_bswap64((__u64)(*p));

}







static inline __attribute__((no_instrument_function)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((no_instrument_function)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((no_instrument_function)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((no_instrument_function)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((no_instrument_function)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 5 "include/linux/swab.h" 2
# 13 "include/uapi/linux/byteorder/little_endian.h" 2
# 43 "include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 5 "include/linux/byteorder/little_endian.h" 2

# 1 "include/linux/byteorder/generic.h" 1
# 143 "include/linux/byteorder/generic.h"
static inline __attribute__((no_instrument_function)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((no_instrument_function)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((no_instrument_function)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}

static inline __attribute__((no_instrument_function)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((no_instrument_function)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__u32)__builtin_bswap32((__u32)(((__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((no_instrument_function)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__u64)__builtin_bswap64((__u64)(((__u64)__builtin_bswap64((__u64)(( __u64)(__be64)(*var))) + val))));
}
# 7 "include/linux/byteorder/little_endian.h" 2
# 5 "./arch/x86/include/uapi/asm/byteorder.h" 2
# 6 "include/asm-generic/bitops/le.h" 2





static inline __attribute__((no_instrument_function)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((no_instrument_function)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((no_instrument_function)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_first_zero_bit(addr, size);
}
# 52 "include/asm-generic/bitops/le.h"
static inline __attribute__((no_instrument_function)) int test_bit_le(int nr, const void *addr)
{
 return (__builtin_constant_p((nr ^ 0)) ? constant_test_bit((nr ^ 0), (addr)) : variable_test_bit((nr ^ 0), (addr)));
}

static inline __attribute__((no_instrument_function)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((no_instrument_function)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 505 "./arch/x86/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 507 "./arch/x86/include/asm/bitops.h" 2
# 37 "include/linux/bitops.h" 2
# 60 "include/linux/bitops.h"
static inline __attribute__((no_instrument_function)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((no_instrument_function)) int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}






static inline __attribute__((no_instrument_function)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << shift) | (word >> (64 - shift));
}






static inline __attribute__((no_instrument_function)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> shift) | (word << (64 - shift));
}






static inline __attribute__((no_instrument_function)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << shift) | (word >> ((-shift) & 31));
}






static inline __attribute__((no_instrument_function)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> shift) | (word << (32 - shift));
}






static inline __attribute__((no_instrument_function)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << shift) | (word >> (16 - shift));
}






static inline __attribute__((no_instrument_function)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> shift) | (word << (16 - shift));
}






static inline __attribute__((no_instrument_function)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << shift) | (word >> (8 - shift));
}






static inline __attribute__((no_instrument_function)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> shift) | (word << (8 - shift));
}
# 170 "include/linux/bitops.h"
static inline __attribute__((no_instrument_function)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((no_instrument_function)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((no_instrument_function)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}
# 202 "include/linux/bitops.h"
static inline __attribute__((no_instrument_function)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}
# 254 "include/linux/bitops.h"
extern unsigned long find_last_bit(const unsigned long *addr,
       unsigned long size);
# 11 "include/linux/kernel.h" 2
# 1 "include/linux/log2.h" 1
# 21 "include/linux/log2.h"
extern __attribute__((const, noreturn))
int ____ilog2_NaN(void);
# 31 "include/linux/log2.h"
static inline __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}







static inline __attribute__((no_instrument_function)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 12 "include/linux/kernel.h" 2
# 1 "include/linux/typecheck.h" 1
# 13 "include/linux/kernel.h" 2
# 1 "include/linux/printk.h" 1




# 1 "include/linux/init.h" 1
# 124 "include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);

extern initcall_t __con_initcall_start[], __con_initcall_end[];
extern initcall_t __security_initcall_start[], __security_initcall_end[];


typedef void (*ctor_fn_t)(void);


extern int do_one_initcall(initcall_t fn);
extern char __attribute__ ((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) load_default_modules(void);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) init_rootfs(void);


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 236 "include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 285 "include/linux/init.h"
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) parse_early_param(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) parse_early_options(char *cmdline);
# 6 "include/linux/printk.h" 2
# 1 "include/linux/kern_levels.h" 1
# 7 "include/linux/printk.h" 2

# 1 "include/linux/cache.h" 1



# 1 "include/uapi/linux/kernel.h" 1



# 1 "./include/uapi/linux/sysinfo.h" 1






struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 5 "include/uapi/linux/kernel.h" 2
# 5 "include/linux/cache.h" 2
# 1 "./arch/x86/include/asm/cache.h" 1
# 6 "include/linux/cache.h" 2
# 9 "include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];

static inline __attribute__((no_instrument_function)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'd':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((no_instrument_function)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}
# 46 "include/linux/printk.h"
extern int console_printk[];






static inline __attribute__((no_instrument_function)) void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline __attribute__((no_instrument_function)) void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}

struct va_format {
 const char *fmt;
 va_list *va;
};
# 118 "include/linux/printk.h"
extern __attribute__((format(printf, 1, 2)))
void early_printk(const char *fmt, ...);






extern void printk_nmi_init(void);
extern void printk_nmi_enter(void);
extern void printk_nmi_exit(void);
extern void printk_nmi_flush(void);
extern void printk_nmi_flush_on_panic(void);
# 140 "include/linux/printk.h"
 __attribute__((format(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   const char *dict, size_t dictlen,
   const char *fmt, va_list args);

 __attribute__((format(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

 __attribute__((format(printf, 5, 6))) __attribute__((__cold__))
int printk_emit(int facility, int level,
  const char *dict, size_t dictlen,
  const char *fmt, ...);

 __attribute__((format(printf, 1, 2))) __attribute__((__cold__))
int printk(const char *fmt, ...);




__attribute__((format(printf, 1, 2))) __attribute__((__cold__)) int printk_deferred(const char *fmt, ...);






extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;
extern int kptr_restrict;

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_kexec_setup(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) setup_log_buf(int early);
__attribute__((format(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
# 245 "include/linux/printk.h"
extern void dump_stack(void) __attribute__((__cold__));
# 289 "include/linux/printk.h"
# 1 "include/linux/dynamic_debug.h" 1
# 9 "include/linux/dynamic_debug.h"
struct _ddebug {




 const char *modname;
 const char *function;
 const char *filename;
 const char *format;
 unsigned int lineno:18;
# 35 "include/linux/dynamic_debug.h"
 unsigned int flags:8;
} __attribute__((aligned(8)));


int ddebug_add_module(struct _ddebug *tab, unsigned int n,
    const char *modname);
# 111 "include/linux/dynamic_debug.h"
# 1 "include/linux/string.h" 1
# 9 "include/linux/string.h"
# 1 "include/uapi/linux/string.h" 1
# 10 "include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/x86/include/asm/string.h" 1



# 1 "./arch/x86/include/asm/string_64.h" 1
# 9 "./arch/x86/include/asm/string_64.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void *__inline_memcpy(void *to, const void *from, size_t n)
{
 unsigned long d0, d1, d2;
 asm volatile("rep ; movsl\n\t"
       "testb $2,%b4\n\t"
       "je 1f\n\t"
       "movsw\n"
       "1:\ttestb $1,%b4\n\t"
       "je 2f\n\t"
       "movsb\n"
       "2:"
       : "=&c" (d0), "=&D" (d1), "=&S" (d2)
       : "0" (n / 4), "q" (n), "1" ((long)to), "2" ((long)from)
       : "memory");
 return to;
}





extern void *memcpy(void *to, const void *from, size_t len);
extern void *__memcpy(void *to, const void *from, size_t len);
# 55 "./arch/x86/include/asm/string_64.h"
void *memset(void *s, int c, size_t n);
void *__memset(void *s, int c, size_t n);


void *memmove(void *dest, const void *src, size_t count);
void *__memmove(void *dest, const void *src, size_t count);

int memcmp(const void *cs, const void *ct, size_t count);
size_t strlen(const char *s);
char *strcpy(char *dest, const char *src);
char *strcat(char *dest, const char *src);
int strcmp(const char *cs, const char *ct);
# 92 "./arch/x86/include/asm/string_64.h"
int memcpy_mcsafe(void *dst, const void *src, size_t cnt);
# 5 "./arch/x86/include/asm/string.h" 2
# 19 "include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t __attribute__((warn_unused_result)) strscpy(char *, const char *, size_t);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);


extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * __attribute__((warn_unused_result)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);
# 109 "include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern void * memchr(const void *,int,__kernel_size_t);

void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline __attribute__((no_instrument_function)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);


int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((format(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);






static inline __attribute__((no_instrument_function)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
void memzero_explicit(void *s, size_t count);






static inline __attribute__((no_instrument_function)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}
# 112 "include/linux/dynamic_debug.h" 2
# 1 "include/linux/errno.h" 1



# 1 "include/uapi/linux/errno.h" 1
# 1 "./arch/x86/include/uapi/asm/errno.h" 1
# 1 "./include/uapi/asm-generic/errno.h" 1



# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 5 "./include/uapi/asm-generic/errno.h" 2
# 1 "./arch/x86/include/uapi/asm/errno.h" 2
# 1 "include/uapi/linux/errno.h" 2
# 5 "include/linux/errno.h" 2
# 113 "include/linux/dynamic_debug.h" 2

static inline __attribute__((no_instrument_function)) int ddebug_remove_module(const char *mod)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int ddebug_dyndbg_module_param_cb(char *param, char *val,
      const char *modname)
{
 if (strstr(param, "dyndbg")) {

  printk("\001" "4" "dyndbg param is supported only in "
   "CONFIG_DYNAMIC_DEBUG builds\n");
  return 0;
 }
 return -22;
}
# 290 "include/linux/printk.h" 2
# 432 "include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);




extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len);
# 477 "include/linux/printk.h"
static inline __attribute__((no_instrument_function)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 14 "include/linux/kernel.h" 2
# 172 "include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;


extern int _cond_resched(void);
# 200 "include/linux/kernel.h"
  static inline __attribute__((no_instrument_function)) void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline __attribute__((no_instrument_function)) void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 247 "include/linux/kernel.h"
static inline __attribute__((no_instrument_function)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}






static inline __attribute__((no_instrument_function)) void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((format(printf, 1, 2)))
void panic(const char *fmt, ...)
 __attribute__((noreturn)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code)
 __attribute__((noreturn));
void complete_and_exit(struct completion *, long)
 __attribute__((noreturn));


int __attribute__((warn_unused_result)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((warn_unused_result)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((warn_unused_result)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((warn_unused_result)) kstrtoll(const char *s, unsigned int base, long long *res);
# 298 "include/linux/kernel.h"
static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 327 "include/linux/kernel.h"
static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((warn_unused_result)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((warn_unused_result)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((warn_unused_result)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((warn_unused_result)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((warn_unused_result)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((warn_unused_result)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((warn_unused_result)) kstrtobool(const char *s, bool *res);

int __attribute__((warn_unused_result)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((warn_unused_result)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((warn_unused_result)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((warn_unused_result)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((warn_unused_result)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((warn_unused_result)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((warn_unused_result)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((warn_unused_result)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((warn_unused_result)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((warn_unused_result)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((warn_unused_result)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size, unsigned long long num);



extern __attribute__((format(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((format(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((format(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((format(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((format(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((format(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);

extern int core_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

unsigned long int_sqrt(unsigned long);

extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((no_instrument_function)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;


extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
} system_state;
# 513 "include/linux/kernel.h"
extern const char hex_asc[];



static inline __attribute__((no_instrument_function)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((no_instrument_function)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((warn_unused_result)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 561 "include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 640 "include/linux/kernel.h"
extern __attribute__((format(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((format(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 681 "include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 703 "include/linux/kernel.h"
extern __attribute__((format(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((format(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 9 "include/linux/list.h" 2
# 25 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void INIT_LIST_HEAD(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 list->prev = list;
}
# 38 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 next->prev = new;
 new->next = next;
 new->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (new) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 61 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 75 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 87 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 100 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void __list_del_entry(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
}

static inline __attribute__((no_instrument_function)) void list_del(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 123 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline __attribute__((no_instrument_function)) void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}





static inline __attribute__((no_instrument_function)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((no_instrument_function)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((no_instrument_function)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}






static inline __attribute__((no_instrument_function)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((no_instrument_function)) int list_empty(const struct list_head *head)
{
 return ({ union { typeof(head->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->next), __u.__c, sizeof(head->next)); else __read_once_size_nocheck(&(head->next), __u.__c, sizeof(head->next)); __u.__val; }) == head;
}
# 205 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline __attribute__((no_instrument_function)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}





static inline __attribute__((no_instrument_function)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((no_instrument_function)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 260 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}

static inline __attribute__((no_instrument_function)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((no_instrument_function)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((no_instrument_function)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 319 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 336 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 598 "include/linux/list.h"
static inline __attribute__((no_instrument_function)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}

static inline __attribute__((no_instrument_function)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline __attribute__((no_instrument_function)) int hlist_empty(const struct hlist_head *h)
{
 return !({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
}

static inline __attribute__((no_instrument_function)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((no_instrument_function)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((no_instrument_function)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline __attribute__((no_instrument_function)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 ({ union { typeof(h->first) __val; char __c[1]; } __u = { .__val = ( typeof(h->first)) (n) }; __write_once_size(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
 n->pprev = &h->first;
}


static inline __attribute__((no_instrument_function)) void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 ({ union { typeof(*(n->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof(*(n->pprev))) (n) }; __write_once_size(&(*(n->pprev)), __u.__c, sizeof(*(n->pprev))); __u.__val; });
}

static inline __attribute__((no_instrument_function)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (n) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline __attribute__((no_instrument_function)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline __attribute__((no_instrument_function)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline __attribute__((no_instrument_function)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 7 "include/linux/wait.h" 2

# 1 "include/linux/spinlock.h" 1
# 50 "include/linux/spinlock.h"
# 1 "include/linux/preempt.h" 1
# 59 "include/linux/preempt.h"
# 1 "./arch/x86/include/asm/preempt.h" 1




# 1 "./arch/x86/include/asm/percpu.h" 1
# 87 "./arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void);
# 520 "./arch/x86/include/asm/percpu.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int x86_this_cpu_constant_test_bit(unsigned int nr,
                        const unsigned long *addr)
{
 unsigned long *a = (unsigned long *)addr + nr / 64;


 return ((1UL << (nr % 64)) & ({ typeof(*a) pfo_ret__; switch (sizeof(*a)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (*a)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; default: __bad_percpu_size(); } pfo_ret__; })) != 0;



}

static inline __attribute__((no_instrument_function)) int x86_this_cpu_variable_test_bit(int nr,
                        const unsigned long *addr)
{
 int oldbit;

 asm volatile("bt ""%%""gs"":" "%" "2"",%1\n\t"
   "sbb %0,%0"
   : "=r" (oldbit)
   : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}







# 1 "include/asm-generic/percpu.h" 1




# 1 "include/linux/threads.h" 1
# 6 "include/asm-generic/percpu.h" 2
# 1 "include/linux/percpu-defs.h" 1
# 295 "include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((no_instrument_function)) void __this_cpu_preempt_check(const char *op) { }
# 7 "include/asm-generic/percpu.h" 2
# 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[64];
# 47 "include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 552 "./arch/x86/include/asm/percpu.h" 2


extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(unsigned long) this_cpu_off;
# 6 "./arch/x86/include/asm/preempt.h" 2
# 1 "include/linux/thread_info.h" 1
# 11 "include/linux/thread_info.h"
# 1 "include/linux/bug.h" 1



# 1 "./arch/x86/include/asm/bug.h" 1
# 35 "./arch/x86/include/asm/bug.h"
# 1 "include/asm-generic/bug.h" 1
# 18 "include/asm-generic/bug.h"
struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 65 "include/asm-generic/bug.h"
extern __attribute__((format(printf, 3, 4)))
void warn_slowpath_fmt(const char *file, const int line,
         const char *fmt, ...);
extern __attribute__((format(printf, 4, 5)))
void warn_slowpath_fmt_taint(const char *file, const int line, unsigned taint,
        const char *fmt, ...);
extern void warn_slowpath_null(const char *file, const int line);
# 85 "include/asm-generic/bug.h"
struct warn_args;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 36 "./arch/x86/include/asm/bug.h" 2
# 5 "include/linux/bug.h" 2


enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 100 "include/linux/bug.h"
static inline __attribute__((no_instrument_function)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

const struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);
# 12 "include/linux/thread_info.h" 2

struct timespec;
struct compat_timespec;




struct restart_block {
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   struct timespec *rmtp;

   struct compat_timespec *compat_rmtp;

   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);


# 1 "./arch/x86/include/asm/thread_info.h" 1
# 11 "./arch/x86/include/asm/thread_info.h"
# 1 "./arch/x86/include/asm/page.h" 1







# 1 "./arch/x86/include/asm/page_types.h" 1
# 47 "./arch/x86/include/asm/page_types.h"
# 1 "./arch/x86/include/asm/page_64_types.h" 1
# 48 "./arch/x86/include/asm/page_types.h" 2
# 56 "./arch/x86/include/asm/page_types.h"
extern int devmem_is_allowed(unsigned long pagenr);

extern unsigned long max_low_pfn_mapped;
extern unsigned long max_pfn_mapped;

static inline __attribute__((no_instrument_function)) phys_addr_t get_max_mapped(void)
{
 return (phys_addr_t)max_pfn_mapped << 12;
}

bool pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);

extern unsigned long init_memory_mapping(unsigned long start,
      unsigned long end);

extern void initmem_init(void);
# 9 "./arch/x86/include/asm/page.h" 2


# 1 "./arch/x86/include/asm/page_64.h" 1
# 9 "./arch/x86/include/asm/page_64.h"
extern unsigned long max_pfn;
extern unsigned long phys_base;

static inline __attribute__((no_instrument_function)) unsigned long __phys_addr_nodebug(unsigned long x)
{
 unsigned long y = x - (0xffffffff80000000UL);


 x = y + ((x > y) ? phys_base : ((0xffffffff80000000UL) - ((unsigned long)(0xffff880000000000UL))));

 return x;
}
# 37 "./arch/x86/include/asm/page_64.h"
void clear_page(void *page);
void copy_page(void *to, void *from);
# 12 "./arch/x86/include/asm/page.h" 2






struct page;

# 1 "include/linux/range.h" 1



struct range {
 u64 start;
 u64 end;
};

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((no_instrument_function)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 21 "./arch/x86/include/asm/page.h" 2
extern struct range pfn_mapped[];
extern int nr_pfn_mapped;

static inline __attribute__((no_instrument_function)) void clear_user_page(void *page, unsigned long vaddr,
       struct page *pg)
{
 clear_page(page);
}

static inline __attribute__((no_instrument_function)) void copy_user_page(void *to, void *from, unsigned long vaddr,
      struct page *topage)
{
 copy_page(to, from);
}
# 70 "./arch/x86/include/asm/page.h"
extern bool __virt_addr_valid(unsigned long kaddr);




# 1 "include/asm-generic/memory_model.h" 1



# 1 "include/linux/pfn.h" 1
# 12 "include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 5 "include/asm-generic/memory_model.h" 2
# 76 "./arch/x86/include/asm/page.h" 2
# 1 "include/asm-generic/getorder.h" 1
# 12 "include/asm-generic/getorder.h"
static inline __attribute__((no_instrument_function)) __attribute__((__const__))
int __get_order(unsigned long size)
{
 int order;

 size--;
 size >>= 12;



 order = fls64(size);

 return order;
}
# 77 "./arch/x86/include/asm/page.h" 2
# 12 "./arch/x86/include/asm/thread_info.h" 2
# 51 "./arch/x86/include/asm/thread_info.h"
struct task_struct;
# 1 "./arch/x86/include/asm/cpufeature.h" 1



# 1 "./arch/x86/include/asm/processor.h" 1



# 1 "./arch/x86/include/asm/processor-flags.h" 1



# 1 "./arch/x86/include/uapi/asm/processor-flags.h" 1
# 5 "./arch/x86/include/asm/processor-flags.h" 2
# 5 "./arch/x86/include/asm/processor.h" 2


struct task_struct;
struct mm_struct;
struct vm86;

# 1 "./arch/x86/include/asm/math_emu.h" 1



# 1 "./arch/x86/include/asm/ptrace.h" 1



# 1 "./arch/x86/include/asm/segment.h" 1
# 240 "./arch/x86/include/asm/segment.h"
extern const char early_idt_handler_array[32][9];
# 284 "./arch/x86/include/asm/segment.h"
static inline __attribute__((no_instrument_function)) void __loadsegment_fs(unsigned short value)
{
 asm volatile("						\n"
       "1:	movw %0, %%fs			\n"
       "2:					\n"

       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_clear_fs" ") - .\n" " .popsection\n"

       : : "rm" (value) : "memory");
}
# 5 "./arch/x86/include/asm/ptrace.h" 2

# 1 "./arch/x86/include/uapi/asm/ptrace.h" 1




# 1 "./arch/x86/include/uapi/asm/ptrace-abi.h" 1
# 6 "./arch/x86/include/uapi/asm/ptrace.h" 2
# 7 "./arch/x86/include/asm/ptrace.h" 2
# 33 "./arch/x86/include/asm/ptrace.h"
struct pt_regs {




 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;

 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;




 unsigned long orig_ax;

 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;

};







struct cpuinfo_x86;
struct task_struct;

extern unsigned long profile_pc(struct pt_regs *regs);


extern unsigned long
convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);
extern void send_sigtrap(struct task_struct *tsk, struct pt_regs *regs,
    int error_code, int si_code);


extern unsigned long syscall_trace_enter_phase1(struct pt_regs *, u32 arch);
extern long syscall_trace_enter_phase2(struct pt_regs *, u32 arch,
           unsigned long phase1_result);

extern long syscall_trace_enter(struct pt_regs *);

static inline __attribute__((no_instrument_function)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->ax;
}
# 106 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((no_instrument_function)) int user_mode(struct pt_regs *regs)
{



 return !!(regs->cs & 3);

}

static inline __attribute__((no_instrument_function)) int v8086_mode(struct pt_regs *regs)
{



 return 0;

}


static inline __attribute__((no_instrument_function)) bool user_64bit_mode(struct pt_regs *regs)
{





 return regs->cs == (6*8 + 3);




}
# 146 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}






# 1 "include/asm-generic/ptrace.h" 1
# 22 "include/asm-generic/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return ((regs)->ip);
}
static inline __attribute__((no_instrument_function)) void instruction_pointer_set(struct pt_regs *regs,
                                           unsigned long val)
{
 (((regs)->ip) = (val));
}
# 44 "include/asm-generic/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return ((regs)->sp);
}
static inline __attribute__((no_instrument_function)) void user_stack_pointer_set(struct pt_regs *regs,
                                          unsigned long val)
{
 (((regs)->sp) = (val));
}
# 62 "include/asm-generic/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return ((regs)->bp);
}
static inline __attribute__((no_instrument_function)) void frame_pointer_set(struct pt_regs *regs,
                                     unsigned long val)
{
 (((regs)->bp) = (val));
}
# 157 "./arch/x86/include/asm/ptrace.h" 2


extern int regs_query_register_offset(const char *name);
extern const char *regs_query_register_name(unsigned int offset);
# 172 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, ss))), 0))
  return 0;
# 186 "./arch/x86/include/asm/ptrace.h"
 return *(unsigned long *)((unsigned long)regs + offset);
}
# 197 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((no_instrument_function)) int regs_within_kernel_stack(struct pt_regs *regs,
        unsigned long addr)
{
 return ((addr & ~((((1UL) << 12) << (2 + 0)) - 1)) ==
  (kernel_stack_pointer(regs) & ~((((1UL) << 12) << (2 + 0)) - 1)));
}
# 213 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((no_instrument_function)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n)
{
 unsigned long *addr = (unsigned long *)kernel_stack_pointer(regs);
 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return *addr;
 else
  return 0;
}
# 249 "./arch/x86/include/asm/ptrace.h"
struct user_desc;
extern int do_get_thread_area(struct task_struct *p, int idx,
         struct user_desc *info);
extern int do_set_thread_area(struct task_struct *p, int idx,
         struct user_desc *info, int can_allocate);
# 5 "./arch/x86/include/asm/math_emu.h" 2





struct math_emu_info {
 long ___orig_eip;
 struct pt_regs *regs;
};
# 12 "./arch/x86/include/asm/processor.h" 2


# 1 "./arch/x86/include/uapi/asm/sigcontext.h" 1
# 39 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpx_sw_bytes {




 __u32 magic1;
# 53 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u32 extended_size;





 __u64 xfeatures;





 __u32 xstate_size;


 __u32 padding[7];
};
# 84 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpreg {
 __u16 significand[4];
 __u16 exponent;
};


struct _fpxreg {
 __u16 significand[4];
 __u16 exponent;
 __u16 padding[3];
};


struct _xmmreg {
 __u32 element[4];
};






struct _fpstate_32 {

 __u32 cw;
 __u32 sw;
 __u32 tag;
 __u32 ipoff;
 __u32 cssel;
 __u32 dataoff;
 __u32 datasel;
 struct _fpreg _st[8];
 __u16 status;
 __u16 magic;



 __u32 _fxsr_env[6];
 __u32 mxcsr;
 __u32 reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];
 union {
  __u32 padding1[44];
  __u32 padding[44];
 };

 union {
  __u32 padding2[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};
# 148 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpstate_64 {
 __u16 cwd;
 __u16 swd;

 __u16 twd;
 __u16 fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 reserved2[12];
 union {
  __u32 reserved3[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};







struct _header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};

struct _ymmh_state {

 __u32 ymmh_space[64];
};
# 191 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _xstate {
 struct _fpstate_64 fpstate;
 struct _header xstate_hdr;
 struct _ymmh_state ymmh;

};




struct sigcontext_32 {
 __u16 gs, __gsh;
 __u16 fs, __fsh;
 __u16 es, __esh;
 __u16 ds, __dsh;
 __u32 di;
 __u32 si;
 __u32 bp;
 __u32 sp;
 __u32 bx;
 __u32 dx;
 __u32 cx;
 __u32 ax;
 __u32 trapno;
 __u32 err;
 __u32 ip;
 __u16 cs, __csh;
 __u32 flags;
 __u32 sp_at_signal;
 __u16 ss, __ssh;
# 229 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u32 fpstate;
 __u32 oldmask;
 __u32 cr2;
};




struct sigcontext_64 {
 __u64 r8;
 __u64 r9;
 __u64 r10;
 __u64 r11;
 __u64 r12;
 __u64 r13;
 __u64 r14;
 __u64 r15;
 __u64 di;
 __u64 si;
 __u64 bp;
 __u64 bx;
 __u64 dx;
 __u64 ax;
 __u64 cx;
 __u64 sp;
 __u64 ip;
 __u64 flags;
 __u16 cs;
 __u16 gs;
 __u16 fs;
 __u16 ss;
 __u64 err;
 __u64 trapno;
 __u64 oldmask;
 __u64 cr2;
# 272 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u64 fpstate;
 __u64 reserved1[8];
};
# 15 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/current.h" 1







struct task_struct;

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) current_task;

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) struct task_struct *get_current(void)
{
 return ({ typeof(current_task) pfo_ret__; switch (sizeof(current_task)) { case 1: asm("mov" "b ""%%""gs"":" "%" "P1"",%0" : "=q" (pfo_ret__) : "p" (&(current_task))); break; case 2: asm("mov" "w ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; case 4: asm("mov" "l ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; case 8: asm("mov" "q ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; default: __bad_percpu_size(); } pfo_ret__; });
}
# 16 "./arch/x86/include/asm/processor.h" 2


# 1 "./arch/x86/include/asm/pgtable_types.h" 1
# 143 "./arch/x86/include/asm/pgtable_types.h"
enum page_cache_mode {
 _PAGE_CACHE_MODE_WB = 0,
 _PAGE_CACHE_MODE_WC = 1,
 _PAGE_CACHE_MODE_UC_MINUS = 2,
 _PAGE_CACHE_MODE_UC = 3,
 _PAGE_CACHE_MODE_WT = 4,
 _PAGE_CACHE_MODE_WP = 5,
 _PAGE_CACHE_MODE_NUM = 8
};
# 234 "./arch/x86/include/asm/pgtable_types.h"
# 1 "./arch/x86/include/asm/pgtable_64_types.h" 1



# 1 "./arch/x86/include/asm/sparsemem.h" 1
# 5 "./arch/x86/include/asm/pgtable_64_types.h" 2







typedef unsigned long pteval_t;
typedef unsigned long pmdval_t;
typedef unsigned long pudval_t;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;

typedef struct { pteval_t pte; } pte_t;
# 235 "./arch/x86/include/asm/pgtable_types.h" 2
# 250 "./arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;

typedef struct { pgdval_t pgd; } pgd_t;

static inline __attribute__((no_instrument_function)) pgd_t native_make_pgd(pgdval_t val)
{
 return (pgd_t) { val };
}

static inline __attribute__((no_instrument_function)) pgdval_t native_pgd_val(pgd_t pgd)
{
 return pgd.pgd;
}

static inline __attribute__((no_instrument_function)) pgdval_t pgd_flags(pgd_t pgd)
{
 return native_pgd_val(pgd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}


typedef struct { pudval_t pud; } pud_t;

static inline __attribute__((no_instrument_function)) pud_t native_make_pud(pmdval_t val)
{
 return (pud_t) { val };
}

static inline __attribute__((no_instrument_function)) pudval_t native_pud_val(pud_t pud)
{
 return pud.pud;
}
# 291 "./arch/x86/include/asm/pgtable_types.h"
typedef struct { pmdval_t pmd; } pmd_t;

static inline __attribute__((no_instrument_function)) pmd_t native_make_pmd(pmdval_t val)
{
 return (pmd_t) { val };
}

static inline __attribute__((no_instrument_function)) pmdval_t native_pmd_val(pmd_t pmd)
{
 return pmd.pmd;
}
# 311 "./arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((no_instrument_function)) pudval_t pud_pfn_mask(pud_t pud)
{
 if (native_pud_val(pud) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)((1ULL << 46) - 1)));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))));
}

static inline __attribute__((no_instrument_function)) pudval_t pud_flags_mask(pud_t pud)
{
 return ~pud_pfn_mask(pud);
}

static inline __attribute__((no_instrument_function)) pudval_t pud_flags(pud_t pud)
{
 return native_pud_val(pud) & pud_flags_mask(pud);
}

static inline __attribute__((no_instrument_function)) pmdval_t pmd_pfn_mask(pmd_t pmd)
{
 if (native_pmd_val(pmd) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 46) - 1)));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))));
}

static inline __attribute__((no_instrument_function)) pmdval_t pmd_flags_mask(pmd_t pmd)
{
 return ~pmd_pfn_mask(pmd);
}

static inline __attribute__((no_instrument_function)) pmdval_t pmd_flags(pmd_t pmd)
{
 return native_pmd_val(pmd) & pmd_flags_mask(pmd);
}

static inline __attribute__((no_instrument_function)) pte_t native_make_pte(pteval_t val)
{
 return (pte_t) { .pte = val };
}

static inline __attribute__((no_instrument_function)) pteval_t native_pte_val(pte_t pte)
{
 return pte.pte;
}

static inline __attribute__((no_instrument_function)) pteval_t pte_flags(pte_t pte)
{
 return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}




extern uint16_t __cachemode2pte_tbl[_PAGE_CACHE_MODE_NUM];
extern uint8_t __pte2cachemode_tbl[8];
# 377 "./arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((no_instrument_function)) unsigned long cachemode2protval(enum page_cache_mode pcm)
{
 if (__builtin_expect(!!(pcm == 0), 1))
  return 0;
 return __cachemode2pte_tbl[pcm];
}
static inline __attribute__((no_instrument_function)) pgprot_t cachemode2pgprot(enum page_cache_mode pcm)
{
 return ((pgprot_t) { (cachemode2protval(pcm)) } );
}
static inline __attribute__((no_instrument_function)) enum page_cache_mode pgprot2cachemode(pgprot_t pgprot)
{
 unsigned long masked;

 masked = ((pgprot).pgprot) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3));
 if (__builtin_expect(!!(masked == 0), 1))
  return 0;
 return __pte2cachemode_tbl[((((masked) >> (7 - 2)) & 4) | (((masked) >> (4 - 1)) & 2) | (((masked) >> 3) & 1))];
}
static inline __attribute__((no_instrument_function)) pgprot_t pgprot_4k_2_large(pgprot_t pgprot)
{
 pgprotval_t val = ((pgprot).pgprot);
 pgprot_t new;

 ((new).pgprot) = (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
  ((val & (((pteval_t)(1)) << 7)) << (12 - 7));
 return new;
}
static inline __attribute__((no_instrument_function)) pgprot_t pgprot_large_2_4k(pgprot_t pgprot)
{
 pgprotval_t val = ((pgprot).pgprot);
 pgprot_t new;

 ((new).pgprot) = (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
     ((val & (((pteval_t)(1)) << 12)) >>
      (12 - 7));
 return new;
}


typedef struct page *pgtable_t;

extern pteval_t __supported_pte_mask;
extern void set_nx(void);
extern int nx_enabled;


extern pgprot_t pgprot_writecombine(pgprot_t prot);


extern pgprot_t pgprot_writethrough(pgprot_t prot);





struct file;
pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t vma_prot);
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t *vma_prot);


void set_pte_vaddr(unsigned long vaddr, pte_t pte);







struct seq_file;
extern void arch_report_meminfo(struct seq_file *m);

enum pg_level {
 PG_LEVEL_NONE,
 PG_LEVEL_4K,
 PG_LEVEL_2M,
 PG_LEVEL_1G,
 PG_LEVEL_NUM
};


extern void update_page_count(int level, unsigned long pages);
# 471 "./arch/x86/include/asm/pgtable_types.h"
extern pte_t *lookup_address(unsigned long address, unsigned int *level);
extern pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
        unsigned int *level);
extern pmd_t *lookup_pmd_address(unsigned long address);
extern phys_addr_t slow_virt_to_phys(void *__address);
extern int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
       unsigned numpages, unsigned long page_flags);
void kernel_unmap_pages_in_pgd(pgd_t *root, unsigned long address,
          unsigned numpages);
# 19 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/asm/msr.h" 1



# 1 "./arch/x86/include/asm/msr-index.h" 1
# 5 "./arch/x86/include/asm/msr.h" 2




# 1 "./arch/x86/include/uapi/asm/errno.h" 1
# 10 "./arch/x86/include/asm/msr.h" 2
# 1 "./arch/x86/include/asm/cpumask.h" 1



# 1 "include/linux/cpumask.h" 1
# 11 "include/linux/cpumask.h"
# 1 "include/linux/bitmap.h" 1
# 92 "include/linux/bitmap.h"
extern int __bitmap_empty(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_full(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits);
extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_subset(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);

extern void bitmap_set(unsigned long *map, unsigned int start, int len);
extern void bitmap_clear(unsigned long *map, unsigned int start, int len);

extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 138 "include/linux/bitmap.h"
static inline __attribute__((no_instrument_function)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

extern int __bitmap_parse(const char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
extern int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);
extern unsigned int bitmap_from_u32array(unsigned long *bitmap,
      unsigned int nbits,
      const u32 *buf,
      unsigned int nwords);
extern unsigned int bitmap_to_u32array(u32 *buf,
           unsigned int nwords,
           const unsigned long *bitmap,
           unsigned int nbits);





extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
extern int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);







static inline __attribute__((no_instrument_function)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = 0UL;
 else {
  unsigned int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline __attribute__((no_instrument_function)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int nlongs = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)));
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64)) {
  unsigned int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = (~0UL >> (-(nbits) & (64 - 1)));
}

static inline __attribute__((no_instrument_function)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src;
 else {
  unsigned int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memcpy(dst, src, len);
 }
}

static inline __attribute__((no_instrument_function)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! ((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_equal(src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((no_instrument_function)) int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((no_instrument_function)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((no_instrument_function)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((no_instrument_function)) int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}
# 12 "include/linux/cpumask.h" 2



typedef struct cpumask { unsigned long bits[(((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; } cpumask_t;
# 37 "include/linux/cpumask.h"
extern int nr_cpu_ids;
# 88 "include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
# 118 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) unsigned int cpumask_check(unsigned int cpu)
{



 return cpu;
}
# 176 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_first_bit(((srcp)->bits), 64);
}
# 188 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) unsigned int cpumask_next(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_bit(((srcp)->bits), 64, n+1);
}
# 203 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), 64, n+1);
}

int cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
# 274 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}






static inline __attribute__((no_instrument_function)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 296 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return (__builtin_constant_p((cpumask_check(cpu))) ? constant_test_bit((cpumask_check(cpu)), ((((cpumask))->bits))) : variable_test_bit((cpumask_check(cpu)), ((((cpumask))->bits))));
}
# 310 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 324 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((no_instrument_function)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), 64);
}





static inline __attribute__((no_instrument_function)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), 64);
}
# 355 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), 64);
}







static inline __attribute__((no_instrument_function)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), 64);
}







static inline __attribute__((no_instrument_function)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), 64);
}
# 398 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), 64);
}






static inline __attribute__((no_instrument_function)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           64);
}






static inline __attribute__((no_instrument_function)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       64);
}






static inline __attribute__((no_instrument_function)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            64);
}
# 449 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        64);
}





static inline __attribute__((no_instrument_function)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), 64);
}





static inline __attribute__((no_instrument_function)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), 64);
}





static inline __attribute__((no_instrument_function)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), 64);
}







static inline __attribute__((no_instrument_function)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            64);
}







static inline __attribute__((no_instrument_function)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           64);
}






static inline __attribute__((no_instrument_function)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), 64);
}
# 560 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), nr_cpu_ids);
}
# 574 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         nr_cpu_ids);
}
# 588 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 char *nl = strchr(buf, '\n');
 unsigned int len = nl ? (unsigned int)(nl - buf) : strlen(buf);

 return bitmap_parse(buf, len, ((dstp)->bits), nr_cpu_ids);
}
# 603 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), nr_cpu_ids);
}




static inline __attribute__((no_instrument_function)) size_t cpumask_size(void)
{
 return (((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(long);
}
# 667 "include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];



static inline __attribute__((no_instrument_function)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((no_instrument_function)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((no_instrument_function)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((no_instrument_function)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((no_instrument_function)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((no_instrument_function)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((no_instrument_function)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}




extern const unsigned long cpu_all_bits[(((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
# 721 "include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((no_instrument_function)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((no_instrument_function)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

static inline __attribute__((no_instrument_function)) void
set_cpu_online(unsigned int cpu, bool online)
{
 if (online)
  cpumask_set_cpu(cpu, &__cpu_online_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_online_mask);
}

static inline __attribute__((no_instrument_function)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}
# 776 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 788 "include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

static inline __attribute__((no_instrument_function)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 825 "include/linux/cpumask.h"
static inline __attribute__((no_instrument_function)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 5 "./arch/x86/include/asm/cpumask.h" 2

extern cpumask_var_t cpu_callin_mask;
extern cpumask_var_t cpu_callout_mask;
extern cpumask_var_t cpu_initialized_mask;
extern cpumask_var_t cpu_sibling_setup_mask;

extern void setup_cpu_local_masks(void);
# 11 "./arch/x86/include/asm/msr.h" 2
# 1 "./arch/x86/include/uapi/asm/msr.h" 1






# 1 "./include/uapi/linux/ioctl.h" 1



# 1 "./arch/x86/include/uapi/asm/ioctl.h" 1
# 1 "include/asm-generic/ioctl.h" 1



# 1 "include/uapi/asm-generic/ioctl.h" 1
# 5 "include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 1 "./arch/x86/include/uapi/asm/ioctl.h" 2
# 5 "./include/uapi/linux/ioctl.h" 2
# 8 "./arch/x86/include/uapi/asm/msr.h" 2
# 12 "./arch/x86/include/asm/msr.h" 2

struct msr {
 union {
  struct {
   u32 l;
   u32 h;
  };
  u64 q;
 };
};

struct msr_info {
 u32 msr_no;
 struct msr reg;
 struct msr *msrs;
 int err;
};

struct msr_regs_info {
 u32 *regs;
 int err;
};

struct saved_msr {
 bool valid;
 struct msr_info info;
};

struct saved_msrs {
 unsigned int num;
 struct saved_msr *array;
};
# 66 "./arch/x86/include/asm/msr.h"
# 1 "./arch/x86/include/asm/atomic.h" 1






# 1 "./arch/x86/include/asm/cmpxchg.h" 1
# 12 "./arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void)
 __attribute__((error("Bad argument size for xchg")));
extern void __cmpxchg_wrong_size(void)
 __attribute__((error("Bad argument size for cmpxchg")));
extern void __xadd_wrong_size(void)
 __attribute__((error("Bad argument size for xadd")));
extern void __add_wrong_size(void)
 __attribute__((error("Bad argument size for add")));
# 144 "./arch/x86/include/asm/cmpxchg.h"
# 1 "./arch/x86/include/asm/cmpxchg_64.h" 1



static inline __attribute__((no_instrument_function)) void set_64bit(volatile u64 *ptr, u64 val)
{
 *ptr = val;
}
# 145 "./arch/x86/include/asm/cmpxchg.h" 2
# 8 "./arch/x86/include/asm/atomic.h" 2
# 24 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_read(const atomic_t *v)
{
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); __u.__val; });
}
# 36 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_set(atomic_t *v, int i)
{
 ({ union { typeof(v->counter) __val; char __c[1]; } __u = { .__val = ( typeof(v->counter)) (i) }; __write_once_size(&(v->counter), __u.__c, sizeof(v->counter)); __u.__val; });
}
# 48 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_add(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addl %1,%0"
       : "+m" (v->counter)
       : "ir" (i));
}
# 62 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_sub(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subl %1,%0"
       : "+m" (v->counter)
       : "ir" (i));
}
# 78 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_sub_and_test(int i, atomic_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_inc(atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incl %0"
       : "+m" (v->counter));
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_dec(atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decl %0"
       : "+m" (v->counter));
}
# 115 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_dec_and_test(atomic_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 128 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_inc_and_test(atomic_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 142 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_add_negative(int i, atomic_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 154 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_add_return(int i, atomic_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}
# 166 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_sub_return(int i, atomic_t *v)
{
 return atomic_add_return(-i, v);
}




static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_cmpxchg(atomic_t *v, int old, int new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}

static inline __attribute__((no_instrument_function)) int atomic_xchg(atomic_t *v, int new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}
# 193 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) void atomic_and(int i, atomic_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "and""l %1,%0" : "+m" (v->counter) : "ir" (i) : "memory"); }
static inline __attribute__((no_instrument_function)) void atomic_or(int i, atomic_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "or""l %1,%0" : "+m" (v->counter) : "ir" (i) : "memory"); }
static inline __attribute__((no_instrument_function)) void atomic_xor(int i, atomic_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xor""l %1,%0" : "+m" (v->counter) : "ir" (i) : "memory"); }
# 208 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int __atomic_add_unless(atomic_t *v, int a, int u)
{
 int c, old;
 c = atomic_read(v);
 for (;;) {
  if (__builtin_expect(!!(c == (u)), 0))
   break;
  old = atomic_cmpxchg((v), c, c + (a));
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return c;
}
# 230 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) short int atomic_inc_short(short int *v)
{
 asm(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addw $1, %0" : "+m" (*v));
 return *v;
}




# 1 "./arch/x86/include/asm/atomic64_64.h" 1
# 19 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) long atomic64_read(const atomic64_t *v)
{
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); __u.__val; });
}
# 31 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) void atomic64_set(atomic64_t *v, long i)
{
 ({ union { typeof(v->counter) __val; char __c[1]; } __u = { .__val = ( typeof(v->counter)) (i) }; __write_once_size(&(v->counter), __u.__c, sizeof(v->counter)); __u.__val; });
}
# 43 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_add(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter));
}
# 57 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) void atomic64_sub(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter));
}
# 73 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) int atomic64_sub_and_test(long i, atomic64_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_inc(atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incq %0"
       : "=m" (v->counter)
       : "m" (v->counter));
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_dec(atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decq %0"
       : "=m" (v->counter)
       : "m" (v->counter));
}
# 112 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) int atomic64_dec_and_test(atomic64_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 125 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) int atomic64_inc_and_test(atomic64_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 139 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) int atomic64_add_negative(long i, atomic64_t *v)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}
# 151 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) long atomic64_add_return(long i, atomic64_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline __attribute__((no_instrument_function)) long atomic64_sub_return(long i, atomic64_t *v)
{
 return atomic64_add_return(-i, v);
}




static inline __attribute__((no_instrument_function)) long atomic64_cmpxchg(atomic64_t *v, long old, long new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}

static inline __attribute__((no_instrument_function)) long atomic64_xchg(atomic64_t *v, long new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}
# 183 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) int atomic64_add_unless(atomic64_t *v, long a, long u)
{
 long c, old;
 c = atomic64_read(v);
 for (;;) {
  if (__builtin_expect(!!(c == (u)), 0))
   break;
  old = atomic64_cmpxchg((v), c, c + (a));
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return c != (u);
}
# 207 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) long atomic64_dec_if_positive(atomic64_t *v)
{
 long c, old, dec;
 c = atomic64_read(v);
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = atomic64_cmpxchg((v), c, dec);
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}
# 232 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((no_instrument_function)) void atomic64_and(long i, atomic64_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "and""q %1,%0" : "+m" (v->counter) : "er" (i) : "memory"); }
static inline __attribute__((no_instrument_function)) void atomic64_or(long i, atomic64_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "or""q %1,%0" : "+m" (v->counter) : "er" (i) : "memory"); }
static inline __attribute__((no_instrument_function)) void atomic64_xor(long i, atomic64_t *v) { asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xor""q %1,%0" : "+m" (v->counter) : "er" (i) : "memory"); }
# 240 "./arch/x86/include/asm/atomic.h" 2
# 67 "./arch/x86/include/asm/msr.h" 2
# 1 "include/linux/tracepoint-defs.h" 1
# 10 "include/linux/tracepoint-defs.h"
# 1 "include/linux/atomic.h" 1
# 445 "include/linux/atomic.h"
static inline __attribute__((no_instrument_function)) int atomic_add_unless(atomic_t *v, int a, int u)
{
 return __atomic_add_unless(v, a, u) != u;
}
# 462 "include/linux/atomic.h"
static inline __attribute__((no_instrument_function)) void atomic_andnot(int i, atomic_t *v)
{
 atomic_and(~i, v);
}


static inline __attribute__((no_instrument_function)) void atomic_clear_mask(unsigned int mask, atomic_t *v)
{
 atomic_andnot(mask, v);
}

static inline __attribute__((no_instrument_function)) void atomic_set_mask(unsigned int mask, atomic_t *v)
{
 atomic_or(mask, v);
}
# 491 "include/linux/atomic.h"
static inline __attribute__((no_instrument_function)) int atomic_inc_not_zero_hint(atomic_t *v, int hint)
{
 int val, c = hint;


 if (!hint)
  return atomic_add_unless((v), 1, 0);

 do {
  val = atomic_cmpxchg(v, c, c + 1);
  if (val == c)
   return 1;
  c = val;
 } while (c);

 return 0;
}



static inline __attribute__((no_instrument_function)) int atomic_inc_unless_negative(atomic_t *p)
{
 int v, v1;
 for (v = 0; v >= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v + 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}



static inline __attribute__((no_instrument_function)) int atomic_dec_unless_positive(atomic_t *p)
{
 int v, v1;
 for (v = 0; v <= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v - 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}
# 544 "include/linux/atomic.h"
static inline __attribute__((no_instrument_function)) int atomic_dec_if_positive(atomic_t *v)
{
 int c, old, dec;
 c = atomic_read(v);
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = atomic_cmpxchg((v), c, dec);
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}
# 567 "include/linux/atomic.h"
static inline __attribute__((no_instrument_function)) int atomic_fetch_or(int mask, atomic_t *p)
{
 int old, val = atomic_read(p);

 for (;;) {
  old = atomic_cmpxchg(p, val, val | mask);
  if (old == val)
   break;
  val = old;
 }

 return old;
}







static inline __attribute__((no_instrument_function)) void atomic64_andnot(long long i, atomic64_t *v)
{
 atomic64_and(~i, v);
}


# 1 "include/asm-generic/atomic-long.h" 1
# 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
# 44 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) long atomic_long_read(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_read(v); }
static inline __attribute__((no_instrument_function)) long atomic_long_read_acquire(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)({ typeof(*&(v)->counter) ___p1 = ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); else __read_once_size_nocheck(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); __u.__val; }); do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_45(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_45(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ___p1; }); }
# 56 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) void atomic_long_set(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; atomic64_set(v, i); }
static inline __attribute__((no_instrument_function)) void atomic_long_set_release(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; do { do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_57(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_57(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) ((i)) }; __write_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); __u.__val; }); } while (0); }
# 69 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) long atomic_long_add_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_add_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_add_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_add_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_sub_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_sub_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_sub_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((no_instrument_function)) long atomic_long_sub_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
# 101 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_inc(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_inc(v);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_dec(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_dec(v);
}
# 124 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_add(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_add(i, v); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_sub(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_sub(i, v); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_and(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_and(i, v); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_or(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_or(i, v); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_xor(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_xor(i, v); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_andnot(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_andnot(i, v); }



static inline __attribute__((no_instrument_function)) int atomic_long_sub_and_test(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_sub_and_test(i, v);
}

static inline __attribute__((no_instrument_function)) int atomic_long_dec_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_dec_and_test(v);
}

static inline __attribute__((no_instrument_function)) int atomic_long_inc_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_inc_and_test(v);
}

static inline __attribute__((no_instrument_function)) int atomic_long_add_negative(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_add_negative(i, v);
}
# 169 "include/asm-generic/atomic-long.h"
static inline __attribute__((no_instrument_function)) long atomic_long_inc_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_add_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_inc_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_add_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_inc_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_add_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_inc_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_add_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_dec_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_sub_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_dec_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_sub_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_dec_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_sub_return(1, (v))); }
static inline __attribute__((no_instrument_function)) long atomic_long_dec_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)(atomic64_sub_return(1, (v))); }



static inline __attribute__((no_instrument_function)) long atomic_long_add_unless(atomic_long_t *l, long a, long u)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_add_unless(v, a, u);
}
# 594 "include/linux/atomic.h" 2
# 11 "include/linux/tracepoint-defs.h" 2
# 1 "include/linux/static_key.h" 1
# 1 "include/linux/jump_label.h" 1
# 81 "include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;

 struct jump_entry *entries;

 struct static_key_mod *next;

};
# 106 "include/linux/jump_label.h"
# 1 "./arch/x86/include/asm/jump_label.h" 1
# 33 "./arch/x86/include/asm/jump_label.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_static_branch(struct static_key *key, bool branch)
{
 do { asm (""); } while (0)





                                         ;

 return false;
l_yes:
 return true;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_static_branch_jump(struct static_key *key, bool branch)
{
 do { asm (""); } while (0)






                                         ;

 return false;
l_yes:
 return true;
}


typedef u64 jump_label_t;




struct jump_entry {
 jump_label_t code;
 jump_label_t target;
 jump_label_t key;
};
# 107 "include/linux/jump_label.h" 2




enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;



static inline __attribute__((no_instrument_function)) int static_key_count(struct static_key *key)
{
 return atomic_read(&key->enabled);
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
# 217 "include/linux/jump_label.h"
static inline __attribute__((no_instrument_function)) void static_key_enable(struct static_key *key)
{
 int count = static_key_count(key);

 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(count < 0 || count > 1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/jump_label.h", 221); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

 if (!count)
  static_key_slow_inc(key);
}

static inline __attribute__((no_instrument_function)) void static_key_disable(struct static_key *key)
{
 int count = static_key_count(key);

 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(count < 0 || count > 1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/jump_label.h", 231); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

 if (count)
  static_key_slow_dec(key);
}
# 246 "include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 263 "include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 1 "include/linux/static_key.h" 2
# 12 "include/linux/tracepoint-defs.h" 2

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 void (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};
# 68 "./arch/x86/include/asm/msr.h" 2

extern struct tracepoint __tracepoint_read_msr;
extern struct tracepoint __tracepoint_write_msr;
extern struct tracepoint __tracepoint_rdpmc;

extern void do_trace_write_msr(unsigned msr, u64 val, int failed);
extern void do_trace_read_msr(unsigned msr, u64 val, int failed);
extern void do_trace_rdpmc(unsigned msr, u64 val, int failed);







static inline __attribute__((no_instrument_function)) unsigned long long native_read_msr(unsigned int msr)
{
 unsigned long low, high;

 asm volatile("1: rdmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_rdmsr_unsafe" ") - .\n" " .popsection\n"
       : "=a" (low), "=d" (high) : "c" (msr));
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, ((low) | (high) << 32), 0);
 return ((low) | (high) << 32);
}

static inline __attribute__((no_instrument_function)) unsigned long long native_read_msr_safe(unsigned int msr,
            int *err)
{
 unsigned long low, high;

 asm volatile("2: rdmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3: mov %[fault],%[err]\n\t"
       "xorl %%eax, %%eax\n\t"
       "xorl %%edx, %%edx\n\t"
       "jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
       : [err] "=r" (*err), "=a" (low), "=d" (high)
       : "c" (msr), [fault] "i" (-5));
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, ((low) | (high) << 32), *err);
 return ((low) | (high) << 32);
}


__attribute__((no_instrument_function)) static inline __attribute__((no_instrument_function)) void native_write_msr(unsigned int msr,
         unsigned low, unsigned high)
{
 asm volatile("1: wrmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_wrmsr_unsafe" ") - .\n" " .popsection\n"
       : : "c" (msr), "a"(low), "d" (high) : "memory");
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), 0);
}


__attribute__((no_instrument_function)) static inline __attribute__((no_instrument_function)) int native_write_msr_safe(unsigned int msr,
     unsigned low, unsigned high)
{
 int err;
 asm volatile("2: wrmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
       : [err] "=a" (err)
       : "c" (msr), "0" (low), "d" (high),
         [fault] "i" (-5)
       : "memory");
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), err);
 return err;
}

extern int rdmsr_safe_regs(u32 regs[8]);
extern int wrmsr_safe_regs(u32 regs[8]);
# 161 "./arch/x86/include/asm/msr.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long long rdtsc(void)
{
 unsigned long low, high;

 asm volatile("rdtsc" : "=a" (low), "=d" (high));

 return ((low) | (high) << 32);
}
# 178 "./arch/x86/include/asm/msr.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long long rdtsc_ordered(void)
{
# 191 "./arch/x86/include/asm/msr.h"
 asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection" ::: "memory")
                                        ;
 return rdtsc();
}




static inline __attribute__((no_instrument_function)) unsigned long long native_read_pmc(int counter)
{
 unsigned long low, high;

 asm volatile("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
 if (static_key_false(&(__tracepoint_rdpmc).key))
  do_trace_rdpmc(counter, ((low) | (high) << 32), 0);
 return ((low) | (high) << 32);
}
# 226 "./arch/x86/include/asm/msr.h"
static inline __attribute__((no_instrument_function)) void wrmsr(unsigned msr, unsigned low, unsigned high)
{
 native_write_msr(msr, low, high);
}




static inline __attribute__((no_instrument_function)) void wrmsrl(unsigned msr, u64 val)
{
 native_write_msr(msr, (u32)(val & 0xffffffffULL), (u32)(val >> 32));
}


static inline __attribute__((no_instrument_function)) int wrmsr_safe(unsigned msr, unsigned low, unsigned high)
{
 return native_write_msr_safe(msr, low, high);
}
# 255 "./arch/x86/include/asm/msr.h"
static inline __attribute__((no_instrument_function)) int rdmsrl_safe(unsigned msr, unsigned long long *p)
{
 int err;

 *p = native_read_msr_safe(msr, &err);
 return err;
}
# 277 "./arch/x86/include/asm/msr.h"
static inline __attribute__((no_instrument_function)) int wrmsrl_safe(u32 msr, u64 val)
{
 return wrmsr_safe(msr, (u32)val, (u32)(val >> 32));
}





struct msr *msrs_alloc(void);
void msrs_free(struct msr *msrs);
int msr_set_bit(u32 msr, u8 bit);
int msr_clear_bit(u32 msr, u8 bit);


int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
void rdmsr_on_cpus(const struct cpumask *mask, u32 msr_no, struct msr *msrs);
void wrmsr_on_cpus(const struct cpumask *mask, u32 msr_no, struct msr *msrs);
int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);
int wrmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);
# 21 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/desc_defs.h" 1
# 22 "./arch/x86/include/asm/desc_defs.h"
struct desc_struct {
 union {
  struct {
   unsigned int a;
   unsigned int b;
  };
  struct {
   u16 limit0;
   u16 base0;
   unsigned base1: 8, type: 4, s: 1, dpl: 2, p: 1;
   unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
  };
 };
} __attribute__((packed));







enum {
 GATE_INTERRUPT = 0xE,
 GATE_TRAP = 0xF,
 GATE_CALL = 0xC,
 GATE_TASK = 0x5,
};


struct gate_struct64 {
 u16 offset_low;
 u16 segment;
 unsigned ist : 3, zero0 : 5, type : 5, dpl : 2, p : 1;
 u16 offset_middle;
 u32 offset_high;
 u32 zero1;
} __attribute__((packed));





enum {
 DESC_TSS = 0x9,
 DESC_LDT = 0x2,
 DESCTYPE_S = 0x10,
};


struct ldttss_desc64 {
 u16 limit0;
 u16 base0;
 unsigned base1 : 8, type : 5, dpl : 2, p : 1;
 unsigned limit1 : 4, zero0 : 3, g : 1, base2 : 8;
 u32 base3;
 u32 zero1;
} __attribute__((packed));


typedef struct gate_struct64 gate_desc;
typedef struct ldttss_desc64 ldt_desc;
typedef struct ldttss_desc64 tss_desc;
# 94 "./arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
 unsigned short size;
 unsigned long address;
} __attribute__((packed)) ;
# 22 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/asm/special_insns.h" 1
# 9 "./arch/x86/include/asm/special_insns.h"
static inline __attribute__((no_instrument_function)) void native_clts(void)
{
 asm volatile("clts");
}
# 21 "./arch/x86/include/asm/special_insns.h"
extern unsigned long __force_order;

static inline __attribute__((no_instrument_function)) unsigned long native_read_cr0(void)
{
 unsigned long val;
 asm volatile("mov %%cr0,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((no_instrument_function)) void native_write_cr0(unsigned long val)
{
 asm volatile("mov %0,%%cr0": : "r" (val), "m" (__force_order));
}

static inline __attribute__((no_instrument_function)) unsigned long native_read_cr2(void)
{
 unsigned long val;
 asm volatile("mov %%cr2,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((no_instrument_function)) void native_write_cr2(unsigned long val)
{
 asm volatile("mov %0,%%cr2": : "r" (val), "m" (__force_order));
}

static inline __attribute__((no_instrument_function)) unsigned long native_read_cr3(void)
{
 unsigned long val;
 asm volatile("mov %%cr3,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((no_instrument_function)) void native_write_cr3(unsigned long val)
{
 asm volatile("mov %0,%%cr3": : "r" (val), "m" (__force_order));
}

static inline __attribute__((no_instrument_function)) unsigned long native_read_cr4(void)
{
 unsigned long val;
 asm volatile("mov %%cr4,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((no_instrument_function)) unsigned long native_read_cr4_safe(void)
{
 unsigned long val;
# 77 "./arch/x86/include/asm/special_insns.h"
 val = native_read_cr4();

 return val;
}

static inline __attribute__((no_instrument_function)) void native_write_cr4(unsigned long val)
{
 asm volatile("mov %0,%%cr4": : "r" (val), "m" (__force_order));
}


static inline __attribute__((no_instrument_function)) unsigned long native_read_cr8(void)
{
 unsigned long cr8;
 asm volatile("movq %%cr8,%0" : "=r" (cr8));
 return cr8;
}

static inline __attribute__((no_instrument_function)) void native_write_cr8(unsigned long val)
{
 asm volatile("movq %0,%%cr8" :: "r" (val) : "memory");
}



static inline __attribute__((no_instrument_function)) u32 __read_pkru(void)
{
 u32 ecx = 0;
 u32 edx, pkru;





 asm volatile(".byte 0x0f,0x01,0xee\n\t"
       : "=a" (pkru), "=d" (edx)
       : "c" (ecx));
 return pkru;
}

static inline __attribute__((no_instrument_function)) void __write_pkru(u32 pkru)
{
 u32 ecx = 0, edx = 0;





 asm volatile(".byte 0x0f,0x01,0xef\n\t"
       : : "a" (pkru), "c"(ecx), "d"(edx));
}
# 139 "./arch/x86/include/asm/special_insns.h"
static inline __attribute__((no_instrument_function)) void native_wbinvd(void)
{
 asm volatile("wbinvd": : :"memory");
}

extern void native_load_gs_index(unsigned);





static inline __attribute__((no_instrument_function)) unsigned long read_cr0(void)
{
 return native_read_cr0();
}

static inline __attribute__((no_instrument_function)) void write_cr0(unsigned long x)
{
 native_write_cr0(x);
}

static inline __attribute__((no_instrument_function)) unsigned long read_cr2(void)
{
 return native_read_cr2();
}

static inline __attribute__((no_instrument_function)) void write_cr2(unsigned long x)
{
 native_write_cr2(x);
}

static inline __attribute__((no_instrument_function)) unsigned long read_cr3(void)
{
 return native_read_cr3();
}

static inline __attribute__((no_instrument_function)) void write_cr3(unsigned long x)
{
 native_write_cr3(x);
}

static inline __attribute__((no_instrument_function)) unsigned long __read_cr4(void)
{
 return native_read_cr4();
}

static inline __attribute__((no_instrument_function)) unsigned long __read_cr4_safe(void)
{
 return native_read_cr4_safe();
}

static inline __attribute__((no_instrument_function)) void __write_cr4(unsigned long x)
{
 native_write_cr4(x);
}

static inline __attribute__((no_instrument_function)) void wbinvd(void)
{
 native_wbinvd();
}



static inline __attribute__((no_instrument_function)) unsigned long read_cr8(void)
{
 return native_read_cr8();
}

static inline __attribute__((no_instrument_function)) void write_cr8(unsigned long x)
{
 native_write_cr8(x);
}

static inline __attribute__((no_instrument_function)) void load_gs_index(unsigned selector)
{
 native_load_gs_index(selector);
}




static inline __attribute__((no_instrument_function)) void clts(void)
{
 native_clts();
}





static inline __attribute__((no_instrument_function)) void clflush(volatile void *__p)
{
 asm volatile("clflush %0" : "+m" (*(volatile char *)__p));
}

static inline __attribute__((no_instrument_function)) void clflushopt(volatile void *__p)
{
 asm volatile ("661:\n\t" ".byte " "0x3e" "; clflush %P0" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x66; clflush %P0" "\n" "665""1" ":\n\t" ".popsection" : "+m" (*(volatile char *)__p) : "i" (0))


                                              ;
}

static inline __attribute__((no_instrument_function)) void clwb(volatile void *__p)
{
 volatile struct { char x[64]; } *p = __p;

 asm volatile("661:\n\t" ".byte " "0x3e" "; clflush (%[pax])" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+24)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x66; clflush (%[pax])" "\n" "665""1" ":\n\t" "664""2"":\n\t" ".byte 0x66, 0x0f, 0xae, 0x30" "\n" "665""2" ":\n\t" ".popsection"





  : [p] "+m" (*p)
  : [pax] "a" (p));
}
# 294 "./arch/x86/include/asm/special_insns.h"
static inline __attribute__((no_instrument_function)) void pcommit_sfence(void)
{
 asm volatile ("661:\n\t" ".byte " "0x66,0x66,0x66,0x90,0x66,0x66,0x90" "\n" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+22)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x66, 0x0f, 0xae, 0xf8\n\t" "sfence" "\n" "665""1" ":\n\t" ".popsection" : : : "memory")


                          ;
}
# 24 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/fpu/types.h" 1
# 11 "./arch/x86/include/asm/fpu/types.h"
struct fregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;


 u32 st_space[20];


 u32 status;
};







struct fxregs_state {
 u16 cwd;
 u16 swd;
 u16 twd;
 u16 fop;
 union {
  struct {
   u64 rip;
   u64 rdp;
  };
  struct {
   u32 fip;
   u32 fcs;
   u32 foo;
   u32 fos;
  };
 };
 u32 mxcsr;
 u32 mxcsr_mask;


 u32 st_space[32];


 u32 xmm_space[64];

 u32 padding[12];

 union {
  u32 padding1[12];
  u32 sw_reserved[12];
 };

} __attribute__((aligned(16)));
# 75 "./arch/x86/include/asm/fpu/types.h"
struct swregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;

 u32 st_space[20];
 u8 ftop;
 u8 changed;
 u8 lookahead;
 u8 no_update;
 u8 rm;
 u8 alimit;
 struct math_emu_info *info;
 u32 entry_eip;
};




enum xfeature {
 XFEATURE_FP,
 XFEATURE_SSE,




 XFEATURE_YMM,
 XFEATURE_BNDREGS,
 XFEATURE_BNDCSR,
 XFEATURE_OPMASK,
 XFEATURE_ZMM_Hi256,
 XFEATURE_Hi16_ZMM,
 XFEATURE_PT_UNIMPLEMENTED_SO_FAR,
 XFEATURE_PKRU,

 XFEATURE_MAX,
};
# 134 "./arch/x86/include/asm/fpu/types.h"
struct reg_128_bit {
 u8 regbytes[128/8];
};
struct reg_256_bit {
 u8 regbytes[256/8];
};
struct reg_512_bit {
 u8 regbytes[512/8];
};
# 154 "./arch/x86/include/asm/fpu/types.h"
struct ymmh_struct {
 struct reg_128_bit hi_ymm[16];
} __attribute__((packed));



struct mpx_bndreg {
 u64 lower_bound;
 u64 upper_bound;
} __attribute__((packed));



struct mpx_bndreg_state {
 struct mpx_bndreg bndreg[4];
} __attribute__((packed));






struct mpx_bndcsr {
 u64 bndcfgu;
 u64 bndstatus;
} __attribute__((packed));




struct mpx_bndcsr_state {
 union {
  struct mpx_bndcsr bndcsr;
  u8 pad_to_64_bytes[64];
 };
} __attribute__((packed));







struct avx_512_opmask_state {
 u64 opmask_reg[8];
} __attribute__((packed));






struct avx_512_zmm_uppers_state {
 struct reg_256_bit zmm_upper[16];
} __attribute__((packed));





struct avx_512_hi16_state {
 struct reg_512_bit hi16_zmm[16];
} __attribute__((packed));





struct pkru_state {
 u32 pkru;
 u32 pad;
} __attribute__((packed));

struct xstate_header {
 u64 xfeatures;
 u64 xcomp_bv;
 u64 reserved[6];
} __attribute__((packed));
# 242 "./arch/x86/include/asm/fpu/types.h"
struct xregs_state {
 struct fxregs_state i387;
 struct xstate_header header;
 u8 extended_state_area[0];
} __attribute__ ((packed, aligned (64)));
# 257 "./arch/x86/include/asm/fpu/types.h"
union fpregs_state {
 struct fregs_state fsave;
 struct fxregs_state fxsave;
 struct swregs_state soft;
 struct xregs_state xsave;
 u8 __padding[((1UL) << 12)];
};






struct fpu {
# 283 "./arch/x86/include/asm/fpu/types.h"
 unsigned int last_cpu;
# 292 "./arch/x86/include/asm/fpu/types.h"
 unsigned char fpstate_active;
# 315 "./arch/x86/include/asm/fpu/types.h"
 unsigned char fpregs_active;
# 327 "./arch/x86/include/asm/fpu/types.h"
 unsigned char counter;
# 360 "./arch/x86/include/asm/fpu/types.h"
 union fpregs_state state;




};
# 25 "./arch/x86/include/asm/processor.h" 2

# 1 "include/linux/personality.h" 1



# 1 "include/uapi/linux/personality.h" 1
# 10 "include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 41 "include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 5 "include/linux/personality.h" 2
# 27 "./arch/x86/include/asm/processor.h" 2


# 1 "include/linux/math64.h" 1




# 1 "./arch/x86/include/asm/div64.h" 1
# 63 "./arch/x86/include/asm/div64.h"
# 1 "include/asm-generic/div64.h" 1
# 64 "./arch/x86/include/asm/div64.h" 2
# 6 "include/linux/math64.h" 2
# 18 "include/linux/math64.h"
static inline __attribute__((no_instrument_function)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((no_instrument_function)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((no_instrument_function)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((no_instrument_function)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}




static inline __attribute__((no_instrument_function)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 97 "include/linux/math64.h"
static inline __attribute__((no_instrument_function)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}






static inline __attribute__((no_instrument_function)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 155 "include/linux/math64.h"
static inline __attribute__((no_instrument_function)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 u32 ah, al;
 u64 ret;

 al = a;
 ah = a >> 32;

 ret = ((u64)al * mul) >> shift;
 if (ah)
  ret += ((u64)ah * mul) << (32 - shift);

 return ret;
}



static inline __attribute__((no_instrument_function)) u64 mul_u64_u64_shr(u64 a, u64 b, unsigned int shift)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } rl, rm, rn, rh, a0, b0;
 u64 c;

 a0.ll = a;
 b0.ll = b;

 rl.ll = (u64)a0.l.low * b0.l.low;
 rm.ll = (u64)a0.l.low * b0.l.high;
 rn.ll = (u64)a0.l.high * b0.l.low;
 rh.ll = (u64)a0.l.high * b0.l.high;






 rl.l.high = c = (u64)rl.l.high + rm.l.low + rn.l.low;
 rh.l.low = c = (c >> 32) + rm.l.high + rn.l.high + rh.l.low;
 rh.l.high = (c >> 32) + rh.l.high;





 if (shift == 0)
  return rl.ll;
 if (shift < 64)
  return (rl.ll >> shift) | (rh.ll << (64 - shift));
 return rh.ll >> (shift & 63);
}





static inline __attribute__((no_instrument_function)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = (u64)u.l.low * mul;
 rh.ll = (u64)u.l.high * mul + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}
# 30 "./arch/x86/include/asm/processor.h" 2
# 1 "include/linux/err.h" 1






# 1 "./arch/x86/include/uapi/asm/errno.h" 1
# 8 "include/linux/err.h" 2
# 23 "include/linux/err.h"
static inline __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((no_instrument_function)) long __attribute__((warn_unused_result)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 50 "include/linux/err.h"
static inline __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 31 "./arch/x86/include/asm/processor.h" 2
# 1 "include/linux/irqflags.h" 1
# 15 "include/linux/irqflags.h"
# 1 "./arch/x86/include/asm/irqflags.h" 1
# 11 "./arch/x86/include/asm/irqflags.h"
static inline __attribute__((no_instrument_function)) unsigned long native_save_fl(void)
{
 unsigned long flags;






 asm volatile("# __raw_save_flags\n\t"
       "pushf ; pop %0"
       : "=rm" (flags)
       :
       : "memory");

 return flags;
}

static inline __attribute__((no_instrument_function)) void native_restore_fl(unsigned long flags)
{
 asm volatile("push %0 ; popf"
       :
       :"g" (flags)
       :"memory", "cc");
}

static inline __attribute__((no_instrument_function)) void native_irq_disable(void)
{
 asm volatile("cli": : :"memory");
}

static inline __attribute__((no_instrument_function)) void native_irq_enable(void)
{
 asm volatile("sti": : :"memory");
}

static inline __attribute__((no_instrument_function)) void native_safe_halt(void)
{
 asm volatile("sti; hlt": : :"memory");
}

static inline __attribute__((no_instrument_function)) void native_halt(void)
{
 asm volatile("hlt": : :"memory");
}
# 65 "./arch/x86/include/asm/irqflags.h"
static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) unsigned long arch_local_save_flags(void)
{
 return native_save_fl();
}

static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_restore(unsigned long flags)
{
 native_restore_fl(flags);
}

static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_disable(void)
{
 native_irq_disable();
}

static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_enable(void)
{
 native_irq_enable();
}





static inline __attribute__((no_instrument_function)) void arch_safe_halt(void)
{
 native_safe_halt();
}





static inline __attribute__((no_instrument_function)) void halt(void)
{
 native_halt();
}




static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags = arch_local_save_flags();
 arch_local_irq_disable();
 return flags;
}
# 151 "./arch/x86/include/asm/irqflags.h"
static inline __attribute__((no_instrument_function)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & ((1UL) << (9)));
}

static inline __attribute__((no_instrument_function)) int arch_irqs_disabled(void)
{
 unsigned long flags = arch_local_save_flags();

 return arch_irqs_disabled_flags(flags);
}
# 16 "include/linux/irqflags.h" 2
# 32 "./arch/x86/include/asm/processor.h" 2
# 46 "./arch/x86/include/asm/processor.h"
static inline __attribute__((no_instrument_function)) void *current_text_addr(void)
{
 void *pc;

 asm volatile("mov $1f, %0; 1:":"=r" (pc));

 return pc;
}
# 68 "./arch/x86/include/asm/processor.h"
enum tlb_infos {
 ENTRIES,
 NR_INFO
};

extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_1g[NR_INFO];







struct cpuinfo_x86 {
 __u8 x86;
 __u8 x86_vendor;
 __u8 x86_model;
 __u8 x86_mask;
# 101 "./arch/x86/include/asm/processor.h"
 int x86_tlbsize;

 __u8 x86_virt_bits;
 __u8 x86_phys_bits;

 __u8 x86_coreid_bits;

 __u32 extended_cpuid_level;

 int cpuid_level;
 __u32 x86_capability[18 + 1];
 char x86_vendor_id[16];
 char x86_model_id[64];

 int x86_cache_size;
 int x86_cache_alignment;

 int x86_cache_max_rmid;
 int x86_cache_occ_scale;
 int x86_power;
 unsigned long loops_per_jiffy;

 u16 x86_max_cores;
 u16 apicid;
 u16 initial_apicid;
 u16 x86_clflush_size;

 u16 booted_cores;

 u16 phys_proc_id;

 u16 logical_proc_id;

 u16 cpu_core_id;

 u16 cpu_index;
 u32 microcode;
};
# 154 "./arch/x86/include/asm/processor.h"
extern struct cpuinfo_x86 boot_cpu_data;
extern struct cpuinfo_x86 new_cpu_data;

extern struct tss_struct doublefault_tss;
extern __u32 cpu_caps_cleared[18];
extern __u32 cpu_caps_set[18];


extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct cpuinfo_x86) cpu_info;






extern const struct seq_operations cpuinfo_op;



extern void cpu_detect(struct cpuinfo_x86 *c);

extern void early_cpu_init(void);
extern void identify_boot_cpu(void);
extern void identify_secondary_cpu(struct cpuinfo_x86 *);
extern void print_cpu_info(struct cpuinfo_x86 *);
void print_cpu_msr(struct cpuinfo_x86 *);
extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
extern void init_amd_cacheinfo(struct cpuinfo_x86 *c);

extern void detect_extended_topology(struct cpuinfo_x86 *c);
extern void detect_ht(struct cpuinfo_x86 *c);




static inline __attribute__((no_instrument_function)) int have_cpuid_p(void)
{
 return 1;
}

static inline __attribute__((no_instrument_function)) void native_cpuid(unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{

 asm volatile("cpuid"
     : "=a" (*eax),
       "=b" (*ebx),
       "=c" (*ecx),
       "=d" (*edx)
     : "0" (*eax), "2" (*ecx)
     : "memory");
}

static inline __attribute__((no_instrument_function)) void load_cr3(pgd_t *pgdir)
{
 write_cr3(__phys_addr_nodebug((unsigned long)(pgdir)));
}
# 262 "./arch/x86/include/asm/processor.h"
struct x86_hw_tss {
 u32 reserved1;
 u64 sp0;
 u64 sp1;
 u64 sp2;
 u64 reserved2;
 u64 ist[7];
 u32 reserved3;
 u32 reserved4;
 u16 reserved5;
 u16 io_bitmap_base;

} __attribute__((packed)) __attribute__((__aligned__((1 << (6)))));
# 286 "./arch/x86/include/asm/processor.h"
struct tss_struct {



 struct x86_hw_tss x86_tss;







 unsigned long io_bitmap[((65536/8)/sizeof(long)) + 1];
# 308 "./arch/x86/include/asm/processor.h"
} __attribute__((__aligned__((1 << (6)))));

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct tss_struct) cpu_tss __attribute__((__aligned__((1 << (6)))));
# 319 "./arch/x86/include/asm/processor.h"
struct orig_ist {
 unsigned long ist[7];
};


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct orig_ist) orig_ist;

union irq_stack_union {
 char irq_stack[(((1UL) << 12) << (2 + 0))];





 struct {
  char gs_base[40];
  unsigned long stack_canary;
 };
};

extern __attribute__((section(".data..percpu" "..first"))) __typeof__(union irq_stack_union) irq_stack_union __attribute__((externally_visible));
extern typeof(irq_stack_union) init_per_cpu__irq_stack_union;

extern __attribute__((section(".data..percpu" ""))) __typeof__(char *) irq_stack_ptr;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned int) irq_count;
extern void ignore_sysret(void);
# 370 "./arch/x86/include/asm/processor.h"
extern unsigned int xstate_size;

struct perf_event;

struct thread_struct {

 struct desc_struct tls_array[3];
 unsigned long sp0;
 unsigned long sp;



 unsigned short es;
 unsigned short ds;
 unsigned short fsindex;
 unsigned short gsindex;





 unsigned long fsbase;
 unsigned long gsbase;
# 403 "./arch/x86/include/asm/processor.h"
 struct perf_event *ptrace_bps[4];

 unsigned long debugreg6;

 unsigned long ptrace_dr7;

 unsigned long cr2;
 unsigned long trap_nr;
 unsigned long error_code;





 unsigned long *io_bitmap_ptr;
 unsigned long iopl;

 unsigned io_bitmap_max;


 struct fpu fpu;




};




static inline __attribute__((no_instrument_function)) void native_set_iopl_mask(unsigned mask)
{
# 447 "./arch/x86/include/asm/processor.h"
}

static inline __attribute__((no_instrument_function)) void
native_load_sp0(struct tss_struct *tss, struct thread_struct *thread)
{
 tss->x86_tss.sp0 = thread->sp0;







}

static inline __attribute__((no_instrument_function)) void native_swapgs(void)
{

 asm volatile("swapgs" ::: "memory");

}

static inline __attribute__((no_instrument_function)) unsigned long current_top_of_stack(void)
{

 return ({ typeof(cpu_tss.x86_tss.sp0) pfo_ret__; switch (sizeof(cpu_tss.x86_tss.sp0)) { case 1: asm("mov" "b ""%%""gs"":" "%" "P1"",%0" : "=q" (pfo_ret__) : "p" (&(cpu_tss.x86_tss.sp0))); break; case 2: asm("mov" "w ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss.x86_tss.sp0))); break; case 4: asm("mov" "l ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss.x86_tss.sp0))); break; case 8: asm("mov" "q ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss.x86_tss.sp0))); break; default: __bad_percpu_size(); } pfo_ret__; });




}






static inline __attribute__((no_instrument_function)) void load_sp0(struct tss_struct *tss,
       struct thread_struct *thread)
{
 native_load_sp0(tss, thread);
}




typedef struct {
 unsigned long seg;
} mm_segment_t;



extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);






static inline __attribute__((no_instrument_function)) void cpuid(unsigned int op,
    unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = 0;
 native_cpuid(eax, ebx, ecx, edx);
}


static inline __attribute__((no_instrument_function)) void cpuid_count(unsigned int op, int count,
          unsigned int *eax, unsigned int *ebx,
          unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = count;
 native_cpuid(eax, ebx, ecx, edx);
}




static inline __attribute__((no_instrument_function)) unsigned int cpuid_eax(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return eax;
}

static inline __attribute__((no_instrument_function)) unsigned int cpuid_ebx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ebx;
}

static inline __attribute__((no_instrument_function)) unsigned int cpuid_ecx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ecx;
}

static inline __attribute__((no_instrument_function)) unsigned int cpuid_edx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return edx;
}


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void rep_nop(void)
{
 asm volatile("rep; nop" ::: "memory");
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void cpu_relax(void)
{
 rep_nop();
}




static inline __attribute__((no_instrument_function)) void sync_core(void)
{
 int tmp;
# 602 "./arch/x86/include/asm/processor.h"
 asm volatile("cpuid"
       : "=a" (tmp)
       : "0" (1)
       : "ebx", "ecx", "edx", "memory");

}

extern void select_idle_routine(const struct cpuinfo_x86 *c);
extern void init_amd_e400_c1e_mask(void);

extern unsigned long boot_option_idle_override;
extern bool amd_e400_c1e_detected;

enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT,
    IDLE_POLL};

extern void enable_sep_cpu(void);
extern int sysenter_setup(void);

extern void early_trap_init(void);
void early_trap_pf_init(void);


extern struct desc_ptr early_gdt_descr;

extern void cpu_set_gdt(int);
extern void switch_to_new_gdt(int);
extern void load_percpu_segment(int);
extern void cpu_init(void);

static inline __attribute__((no_instrument_function)) unsigned long get_debugctlmsr(void)
{
 unsigned long debugctlmsr = 0;





 ((debugctlmsr) = native_read_msr((0x000001d9)));

 return debugctlmsr;
}

static inline __attribute__((no_instrument_function)) void update_debugctlmsr(unsigned long debugctlmsr)
{




 wrmsrl(0x000001d9, debugctlmsr);
}

extern void set_task_blockstep(struct task_struct *task, bool on);


extern int bootloader_type;
extern int bootloader_version;

extern char ignore_fpu_irq;
# 679 "./arch/x86/include/asm/processor.h"
static inline __attribute__((no_instrument_function)) void prefetch(const void *x)
{
 asm volatile ("661:\n\t" "prefetcht0 %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 0*32+25)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "prefetchnta %P1" "\n" "665""1" ":\n\t" ".popsection" : : "i" (0), "m" (*(const char *)x))

                            ;
}






static inline __attribute__((no_instrument_function)) void prefetchw(const void *x)
{
 asm volatile ("661:\n\t" "prefetcht0 %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 6*32+ 8)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "prefetchw %P1" "\n" "665""1" ":\n\t" ".popsection" : : "i" (0), "m" (*(const char *)x))

                            ;
}

static inline __attribute__((no_instrument_function)) void spin_lock_prefetch(const void *x)
{
 prefetchw(x);
}
# 779 "./arch/x86/include/asm/processor.h"
extern unsigned long KSTK_ESP(struct task_struct *task);



extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
            unsigned long new_sp);
# 798 "./arch/x86/include/asm/processor.h"
extern int get_tsc_mode(unsigned long adr);
extern int set_tsc_mode(unsigned int val);
# 809 "./arch/x86/include/asm/processor.h"
static inline __attribute__((no_instrument_function)) int mpx_enable_management(void)
{
 return -22;
}
static inline __attribute__((no_instrument_function)) int mpx_disable_management(void)
{
 return -22;
}


extern u16 amd_get_nb_id(int cpu);
extern u32 amd_get_nodes_per_socket(void);

static inline __attribute__((no_instrument_function)) uint32_t hypervisor_cpuid_base(const char *sig, uint32_t leaves)
{
 uint32_t base, eax, signature[3];

 for (base = 0x40000000; base < 0x40010000; base += 0x100) {
  cpuid(base, &eax, &signature[0], &signature[1], &signature[2]);

  if (!memcmp(sig, signature, 12) &&
      (leaves == 0 || ((eax - base) >= leaves)))
   return base;
 }

 return 0;
}

extern unsigned long arch_align_stack(unsigned long sp);
extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

void default_idle(void);






void stop_this_cpu(void *dummy);
void df_debug(struct pt_regs *regs, long error_code);
# 5 "./arch/x86/include/asm/cpufeature.h" 2






enum cpuid_leafs
{
 CPUID_1_EDX = 0,
 CPUID_8000_0001_EDX,
 CPUID_8086_0001_EDX,
 CPUID_LNX_1,
 CPUID_1_ECX,
 CPUID_C000_0001_EDX,
 CPUID_8000_0001_ECX,
 CPUID_LNX_2,
 CPUID_LNX_3,
 CPUID_7_0_EBX,
 CPUID_D_1_EAX,
 CPUID_F_0_EDX,
 CPUID_F_1_EDX,
 CPUID_8000_0008_EBX,
 CPUID_6_EAX,
 CPUID_8000_000A_EDX,
 CPUID_7_ECX,
 CPUID_8000_0007_EBX,
};


extern const char * const x86_cap_flags[18*32];
extern const char * const x86_power_flags[32];
# 47 "./arch/x86/include/asm/cpufeature.h"
extern const char * const x86_bug_flags[1*32];
# 128 "./arch/x86/include/asm/cpufeature.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((pure)) bool _static_cpu_has(u16 bit)
{
  do { asm (""); } while (0)
# 164 "./arch/x86/include/asm/cpufeature.h"
                    ;
 t_yes:
  return true;
 t_no:
  return false;
}
# 53 "./arch/x86/include/asm/thread_info.h" 2


struct thread_info {
 struct task_struct *task;
 __u32 flags;
 __u32 status;
 __u32 cpu;
 mm_segment_t addr_limit;
 unsigned int sig_on_uaccess_error:1;
 unsigned int uaccess_err:1;
};
# 167 "./arch/x86/include/asm/thread_info.h"
static inline __attribute__((no_instrument_function)) struct thread_info *current_thread_info(void)
{
 return (struct thread_info *)(current_top_of_stack() - (((1UL) << 12) << (2 + 0)));
}

static inline __attribute__((no_instrument_function)) unsigned long current_stack_pointer(void)
{
 unsigned long sp;

 asm("mov %%rsp,%0" : "=g" (sp));



 return sp;
}
# 235 "./arch/x86/include/asm/thread_info.h"
static inline __attribute__((no_instrument_function)) void set_restore_sigmask(void)
{
 struct thread_info *ti = current_thread_info();
 ti->status |= 0x0008;
 ({ int __ret_warn_on = !!(!(__builtin_constant_p((2)) ? constant_test_bit((2), ((unsigned long *)&ti->flags)) : variable_test_bit((2), ((unsigned long *)&ti->flags)))); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("./arch/x86/include/asm/thread_info.h", 239); __builtin_expect(!!(__ret_warn_on), 0); });
}
static inline __attribute__((no_instrument_function)) void clear_restore_sigmask(void)
{
 current_thread_info()->status &= ~0x0008;
}
static inline __attribute__((no_instrument_function)) bool test_restore_sigmask(void)
{
 return current_thread_info()->status & 0x0008;
}
static inline __attribute__((no_instrument_function)) bool test_and_clear_restore_sigmask(void)
{
 struct thread_info *ti = current_thread_info();
 if (!(ti->status & 0x0008))
  return false;
 ti->status &= ~0x0008;
 return true;
}

static inline __attribute__((no_instrument_function)) bool in_ia32_syscall(void)
{




 if (current_thread_info()->status & 0x0002)
  return true;

 return false;
}
# 279 "./arch/x86/include/asm/thread_info.h"
extern void arch_task_cache_init(void);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
extern void arch_release_task_struct(struct task_struct *tsk);
# 55 "include/linux/thread_info.h" 2
# 70 "include/linux/thread_info.h"
static inline __attribute__((no_instrument_function)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((no_instrument_function)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((no_instrument_function)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((no_instrument_function)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((no_instrument_function)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), ((unsigned long *)&ti->flags)) : variable_test_bit((flag), ((unsigned long *)&ti->flags)));
}
# 7 "./arch/x86/include/asm/preempt.h" 2

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) __preempt_count;
# 20 "./arch/x86/include/asm/preempt.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int preempt_count(void)
{
 return ({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & ~0x80000000;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void preempt_count_set(int pc)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (pc); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(pc))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(pc))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(pc))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(pc))); break; default: __bad_percpu_size(); } } while (0);
}
# 48 "./arch/x86/include/asm/preempt.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void set_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (~0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("and" "b %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(~0x80000000))); break; case 2: asm("and" "w %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 4: asm("and" "l %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 8: asm("and" "q %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(~0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("or" "b %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(0x80000000))); break; case 2: asm("or" "w %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 4: asm("or" "l %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 8: asm("or" "q %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_preempt_need_resched(void)
{
 return !(({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & 0x80000000);
}





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_add(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (int)(val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_sub(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-val) && ((-val) == 1 || (-val) == -1)) ? (int)(-val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(-val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(-val))); break; default: __bad_percpu_size(); } } while (0);
}






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __preempt_count_dec_and_test(void)
{
 do { do { asm (""); } while (0); return 0; cc_label: return 1; } while (0);
}




static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) == preempt_offset), 0);
}
# 60 "include/linux/preempt.h" 2
# 51 "include/linux/spinlock.h" 2






# 1 "include/linux/bottom_half.h" 1
# 9 "include/linux/bottom_half.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((no_instrument_function)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((no_instrument_function)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((no_instrument_function)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}
# 58 "include/linux/spinlock.h" 2
# 81 "include/linux/spinlock.h"
# 1 "include/linux/spinlock_types.h" 1
# 13 "include/linux/spinlock_types.h"
# 1 "./arch/x86/include/asm/spinlock_types.h" 1
# 15 "./arch/x86/include/asm/spinlock_types.h"
typedef u8 __ticket_t;
typedef u16 __ticketpair_t;
# 27 "./arch/x86/include/asm/spinlock_types.h"
# 1 "include/asm-generic/qspinlock_types.h" 1
# 31 "include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 atomic_t val;
} arch_spinlock_t;
# 28 "./arch/x86/include/asm/spinlock_types.h" 2
# 41 "./arch/x86/include/asm/spinlock_types.h"
# 1 "include/asm-generic/qrwlock_types.h" 1




# 1 "./arch/x86/include/asm/spinlock_types.h" 1
# 6 "include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 atomic_t cnts;
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 42 "./arch/x86/include/asm/spinlock_types.h" 2
# 14 "include/linux/spinlock_types.h" 2




# 1 "include/linux/lockdep.h" 1
# 12 "include/linux/lockdep.h"
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
# 387 "include/linux/lockdep.h"
static inline __attribute__((no_instrument_function)) void lockdep_off(void)
{
}

static inline __attribute__((no_instrument_function)) void lockdep_on(void)
{
}
# 427 "include/linux/lockdep.h"
struct lock_class_key { };
# 436 "include/linux/lockdep.h"
struct pin_cookie { };
# 505 "include/linux/lockdep.h"
static inline __attribute__((no_instrument_function)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 573 "include/linux/lockdep.h"
static inline __attribute__((no_instrument_function)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 19 "include/linux/spinlock_types.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;
# 32 "include/linux/spinlock_types.h"
} raw_spinlock_t;
# 64 "include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 75 "include/linux/spinlock_types.h"
 };
} spinlock_t;
# 86 "include/linux/spinlock_types.h"
# 1 "include/linux/rwlock_types.h" 1
# 11 "include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;
# 23 "include/linux/rwlock_types.h"
} rwlock_t;
# 87 "include/linux/spinlock_types.h" 2
# 82 "include/linux/spinlock.h" 2





# 1 "./arch/x86/include/asm/spinlock.h" 1
# 9 "./arch/x86/include/asm/spinlock.h"
# 1 "./arch/x86/include/asm/paravirt.h" 1
# 953 "./arch/x86/include/asm/paravirt.h"
static inline __attribute__((no_instrument_function)) void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
       struct mm_struct *mm)
{
}

static inline __attribute__((no_instrument_function)) void paravirt_arch_exit_mmap(struct mm_struct *mm)
{
}
# 10 "./arch/x86/include/asm/spinlock.h" 2
# 42 "./arch/x86/include/asm/spinlock.h"
extern struct static_key paravirt_ticketlocks_enabled;
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_false(struct static_key *key);


# 1 "./arch/x86/include/asm/qspinlock.h" 1
# 15 "./arch/x86/include/asm/qspinlock.h"
static inline __attribute__((no_instrument_function)) void native_queued_spin_unlock(struct qspinlock *lock)
{
 do { do { bool __cond = !((sizeof(*(u8 *)lock) == sizeof(char) || sizeof(*(u8 *)lock) == sizeof(short) || sizeof(*(u8 *)lock) == sizeof(int) || sizeof(*(u8 *)lock) == sizeof(long))); extern void __compiletime_assert_17(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_17(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*(u8 *)lock) __val; char __c[1]; } __u = { .__val = ( typeof(*(u8 *)lock)) (0) }; __write_once_size(&(*(u8 *)lock), __u.__c, sizeof(*(u8 *)lock)); __u.__val; }); } while (0);
}
# 36 "./arch/x86/include/asm/qspinlock.h"
static inline __attribute__((no_instrument_function)) void queued_spin_unlock(struct qspinlock *lock)
{
 native_queued_spin_unlock(lock);
}
# 64 "./arch/x86/include/asm/qspinlock.h"
# 1 "include/asm-generic/qspinlock.h" 1
# 29 "include/asm-generic/qspinlock.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_is_locked(struct qspinlock *lock)
{
# 53 "include/asm-generic/qspinlock.h"
 asm volatile("mfence":::"memory");
 return atomic_read(&lock->val) & (((1U << 8) - 1) << 0);
}
# 67 "include/asm-generic/qspinlock.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_trylock(struct qspinlock *lock)
{
 if (!atomic_read(&lock->val) &&
    (atomic_cmpxchg(&lock->val, 0, (1U << 0)) == 0))
  return 1;
 return 0;
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void queued_spin_lock(struct qspinlock *lock)
{
 u32 val;

 val = atomic_cmpxchg(&lock->val, 0, (1U << 0));
 if (__builtin_expect(!!(val == 0), 1))
  return;
 queued_spin_lock_slowpath(lock, val);
}
# 132 "include/asm-generic/qspinlock.h"
static inline __attribute__((no_instrument_function)) void queued_spin_unlock_wait(struct qspinlock *lock)
{

 asm volatile("mfence":::"memory");
 while (atomic_read(&lock->val) & (((1U << 8) - 1) << 0))
  cpu_relax();
}


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 65 "./arch/x86/include/asm/qspinlock.h" 2
# 47 "./arch/x86/include/asm/spinlock.h" 2
# 219 "./arch/x86/include/asm/spinlock.h"
# 1 "./arch/x86/include/asm/qrwlock.h" 1




# 1 "include/asm-generic/qrwlock.h" 1
# 39 "include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock, u32 cnts);
extern void queued_write_lock_slowpath(struct qrwlock *lock);





static inline __attribute__((no_instrument_function)) int queued_read_can_lock(struct qrwlock *lock)
{
 return !(atomic_read(&lock->cnts) & 0xff);
}





static inline __attribute__((no_instrument_function)) int queued_write_can_lock(struct qrwlock *lock)
{
 return !atomic_read(&lock->cnts);
}






static inline __attribute__((no_instrument_function)) int queued_read_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0xff)), 1)) {
  cnts = (u32)atomic_add_return((1U << 8), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0xff)), 1))
   return 1;
  atomic_sub((1U << 8), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((no_instrument_function)) int queued_write_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_cmpxchg(&lock->cnts, cnts, cnts | 0xff) == cnts), 1)
                                           ;
}




static inline __attribute__((no_instrument_function)) void queued_read_lock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_add_return((1U << 8), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0xff)), 1))
  return;


 queued_read_lock_slowpath(lock, cnts);
}





static inline __attribute__((no_instrument_function)) void queued_write_lock(struct qrwlock *lock)
{

 if (atomic_cmpxchg(&lock->cnts, 0, 0xff) == 0)
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((no_instrument_function)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return((1U << 8), &lock->cnts);
}





static inline __attribute__((no_instrument_function)) void queued_write_unlock(struct qrwlock *lock)
{
 do { do { bool __cond = !((sizeof(*(u8 *)&lock->cnts) == sizeof(char) || sizeof(*(u8 *)&lock->cnts) == sizeof(short) || sizeof(*(u8 *)&lock->cnts) == sizeof(int) || sizeof(*(u8 *)&lock->cnts) == sizeof(long))); extern void __compiletime_assert_142(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_142(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*(u8 *)&lock->cnts) __val; char __c[1]; } __u = { .__val = ( typeof(*(u8 *)&lock->cnts)) (0) }; __write_once_size(&(*(u8 *)&lock->cnts), __u.__c, sizeof(*(u8 *)&lock->cnts)); __u.__val; }); } while (0);
}
# 6 "./arch/x86/include/asm/qrwlock.h" 2
# 220 "./arch/x86/include/asm/spinlock.h" 2
# 88 "include/linux/spinlock.h" 2
# 145 "include/linux/spinlock.h"
static inline __attribute__((no_instrument_function)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
}

static inline __attribute__((no_instrument_function)) void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
}

static inline __attribute__((no_instrument_function)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 return queued_spin_trylock(&(lock)->raw_lock);
}

static inline __attribute__((no_instrument_function)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 274 "include/linux/spinlock.h"
# 1 "include/linux/rwlock.h" 1
# 275 "include/linux/spinlock.h" 2





# 1 "include/linux/spinlock_api_smp.h" 1
# 18 "include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh_nested(raw_spinlock_t *lock, int subclass)
        ;
void __attribute__((section(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
        ;

unsigned long __attribute__((section(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
        ;
unsigned long __attribute__((section(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
        ;
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
        ;
# 88 "include/linux/spinlock_api_smp.h"
static inline __attribute__((no_instrument_function)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}
# 106 "include/linux/spinlock_api_smp.h"
static inline __attribute__((no_instrument_function)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
# 121 "include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline __attribute__((no_instrument_function)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((no_instrument_function)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((no_instrument_function)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((no_instrument_function)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((no_instrument_function)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 return 0;
}

# 1 "include/linux/rwlock_api_smp.h" 1
# 18 "include/linux/rwlock_api_smp.h"
void __attribute__((section(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
       ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
       ;
int __attribute__((section(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
void __attribute__((section(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
# 117 "include/linux/rwlock_api_smp.h"
static inline __attribute__((no_instrument_function)) int __raw_read_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}

static inline __attribute__((no_instrument_function)) int __raw_write_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}
# 146 "include/linux/rwlock_api_smp.h"
static inline __attribute__((no_instrument_function)) void __raw_read_lock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((no_instrument_function)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0)
                                       ;
 return flags;
}

static inline __attribute__((no_instrument_function)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((no_instrument_function)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((no_instrument_function)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0)
                                        ;
 return flags;
}

static inline __attribute__((no_instrument_function)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((no_instrument_function)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((no_instrument_function)) void __raw_write_lock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((no_instrument_function)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((no_instrument_function)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}
# 193 "include/linux/spinlock_api_smp.h" 2
# 281 "include/linux/spinlock.h" 2
# 289 "include/linux/spinlock.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 330 "include/linux/spinlock.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 345 "include/linux/spinlock.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock(spinlock_t *lock)
{
 __raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irq(spinlock_t *lock)
{
 __raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_wait(spinlock_t *lock)
{
 queued_spin_unlock_wait(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_can_lock(spinlock_t *lock)
{
 return (!queued_spin_is_locked(&(&lock->rlock)->raw_lock));
}
# 415 "include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);
# 9 "include/linux/wait.h" 2

# 1 "include/uapi/linux/wait.h" 1
# 11 "include/linux/wait.h" 2

typedef struct __wait_queue wait_queue_t;
typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int flags, void *key);
int default_wake_function(wait_queue_t *wait, unsigned mode, int flags, void *key);





struct __wait_queue {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head task_list;
};

struct wait_bit_key {
 void *flags;
 int bit_nr;

 unsigned long timeout;
};

struct wait_bit_queue {
 struct wait_bit_key key;
 wait_queue_t wait;
};

struct __wait_queue_head {
 spinlock_t lock;
 struct list_head task_list;
};
typedef struct __wait_queue_head wait_queue_head_t;

struct task_struct;
# 72 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t *q, const char *name, struct lock_class_key *);
# 90 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
{
 q->flags = 0;
 q->private = p;
 q->func = default_wake_function;
}

static inline __attribute__((no_instrument_function)) void
init_waitqueue_func_entry(wait_queue_t *q, wait_queue_func_t func)
{
 q->flags = 0;
 q->private = ((void *)0);
 q->func = func;
}
# 135 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int waitqueue_active(wait_queue_head_t *q)
{
 return !list_empty(&q->task_list);
}
# 148 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) bool wq_has_sleeper(wait_queue_head_t *wq)
{







 asm volatile("mfence":::"memory");
 return waitqueue_active(wq);
}

extern void add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
extern void add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait);
extern void remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);

static inline __attribute__((no_instrument_function)) void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *new)
{
 list_add(&new->task_list, &head->task_list);
}




static inline __attribute__((no_instrument_function)) void
__add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait)
{
 wait->flags |= 0x01;
 __add_wait_queue(q, wait);
}

static inline __attribute__((no_instrument_function)) void __add_wait_queue_tail(wait_queue_head_t *head,
      wait_queue_t *new)
{
 list_add_tail(&new->task_list, &head->task_list);
}

static inline __attribute__((no_instrument_function)) void
__add_wait_queue_tail_exclusive(wait_queue_head_t *q, wait_queue_t *wait)
{
 wait->flags |= 0x01;
 __add_wait_queue_tail(q, wait);
}

static inline __attribute__((no_instrument_function)) void
__remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)
{
 list_del(&old->task_list);
}

typedef int wait_bit_action_f(struct wait_bit_key *, int mode);
void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(wait_queue_head_t *q, unsigned int mode, void *key);
void __wake_up_sync_key(wait_queue_head_t *q, unsigned int mode, int nr, void *key);
void __wake_up_locked(wait_queue_head_t *q, unsigned int mode, int nr);
void __wake_up_sync(wait_queue_head_t *q, unsigned int mode, int nr);
void __wake_up_bit(wait_queue_head_t *, void *, int);
int __wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, wait_bit_action_f *, unsigned);
int __wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, wait_bit_action_f *, unsigned);
void wake_up_bit(void *, int);
void wake_up_atomic_t(atomic_t *);
int out_of_line_wait_on_bit(void *, int, wait_bit_action_f *, unsigned);
int out_of_line_wait_on_bit_timeout(void *, int, wait_bit_action_f *, unsigned, unsigned long);
int out_of_line_wait_on_bit_lock(void *, int, wait_bit_action_f *, unsigned);
int out_of_line_wait_on_atomic_t(atomic_t *, int (*)(atomic_t *), unsigned);
wait_queue_head_t *bit_waitqueue(void *, int);
# 975 "include/linux/wait.h"
void prepare_to_wait(wait_queue_head_t *q, wait_queue_t *wait, int state);
void prepare_to_wait_exclusive(wait_queue_head_t *q, wait_queue_t *wait, int state);
long prepare_to_wait_event(wait_queue_head_t *q, wait_queue_t *wait, int state);
void finish_wait(wait_queue_head_t *q, wait_queue_t *wait);
void abort_exclusive_wait(wait_queue_head_t *q, wait_queue_t *wait, unsigned int mode, void *key);
long wait_woken(wait_queue_t *wait, unsigned mode, long timeout);
int woken_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
int wake_bit_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
# 1014 "include/linux/wait.h"
extern int bit_wait(struct wait_bit_key *, int);
extern int bit_wait_io(struct wait_bit_key *, int);
extern int bit_wait_timeout(struct wait_bit_key *, int);
extern int bit_wait_io_timeout(struct wait_bit_key *, int);
# 1035 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 1060 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 1086 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { _cond_resched(); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 1114 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 1143 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 1167 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 1193 "include/linux/wait.h"
static inline __attribute__((no_instrument_function)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}
# 1213 "include/linux/wait.h"
static inline __attribute__((no_instrument_function))
int wait_on_atomic_t(atomic_t *val, int (*action)(atomic_t *), unsigned mode)
{
 do { _cond_resched(); } while (0);
 if (atomic_read(val) == 0)
  return 0;
 return out_of_line_wait_on_atomic_t(val, action, mode);
}
# 12 "include/linux/completion.h" 2
# 25 "include/linux/completion.h"
struct completion {
 unsigned int done;
 wait_queue_head_t wait;
};
# 73 "include/linux/completion.h"
static inline __attribute__((no_instrument_function)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 86 "include/linux/completion.h"
static inline __attribute__((no_instrument_function)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 22 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "include/linux/if_ether.h" 1
# 23 "include/linux/if_ether.h"
# 1 "include/linux/skbuff.h" 1
# 18 "include/linux/skbuff.h"
# 1 "include/linux/kmemcheck.h" 1



# 1 "include/linux/mm_types.h" 1



# 1 "include/linux/auxvec.h" 1



# 1 "include/uapi/linux/auxvec.h" 1



# 1 "./arch/x86/include/uapi/asm/auxvec.h" 1
# 5 "include/uapi/linux/auxvec.h" 2
# 5 "include/linux/auxvec.h" 2
# 5 "include/linux/mm_types.h" 2




# 1 "include/linux/rbtree.h" 1
# 34 "include/linux/rbtree.h"
# 1 "include/linux/rcupdate.h" 1
# 41 "include/linux/rcupdate.h"
# 1 "include/linux/seqlock.h" 1
# 47 "include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((no_instrument_function)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 107 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned __read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); __u.__val; });
 if (__builtin_expect(!!(ret & 1), 0)) {
  cpu_relax();
  goto repeat;
 }
 return ret;
}
# 129 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned raw_read_seqcount(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); __u.__val; });
 __asm__ __volatile__("": : :"memory");
 return ret;
}
# 145 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned raw_read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = __read_seqcount_begin(s);
 __asm__ __volatile__("": : :"memory");
 return ret;
}
# 161 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned read_seqcount_begin(const seqcount_t *s)
{
 ;
 return raw_read_seqcount_begin(s);
}
# 181 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned raw_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); __u.__val; });
 __asm__ __volatile__("": : :"memory");
 return ret & ~1;
}
# 202 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) int __read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 return __builtin_expect(!!(s->sequence != start), 0);
}
# 217 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) int read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__("": : :"memory");
 return __read_seqcount_retry(s, start);
}



static inline __attribute__((no_instrument_function)) void raw_write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
}
# 271 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) void raw_write_seqcount_barrier(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
}

static inline __attribute__((no_instrument_function)) int raw_read_seqcount_latch(seqcount_t *s)
{
 return ({ typeof(s) _________p1 = ({ union { typeof(s) __val; char __c[1]; } __u; if (1) __read_once_size(&(s), __u.__c, sizeof(s)); else __read_once_size_nocheck(&(s), __u.__c, sizeof(s)); __u.__val; }); do { } while (0); (_________p1); })->sequence;
}
# 360 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) void raw_write_seqcount_latch(seqcount_t *s)
{
       __asm__ __volatile__("": : :"memory");
       s->sequence++;
       __asm__ __volatile__("": : :"memory");
}





static inline __attribute__((no_instrument_function)) void write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 raw_write_seqcount_begin(s);
 do { } while (0);
}

static inline __attribute__((no_instrument_function)) void write_seqcount_begin(seqcount_t *s)
{
 write_seqcount_begin_nested(s, 0);
}

static inline __attribute__((no_instrument_function)) void write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 raw_write_seqcount_end(s);
}
# 395 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) void write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->sequence+=2;
}

typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;
} seqlock_t;
# 428 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) unsigned read_seqbegin(const seqlock_t *sl)
{
 return read_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((no_instrument_function)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{
 return read_seqcount_retry(&sl->seqcount, start);
}






static inline __attribute__((no_instrument_function)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((no_instrument_function)) void write_sequnlock(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((no_instrument_function)) void write_sequnlock_bh(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((no_instrument_function)) void write_sequnlock_irq(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((no_instrument_function)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 write_seqcount_begin(&sl->seqcount);
 return flags;
}




static inline __attribute__((no_instrument_function)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}






static inline __attribute__((no_instrument_function)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 523 "include/linux/seqlock.h"
static inline __attribute__((no_instrument_function)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}

static inline __attribute__((no_instrument_function)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}

static inline __attribute__((no_instrument_function)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}

static inline __attribute__((no_instrument_function)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}

static inline __attribute__((no_instrument_function)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((no_instrument_function)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}




static inline __attribute__((no_instrument_function)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}

static inline __attribute__((no_instrument_function)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}

static inline __attribute__((no_instrument_function)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 42 "include/linux/rcupdate.h" 2


# 1 "include/linux/debugobjects.h" 1






enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 27 "include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;
};
# 54 "include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 87 "include/linux/debugobjects.h"
static inline __attribute__((no_instrument_function)) void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((no_instrument_function)) void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((no_instrument_function)) int
debug_object_activate (void *addr, struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((no_instrument_function)) void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((no_instrument_function)) void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((no_instrument_function)) void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((no_instrument_function)) void
debug_object_assert_init(void *addr, struct debug_obj_descr *descr) { }

static inline __attribute__((no_instrument_function)) void debug_objects_early_init(void) { }
static inline __attribute__((no_instrument_function)) void debug_objects_mem_init(void) { }





static inline __attribute__((no_instrument_function)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 45 "include/linux/rcupdate.h" 2


# 1 "include/linux/ktime.h" 1
# 24 "include/linux/ktime.h"
# 1 "include/linux/time.h" 1






# 1 "include/linux/time64.h" 1



# 1 "include/uapi/linux/time.h" 1
# 9 "include/uapi/linux/time.h"
struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 34 "include/uapi/linux/time.h"
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 5 "include/linux/time64.h" 2


typedef __s64 time64_t;
# 45 "include/linux/time64.h"
static inline __attribute__((no_instrument_function)) struct timespec timespec64_to_timespec(const struct timespec ts64)
{
 return ts64;
}

static inline __attribute__((no_instrument_function)) struct timespec timespec_to_timespec64(const struct timespec ts)
{
 return ts;
}

static inline __attribute__((no_instrument_function)) struct itimerspec itimerspec64_to_itimerspec(struct itimerspec *its64)
{
 return *its64;
}

static inline __attribute__((no_instrument_function)) struct itimerspec itimerspec_to_itimerspec64(struct itimerspec *its)
{
 return *its;
}
# 221 "include/linux/time64.h"
extern struct timespec timespec64_add_safe(const struct timespec lhs,
      const struct timespec rhs);
# 8 "include/linux/time.h" 2

extern struct timezone sys_tz;



static inline __attribute__((no_instrument_function)) int timespec_equal(const struct timespec *a,
                                 const struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((no_instrument_function)) int timespec_compare(const struct timespec *lhs, const struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

static inline __attribute__((no_instrument_function)) int timeval_compare(const struct timeval *lhs, const struct timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);




static inline __attribute__((no_instrument_function)) unsigned long mktime(const unsigned int year,
   const unsigned int mon, const unsigned int day,
   const unsigned int hour, const unsigned int min,
   const unsigned int sec)
{
 return mktime64(year, mon, day, hour, min, sec);
}

extern void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec);






extern struct timespec timespec_add_safe(const struct timespec lhs,
      const struct timespec rhs);


static inline __attribute__((no_instrument_function)) struct timespec timespec_add(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((no_instrument_function)) struct timespec timespec_sub(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((no_instrument_function)) bool timespec_valid(const struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((no_instrument_function)) bool timespec_valid_strict(const struct timespec *ts)
{
 if (!timespec_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((no_instrument_function)) bool timeval_valid(const struct timeval *tv)
{

 if (tv->tv_sec < 0)
  return false;


 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;

 return true;
}

extern struct timespec timespec_trunc(struct timespec t, unsigned gran);







static inline __attribute__((no_instrument_function)) bool timeval_inject_offset_valid(const struct timeval *tv)
{



 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;
 return true;
}

static inline __attribute__((no_instrument_function)) bool timespec_inject_offset_valid(const struct timespec *ts)
{



 if (ts->tv_nsec < 0 || ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}
# 170 "include/linux/time.h"
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern int do_getitimer(int which, struct itimerval *value);

extern unsigned int alarm_setitimer(unsigned int seconds);

extern long do_utimes(int dfd, const char *filename, struct timespec *times, int flags);

struct tms;
extern void do_sys_times(struct tms *);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time_to_tm(time_t totalsecs, int offset, struct tm *result);
# 217 "include/linux/time.h"
static inline __attribute__((no_instrument_function)) s64 timespec_to_ns(const struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}
# 229 "include/linux/time.h"
static inline __attribute__((no_instrument_function)) s64 timeval_to_ns(const struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timespec ns_to_timespec(const s64 nsec);







extern struct timeval ns_to_timeval(const s64 nsec);
# 259 "include/linux/time.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}
# 25 "include/linux/ktime.h" 2
# 1 "include/linux/jiffies.h" 1







# 1 "include/linux/timex.h" 1
# 56 "include/linux/timex.h"
# 1 "include/uapi/linux/timex.h" 1
# 64 "include/uapi/linux/timex.h"
struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "include/linux/timex.h" 2






# 1 "./include/uapi/linux/param.h" 1



# 1 "./arch/x86/include/uapi/asm/param.h" 1
# 1 "include/asm-generic/param.h" 1



# 1 "include/uapi/asm-generic/param.h" 1
# 5 "include/asm-generic/param.h" 2
# 1 "./arch/x86/include/uapi/asm/param.h" 2
# 5 "./include/uapi/linux/param.h" 2
# 64 "include/linux/timex.h" 2

# 1 "./arch/x86/include/asm/timex.h" 1




# 1 "./arch/x86/include/asm/tsc.h" 1
# 15 "./arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;

extern unsigned int cpu_khz;
extern unsigned int tsc_khz;

extern void disable_TSC(void);

static inline __attribute__((no_instrument_function)) cycles_t get_cycles(void)
{





 return rdtsc();
}

extern struct system_counterval_t convert_art_to_tsc(cycle_t art);

extern void tsc_init(void);
extern void mark_tsc_unstable(char *reason);
extern int unsynchronized_tsc(void);
extern int check_tsc_unstable(void);
extern int check_tsc_disabled(void);
extern unsigned long native_calibrate_tsc(void);
extern unsigned long long native_sched_clock_from_tsc(u64 tsc);

extern int tsc_clocksource_reliable;





extern void check_tsc_sync_source(int cpu);
extern void check_tsc_sync_target(void);

extern int notsc_setup(char *);
extern void tsc_save_sched_clock_state(void);
extern void tsc_restore_sched_clock_state(void);


unsigned long try_msr_calibrate_tsc(void);
# 6 "./arch/x86/include/asm/timex.h" 2
# 66 "include/linux/timex.h" 2
# 139 "include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "include/linux/timex.h"
extern int do_adjtimex(struct timex *);
extern void hardpps(const struct timespec *, const struct timespec *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
# 9 "include/linux/jiffies.h" 2
# 1 "./arch/x86/include/uapi/asm/param.h" 1
# 10 "include/linux/jiffies.h" 2
# 1 "include/generated/timeconst.h" 1
# 11 "include/linux/jiffies.h" 2
# 58 "include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 77 "include/linux/jiffies.h"
extern u64 __attribute__((section(".data"))) jiffies_64;
extern unsigned long volatile __attribute__((section(".data"))) jiffies;




static inline __attribute__((no_instrument_function)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 183 "include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 284 "include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((no_instrument_function)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((no_instrument_function)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 1000) - 1) / (1000L / 1000);
}
# 354 "include/linux/jiffies.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((no_instrument_function)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 1000) - 1) / (1000000L / 1000);
}
# 401 "include/linux/jiffies.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL>>1)) >> 1)-1)))
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec *value);
static inline __attribute__((no_instrument_function)) unsigned long timespec_to_jiffies(const struct timespec *value)
{
 struct timespec ts = timespec_to_timespec64(*value);

 return timespec64_to_jiffies(&ts);
}

static inline __attribute__((no_instrument_function)) void jiffies_to_timespec(const unsigned long jiffies,
           struct timespec *value)
{
 struct timespec ts;

 jiffies_to_timespec64(jiffies, &ts);
 *value = timespec64_to_timespec(ts);
}

extern unsigned long timeval_to_jiffies(const struct timeval *value);
extern void jiffies_to_timeval(const unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((no_instrument_function)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(({ typeof(0L) _max1 = (0L); typeof(delta) _max2 = (delta); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "include/linux/ktime.h" 2
# 37 "include/linux/ktime.h"
union ktime {
 s64 tv64;
};

typedef union ktime ktime_t;
# 50 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return (ktime_t){ .tv64 = ((s64)~((u64)1 << 63)) };

 return (ktime_t) { .tv64 = secs * 1000000000L + (s64)nsecs };
}
# 81 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((no_instrument_function)) ktime_t timespec64_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((no_instrument_function)) ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
# 120 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) int ktime_equal(const ktime_t cmp1, const ktime_t cmp2)
{
 return cmp1.tv64 == cmp2.tv64;
}
# 135 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1.tv64 < cmp2.tv64)
  return -1;
 if (cmp1.tv64 > cmp2.tv64)
  return 1;
 return 0;
}
# 151 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 163 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 188 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/ktime.h", 194); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt.tv64 / div;
}


static inline __attribute__((no_instrument_function)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((no_instrument_function)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((no_instrument_function)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(({ (ktime_t){ .tv64 = (later).tv64 - (earlier).tv64 }; }));
}

static inline __attribute__((no_instrument_function)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(({ (ktime_t){ .tv64 = (later).tv64 - (earlier).tv64 }; }));
}

static inline __attribute__((no_instrument_function)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ({ (ktime_t){ .tv64 = (kt).tv64 + (usec * 1000L) }; });
}

static inline __attribute__((no_instrument_function)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ({ (ktime_t){ .tv64 = (kt).tv64 + (msec * 1000000L) }; });
}

static inline __attribute__((no_instrument_function)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ({ (ktime_t){ .tv64 = (kt).tv64 - (usec * 1000L) }; });
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 244 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool ktime_to_timespec_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt.tv64) {
  *ts = ns_to_timespec((kt).tv64);
  return true;
 } else {
  return false;
 }
}
# 263 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt.tv64) {
  *ts = ns_to_timespec((kt).tv64);
  return true;
 } else {
  return false;
 }
}
# 283 "include/linux/ktime.h"
static inline __attribute__((no_instrument_function)) ktime_t ns_to_ktime(u64 ns)
{
 static const ktime_t ktime_zero = { .tv64 = 0 };

 return ({ (ktime_t){ .tv64 = (ktime_zero).tv64 + (ns) }; });
}

static inline __attribute__((no_instrument_function)) ktime_t ms_to_ktime(u64 ms)
{
 static const ktime_t ktime_zero = { .tv64 = 0 };

 return ktime_add_ms(ktime_zero, ms);
}

# 1 "include/linux/timekeeping.h" 1







void timekeeping_init(void);
extern int timekeeping_suspended;




extern void do_gettimeofday(struct timeval *tv);
extern int do_settimeofday64(const struct timespec *ts);
extern int do_sys_settimeofday64(const struct timespec *tv,
     const struct timezone *tz);
static inline __attribute__((no_instrument_function)) int do_sys_settimeofday(const struct timespec *tv,
          const struct timezone *tz)
{
 struct timespec ts64;

 if (!tv)
  return -22;

 ts64 = timespec_to_timespec64(*tv);
 return do_sys_settimeofday64(&ts64, tz);
}




unsigned long get_seconds(void);
struct timespec current_kernel_time64(void);

struct timespec __current_kernel_time(void);

static inline __attribute__((no_instrument_function)) struct timespec current_kernel_time(void)
{
 struct timespec now = current_kernel_time64();

 return timespec64_to_timespec(now);
}




struct timespec get_monotonic_coarse64(void);
extern void getrawmonotonic64(struct timespec *ts);
extern void ktime_get_ts64(struct timespec *ts);
extern time64_t ktime_get_seconds(void);
extern time64_t ktime_get_real_seconds(void);

extern int __getnstimeofday64(struct timespec *tv);
extern void getnstimeofday64(struct timespec *tv);
extern void getboottime64(struct timespec *ts);





static inline __attribute__((no_instrument_function)) int do_settimeofday(const struct timespec *ts)
{
 return do_settimeofday64(ts);
}

static inline __attribute__((no_instrument_function)) int __getnstimeofday(struct timespec *ts)
{
 return __getnstimeofday64(ts);
}

static inline __attribute__((no_instrument_function)) void getnstimeofday(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((no_instrument_function)) void ktime_get_ts(struct timespec *ts)
{
 ktime_get_ts64(ts);
}

static inline __attribute__((no_instrument_function)) void ktime_get_real_ts(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((no_instrument_function)) void getrawmonotonic(struct timespec *ts)
{
 getrawmonotonic64(ts);
}

static inline __attribute__((no_instrument_function)) struct timespec get_monotonic_coarse(void)
{
 return get_monotonic_coarse64();
}

static inline __attribute__((no_instrument_function)) void getboottime(struct timespec *ts)
{
 return getboottime64(ts);
}
# 174 "include/linux/timekeeping.h"
enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((no_instrument_function)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((no_instrument_function)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((no_instrument_function)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}




static inline __attribute__((no_instrument_function)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((no_instrument_function)) u64 ktime_get_ns(void)
{
 return ((ktime_get()).tv64);
}

static inline __attribute__((no_instrument_function)) u64 ktime_get_real_ns(void)
{
 return ((ktime_get_real()).tv64);
}

static inline __attribute__((no_instrument_function)) u64 ktime_get_boot_ns(void)
{
 return ((ktime_get_boottime()).tv64);
}

static inline __attribute__((no_instrument_function)) u64 ktime_get_tai_ns(void)
{
 return ((ktime_get_clocktai()).tv64);
}

static inline __attribute__((no_instrument_function)) u64 ktime_get_raw_ns(void)
{
 return ((ktime_get_raw()).tv64);
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);




static inline __attribute__((no_instrument_function)) void get_monotonic_boottime(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()).tv64);
}

static inline __attribute__((no_instrument_function)) void get_monotonic_boottime64(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()).tv64);
}

static inline __attribute__((no_instrument_function)) void timekeeping_clocktai(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_clocktai()).tv64);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(struct timespec *delta);




extern void ktime_get_raw_and_real_ts64(struct timespec *ts_raw,
            struct timespec *ts_real);
# 291 "include/linux/timekeeping.h"
struct system_time_snapshot {
 cycle_t cycles;
 ktime_t real;
 ktime_t raw;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 306 "include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 319 "include/linux/timekeeping.h"
struct system_counterval_t {
 cycle_t cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);




extern int persistent_clock_is_local;

extern void read_persistent_clock(struct timespec *ts);
extern void read_persistent_clock64(struct timespec *ts);
extern void read_boot_clock64(struct timespec *ts);
extern int update_persistent_clock(struct timespec now);
extern int update_persistent_clock64(struct timespec now);
# 298 "include/linux/ktime.h" 2
# 48 "include/linux/rcupdate.h" 2




extern int rcu_expedited;
extern int rcu_normal;
# 75 "include/linux/rcupdate.h"
bool rcu_gp_is_normal(void);
bool rcu_gp_is_expedited(void);
void rcu_expedite_gp(void);
void rcu_unexpedite_gp(void);


enum rcutorture_type {
 RCU_FLAVOR,
 RCU_BH_FLAVOR,
 RCU_SCHED_FLAVOR,
 RCU_TASKS_FLAVOR,
 SRCU_FLAVOR,
 INVALID_RCU_FLAVOR
};


void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags,
       unsigned long *gpnum, unsigned long *completed);
void rcutorture_record_test_transition(void);
void rcutorture_record_progress(unsigned long vernum);
void do_trace_rcu_torture_read(const char *rcutorturename,
          struct callback_head *rhp,
          unsigned long secs,
          unsigned long c_old,
          unsigned long c);
# 201 "include/linux/rcupdate.h"
void call_rcu_bh(struct callback_head *head,
   rcu_callback_t func);
# 223 "include/linux/rcupdate.h"
void call_rcu_sched(struct callback_head *head,
      rcu_callback_t func);

void synchronize_sched(void);




struct rcu_synchronize {
 struct callback_head head;
 struct completion completion;
};
void wakeme_after_rcu(struct callback_head *head);

void __wait_rcu_gp(bool checktiny, int n, call_rcu_func_t *crcu_array,
     struct rcu_synchronize *rs_array);
# 285 "include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
void rcu_barrier_tasks(void);
# 306 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void __rcu_read_lock(void)
{
 if ((0 || 0))
  __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void __rcu_read_unlock(void)
{
 if ((0 || 0))
  __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void synchronize_rcu(void)
{
 synchronize_sched();
}

static inline __attribute__((no_instrument_function)) int rcu_preempt_depth(void)
{
 return 0;
}




void rcu_init(void);
void rcu_sched_qs(void);
void rcu_bh_qs(void);
void rcu_check_callbacks(int user);
void rcu_report_dead(unsigned int cpu);


void rcu_end_inkernel_boot(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 359 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void rcu_user_enter(void) { }
static inline __attribute__((no_instrument_function)) void rcu_user_exit(void) { }





static inline __attribute__((no_instrument_function)) void rcu_init_nohz(void)
{
}
# 428 "include/linux/rcupdate.h"
bool __rcu_is_watching(void);
# 437 "include/linux/rcupdate.h"
# 1 "include/linux/rcutree.h" 1
# 33 "include/linux/rcutree.h"
void rcu_note_context_switch(void);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((no_instrument_function)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch();
}

void synchronize_rcu_bh(void);
void synchronize_sched_expedited(void);
void synchronize_rcu_expedited(void);

void kfree_call_rcu(struct callback_head *head, rcu_callback_t func);
# 69 "include/linux/rcutree.h"
static inline __attribute__((no_instrument_function)) void synchronize_rcu_bh_expedited(void)
{
 synchronize_sched_expedited();
}

void rcu_barrier(void);
void rcu_barrier_bh(void);
void rcu_barrier_sched(void);
unsigned long get_state_synchronize_rcu(void);
void cond_synchronize_rcu(unsigned long oldstate);
unsigned long get_state_synchronize_sched(void);
void cond_synchronize_sched(unsigned long oldstate);

extern unsigned long rcutorture_testseq;
extern unsigned long rcutorture_vernum;
unsigned long rcu_batches_started(void);
unsigned long rcu_batches_started_bh(void);
unsigned long rcu_batches_started_sched(void);
unsigned long rcu_batches_completed(void);
unsigned long rcu_batches_completed_bh(void);
unsigned long rcu_batches_completed_sched(void);
unsigned long rcu_exp_batches_completed(void);
unsigned long rcu_exp_batches_completed_sched(void);
void show_rcu_gp_kthreads(void);

void rcu_force_quiescent_state(void);
void rcu_bh_force_quiescent_state(void);
void rcu_sched_force_quiescent_state(void);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);

void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));

bool rcu_is_watching(void);

void rcu_all_qs(void);
# 438 "include/linux/rcupdate.h" 2
# 456 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void init_rcu_head(struct callback_head *head)
{
}

static inline __attribute__((no_instrument_function)) void destroy_rcu_head(struct callback_head *head)
{
}

static inline __attribute__((no_instrument_function)) void init_rcu_head_on_stack(struct callback_head *head)
{
}

static inline __attribute__((no_instrument_function)) void destroy_rcu_head_on_stack(struct callback_head *head)
{
}





static inline __attribute__((no_instrument_function)) bool rcu_lockdep_current_cpu_online(void)
{
 return true;
}
# 518 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((no_instrument_function)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((no_instrument_function)) int rcu_read_lock_sched_held(void)
{
 return !0;
}
# 851 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0)
                                                ;
}
# 905 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void rcu_read_unlock(void)
{
 do { } while (0)
                                                  ;
 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 931 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0)
                                                   ;
}






static inline __attribute__((no_instrument_function)) void rcu_read_unlock_bh(void)
{
 do { } while (0)
                                                     ;
 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 967 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) void rcu_read_lock_sched(void)
{
 __asm__ __volatile__("": : :"memory");
 (void)0;
 do { } while (0);
 do { } while (0)
                                                      ;
}


static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_lock_sched_notrace(void)
{
 __asm__ __volatile__("": : :"memory");
 (void)0;
}






static inline __attribute__((no_instrument_function)) void rcu_read_unlock_sched(void)
{
 do { } while (0)
                                                        ;
 do { } while (0);
 (void)0;
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 __asm__ __volatile__("": : :"memory");
}
# 1110 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) bool rcu_is_nocb_cpu(int cpu) { return false; }
# 1120 "include/linux/rcupdate.h"
static inline __attribute__((no_instrument_function)) bool rcu_sys_is_idle(void)
{
 return false;
}

static inline __attribute__((no_instrument_function)) void rcu_sysidle_force_exit(void)
{
}
# 35 "include/linux/rbtree.h" 2

struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 62 "include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);

static inline __attribute__((no_instrument_function)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((no_instrument_function)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { do { bool __cond = !((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long))); extern void __compiletime_assert_95(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_95(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*rb_link) __val; char __c[1]; } __u = { .__val = ( typeof(*&*rb_link)) ((typeof(*(node)) *)(node)) }; __write_once_size(&(*&*rb_link), __u.__c, sizeof(*&*rb_link)); __u.__val; }); } while (0);
}
# 10 "include/linux/mm_types.h" 2
# 1 "include/linux/rwsem.h" 1
# 19 "include/linux/rwsem.h"
# 1 "include/linux/osq_lock.h" 1







struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((no_instrument_function)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((no_instrument_function)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 20 "include/linux/rwsem.h" 2


struct rw_semaphore;





struct rw_semaphore {
 long count;
 struct list_head wait_list;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;




 struct task_struct *owner;




};

extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed_killable(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);


# 1 "./arch/x86/include/asm/rwsem.h" 1
# 63 "./arch/x86/include/asm/rwsem.h"
static inline __attribute__((no_instrument_function)) void __down_read(struct rw_semaphore *sem)
{
 asm volatile("# beginning down_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "incq" " " "(%1)\n\t"

       "  jns        1f\n"
       "  call call_rwsem_down_read_failed\n"
       "1:\n\t"
       "# ending down_read\n\t"
       : "+m" (sem->count)
       : "a" (sem)
       : "memory", "cc");
}




static inline __attribute__((no_instrument_function)) int __down_read_trylock(struct rw_semaphore *sem)
{
 long result, tmp;
 asm volatile("# beginning __down_read_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  mov          %1,%2\n\t"
       "  add          %3,%2\n\t"
       "  jle	     2f\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "# ending __down_read_trylock\n\t"
       : "+m" (sem->count), "=&a" (result), "=&r" (tmp)
       : "i" (0x00000001L)
       : "memory", "cc");
 return result >= 0 ? 1 : 0;
}
# 121 "./arch/x86/include/asm/rwsem.h"
static inline __attribute__((no_instrument_function)) void __down_write(struct rw_semaphore *sem)
{
 ({ long tmp; struct rw_semaphore* ret; asm volatile("# beginning down_write\n\t" ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%3)\n\t" "  test " " " "%k1" " " "," " " "%k1" " " "\n\t" "  jz        1f\n" "  call " "call_rwsem_down_write_failed" "\n" "1:\n" "# ending down_write" : "+m" (sem->count), "=d" (tmp), "=a" (ret) : "a" (sem), "1" (((-0xffffffffL -1) + 0x00000001L)) : "memory", "cc"); ret; });
}

static inline __attribute__((no_instrument_function)) int __down_write_killable(struct rw_semaphore *sem)
{
 if (IS_ERR(({ long tmp; struct rw_semaphore* ret; asm volatile("# beginning down_write\n\t" ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%3)\n\t" "  test " " " "%k1" " " "," " " "%k1" " " "\n\t" "  jz        1f\n" "  call " "call_rwsem_down_write_failed_killable" "\n" "1:\n" "# ending down_write" : "+m" (sem->count), "=d" (tmp), "=a" (ret) : "a" (sem), "1" (((-0xffffffffL -1) + 0x00000001L)) : "memory", "cc"); ret; })))
  return -4;

 return 0;
}




static inline __attribute__((no_instrument_function)) int __down_write_trylock(struct rw_semaphore *sem)
{
 long result, tmp;
 asm volatile("# beginning __down_write_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  test " " " "%k1" " " "," " " "%k1" " " "\n\t"

       "  jnz          2f\n\t"
       "  mov          %1,%2\n\t"
       "  add          %3,%2\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "  sete         %b1\n\t"
       "  movzbl       %b1, %k1\n\t"
       "# ending __down_write_trylock\n\t"
       : "+m" (sem->count), "=&a" (result), "=&r" (tmp)
       : "er" (((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
 return result;
}




static inline __attribute__((no_instrument_function)) void __up_read(struct rw_semaphore *sem)
{
 long tmp;
 asm volatile("# beginning __up_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n"
       "# ending __up_read\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-0x00000001L)
       : "memory", "cc");
}




static inline __attribute__((no_instrument_function)) void __up_write(struct rw_semaphore *sem)
{
 long tmp;
 asm volatile("# beginning __up_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n\t"
       "# ending __up_write\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
}




static inline __attribute__((no_instrument_function)) void __downgrade_write(struct rw_semaphore *sem)
{
 asm volatile("# beginning __downgrade_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "addq" " " "%2,(%1)\n\t"




       "  jns       1f\n\t"
       "  call call_rwsem_downgrade_wake\n"
       "1:\n\t"
       "# ending __downgrade_write\n"
       : "+m" (sem->count)
       : "a" (sem), "er" (-(-0xffffffffL -1))
       : "memory", "cc");
}




static inline __attribute__((no_instrument_function)) void rwsem_atomic_add(long delta, struct rw_semaphore *sem)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "addq" " " "%1,%0"
       : "+m" (sem->count)
       : "er" (delta));
}




static inline __attribute__((no_instrument_function)) long rwsem_atomic_update(long delta, struct rw_semaphore *sem)
{
 return delta + ({ __typeof__ (*(((&sem->count)))) __ret = (((delta))); switch (sizeof(*(((&sem->count))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}
# 53 "include/linux/rwsem.h" 2


static inline __attribute__((no_instrument_function)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return sem->count != 0;
}
# 86 "include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 102 "include/linux/rwsem.h"
static inline __attribute__((no_instrument_function)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((warn_unused_result)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 11 "include/linux/mm_types.h" 2


# 1 "include/linux/uprobes.h" 1
# 31 "include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 152 "include/linux/uprobes.h"
struct uprobes_state {
};



static inline __attribute__((no_instrument_function)) int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((no_instrument_function)) int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -38;
}
static inline __attribute__((no_instrument_function)) void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline __attribute__((no_instrument_function)) int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline __attribute__((no_instrument_function)) void uprobe_start_dup_mmap(void)
{
}
static inline __attribute__((no_instrument_function)) void uprobe_end_dup_mmap(void)
{
}
static inline __attribute__((no_instrument_function)) void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline __attribute__((no_instrument_function)) void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline __attribute__((no_instrument_function)) bool uprobe_deny_signal(void)
{
 return false;
}
static inline __attribute__((no_instrument_function)) void uprobe_free_utask(struct task_struct *t)
{
}
static inline __attribute__((no_instrument_function)) void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline __attribute__((no_instrument_function)) void uprobe_clear_state(struct mm_struct *mm)
{
}
# 14 "include/linux/mm_types.h" 2
# 1 "include/linux/page-flags-layout.h" 1



# 1 "include/linux/numa.h" 1
# 5 "include/linux/page-flags-layout.h" 2
# 1 "include/generated/bounds.h" 1
# 6 "include/linux/page-flags-layout.h" 2
# 15 "include/linux/mm_types.h" 2
# 1 "include/linux/workqueue.h" 1







# 1 "include/linux/timer.h" 1
# 10 "include/linux/timer.h"
struct tvec_base;

struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(unsigned long);
 unsigned long data;
 u32 flags;
 int slack;


 int start_pid;
 void *start_site;
 char start_comm[16];




};
# 88 "include/linux/timer.h"
void init_timer_key(struct timer_list *timer, unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((no_instrument_function)) void destroy_timer_on_stack(struct timer_list *timer) { }
static inline __attribute__((no_instrument_function)) void init_timer_on_stack_key(struct timer_list *timer,
        unsigned int flags, const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, flags, name, key);
}
# 165 "include/linux/timer.h"
static inline __attribute__((no_instrument_function)) int timer_pending(const struct timer_list * timer)
{
 return timer->entry.pprev != ((void *)0);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pinned(struct timer_list *timer, unsigned long expires);

extern void set_timer_slack(struct timer_list *time, int slack_hz);
# 191 "include/linux/timer.h"
extern int timer_stats_active;

extern void init_timer_stats(void);

extern void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
         void *timerf, char *comm, u32 flags);

extern void __timer_stats_timer_set_start_info(struct timer_list *timer,
            void *addr);

static inline __attribute__((no_instrument_function)) void timer_stats_timer_set_start_info(struct timer_list *timer)
{
 if (__builtin_expect(!!(!timer_stats_active), 1))
  return;
 __timer_stats_timer_set_start_info(timer, __builtin_return_address(0));
}

static inline __attribute__((no_instrument_function)) void timer_stats_timer_clear_start_info(struct timer_list *timer)
{
 timer->start_site = ((void *)0);
}
# 226 "include/linux/timer.h"
extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


# 1 "include/linux/sysctl.h" 1
# 28 "include/linux/sysctl.h"
# 1 "include/uapi/linux/sysctl.h" 1
# 29 "include/uapi/linux/sysctl.h"
struct completion;






struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT=1
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};


enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 29 "include/linux/sysctl.h" 2


struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
# 87 "include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((no_instrument_function)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 105 "include/linux/sysctl.h"
struct ctl_table
{
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
};

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header
{
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root,
        struct nsproxy *namespaces);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

void register_sysctl_root(struct ctl_table_root *root);
struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);

extern struct ctl_table sysctl_mount_point[];
# 218 "include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write,
         void *buffer, size_t *lenp, loff_t *ppos);
# 245 "include/linux/timer.h" 2

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);
# 9 "include/linux/workqueue.h" 2







struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(unsigned long __data);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 64,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};
# 130 "include/linux/workqueue.h"
struct workqueue_attrs {
 int nice;
 cpumask_var_t cpumask;
 bool no_numa;
};

static inline __attribute__((no_instrument_function)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ const typeof( ((struct delayed_work *)0)->work ) *__mptr = (work); (struct delayed_work *)( (char *)__mptr - __builtin_offsetof(struct delayed_work, work) );});
}

struct execute_work {
 struct work_struct work;
};
# 189 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((no_instrument_function)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((no_instrument_function)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((no_instrument_function)) unsigned int work_static(struct work_struct *work) { return 0; }
# 277 "include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 310 "include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 353 "include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;

extern struct workqueue_struct *
__alloc_workqueue_key(const char *fmt, unsigned int flags, int max_active,
 struct lock_class_key *key, const char *lock_name, ...) __attribute__((format(printf, 1, 6)));
# 422 "include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(gfp_t gfp_mask);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((format(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
# 470 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 484 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 499 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 513 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 529 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 558 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 572 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 586 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}




static inline __attribute__((no_instrument_function)) bool keventd_up(void)
{
 return system_wq != ((void *)0);
}







long work_on_cpu(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 625 "include/linux/workqueue.h"
static inline __attribute__((no_instrument_function)) void wq_watchdog_touch(int cpu) { }
# 16 "include/linux/mm_types.h" 2

# 1 "./arch/x86/include/asm/mmu.h" 1




# 1 "include/linux/mutex.h" 1
# 50 "include/linux/mutex.h"
struct mutex {

 atomic_t count;
 spinlock_t wait_lock;
 struct list_head wait_list;

 struct task_struct *owner;


 struct optimistic_spin_queue osq;







};





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;



};
# 99 "include/linux/mutex.h"
static inline __attribute__((no_instrument_function)) void mutex_destroy(struct mutex *lock) {}
# 119 "include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







static inline __attribute__((no_instrument_function)) int mutex_is_locked(struct mutex *lock)
{
 return atomic_read(&lock->count) != 1;
}
# 157 "include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((warn_unused_result)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((warn_unused_result)) mutex_lock_killable(struct mutex *lock);
# 173 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 6 "./arch/x86/include/asm/mmu.h" 2





typedef struct {

 struct ldt_struct *ldt;




 unsigned short ia32_compat;


 struct mutex lock;
 void *vdso;
 const struct vdso_image *vdso_image;

 atomic_t perf_rdpmc_allowed;
} mm_context_t;


void leave_mm(int cpu);
# 18 "include/linux/mm_types.h" 2






struct address_space;
struct mem_cgroup;
# 45 "include/linux/mm_types.h"
struct page {

 unsigned long flags;

 union {
  struct address_space *mapping;






  void *s_mem;
  atomic_t compound_mapcount;

 };


 struct {
  union {
   unsigned long index;
   void *freelist;

  };

  union {



   unsigned long counters;
# 84 "include/linux/mm_types.h"
   struct {

    union {





     atomic_t _mapcount;

     struct {
      unsigned inuse:16;
      unsigned objects:15;
      unsigned frozen:1;
     };
     int units;
    };




    atomic_t _refcount;
   };
   unsigned int active;
  };
 };
# 118 "include/linux/mm_types.h"
 union {
  struct list_head lru;




  struct dev_pagemap *pgmap;




  struct {
   struct page *next;

   int pages;
   int pobjects;




  };

  struct callback_head callback_head;



  struct {
   unsigned long compound_head;
# 155 "include/linux/mm_types.h"
   unsigned int compound_dtor;
   unsigned int compound_order;




  };
# 172 "include/linux/mm_types.h"
 };


 union {
  unsigned long private;
# 187 "include/linux/mm_types.h"
  spinlock_t ptl;


  struct kmem_cache *slab_cache;
 };
# 223 "include/linux/mm_types.h"
}





 __attribute__((aligned(2 * sizeof(unsigned long))))

;

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};




struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 290 "include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 299 "include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
};

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct kioctx_table;
struct mm_struct {
 struct vm_area_struct *mmap;
 struct rb_root mm_rb;
 u32 vmacache_seqnum;

 unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

 unsigned long mmap_base;
 unsigned long mmap_legacy_base;
 unsigned long task_size;
 unsigned long highest_vm_end;
 pgd_t * pgd;
 atomic_t mm_users;
 atomic_t mm_count;
 atomic_long_t nr_ptes;

 atomic_long_t nr_pmds;

 int map_count;

 spinlock_t page_table_lock;
 struct rw_semaphore mmap_sem;

 struct list_head mmlist;





 unsigned long hiwater_rss;
 unsigned long hiwater_vm;

 unsigned long total_vm;
 unsigned long locked_vm;
 unsigned long pinned_vm;
 unsigned long data_vm;
 unsigned long exec_vm;
 unsigned long stack_vm;
 unsigned long def_flags;
 unsigned long start_code, end_code, start_data, end_data;
 unsigned long start_brk, brk, start_stack;
 unsigned long arg_start, arg_end, env_start, env_end;

 unsigned long saved_auxv[(2*(2 + 20 + 1))];





 struct mm_rss_stat rss_stat;

 struct linux_binfmt *binfmt;

 cpumask_var_t cpu_vm_mask_var;


 mm_context_t context;

 unsigned long flags;

 struct core_state *core_state;

 spinlock_t ioctx_lock;
 struct kioctx_table *ioctx_table;
# 477 "include/linux/mm_types.h"
 struct file *exe_file;

 struct mmu_notifier_mm *mmu_notifier_mm;
# 507 "include/linux/mm_types.h"
 bool tlb_flush_pending;

 struct uprobes_state uprobes_state;





 atomic_long_t hugetlb_usage;


 struct work_struct async_put_work;

};

static inline __attribute__((no_instrument_function)) void mm_init_cpumask(struct mm_struct *mm)
{



 cpumask_clear(mm->cpu_vm_mask_var);
}


static inline __attribute__((no_instrument_function)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return mm->cpu_vm_mask_var;
}
# 543 "include/linux/mm_types.h"
static inline __attribute__((no_instrument_function)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
 __asm__ __volatile__("": : :"memory");
 return mm->tlb_flush_pending;
}
static inline __attribute__((no_instrument_function)) void set_tlb_flush_pending(struct mm_struct *mm)
{
 mm->tlb_flush_pending = true;





 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void clear_tlb_flush_pending(struct mm_struct *mm)
{
 __asm__ __volatile__("": : :"memory");
 mm->tlb_flush_pending = false;
}
# 577 "include/linux/mm_types.h"
struct vm_fault;

struct vm_special_mapping {
 const char *name;







 struct page **pages;





 int (*fault)(const struct vm_special_mapping *sm,
       struct vm_area_struct *vma,
       struct vm_fault *vmf);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 5 "include/linux/kmemcheck.h" 2
# 92 "include/linux/kmemcheck.h"
static inline __attribute__((no_instrument_function)) void
kmemcheck_alloc_shadow(struct page *page, int order, gfp_t flags, int node)
{
}

static inline __attribute__((no_instrument_function)) void
kmemcheck_free_shadow(struct page *page, int order)
{
}

static inline __attribute__((no_instrument_function)) void
kmemcheck_slab_alloc(struct kmem_cache *s, gfp_t gfpflags, void *object,
       size_t size)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_slab_free(struct kmem_cache *s, void *object,
           size_t size)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_pagealloc_alloc(struct page *p,
 unsigned int order, gfp_t gfpflags)
{
}

static inline __attribute__((no_instrument_function)) bool kmemcheck_page_is_tracked(struct page *p)
{
 return false;
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_unallocated(void *address, unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_uninitialized(void *address, unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_initialized(void *address, unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_freed(void *address, unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_unallocated_pages(struct page *p,
          unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_uninitialized_pages(struct page *p,
            unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) void kmemcheck_mark_initialized_pages(struct page *p,
          unsigned int n)
{
}

static inline __attribute__((no_instrument_function)) bool kmemcheck_is_obj_initialized(unsigned long addr, size_t size)
{
 return true;
}
# 19 "include/linux/skbuff.h" 2





# 1 "include/linux/socket.h" 1




# 1 "./arch/x86/include/uapi/asm/socket.h" 1
# 1 "./include/uapi/asm-generic/socket.h" 1



# 1 "./arch/x86/include/uapi/asm/sockios.h" 1
# 1 "./include/uapi/asm-generic/sockios.h" 1
# 1 "./arch/x86/include/uapi/asm/sockios.h" 2
# 5 "./include/uapi/asm-generic/socket.h" 2
# 1 "./arch/x86/include/uapi/asm/socket.h" 2
# 6 "include/linux/socket.h" 2
# 1 "./include/uapi/linux/sockios.h" 1
# 21 "./include/uapi/linux/sockios.h"
# 1 "./arch/x86/include/uapi/asm/sockios.h" 1
# 22 "./include/uapi/linux/sockios.h" 2
# 7 "include/linux/socket.h" 2
# 1 "include/linux/uio.h" 1
# 13 "include/linux/uio.h"
# 1 "include/uapi/linux/uio.h" 1
# 16 "include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 14 "include/linux/uio.h" 2

struct page;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum {
 ITER_IOVEC = 0,
 ITER_KVEC = 2,
 ITER_BVEC = 4,
};

struct iov_iter {
 int type;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
 };
 unsigned long nr_segs;
};
# 47 "include/linux/uio.h"
static inline __attribute__((no_instrument_function)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((no_instrument_function)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = ({ typeof(iter->count) _min1 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) _min2 = (iter->iov->iov_len - iter->iov_offset); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
                                                ,
 };
}
# 73 "include/linux/uio.h"
unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);

size_t iov_iter_copy_from_user_atomic(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_multipages_readable(struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);
size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((no_instrument_function)) size_t iov_iter_count(struct iov_iter *i)
{
 return i->count;
}

static inline __attribute__((no_instrument_function)) bool iter_is_iovec(struct iov_iter *i)
{
 return !(i->type & (ITER_BVEC | ITER_KVEC));
}
# 129 "include/linux/uio.h"
static inline __attribute__((no_instrument_function)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((no_instrument_function)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}
size_t csum_and_copy_to_iter(const void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

int import_iovec(int type, const struct iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


struct compat_iovec;
int compat_import_iovec(int type, const struct compat_iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 8 "include/linux/socket.h" 2


# 1 "include/uapi/linux/socket.h" 1
# 11 "include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
 __kernel_sa_family_t ss_family;

 char __data[128 - sizeof(unsigned short)];


} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));
# 11 "include/linux/socket.h" 2

struct pid;
struct cred;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef __kernel_sa_family_t sa_family_t;





struct sockaddr {
 sa_family_t sa_family;
 char sa_data[14];
};

struct linger {
 int l_onoff;
 int l_linger;
};
# 47 "include/linux/socket.h"
struct msghdr {
 void *msg_name;
 int msg_namelen;
 struct iov_iter msg_iter;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
 struct kiocb *msg_iocb;
};

struct user_msghdr {
 void *msg_name;
 int msg_namelen;
 struct iovec *msg_iov;
 __kernel_size_t msg_iovlen;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
};


struct mmsghdr {
 struct user_msghdr msg_hdr;
 unsigned int msg_len;
};







struct cmsghdr {
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;
};
# 125 "include/linux/socket.h"
static inline __attribute__((no_instrument_function)) struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline __attribute__((no_instrument_function)) struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}

static inline __attribute__((no_instrument_function)) size_t msg_data_left(struct msghdr *msg)
{
 return iov_iter_count(&msg->msg_iter);
}







struct ucred {
 __u32 pid;
 __u32 uid;
 __u32 gid;
};
# 336 "include/linux/socket.h"
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct timespec;


extern long __sys_recvmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern long __sys_sendmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg, unsigned int vlen,
     unsigned int flags, struct timespec *timeout);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags);
# 25 "include/linux/skbuff.h" 2




# 1 "include/linux/net.h" 1
# 22 "include/linux/net.h"
# 1 "include/linux/random.h" 1
# 10 "include/linux/random.h"
# 1 "include/linux/once.h" 1






bool __do_once_start(bool *done, unsigned long *flags);
void __do_once_done(bool *done, struct static_key *once_key,
      unsigned long *flags);
# 11 "include/linux/random.h" 2

# 1 "include/uapi/linux/random.h" 1
# 12 "include/uapi/linux/random.h"
# 1 "include/linux/irqnr.h" 1



# 1 "include/uapi/linux/irqnr.h" 1
# 5 "include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 13 "include/uapi/linux/random.h" 2
# 37 "include/uapi/linux/random.h"
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 13 "include/linux/random.h" 2

struct random_ready_callback {
 struct list_head list;
 void (*func)(struct random_ready_callback *rdy);
 struct module *owner;
};

extern void add_device_randomness(const void *, unsigned int);
extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value);
extern void add_interrupt_randomness(int irq, int irq_flags);

extern void get_random_bytes(void *buf, int nbytes);
extern int add_random_ready_callback(struct random_ready_callback *rdy);
extern void del_random_ready_callback(struct random_ready_callback *rdy);
extern void get_random_bytes_arch(void *buf, int nbytes);
extern int random_int_secret_init(void);


extern const struct file_operations random_fops, urandom_fops;


unsigned int get_random_int(void);
unsigned long get_random_long(void);
unsigned long randomize_range(unsigned long start, unsigned long end, unsigned long len);

u32 prandom_u32(void);
void prandom_bytes(void *buf, size_t nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

struct rnd_state {
 __u32 s1, s2, s3, s4;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
void prandom_seed_full_state(struct rnd_state *pcpu_state);
# 67 "include/linux/random.h"
static inline __attribute__((no_instrument_function)) u32 prandom_u32_max(u32 ep_ro)
{
 return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
}




static inline __attribute__((no_instrument_function)) u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline __attribute__((no_instrument_function)) void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = (seed >> 32) ^ (seed << 10) ^ seed;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
}


# 1 "./arch/x86/include/asm/archrandom.h" 1
# 46 "./arch/x86/include/asm/archrandom.h"
static inline __attribute__((no_instrument_function)) int rdrand_long(unsigned long *v)
{
 int ok;
 asm volatile("1: " ".byte 0x48,0x0f,0xc7,0xf0" "\n\t"
       "jc 2f\n\t"
       "decl %0\n\t"
       "jnz 1b\n\t"
       "2:"
       : "=r" (ok), "=a" (*v)
       : "0" (10));
 return ok;
}


static inline __attribute__((no_instrument_function)) bool rdseed_long(unsigned long *v)
{
 unsigned char ok;
 asm volatile(".byte 0x48,0x0f,0xc7,0xf8" "\n\t"
       "setc %0"
       : "=qm" (ok), "=a" (*v));
 return ok;
}
# 101 "./arch/x86/include/asm/archrandom.h"
static inline __attribute__((no_instrument_function)) int arch_get_random_long(unsigned long *v) { int ok; asm volatile ("661:\n\t" "movl $0, %0\n\t" ".byte " "0x66,0x66,0x90,0x66,0x90" "\n" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+30)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "\n1: " ".byte 0x48,0x0f,0xc7,0xf0" "\n\t" "jc 2f\n\t" "decl %0\n\t" "jnz 1b\n\t" "2:" "\n" "665""1" ":\n\t" ".popsection" : "=r" (ok), "=a" (*v) : "i" (0), "0" (10)); return ok; };
static inline __attribute__((no_instrument_function)) int arch_get_random_int(unsigned int *v) { int ok; asm volatile ("661:\n\t" "movl $0, %0\n\t" ".byte " "0x66,0x66,0x66,0x90" "\n" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+30)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "\n1: " ".byte 0x0f,0xc7,0xf0" "\n\t" "jc 2f\n\t" "decl %0\n\t" "jnz 1b\n\t" "2:" "\n" "665""1" ":\n\t" ".popsection" : "=r" (ok), "=a" (*v) : "i" (0), "0" (10)); return ok; };

static inline __attribute__((no_instrument_function)) int arch_get_random_seed_long(unsigned long *v) { unsigned char ok; asm volatile ("661:\n\t" "movb $0, %0\n\t" ".byte " "0x66,0x66,0x90,0x66,0x90" "\n" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x48,0x0f,0xc7,0xf8" "\n\t" "setc %0" "\n" "665""1" ":\n\t" ".popsection" : "=q" (ok), "=a" (*v) : "i" (0)); return ok; };
static inline __attribute__((no_instrument_function)) int arch_get_random_seed_int(unsigned int *v) { unsigned char ok; asm volatile ("661:\n\t" "movb $0, %0\n\t" ".byte " "0x66,0x66,0x66,0x90" "\n" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0xc7,0xf8" "\n\t" "setc %0" "\n" "665""1" ":\n\t" ".popsection" : "=q" (ok), "=a" (*v) : "i" (0)); return ok; };
# 134 "./arch/x86/include/asm/archrandom.h"
extern void x86_init_rdrand(struct cpuinfo_x86 *c);
# 97 "include/linux/random.h" 2
# 125 "include/linux/random.h"
static inline __attribute__((no_instrument_function)) u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}
# 23 "include/linux/net.h" 2

# 1 "include/linux/fcntl.h" 1



# 1 "include/uapi/linux/fcntl.h" 1



# 1 "./arch/x86/include/uapi/asm/fcntl.h" 1
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 155 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 195 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 1 "./arch/x86/include/uapi/asm/fcntl.h" 2
# 5 "include/uapi/linux/fcntl.h" 2
# 5 "include/linux/fcntl.h" 2
# 25 "include/linux/net.h" 2




# 1 "include/uapi/linux/net.h" 1
# 22 "include/uapi/linux/net.h"
# 1 "./arch/x86/include/uapi/asm/socket.h" 1
# 23 "include/uapi/linux/net.h" 2
# 47 "include/uapi/linux/net.h"
typedef enum {
 SS_FREE = 0,
 SS_UNCONNECTED,
 SS_CONNECTING,
 SS_CONNECTED,
 SS_DISCONNECTING
} socket_state;
# 30 "include/linux/net.h" 2

struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct file;
struct net;
# 63 "include/linux/net.h"
enum sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM = 2,
 SOCK_RAW = 3,
 SOCK_RDM = 4,
 SOCK_SEQPACKET = 5,
 SOCK_DCCP = 6,
 SOCK_PACKET = 10,
};
# 86 "include/linux/net.h"
enum sock_shutdown_cmd {
 SHUT_RD,
 SHUT_WR,
 SHUT_RDWR,
};

struct socket_wq {

 wait_queue_head_t wait;
 struct fasync_struct *fasync_list;
 unsigned long flags;
 struct callback_head rcu;
} __attribute__((__aligned__((1 << (6)))));
# 110 "include/linux/net.h"
struct socket {
 socket_state state;

 ;
 short type;
 ;

 unsigned long flags;

 struct socket_wq *wq;

 struct file *file;
 struct sock *sk;
 const struct proto_ops *ops;
};

struct vm_area_struct;
struct page;
struct sockaddr;
struct msghdr;
struct module;

struct proto_ops {
 int family;
 struct module *owner;
 int (*release) (struct socket *sock);
 int (*bind) (struct socket *sock,
          struct sockaddr *myaddr,
          int sockaddr_len);
 int (*connect) (struct socket *sock,
          struct sockaddr *vaddr,
          int sockaddr_len, int flags);
 int (*socketpair)(struct socket *sock1,
          struct socket *sock2);
 int (*accept) (struct socket *sock,
          struct socket *newsock, int flags);
 int (*getname) (struct socket *sock,
          struct sockaddr *addr,
          int *sockaddr_len, int peer);
 unsigned int (*poll) (struct file *file, struct socket *sock,
          struct poll_table_struct *wait);
 int (*ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*compat_ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*listen) (struct socket *sock, int len);
 int (*shutdown) (struct socket *sock, int flags);
 int (*setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*compat_setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*compat_getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*sendmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len);
# 179 "include/linux/net.h"
 int (*recvmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len, int flags);
 int (*mmap) (struct file *file, struct socket *sock,
          struct vm_area_struct * vma);
 ssize_t (*sendpage) (struct socket *sock, struct page *page,
          int offset, size_t size, int flags);
 ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,
           struct pipe_inode_info *pipe, size_t len, unsigned int flags);
 int (*set_peek_off)(struct sock *sk, int val);
};




struct net_proto_family {
 int family;
 int (*create)(struct net *net, struct socket *sock,
      int protocol, int kern);
 struct module *owner;
};

struct iovec;
struct kvec;

enum {
 SOCK_WAKE_IO,
 SOCK_WAKE_WAITD,
 SOCK_WAKE_SPACE,
 SOCK_WAKE_URG,
};

int sock_wake_async(struct socket_wq *sk_wq, int how, int band);
int sock_register(const struct net_proto_family *fam);
void sock_unregister(int family);
int __sock_create(struct net *net, int family, int type, int proto,
    struct socket **res, int kern);
int sock_create(int family, int type, int proto, struct socket **res);
int sock_create_kern(struct net *net, int family, int type, int proto, struct socket **res);
int sock_create_lite(int family, int type, int proto, struct socket **res);
struct socket *sock_alloc(void);
void sock_release(struct socket *sock);
int sock_sendmsg(struct socket *sock, struct msghdr *msg);
int sock_recvmsg(struct socket *sock, struct msghdr *msg, int flags);
struct file *sock_alloc_file(struct socket *sock, int flags, const char *dname);
struct socket *sockfd_lookup(int fd, int *err);
struct socket *sock_from_file(struct file *file, int *err);

int net_ratelimit(void);
# 270 "include/linux/net.h"
int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len);
int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len, int flags);

int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen);
int kernel_listen(struct socket *sock, int backlog);
int kernel_accept(struct socket *sock, struct socket **newsock, int flags);
int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,
     int flags);
int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getsockopt(struct socket *sock, int level, int optname, char *optval,
        int *optlen);
int kernel_setsockopt(struct socket *sock, int level, int optname, char *optval,
        unsigned int optlen);
int kernel_sendpage(struct socket *sock, struct page *page, int offset,
      size_t size, int flags);
int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);
int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how);
# 30 "include/linux/skbuff.h" 2
# 1 "include/linux/textsearch.h" 1







# 1 "include/linux/slab.h" 1
# 14 "include/linux/slab.h"
# 1 "include/linux/gfp.h" 1



# 1 "include/linux/mmdebug.h" 1






struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 5 "include/linux/gfp.h" 2
# 1 "include/linux/mmzone.h" 1
# 16 "include/linux/mmzone.h"
# 1 "include/linux/nodemask.h" 1
# 97 "include/linux/nodemask.h"
typedef struct { unsigned long bits[((((1 << 6)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 118 "include/linux/nodemask.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((no_instrument_function)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((no_instrument_function)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((no_instrument_function)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((no_instrument_function)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((no_instrument_function)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((no_instrument_function)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((no_instrument_function)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((no_instrument_function)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((no_instrument_function)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((no_instrument_function)) int __first_node(const nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_first_bit(srcp->bits, (1 << 6))); __min1 < __min2 ? __min1: __min2; });
}


static inline __attribute__((no_instrument_function)) int __next_node(int n, const nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_next_bit(srcp->bits, (1 << 6), n+1)); __min1 < __min2 ? __min1: __min2; });
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((no_instrument_function)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 6));
 __node_set((node), &(*mask));
}
# 289 "include/linux/nodemask.h"
static inline __attribute__((no_instrument_function)) int __first_unset_node(const nodemask_t *maskp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_first_zero_bit(maskp->bits, (1 << 6))); __min1 < __min2 ? __min1: __min2; })
                                                  ;
}
# 323 "include/linux/nodemask.h"
static inline __attribute__((no_instrument_function)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((no_instrument_function)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((no_instrument_function)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 381 "include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,




 N_MEMORY = N_HIGH_MEMORY,

 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline __attribute__((no_instrument_function)) int node_state(int node, enum node_states state)
{
 return (__builtin_constant_p(((node))) ? constant_test_bit(((node)), ((node_states[state]).bits)) : variable_test_bit(((node)), ((node_states[state]).bits)));
}

static inline __attribute__((no_instrument_function)) void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline __attribute__((no_instrument_function)) void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline __attribute__((no_instrument_function)) int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 6));
}






static inline __attribute__((no_instrument_function)) int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline __attribute__((no_instrument_function)) int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern int nr_node_ids;
extern int nr_online_nodes;

static inline __attribute__((no_instrument_function)) void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline __attribute__((no_instrument_function)) void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 491 "include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 525 "include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 17 "include/linux/mmzone.h" 2
# 1 "include/linux/pageblock-flags.h" 1
# 29 "include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 66 "include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);
# 18 "include/linux/mmzone.h" 2
# 38 "include/linux/mmzone.h"
enum {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 63 "include/linux/mmzone.h"
 MIGRATE_TYPES
};


extern char * const migratetype_names[MIGRATE_TYPES];
# 79 "include/linux/mmzone.h"
extern int page_group_by_mobility_disabled;
# 88 "include/linux/mmzone.h"
struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

struct pglist_data;
# 102 "include/linux/mmzone.h"
struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (6))));





enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ALLOC_BATCH,
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_MLOCK,
 NR_ANON_PAGES,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_PAGETABLE,
 NR_KERNEL_STACK,

 NR_UNSTABLE_NFS,
 NR_BOUNCE,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_WRITEBACK_TEMP,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 NR_SHMEM,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_PAGES_SCANNED,

 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,

 WORKINGSET_REFAULT,
 WORKINGSET_ACTIVATE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_TRANSPARENT_HUGEPAGES,
 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };
# 171 "include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((no_instrument_function)) int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((no_instrument_function)) int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

struct zone_reclaim_stat {
# 203 "include/linux/mmzone.h"
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];
};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 atomic_long_t inactive_age;



};
# 232 "include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};





struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;

 s8 expire;


 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};



enum zone_type {
# 287 "include/linux/mmzone.h"
 ZONE_DMA,







 ZONE_DMA32,






 ZONE_NORMAL,
# 314 "include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};



struct zone {



 unsigned long watermark[NR_WMARK];

 unsigned long nr_reserved_highatomic;
# 341 "include/linux/mmzone.h"
 long lowmem_reserve[4];


 int node;






 unsigned int inactive_ratio;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;





 unsigned long totalreserve_pages;
# 374 "include/linux/mmzone.h"
 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 unsigned long zone_start_pfn;
# 422 "include/linux/mmzone.h"
 unsigned long managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 const char *name;
# 466 "include/linux/mmzone.h"
 wait_queue_head_t *wait_table;
 unsigned long wait_table_hash_nr_entries;
 unsigned long wait_table_bits;

 struct zone_padding _pad1_;

 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;

 struct zone_padding _pad2_;




 spinlock_t lru_lock;
 struct lruvec lruvec;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
# 508 "include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
} __attribute__((__aligned__(1 << (6))));

enum zone_flags {
 ZONE_RECLAIM_LOCKED,
 ZONE_OOM_LOCKED,
 ZONE_CONGESTED,


 ZONE_DIRTY,



 ZONE_WRITEBACK,


 ZONE_FAIR_DEPLETED,
};

static inline __attribute__((no_instrument_function)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((no_instrument_function)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((no_instrument_function)) bool zone_is_initialized(struct zone *zone)
{
 return !!zone->wait_table;
}

static inline __attribute__((no_instrument_function)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}
# 571 "include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 606 "include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 6) * 4) + 1];
};



extern struct page *mem_map;
# 626 "include/linux/mmzone.h"
struct bootmem_data;
typedef struct pglist_data {
 struct zone node_zones[4];
 struct zonelist node_zonelists[MAX_ZONELISTS];
 int nr_zones;
# 653 "include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_max_order;
 enum zone_type classzone_idx;

 int kcompactd_max_order;
 enum zone_type kcompactd_classzone_idx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
# 694 "include/linux/mmzone.h"
} pg_data_t;
# 708 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((no_instrument_function)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

static inline __attribute__((no_instrument_function)) int zone_id(const struct zone *zone)
{
 struct pglist_data *pgdat = zone->zone_pgdat;

 return zone - pgdat->node_zones;
}







static inline __attribute__((no_instrument_function)) bool is_dev_zone(const struct zone *zone)
{
 return false;
}


# 1 "include/linux/memory_hotplug.h" 1



# 1 "include/linux/mmzone.h" 1
# 5 "include/linux/memory_hotplug.h" 2

# 1 "include/linux/notifier.h" 1
# 15 "include/linux/notifier.h"
# 1 "include/linux/srcu.h" 1
# 36 "include/linux/srcu.h"
struct srcu_struct_array {
 unsigned long c[2];
 unsigned long seq[2];
};

struct rcu_batch {
 struct callback_head *head, **tail;
};



struct srcu_struct {
 unsigned long completed;
 struct srcu_struct_array *per_cpu_ref;
 spinlock_t queue_lock;
 bool running;

 struct rcu_batch batch_queue;

 struct rcu_batch batch_check0;

 struct rcu_batch batch_check1;
 struct rcu_batch batch_done;
 struct delayed_work work;



};
# 80 "include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *sp);




void process_srcu(struct work_struct *work);
# 143 "include/linux/srcu.h"
void call_srcu(struct srcu_struct *sp, struct callback_head *head,
  void (*func)(struct callback_head *head));

void cleanup_srcu_struct(struct srcu_struct *sp);
int __srcu_read_lock(struct srcu_struct *sp) ;
void __srcu_read_unlock(struct srcu_struct *sp, int idx) ;
void synchronize_srcu(struct srcu_struct *sp);
void synchronize_srcu_expedited(struct srcu_struct *sp);
unsigned long srcu_batches_completed(struct srcu_struct *sp);
void srcu_barrier(struct srcu_struct *sp);
# 180 "include/linux/srcu.h"
static inline __attribute__((no_instrument_function)) int srcu_read_lock_held(struct srcu_struct *sp)
{
 return 1;
}
# 231 "include/linux/srcu.h"
static inline __attribute__((no_instrument_function)) int srcu_read_lock(struct srcu_struct *sp)
{
 int retval;

 __asm__ __volatile__("": : :"memory");
 retval = __srcu_read_lock(sp);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 return retval;
}
# 249 "include/linux/srcu.h"
static inline __attribute__((no_instrument_function)) void srcu_read_unlock(struct srcu_struct *sp, int idx)

{
 do { } while (0);
 __srcu_read_unlock(sp, idx);
}
# 265 "include/linux/srcu.h"
static inline __attribute__((no_instrument_function)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 16 "include/linux/notifier.h" 2
# 50 "include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 94 "include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 120 "include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
# 170 "include/linux/notifier.h"
static inline __attribute__((no_instrument_function)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((no_instrument_function)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 214 "include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 7 "include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
# 208 "include/linux/memory_hotplug.h"
static inline __attribute__((no_instrument_function)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((no_instrument_function)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((no_instrument_function)) void pgdat_resize_init(struct pglist_data *pgdat) {}

static inline __attribute__((no_instrument_function)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((no_instrument_function)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((no_instrument_function)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((no_instrument_function)) int mhp_notimplemented(const char *func)
{
 printk("\001" "4" "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);
 dump_stack();
 return -38;
}

static inline __attribute__((no_instrument_function)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

static inline __attribute__((no_instrument_function)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void get_online_mems(void) {}
static inline __attribute__((no_instrument_function)) void put_online_mems(void) {}

static inline __attribute__((no_instrument_function)) void mem_hotplug_begin(void) {}
static inline __attribute__((no_instrument_function)) void mem_hotplug_done(void) {}
# 256 "include/linux/memory_hotplug.h"
static inline __attribute__((no_instrument_function)) bool is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return false;
}

static inline __attribute__((no_instrument_function)) void try_offline_node(int nid) {}

static inline __attribute__((no_instrument_function)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -22;
}

static inline __attribute__((no_instrument_function)) void remove_memory(int nid, u64 start, u64 size) {}


extern int walk_memory_range(unsigned long start_pfn, unsigned long end_pfn,
  void *arg, int (*func)(struct memory_block *, void *));
extern int add_memory(int nid, u64 start, u64 size);
extern int add_memory_resource(int nid, struct resource *resource, bool online);
extern int zone_for_memory(int nid, u64 start, u64 size, int zone_default,
  bool for_device);
extern int arch_add_memory(int nid, u64 start, u64 size, bool for_device);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages);
extern bool is_memblock_offlined(struct memory_block *mem);
extern void remove_memory(int nid, u64 start, u64 size);
extern int sparse_add_one_section(struct zone *zone, unsigned long start_pfn);
extern void sparse_remove_one_section(struct zone *zone, struct mem_section *ms,
  unsigned long map_offset);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
# 738 "include/linux/mmzone.h" 2

extern struct mutex zonelists_mutex;
void build_all_zonelists(pg_data_t *pgdat, struct zone *zone);
void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int classzone_idx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern int init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((no_instrument_function)) struct zone *lruvec_zone(struct lruvec *lruvec)
{



 return ({ const typeof( ((struct zone *)0)->lruvec ) *__mptr = (lruvec); (struct zone *)( (char *)__mptr - __builtin_offsetof(struct zone, lruvec) );});

}

extern unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru);


void memory_present(int nid, unsigned long start, unsigned long end);







static inline __attribute__((no_instrument_function)) int local_memory_node(int node_id) { return node_id; };
# 791 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) int populated_zone(struct zone *zone)
{
 return (!!zone->present_pages);
}

extern int movable_zone;
# 809 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}







static inline __attribute__((no_instrument_function)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4 -1];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];
# 863 "include/linux/mmzone.h"
# 1 "./arch/x86/include/asm/mmzone.h" 1



# 1 "./arch/x86/include/asm/mmzone_64.h" 1
# 10 "./arch/x86/include/asm/mmzone_64.h"
# 1 "./arch/x86/include/asm/smp.h" 1
# 11 "./arch/x86/include/asm/smp.h"
# 1 "./arch/x86/include/asm/mpspec.h" 1




# 1 "./arch/x86/include/asm/mpspec_def.h" 1
# 21 "./arch/x86/include/asm/mpspec_def.h"
struct mpf_intel {
 char signature[4];
 unsigned int physptr;
 unsigned char length;
 unsigned char specification;
 unsigned char checksum;
 unsigned char feature1;
 unsigned char feature2;
 unsigned char feature3;
 unsigned char feature4;
 unsigned char feature5;
};



struct mpc_table {
 char signature[4];
 unsigned short length;
 char spec;
 char checksum;
 char oem[8];
 char productid[12];
 unsigned int oemptr;
 unsigned short oemsize;
 unsigned short oemcount;
 unsigned int lapic;
 unsigned int reserved;
};
# 67 "./arch/x86/include/asm/mpspec_def.h"
struct mpc_cpu {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char cpuflag;
 unsigned int cpufeature;
 unsigned int featureflag;
 unsigned int reserved[2];
};

struct mpc_bus {
 unsigned char type;
 unsigned char busid;
 unsigned char bustype[6];
};
# 105 "./arch/x86/include/asm/mpspec_def.h"
struct mpc_ioapic {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char flags;
 unsigned int apicaddr;
};

struct mpc_intsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbus;
 unsigned char srcbusirq;
 unsigned char dstapic;
 unsigned char dstirq;
};

enum mp_irq_source_types {
 mp_INT = 0,
 mp_NMI = 1,
 mp_SMI = 2,
 mp_ExtINT = 3
};







struct mpc_lintsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbusid;
 unsigned char srcbusirq;
 unsigned char destapic;
 unsigned char destapiclint;
};



struct mpc_oemtable {
 char signature[4];
 unsigned short length;
 char rev;
 char checksum;
 char mpc[8];
};
# 168 "./arch/x86/include/asm/mpspec_def.h"
enum mp_bustype {
 MP_BUS_ISA = 1,
 MP_BUS_EISA,
 MP_BUS_PCI,
};
# 6 "./arch/x86/include/asm/mpspec.h" 2
# 1 "./arch/x86/include/asm/x86_init.h" 1



# 1 "./arch/x86/include/uapi/asm/bootparam.h" 1
# 33 "./arch/x86/include/uapi/asm/bootparam.h"
# 1 "include/linux/screen_info.h" 1



# 1 "include/uapi/linux/screen_info.h" 1
# 10 "include/uapi/linux/screen_info.h"
struct screen_info {
 __u8 orig_x;
 __u8 orig_y;
 __u16 ext_mem_k;
 __u16 orig_video_page;
 __u8 orig_video_mode;
 __u8 orig_video_cols;
 __u8 flags;
 __u8 unused2;
 __u16 orig_video_ega_bx;
 __u16 unused3;
 __u8 orig_video_lines;
 __u8 orig_video_isVGA;
 __u16 orig_video_points;


 __u16 lfb_width;
 __u16 lfb_height;
 __u16 lfb_depth;
 __u32 lfb_base;
 __u32 lfb_size;
 __u16 cl_magic, cl_offset;
 __u16 lfb_linelength;
 __u8 red_size;
 __u8 red_pos;
 __u8 green_size;
 __u8 green_pos;
 __u8 blue_size;
 __u8 blue_pos;
 __u8 rsvd_size;
 __u8 rsvd_pos;
 __u16 vesapm_seg;
 __u16 vesapm_off;
 __u16 pages;
 __u16 vesa_attributes;
 __u32 capabilities;
 __u32 ext_lfb_base;
 __u8 _reserved[2];
} __attribute__((packed));
# 5 "include/linux/screen_info.h" 2

extern struct screen_info screen_info;
# 34 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "include/linux/apm_bios.h" 1
# 18 "include/linux/apm_bios.h"
# 1 "include/uapi/linux/apm_bios.h" 1
# 21 "include/uapi/linux/apm_bios.h"
typedef unsigned short apm_event_t;
typedef unsigned short apm_eventinfo_t;

struct apm_bios_info {
 __u16 version;
 __u16 cseg;
 __u32 offset;
 __u16 cseg_16;
 __u16 dseg;
 __u16 flags;
 __u16 cseg_len;
 __u16 cseg_16_len;
 __u16 dseg_len;
};
# 19 "include/linux/apm_bios.h" 2
# 35 "include/linux/apm_bios.h"
struct apm_info {
 struct apm_bios_info bios;
 unsigned short connection_version;
 int get_power_status_broken;
 int get_power_status_swabinminutes;
 int allow_ints;
 int forbid_idle;
 int realmode_power_off;
 int disabled;
};
# 94 "include/linux/apm_bios.h"
extern struct apm_info apm_info;
# 35 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "include/linux/edd.h" 1
# 33 "include/linux/edd.h"
# 1 "include/uapi/linux/edd.h" 1
# 71 "include/uapi/linux/edd.h"
struct edd_device_params {
 __u16 length;
 __u16 info_flags;
 __u32 num_default_cylinders;
 __u32 num_default_heads;
 __u32 sectors_per_track;
 __u64 number_of_sectors;
 __u16 bytes_per_sector;
 __u32 dpte_ptr;
 __u16 key;
 __u8 device_path_info_length;
 __u8 reserved2;
 __u16 reserved3;
 __u8 host_bus_type[4];
 __u8 interface_type[8];
 union {
  struct {
   __u16 base_address;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) isa;
  struct {
   __u8 bus;
   __u8 slot;
   __u8 function;
   __u8 channel;
   __u32 reserved;
  } __attribute__ ((packed)) pci;

  struct {
   __u64 reserved;
  } __attribute__ ((packed)) ibnd;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) xprs;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) htpt;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) unknown;
 } interface_path;
 union {
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) ata;
  struct {
   __u8 device;
   __u8 lun;
   __u8 reserved1;
   __u8 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) atapi;
  struct {
   __u16 id;
   __u64 lun;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) scsi;
  struct {
   __u64 serial_number;
   __u64 reserved;
  } __attribute__ ((packed)) usb;
  struct {
   __u64 eui;
   __u64 reserved;
  } __attribute__ ((packed)) i1394;
  struct {
   __u64 wwid;
   __u64 lun;
  } __attribute__ ((packed)) fibre;
  struct {
   __u64 identity_tag;
   __u64 reserved;
  } __attribute__ ((packed)) i2o;
  struct {
   __u32 array_number;
   __u32 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) raid;
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) sata;
  struct {
   __u64 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) unknown;
 } device_path;
 __u8 reserved4;
 __u8 checksum;
} __attribute__ ((packed));

struct edd_info {
 __u8 device;
 __u8 version;
 __u16 interface_support;
 __u16 legacy_max_cylinder;
 __u8 legacy_max_head;
 __u8 legacy_sectors_per_track;
 struct edd_device_params params;
} __attribute__ ((packed));

struct edd {
 unsigned int mbr_signature[16];
 struct edd_info edd_info[6];
 unsigned char mbr_signature_nr;
 unsigned char edd_info_nr;
};
# 34 "include/linux/edd.h" 2


extern struct edd edd;
# 36 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./arch/x86/include/asm/e820.h" 1
# 10 "./arch/x86/include/asm/e820.h"
# 1 "./arch/x86/include/uapi/asm/e820.h" 1
# 58 "./arch/x86/include/uapi/asm/e820.h"
struct e820entry {
 __u64 addr;
 __u64 size;
 __u32 type;
} __attribute__((packed));

struct e820map {
 __u32 nr_map;
 struct e820entry map[(128 + 3 * (1 << 6))];
};
# 11 "./arch/x86/include/asm/e820.h" 2


extern struct e820map e820;
extern struct e820map e820_saved;

extern unsigned long pci_mem_start;
extern int e820_any_mapped(u64 start, u64 end, unsigned type);
extern int e820_all_mapped(u64 start, u64 end, unsigned type);
extern void e820_add_region(u64 start, u64 size, int type);
extern void e820_print_map(char *who);
extern int
sanitize_e820_map(struct e820entry *biosmap, int max_nr_map, u32 *pnr_map);
extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,
          unsigned new_type);
extern u64 e820_remove_range(u64 start, u64 size, unsigned old_type,
        int checktype);
extern void update_e820(void);
extern void e820_setup_gap(void);
extern int e820_search_gap(unsigned long *gapstart, unsigned long *gapsize,
   unsigned long start_addr, unsigned long long end_addr);
struct setup_data;
extern void parse_e820_ext(u64 phys_addr, u32 data_len);



extern void e820_mark_nosave_regions(unsigned long limit_pfn);






extern unsigned long e820_end_of_ram_pfn(void);
extern unsigned long e820_end_of_low_ram_pfn(void);
extern u64 early_reserve_e820(u64 sizet, u64 align);

void memblock_x86_fill(void);
void memblock_find_dma_reserve(void);

extern void finish_e820_parsing(void);
extern void e820_reserve_resources(void);
extern void e820_reserve_resources_late(void);
extern void setup_memory_map(void);
extern char *default_machine_specific_memory_setup(void);





static inline __attribute__((no_instrument_function)) bool is_ISA_range(u64 s, u64 e)
{
 return s >= 0xa0000 && e <= 0x100000;
}


# 1 "include/linux/ioport.h" 1
# 18 "include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 126 "include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
};
# 166 "include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((no_instrument_function)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((no_instrument_function)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((no_instrument_function)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((no_instrument_function)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}
# 225 "include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);






struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern int iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(u64, u64, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(u64, u64, void *));


static inline __attribute__((no_instrument_function)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}
# 67 "./arch/x86/include/asm/e820.h" 2
# 37 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./arch/x86/include/asm/ist.h" 1
# 18 "./arch/x86/include/asm/ist.h"
# 1 "./arch/x86/include/uapi/asm/ist.h" 1
# 22 "./arch/x86/include/uapi/asm/ist.h"
struct ist_info {
 __u32 signature;
 __u32 command;
 __u32 event;
 __u32 perf_level;
};
# 19 "./arch/x86/include/asm/ist.h" 2


extern struct ist_info ist_info;
# 38 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "include/video/edid.h" 1



# 1 "include/uapi/video/edid.h" 1



struct edid_info {
 unsigned char dummy[128];
};
# 5 "include/video/edid.h" 2


extern struct edid_info edid_info;
# 39 "./arch/x86/include/uapi/asm/bootparam.h" 2


struct setup_data {
 __u64 next;
 __u32 type;
 __u32 len;
 __u8 data[0];
};

struct setup_header {
 __u8 setup_sects;
 __u16 root_flags;
 __u32 syssize;
 __u16 ram_size;
 __u16 vid_mode;
 __u16 root_dev;
 __u16 boot_flag;
 __u16 jump;
 __u32 header;
 __u16 version;
 __u32 realmode_swtch;
 __u16 start_sys;
 __u16 kernel_version;
 __u8 type_of_loader;
 __u8 loadflags;
 __u16 setup_move_size;
 __u32 code32_start;
 __u32 ramdisk_image;
 __u32 ramdisk_size;
 __u32 bootsect_kludge;
 __u16 heap_end_ptr;
 __u8 ext_loader_ver;
 __u8 ext_loader_type;
 __u32 cmd_line_ptr;
 __u32 initrd_addr_max;
 __u32 kernel_alignment;
 __u8 relocatable_kernel;
 __u8 min_alignment;
 __u16 xloadflags;
 __u32 cmdline_size;
 __u32 hardware_subarch;
 __u64 hardware_subarch_data;
 __u32 payload_offset;
 __u32 payload_length;
 __u64 setup_data;
 __u64 pref_address;
 __u32 init_size;
 __u32 handover_offset;
} __attribute__((packed));

struct sys_desc_table {
 __u16 length;
 __u8 table[14];
};


struct olpc_ofw_header {
 __u32 ofw_magic;
 __u32 ofw_version;
 __u32 cif_handler;
 __u32 irq_desc_table;
} __attribute__((packed));

struct efi_info {
 __u32 efi_loader_signature;
 __u32 efi_systab;
 __u32 efi_memdesc_size;
 __u32 efi_memdesc_version;
 __u32 efi_memmap;
 __u32 efi_memmap_size;
 __u32 efi_systab_hi;
 __u32 efi_memmap_hi;
};


struct boot_params {
 struct screen_info screen_info;
 struct apm_bios_info apm_bios_info;
 __u8 _pad2[4];
 __u64 tboot_addr;
 struct ist_info ist_info;
 __u8 _pad3[16];
 __u8 hd0_info[16];
 __u8 hd1_info[16];
 struct sys_desc_table sys_desc_table;
 struct olpc_ofw_header olpc_ofw_header;
 __u32 ext_ramdisk_image;
 __u32 ext_ramdisk_size;
 __u32 ext_cmd_line_ptr;
 __u8 _pad4[116];
 struct edid_info edid_info;
 struct efi_info efi_info;
 __u32 alt_mem_k;
 __u32 scratch;
 __u8 e820_entries;
 __u8 eddbuf_entries;
 __u8 edd_mbr_sig_buf_entries;
 __u8 kbd_status;
 __u8 _pad5[3];
# 149 "./arch/x86/include/uapi/asm/bootparam.h"
 __u8 sentinel;
 __u8 _pad6[1];
 struct setup_header hdr;
 __u8 _pad7[0x290-0x1f1-sizeof(struct setup_header)];
 __u32 edd_mbr_sig_buffer[16];
 struct e820entry e820_map[128];
 __u8 _pad8[48];
 struct edd_info eddbuf[6];
 __u8 _pad9[276];
} __attribute__((packed));
# 199 "./arch/x86/include/uapi/asm/bootparam.h"
enum x86_hardware_subarch {
 X86_SUBARCH_PC = 0,
 X86_SUBARCH_LGUEST,
 X86_SUBARCH_XEN,
 X86_SUBARCH_INTEL_MID,
 X86_SUBARCH_CE4100,
 X86_NR_SUBARCHS,
};
# 5 "./arch/x86/include/asm/x86_init.h" 2

struct mpc_bus;
struct mpc_cpu;
struct mpc_table;
struct cpuinfo_x86;
# 22 "./arch/x86/include/asm/x86_init.h"
struct x86_init_mpparse {
 void (*mpc_record)(unsigned int mode);
 void (*setup_ioapic_ids)(void);
 int (*mpc_apic_id)(struct mpc_cpu *m);
 void (*smp_read_mpc_oem)(struct mpc_table *mpc);
 void (*mpc_oem_pci_bus)(struct mpc_bus *m);
 void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name);
 void (*find_smp_config)(void);
 void (*get_smp_config)(unsigned int early);
};
# 41 "./arch/x86/include/asm/x86_init.h"
struct x86_init_resources {
 void (*probe_roms)(void);
 void (*reserve_resources)(void);
 char *(*memory_setup)(void);
};
# 54 "./arch/x86/include/asm/x86_init.h"
struct x86_init_irqs {
 void (*pre_vector_init)(void);
 void (*intr_init)(void);
 void (*trap_init)(void);
};






struct x86_init_oem {
 void (*arch_setup)(void);
 void (*banner)(void);
};
# 77 "./arch/x86/include/asm/x86_init.h"
struct x86_init_paging {
 void (*pagetable_init)(void);
};
# 88 "./arch/x86/include/asm/x86_init.h"
struct x86_init_timers {
 void (*setup_percpu_clockev)(void);
 void (*timer_init)(void);
 void (*wallclock_init)(void);
};





struct x86_init_iommu {
 int (*iommu_init)(void);
};
# 109 "./arch/x86/include/asm/x86_init.h"
struct x86_init_pci {
 int (*arch_init)(void);
 int (*init)(void);
 void (*init_irq)(void);
 void (*fixup_irqs)(void);
};





struct x86_init_ops {
 struct x86_init_resources resources;
 struct x86_init_mpparse mpparse;
 struct x86_init_irqs irqs;
 struct x86_init_oem oem;
 struct x86_init_paging paging;
 struct x86_init_timers timers;
 struct x86_init_iommu iommu;
 struct x86_init_pci pci;
};






struct x86_cpuinit_ops {
 void (*setup_percpu_clockev)(void);
 void (*early_percpu_clock_init)(void);
 void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);
};

struct timespec;
# 163 "./arch/x86/include/asm/x86_init.h"
struct x86_legacy_devices {
 int pnpbios;
};
# 176 "./arch/x86/include/asm/x86_init.h"
struct x86_legacy_features {
 int rtc;
 int ebda_search;
 struct x86_legacy_devices devices;
};
# 202 "./arch/x86/include/asm/x86_init.h"
struct x86_platform_ops {
 unsigned long (*calibrate_tsc)(void);
 void (*get_wallclock)(struct timespec *ts);
 int (*set_wallclock)(const struct timespec *ts);
 void (*iommu_shutdown)(void);
 bool (*is_untracked_pat_range)(u64 start, u64 end);
 void (*nmi_init)(void);
 unsigned char (*get_nmi_reason)(void);
 int (*i8042_detect)(void);
 void (*save_sched_clock_state)(void);
 void (*restore_sched_clock_state)(void);
 void (*apic_post_init)(void);
 struct x86_legacy_features legacy;
 void (*set_legacy_features)(void);
};

struct pci_dev;

struct x86_msi_ops {
 int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type);
 void (*teardown_msi_irq)(unsigned int irq);
 void (*teardown_msi_irqs)(struct pci_dev *dev);
 void (*restore_msi_irqs)(struct pci_dev *dev);
};

struct x86_io_apic_ops {
 unsigned int (*read) (unsigned int apic, unsigned int reg);
 void (*disable)(void);
};

extern struct x86_init_ops x86_init;
extern struct x86_cpuinit_ops x86_cpuinit;
extern struct x86_platform_ops x86_platform;
extern struct x86_msi_ops x86_msi;
extern struct x86_io_apic_ops x86_io_apic_ops;

extern void x86_early_init_platform_quirks(void);
extern void x86_init_noop(void);
extern void x86_init_uint_noop(unsigned int unused);
# 7 "./arch/x86/include/asm/mpspec.h" 2
# 1 "./arch/x86/include/asm/apicdef.h" 1
# 178 "./arch/x86/include/asm/apicdef.h"
struct local_apic {

        struct { unsigned int __reserved[4]; } __reserved_01;

        struct { unsigned int __reserved[4]; } __reserved_02;

        struct {
  unsigned int __reserved_1 : 24,
   phys_apic_id : 4,
   __reserved_2 : 4;
  unsigned int __reserved[3];
 } id;

        const
 struct {
  unsigned int version : 8,
   __reserved_1 : 8,
   max_lvt : 8,
   __reserved_2 : 8;
  unsigned int __reserved[3];
 } version;

        struct { unsigned int __reserved[4]; } __reserved_03;

        struct { unsigned int __reserved[4]; } __reserved_04;

        struct { unsigned int __reserved[4]; } __reserved_05;

        struct { unsigned int __reserved[4]; } __reserved_06;

        struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } tpr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } apr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } ppr;

        struct {
  unsigned int eoi;
  unsigned int __reserved[3];
 } eoi;

        struct { unsigned int __reserved[4]; } __reserved_07;

        struct {
  unsigned int __reserved_1 : 24,
   logical_dest : 8;
  unsigned int __reserved_2[3];
 } ldr;

        struct {
  unsigned int __reserved_1 : 28,
   model : 4;
  unsigned int __reserved_2[3];
 } dfr;

        struct {
  unsigned int spurious_vector : 8,
   apic_enabled : 1,
   focus_cpu : 1,
   __reserved_2 : 22;
  unsigned int __reserved_3[3];
 } svr;

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } isr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } tmr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } irr [8];

        union {
  struct {
   unsigned int send_cs_error : 1,
    receive_cs_error : 1,
    send_accept_error : 1,
    receive_accept_error : 1,
    __reserved_1 : 1,
    send_illegal_vector : 1,
    receive_illegal_vector : 1,
    illegal_register_address : 1,
    __reserved_2 : 24;
   unsigned int __reserved_3[3];
  } error_bits;
  struct {
   unsigned int errors;
   unsigned int __reserved_3[3];
  } all_errors;
 } esr;

        struct { unsigned int __reserved[4]; } __reserved_08;

        struct { unsigned int __reserved[4]; } __reserved_09;

        struct { unsigned int __reserved[4]; } __reserved_10;

        struct { unsigned int __reserved[4]; } __reserved_11;

        struct { unsigned int __reserved[4]; } __reserved_12;

        struct { unsigned int __reserved[4]; } __reserved_13;

        struct { unsigned int __reserved[4]; } __reserved_14;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   destination_mode : 1,
   delivery_status : 1,
   __reserved_1 : 1,
   level : 1,
   trigger : 1,
   __reserved_2 : 2,
   shorthand : 2,
   __reserved_3 : 12;
  unsigned int __reserved_4[3];
 } icr1;

        struct {
  union {
   unsigned int __reserved_1 : 24,
    phys_dest : 4,
    __reserved_2 : 4;
   unsigned int __reserved_3 : 24,
    logical_dest : 8;
  } dest;
  unsigned int __reserved_4[3];
 } icr2;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   timer_mode : 1,
   __reserved_3 : 14;
  unsigned int __reserved_4[3];
 } lvt_timer;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_thermal;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_pc;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint0;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint1;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_error;

        struct {
  unsigned int initial_count;
  unsigned int __reserved_2[3];
 } timer_icr;

        const
 struct {
  unsigned int curr_count;
  unsigned int __reserved_2[3];
 } timer_ccr;

        struct { unsigned int __reserved[4]; } __reserved_16;

        struct { unsigned int __reserved[4]; } __reserved_17;

        struct { unsigned int __reserved[4]; } __reserved_18;

        struct { unsigned int __reserved[4]; } __reserved_19;

        struct {
  unsigned int divisor : 4,
   __reserved_1 : 28;
  unsigned int __reserved_2[3];
 } timer_dcr;

        struct { unsigned int __reserved[4]; } __reserved_20;

} __attribute__ ((packed));
# 434 "./arch/x86/include/asm/apicdef.h"
enum ioapic_irq_destination_types {
 dest_Fixed = 0,
 dest_LowestPrio = 1,
 dest_SMI = 2,
 dest__reserved_1 = 3,
 dest_NMI = 4,
 dest_INIT = 5,
 dest__reserved_2 = 6,
 dest_ExtINT = 7
};
# 8 "./arch/x86/include/asm/mpspec.h" 2

extern int apic_version[];
extern int pic_mode;
# 40 "./arch/x86/include/asm/mpspec.h"
extern unsigned long mp_bus_not_pci[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

extern unsigned int boot_cpu_physical_apicid;
extern unsigned long mp_lapic_addr;


extern int smp_found_config;




static inline __attribute__((no_instrument_function)) void get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(0);
}

static inline __attribute__((no_instrument_function)) void early_get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(1);
}

static inline __attribute__((no_instrument_function)) void find_smp_config(void)
{
 x86_init.mpparse.find_smp_config();
}


extern void early_reserve_e820_mpc_new(void);
extern int enable_update_mptable;
extern int default_mpc_apic_id(struct mpc_cpu *m);
extern void default_smp_read_mpc_oem(struct mpc_table *mpc);

extern void default_mpc_oem_bus_info(struct mpc_bus *m, char *str);



extern void default_find_smp_config(void);
extern void default_get_smp_config(unsigned int early);
# 88 "./arch/x86/include/asm/mpspec.h"
int generic_processor_info(int apicid, int version);



struct physid_mask {
 unsigned long mask[(((32768) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
};

typedef struct physid_mask physid_mask_t;
# 131 "./arch/x86/include/asm/mpspec.h"
static inline __attribute__((no_instrument_function)) unsigned long physids_coerce(physid_mask_t *map)
{
 return map->mask[0];
}

static inline __attribute__((no_instrument_function)) void physids_promote(unsigned long physids, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 map->mask[0] = physids;
}

static inline __attribute__((no_instrument_function)) void physid_set_mask_of_physid(int physid, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 set_bit(physid, (*map).mask);
}




extern physid_mask_t phys_cpu_present_map;
# 12 "./arch/x86/include/asm/smp.h" 2
# 1 "./arch/x86/include/asm/apic.h" 1




# 1 "include/linux/pm.h" 1
# 34 "include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 54 "include/linux/pm.h"
struct device;


extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 295 "include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 513 "include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 535 "include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;






};

struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool early_init:1;
 bool direct_complete:1;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;




 struct timer_list suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int run_wake:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 unsigned long last_busy;
 unsigned long active_jiffies;
 unsigned long suspended_jiffies;
 unsigned long accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern void update_pm_runtime_accounting(struct device *dev);
extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 627 "include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 690 "include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);
extern void pm_complete_with_resume_check(struct device *dev);
# 782 "include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 6 "./arch/x86/include/asm/apic.h" 2





# 1 "./arch/x86/include/asm/fixmap.h" 1
# 19 "./arch/x86/include/asm/fixmap.h"
# 1 "./arch/x86/include/asm/acpi.h" 1
# 26 "./arch/x86/include/asm/acpi.h"
# 1 "include/acpi/pdc_intel.h" 1
# 27 "./arch/x86/include/asm/acpi.h" 2

# 1 "./arch/x86/include/asm/numa.h" 1





# 1 "./arch/x86/include/asm/topology.h" 1
# 51 "./arch/x86/include/asm/topology.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) x86_cpu_to_node_map; extern __typeof__(int) *x86_cpu_to_node_map_early_ptr; extern __typeof__(int) x86_cpu_to_node_map_early_map[];
# 65 "./arch/x86/include/asm/topology.h"
static inline __attribute__((no_instrument_function)) int early_cpu_to_node(int cpu)
{
 return *((x86_cpu_to_node_map_early_ptr) ? &(x86_cpu_to_node_map_early_ptr)[cpu] : &(*({ do { const void *__vpp_verify = (typeof((&(x86_cpu_to_node_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(x86_cpu_to_node_map)))) *)((&(x86_cpu_to_node_map))))); (typeof((typeof(*((&(x86_cpu_to_node_map)))) *)((&(x86_cpu_to_node_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })));
}




extern cpumask_var_t node_to_cpumask_map[(1 << 6)];





static inline __attribute__((no_instrument_function)) const struct cpumask *cpumask_of_node(int node)
{
 return node_to_cpumask_map[node];
}


extern void setup_node_to_cpumask_map(void);
# 95 "./arch/x86/include/asm/topology.h"
extern int __node_distance(int, int);
# 118 "./arch/x86/include/asm/topology.h"
# 1 "include/asm-generic/topology.h" 1
# 119 "./arch/x86/include/asm/topology.h" 2

extern const struct cpumask *cpu_coregroup_mask(int cpu);
# 130 "./arch/x86/include/asm/topology.h"
extern unsigned int __max_logical_packages;

int topology_update_package_map(unsigned int apicid, unsigned int cpu);
extern int topology_phys_to_logical_pkg(unsigned int pkg);







static inline __attribute__((no_instrument_function)) void arch_fix_phys_package_id(int num, u32 slot)
{
}

struct pci_bus;
int x86_pci_root_bus_node(int bus);
void x86_pci_root_bus_resources(int bus, struct list_head *resources);
# 7 "./arch/x86/include/asm/numa.h" 2
# 20 "./arch/x86/include/asm/numa.h"
extern int numa_off;
# 30 "./arch/x86/include/asm/numa.h"
extern s16 __apicid_to_node[32768];
extern nodemask_t numa_nodes_parsed __attribute__ ((__section__(".init.data")));

extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) numa_add_memblk(int nodeid, u64 start, u64 end);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) numa_set_distance(int from, int to, int distance);

static inline __attribute__((no_instrument_function)) void set_apicid_to_node(int apicid, s16 node)
{
 __apicid_to_node[apicid] = node;
}

extern int numa_cpu_node(int cpu);
# 59 "./arch/x86/include/asm/numa.h"
extern void numa_set_node(int cpu, int node);
extern void numa_clear_node(int cpu);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) init_cpu_to_node(void);
extern void numa_add_cpu(int cpu);
extern void numa_remove_cpu(int cpu);
# 29 "./arch/x86/include/asm/acpi.h" 2
# 1 "./arch/x86/include/asm/fixmap.h" 1
# 30 "./arch/x86/include/asm/acpi.h" 2



# 1 "./arch/x86/include/asm/realmode.h" 1




# 1 "./arch/x86/include/asm/io.h" 1
# 43 "./arch/x86/include/asm/io.h"
# 1 "arch/x86/include/generated/asm/early_ioremap.h" 1
# 1 "include/asm-generic/early_ioremap.h" 1
# 10 "include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);





extern void early_ioremap_shutdown(void);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 1 "arch/x86/include/generated/asm/early_ioremap.h" 2
# 44 "./arch/x86/include/asm/io.h" 2
# 56 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) unsigned char readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) :"memory"); return ret; }
static inline __attribute__((no_instrument_function)) unsigned short readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) :"memory"); return ret; }
static inline __attribute__((no_instrument_function)) unsigned int readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) :"memory"); return ret; }

static inline __attribute__((no_instrument_function)) unsigned char __readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) ); return ret; }
static inline __attribute__((no_instrument_function)) unsigned short __readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) ); return ret; }
static inline __attribute__((no_instrument_function)) unsigned int __readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) ); return ret; }

static inline __attribute__((no_instrument_function)) void writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) :"memory"); }
static inline __attribute__((no_instrument_function)) void writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) :"memory"); }
static inline __attribute__((no_instrument_function)) void writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) :"memory"); }

static inline __attribute__((no_instrument_function)) void __writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) ); }
static inline __attribute__((no_instrument_function)) void __writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) ); }
static inline __attribute__((no_instrument_function)) void __writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) ); }
# 90 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) unsigned long readq(const volatile void *addr) { unsigned long ret; asm volatile("mov" "q" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned long *)addr) :"memory"); return ret; }
static inline __attribute__((no_instrument_function)) void writeq(unsigned long val, volatile void *addr) { asm volatile("mov" "q" " %0,%1": :"r" (val), "m" (*(volatile unsigned long *)addr) :"memory"); }
# 118 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) phys_addr_t virt_to_phys(volatile void *address)
{
 return __phys_addr_nodebug((unsigned long)(address));
}
# 136 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) void *phys_to_virt(phys_addr_t address)
{
 return ((void *)((unsigned long)(address)+((unsigned long)(0xffff880000000000UL))));
}
# 151 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) unsigned int isa_virt_to_bus(volatile void *address)
{
 return (unsigned int)virt_to_phys(address);
}
# 181 "./arch/x86/include/asm/io.h"
extern void *ioremap_nocache(resource_size_t offset, unsigned long size);
extern void *ioremap_uc(resource_size_t offset, unsigned long size);


extern void *ioremap_cache(resource_size_t offset, unsigned long size);
extern void *ioremap_prot(resource_size_t offset, unsigned long size,
    unsigned long prot_val);




static inline __attribute__((no_instrument_function)) void *ioremap(resource_size_t offset, unsigned long size)
{
 return ioremap_nocache(offset, size);
}

extern void iounmap(volatile void *addr);

extern void set_iounmap_nonlazy(void);



# 1 "include/asm-generic/iomap.h" 1
# 28 "include/asm-generic/iomap.h"
extern unsigned int ioread8(void *);
extern unsigned int ioread16(void *);
extern unsigned int ioread16be(void *);
extern unsigned int ioread32(void *);
extern unsigned int ioread32be(void *);

extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);
# 51 "include/asm-generic/iomap.h"
extern void ioread8_rep(void *port, void *buf, unsigned long count);
extern void ioread16_rep(void *port, void *buf, unsigned long count);
extern void ioread32_rep(void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, const void *buf, unsigned long count);
extern void iowrite16_rep(void *port, const void *buf, unsigned long count);
extern void iowrite32_rep(void *port, const void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
# 75 "include/asm-generic/iomap.h"
struct pci_dev;
extern void pci_iounmap(struct pci_dev *dev, void *);






# 1 "include/asm-generic/pci_iomap.h" 1
# 14 "include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 84 "include/asm-generic/iomap.h" 2
# 204 "./arch/x86/include/asm/io.h" 2






static inline __attribute__((no_instrument_function)) void
memset_io(volatile void *addr, unsigned char val, size_t count)
{
 memset((void *)addr, val, count);
}

static inline __attribute__((no_instrument_function)) void
memcpy_fromio(void *dst, const volatile void *src, size_t count)
{
 memcpy(dst, (const void *)src, count);
}

static inline __attribute__((no_instrument_function)) void
memcpy_toio(volatile void *dst, const void *src, size_t count)
{
 memcpy((void *)dst, src, count);
}
# 246 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) void flush_write_buffers(void)
{



}



extern void native_io_delay(void);

extern int io_delay_type;
extern void io_delay_init(void);





static inline __attribute__((no_instrument_function)) void slow_down_io(void)
{
 native_io_delay();





}
# 316 "./arch/x86/include/asm/io.h"
static inline __attribute__((no_instrument_function)) void outb(unsigned char value, int port) { asm volatile("out" "b" " %" "b" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((no_instrument_function)) unsigned char inb(int port) { unsigned char value; asm volatile("in" "b" " %w1, %" "b" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((no_instrument_function)) void outb_p(unsigned char value, int port) { outb(value, port); slow_down_io(); } static inline __attribute__((no_instrument_function)) unsigned char inb_p(int port) { unsigned char value = inb(port); slow_down_io(); return value; } static inline __attribute__((no_instrument_function)) void outsb(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "b" : "+S"(addr), "+c"(count) : "d"(port)); } static inline __attribute__((no_instrument_function)) void insb(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "b" : "+D"(addr), "+c"(count) : "d"(port)); }
static inline __attribute__((no_instrument_function)) void outw(unsigned short value, int port) { asm volatile("out" "w" " %" "w" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((no_instrument_function)) unsigned short inw(int port) { unsigned short value; asm volatile("in" "w" " %w1, %" "w" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((no_instrument_function)) void outw_p(unsigned short value, int port) { outw(value, port); slow_down_io(); } static inline __attribute__((no_instrument_function)) unsigned short inw_p(int port) { unsigned short value = inw(port); slow_down_io(); return value; } static inline __attribute__((no_instrument_function)) void outsw(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "w" : "+S"(addr), "+c"(count) : "d"(port)); } static inline __attribute__((no_instrument_function)) void insw(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "w" : "+D"(addr), "+c"(count) : "d"(port)); }
static inline __attribute__((no_instrument_function)) void outl(unsigned int value, int port) { asm volatile("out" "l" " %" "" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((no_instrument_function)) unsigned int inl(int port) { unsigned int value; asm volatile("in" "l" " %w1, %" "" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((no_instrument_function)) void outl_p(unsigned int value, int port) { outl(value, port); slow_down_io(); } static inline __attribute__((no_instrument_function)) unsigned int inl_p(int port) { unsigned int value = inl(port); slow_down_io(); return value; } static inline __attribute__((no_instrument_function)) void outsl(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "l" : "+S"(addr), "+c"(count) : "d"(port)); } static inline __attribute__((no_instrument_function)) void insl(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "l" : "+D"(addr), "+c"(count) : "d"(port)); }

extern void *xlate_dev_mem_ptr(phys_addr_t phys);
extern void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr);

extern int ioremap_change_attr(unsigned long vaddr, unsigned long size,
    enum page_cache_mode pcm);
extern void *ioremap_wc(resource_size_t offset, unsigned long size);
extern void *ioremap_wt(resource_size_t offset, unsigned long size);

extern bool is_early_ioremap_ptep(pte_t *ptep);
# 345 "./arch/x86/include/asm/io.h"
extern int __attribute__((warn_unused_result)) arch_phys_wc_index(int handle);


extern int __attribute__((warn_unused_result)) arch_phys_wc_add(unsigned long base,
      unsigned long size);
extern void arch_phys_wc_del(int handle);
# 6 "./arch/x86/include/asm/realmode.h" 2


struct real_mode_header {
 u32 text_start;
 u32 ro_end;

 u32 trampoline_start;
 u32 trampoline_status;
 u32 trampoline_header;

 u32 trampoline_pgd;



 u32 wakeup_start;
 u32 wakeup_header;


 u32 machine_real_restart_asm;

 u32 machine_real_restart_seg;

};


struct trampoline_header {






 u64 start;
 u64 efer;
 u32 cr4;

};

extern struct real_mode_header *real_mode_header;
extern unsigned char real_mode_blob_end[];

extern unsigned long init_rsp;
extern unsigned long initial_code;
extern unsigned long initial_gs;

extern unsigned char real_mode_blob[];
extern unsigned char real_mode_relocs[];





extern unsigned char secondary_startup_64[];


void reserve_real_mode(void);
void setup_real_mode(void);
# 34 "./arch/x86/include/asm/acpi.h" 2






extern int acpi_lapic;
extern int acpi_ioapic;
extern int acpi_noirq;
extern int acpi_strict;
extern int acpi_disabled;
extern int acpi_pci_disabled;
extern int acpi_skip_timer_override;
extern int acpi_use_timer_override;
extern int acpi_fix_pin2_polarity;
extern int acpi_disable_cmcff;

extern u8 acpi_sci_flags;
extern int acpi_sci_override_gsi;
void acpi_pic_sci_set_trigger(unsigned int, u16);

extern int (*__acpi_register_gsi)(struct device *dev, u32 gsi,
      int trigger, int polarity);
extern void (*__acpi_unregister_gsi)(u32 gsi);

static inline __attribute__((no_instrument_function)) void disable_acpi(void)
{
 acpi_disabled = 1;
 acpi_pci_disabled = 1;
 acpi_noirq = 1;
}

extern int acpi_gsi_to_irq(u32 gsi, unsigned int *irq);

static inline __attribute__((no_instrument_function)) void acpi_noirq_set(void) { acpi_noirq = 1; }
static inline __attribute__((no_instrument_function)) void acpi_disable_pci(void)
{
 acpi_pci_disabled = 1;
 acpi_noirq_set();
}


extern int (*acpi_suspend_lowlevel)(void);







static inline __attribute__((no_instrument_function)) unsigned int acpi_processor_cstate_check(unsigned int max_cstate)
{






 if (boot_cpu_data.x86 == 0x0F &&
     boot_cpu_data.x86_vendor == 2 &&
     boot_cpu_data.x86_model <= 0x05 &&
     boot_cpu_data.x86_mask < 0x0A)
  return 1;
 else if (amd_e400_c1e_detected)
  return 1;
 else
  return max_cstate;
}

static inline __attribute__((no_instrument_function)) bool arch_has_acpi_pdc(void)
{
 struct cpuinfo_x86 *c = &(*({ do { const void *__vpp_verify = (typeof((&(cpu_info)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_info)))) *)((&(cpu_info))))); (typeof((typeof(*((&(cpu_info)))) *)((&(cpu_info))))) (__ptr + (((__per_cpu_offset[(0)])))); }); }));
 return (c->x86_vendor == 0 ||
  c->x86_vendor == 5);
}

static inline __attribute__((no_instrument_function)) void arch_acpi_set_pdc_bits(u32 *buf)
{
 struct cpuinfo_x86 *c = &(*({ do { const void *__vpp_verify = (typeof((&(cpu_info)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_info)))) *)((&(cpu_info))))); (typeof((typeof(*((&(cpu_info)))) *)((&(cpu_info))))) (__ptr + (((__per_cpu_offset[(0)])))); }); }));

 buf[2] |= ((0x0010) | (0x0008) | (0x0002) | (0x0100) | (0x0200));

 if ((__builtin_constant_p(( 4*32+ 7)) && ( (((( 4*32+ 7))>>5)==0 && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 7))>>5)==1 && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 7))>>5)==2 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==3 && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 7))>>5)==4 && (1UL<<((( 4*32+ 7))&31) & (0) )) || (((( 4*32+ 7))>>5)==5 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==6 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==7 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==8 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==9 && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==10 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==11 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==12 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==13 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==14 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==15 && (1UL<<((( 4*32+ 7))&31) & 0)) || (((( 4*32+ 7))>>5)==16 && (1UL<<((( 4*32+ 7))&31) & 0)) ) ? 1 : (__builtin_constant_p((( 4*32+ 7))) ? constant_test_bit((( 4*32+ 7)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 4*32+ 7)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= ((0x0008) | (0x0002) | (0x0020) | (0x0800) | (0x0001));

 if ((__builtin_constant_p(( 0*32+22)) && ( (((( 0*32+22))>>5)==0 && (1UL<<((( 0*32+22))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+22))>>5)==1 && (1UL<<((( 0*32+22))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+22))>>5)==2 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==3 && (1UL<<((( 0*32+22))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+22))>>5)==4 && (1UL<<((( 0*32+22))&31) & (0) )) || (((( 0*32+22))>>5)==5 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==6 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==7 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==8 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==9 && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==10 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==11 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==12 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==13 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==14 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==15 && (1UL<<((( 0*32+22))&31) & 0)) || (((( 0*32+22))>>5)==16 && (1UL<<((( 0*32+22))&31) & 0)) ) ? 1 : (__builtin_constant_p((( 0*32+22))) ? constant_test_bit((( 0*32+22)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 0*32+22)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= (0x0004);




 if (!(__builtin_constant_p(( 4*32+ 3)) && ( (((( 4*32+ 3))>>5)==0 && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 3))>>5)==1 && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 3))>>5)==2 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==3 && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 3))>>5)==4 && (1UL<<((( 4*32+ 3))&31) & (0) )) || (((( 4*32+ 3))>>5)==5 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==6 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==7 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==8 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==9 && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==10 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==11 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==12 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==13 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==14 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==15 && (1UL<<((( 4*32+ 3))&31) & 0)) || (((( 4*32+ 3))>>5)==16 && (1UL<<((( 4*32+ 3))&31) & 0)) ) ? 1 : (__builtin_constant_p((( 4*32+ 3))) ? constant_test_bit((( 4*32+ 3)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 4*32+ 3)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] &= ~((0x0200));
}

static inline __attribute__((no_instrument_function)) bool acpi_has_cpu_in_madt(void)
{
 return !!acpi_lapic;
}
# 148 "./arch/x86/include/asm/acpi.h"
extern int acpi_numa;
extern int x86_acpi_numa_init(void);
# 20 "./arch/x86/include/asm/fixmap.h" 2






# 1 "./arch/x86/include/uapi/asm/vsyscall.h" 1



enum vsyscall_num {
 __NR_vgettimeofday,
 __NR_vtime,
 __NR_vgetcpu,
};
# 27 "./arch/x86/include/asm/fixmap.h" 2
# 67 "./arch/x86/include/asm/fixmap.h"
enum fixed_addresses {




 VSYSCALL_PAGE = (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (-10UL << 20)) >> 12,


 FIX_DBGP_BASE,
 FIX_EARLYCON_MEM_BASE,

 FIX_OHCI1394_BASE,


 FIX_APIC_BASE,


 FIX_IO_APIC_BASE_0,
 FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,

 FIX_RO_IDT,
# 98 "./arch/x86/include/asm/fixmap.h"
 FIX_TEXT_POKE1,
 FIX_TEXT_POKE0,



 __end_of_permanent_fixed_addresses,
# 115 "./arch/x86/include/asm/fixmap.h"
 FIX_BTMAP_END =
  (__end_of_permanent_fixed_addresses ^
   (__end_of_permanent_fixed_addresses + (64 * 8) - 1)) &
  -512
  ? __end_of_permanent_fixed_addresses + (64 * 8) -
    (__end_of_permanent_fixed_addresses & ((64 * 8) - 1))
  : __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + (64 * 8) - 1,






 __end_of_fixed_addresses
};


extern void reserve_top_address(unsigned long reserve);




extern int fixmaps_set;

extern pte_t *kmap_pte;

extern pte_t *pkmap_page_table;

void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
void native_set_fixmap(enum fixed_addresses idx,
         phys_addr_t phys, pgprot_t flags);


static inline __attribute__((no_instrument_function)) void __set_fixmap(enum fixed_addresses idx,
    phys_addr_t phys, pgprot_t flags)
{
 native_set_fixmap(idx, phys, flags);
}


# 1 "include/asm-generic/fixmap.h" 1
# 29 "include/asm-generic/fixmap.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { bool __cond = !(!(idx >= __end_of_fixed_addresses)); extern void __compiletime_assert_31(void) __attribute__((error("BUILD_BUG_ON failed: " "idx >= __end_of_fixed_addresses"))); if (__cond) __compiletime_assert_31(); do { } while (0); } while (0);
 return (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((idx) << 12));
}

static inline __attribute__((no_instrument_function)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) || vaddr < (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/asm-generic/fixmap.h"), "i" (37), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return ((((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 157 "./arch/x86/include/asm/fixmap.h" 2




void __early_set_fixmap(enum fixed_addresses idx,
   phys_addr_t phys, pgprot_t flags);
# 12 "./arch/x86/include/asm/apic.h" 2


# 1 "./arch/x86/include/asm/idle.h" 1






struct notifier_block;
void idle_notifier_register(struct notifier_block *n);
void idle_notifier_unregister(struct notifier_block *n);


void enter_idle(void);
void exit_idle(void);






void amd_e400_remove_cpu(int cpu);
# 15 "./arch/x86/include/asm/apic.h" 2
# 45 "./arch/x86/include/asm/apic.h"
static inline __attribute__((no_instrument_function)) void generic_apic_probe(void)
{
}




extern unsigned int apic_verbosity;
extern int local_apic_timer_c2_ok;

extern int disable_apic;
extern unsigned int lapic_timer_frequency;


extern void __inquire_remote_apic(int apicid);






static inline __attribute__((no_instrument_function)) void default_inquire_remote_apic(int apicid)
{
 if (apic_verbosity >= 2)
  __inquire_remote_apic(apicid);
}
# 80 "./arch/x86/include/asm/apic.h"
static inline __attribute__((no_instrument_function)) bool apic_from_smp_config(void)
{
 return smp_found_config && !disable_apic;
}
# 92 "./arch/x86/include/asm/apic.h"
extern int setup_profiling_timer(unsigned int);

static inline __attribute__((no_instrument_function)) void native_apic_mem_write(u32 reg, u32 v)
{
 volatile u32 *addr = (volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg);

 asm volatile ("661:\n\t" "movl %0, %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(18*32 + (5))" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "xchgl %0, %P1" "\n" "665""1" ":\n\t" ".popsection" : "=r" (v), "=m" (*addr) : "i" (0), "0" (v), "m" (*addr))

                                           ;
}

static inline __attribute__((no_instrument_function)) u32 native_apic_mem_read(u32 reg)
{
 return *((volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg));
}

extern void native_apic_wait_icr_idle(void);
extern u32 native_safe_apic_wait_icr_idle(void);
extern void native_apic_icr_write(u32 low, u32 id);
extern u64 native_apic_icr_read(void);

static inline __attribute__((no_instrument_function)) bool apic_is_x2apic_enabled(void)
{
 u64 msr;

 if (rdmsrl_safe(0x0000001b, &msr))
  return false;
 return msr & (1UL << 10);
}

extern void enable_IR_x2apic(void);

extern int get_physical_broadcast(void);

extern int lapic_get_maxlvt(void);
extern void clear_local_APIC(void);
extern void disconnect_bsp_APIC(int virt_wire_setup);
extern void disable_local_APIC(void);
extern void lapic_shutdown(void);
extern void sync_Arb_IDs(void);
extern void init_bsp_APIC(void);
extern void setup_local_APIC(void);
extern void init_apic_mappings(void);
void register_lapic_address(unsigned long address);
extern void setup_boot_APIC_clock(void);
extern void setup_secondary_APIC_clock(void);
extern int APIC_init_uniprocessor(void);


static inline __attribute__((no_instrument_function)) int apic_force_enable(unsigned long addr)
{
 return -1;
}




extern int apic_bsp_setup(bool upmode);
extern void apic_ap_setup(void);





extern int apic_is_clustered_box(void);







extern int setup_APIC_eilvt(u8 lvt_off, u8 vector, u8 msg_type, u8 mask);
# 247 "./arch/x86/include/asm/apic.h"
static inline __attribute__((no_instrument_function)) void check_x2apic(void) { }
static inline __attribute__((no_instrument_function)) void x2apic_setup(void) { }
static inline __attribute__((no_instrument_function)) int x2apic_enabled(void) { return 0; }
# 271 "./arch/x86/include/asm/apic.h"
struct apic {
 char *name;

 int (*probe)(void);
 int (*acpi_madt_oem_check)(char *oem_id, char *oem_table_id);
 int (*apic_id_valid)(int apicid);
 int (*apic_id_registered)(void);

 u32 irq_delivery_mode;
 u32 irq_dest_mode;

 const struct cpumask *(*target_cpus)(void);

 int disable_esr;

 int dest_logical;
 unsigned long (*check_apicid_used)(physid_mask_t *map, int apicid);

 void (*vector_allocation_domain)(int cpu, struct cpumask *retmask,
      const struct cpumask *mask);
 void (*init_apic_ldr)(void);

 void (*ioapic_phys_id_map)(physid_mask_t *phys_map, physid_mask_t *retmap);

 void (*setup_apic_routing)(void);
 int (*cpu_present_to_apicid)(int mps_cpu);
 void (*apicid_to_cpu_present)(int phys_apicid, physid_mask_t *retmap);
 int (*check_phys_apicid_present)(int phys_apicid);
 int (*phys_pkg_id)(int cpuid_apic, int index_msb);

 unsigned int (*get_apic_id)(unsigned long x);
 unsigned long (*set_apic_id)(unsigned int id);
 unsigned long apic_id_mask;

 int (*cpu_mask_to_apicid_and)(const struct cpumask *cpumask,
          const struct cpumask *andmask,
          unsigned int *apicid);


 void (*send_IPI)(int cpu, int vector);
 void (*send_IPI_mask)(const struct cpumask *mask, int vector);
 void (*send_IPI_mask_allbutself)(const struct cpumask *mask,
      int vector);
 void (*send_IPI_allbutself)(int vector);
 void (*send_IPI_all)(int vector);
 void (*send_IPI_self)(int vector);


 int (*wakeup_secondary_cpu)(int apicid, unsigned long start_eip);

 void (*inquire_remote_apic)(int apicid);


 u32 (*read)(u32 reg);
 void (*write)(u32 reg, u32 v);







 void (*eoi_write)(u32 reg, u32 v);
 u64 (*icr_read)(void);
 void (*icr_write)(u32 low, u32 high);
 void (*wait_icr_idle)(void);
 u32 (*safe_wait_icr_idle)(void);
# 352 "./arch/x86/include/asm/apic.h"
};






extern struct apic *apic;
# 379 "./arch/x86/include/asm/apic.h"
extern struct apic *__apicdrivers[], *__apicdrivers_end[];





extern int wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip);




static inline __attribute__((no_instrument_function)) u32 apic_read(u32 reg)
{
 return apic->read(reg);
}

static inline __attribute__((no_instrument_function)) void apic_write(u32 reg, u32 val)
{
 apic->write(reg, val);
}

static inline __attribute__((no_instrument_function)) void apic_eoi(void)
{
 apic->eoi_write(0xB0, 0x0);
}

static inline __attribute__((no_instrument_function)) u64 apic_icr_read(void)
{
 return apic->icr_read();
}

static inline __attribute__((no_instrument_function)) void apic_icr_write(u32 low, u32 high)
{
 apic->icr_write(low, high);
}

static inline __attribute__((no_instrument_function)) void apic_wait_icr_idle(void)
{
 apic->wait_icr_idle();
}

static inline __attribute__((no_instrument_function)) u32 safe_apic_wait_icr_idle(void)
{
 return apic->safe_wait_icr_idle();
}

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v));
# 440 "./arch/x86/include/asm/apic.h"
static inline __attribute__((no_instrument_function)) void ack_APIC_irq(void)
{




 apic_eoi();
}

static inline __attribute__((no_instrument_function)) unsigned default_get_apic_id(unsigned long x)
{
 unsigned int ver = ((apic_read(0x30)) & 0xFFu);

 if (((ver) >= 0x14) || (__builtin_constant_p(( 3*32+26)) && ( (((( 3*32+26))>>5)==0 && (1UL<<((( 3*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 3*32+26))>>5)==1 && (1UL<<((( 3*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 3*32+26))>>5)==2 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==3 && (1UL<<((( 3*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 3*32+26))>>5)==4 && (1UL<<((( 3*32+26))&31) & (0) )) || (((( 3*32+26))>>5)==5 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==6 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==7 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==8 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==9 && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==10 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==11 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==12 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==13 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==14 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==15 && (1UL<<((( 3*32+26))&31) & 0)) || (((( 3*32+26))>>5)==16 && (1UL<<((( 3*32+26))&31) & 0)) ) ? 1 : (__builtin_constant_p((( 3*32+26))) ? constant_test_bit((( 3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return (x >> 24) & 0xFF;
 else
  return (x >> 24) & 0x0F;
}
# 466 "./arch/x86/include/asm/apic.h"
extern void apic_send_IPI_self(int vector);

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) x2apic_extra_bits;

extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);


extern void generic_bigsmp_probe(void);




# 1 "./arch/x86/include/asm/smp.h" 1
# 480 "./arch/x86/include/asm/apic.h" 2



static inline __attribute__((no_instrument_function)) const struct cpumask *default_target_cpus(void)
{

 return ((const struct cpumask *)&__cpu_online_mask);



}

static inline __attribute__((no_instrument_function)) const struct cpumask *online_target_cpus(void)
{
 return ((const struct cpumask *)&__cpu_online_mask);
}

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];


static inline __attribute__((no_instrument_function)) unsigned int read_apic_id(void)
{
 unsigned int reg;

 reg = apic_read(0x20);

 return apic->get_apic_id(reg);
}

static inline __attribute__((no_instrument_function)) int default_apic_id_valid(int apicid)
{
 return (apicid < 255);
}

extern int default_acpi_madt_oem_check(char *, char *);

extern void default_setup_apic_routing(void);

extern struct apic apic_noop;
# 548 "./arch/x86/include/asm/apic.h"
static inline __attribute__((no_instrument_function)) int
flat_cpu_mask_to_apicid_and(const struct cpumask *cpumask,
       const struct cpumask *andmask,
       unsigned int *apicid)
{
 unsigned long cpu_mask = ((cpumask)->bits)[0] &
     ((andmask)->bits)[0] &
     ((((const struct cpumask *)&__cpu_online_mask))->bits)[0] &
     0xFFu;

 if (__builtin_expect(!!(cpu_mask), 1)) {
  *apicid = (unsigned int)cpu_mask;
  return 0;
 } else {
  return -22;
 }
}

extern int
default_cpu_mask_to_apicid_and(const struct cpumask *cpumask,
          const struct cpumask *andmask,
          unsigned int *apicid);

static inline __attribute__((no_instrument_function)) void
flat_vector_allocation_domain(int cpu, struct cpumask *retmask,
         const struct cpumask *mask)
{
# 583 "./arch/x86/include/asm/apic.h"
 cpumask_clear(retmask);
 ((retmask)->bits)[0] = 0xFFu;
}

static inline __attribute__((no_instrument_function)) void
default_vector_allocation_domain(int cpu, struct cpumask *retmask,
     const struct cpumask *mask)
{
 cpumask_copy(retmask, (get_cpu_mask(cpu)));
}

static inline __attribute__((no_instrument_function)) unsigned long default_check_apicid_used(physid_mask_t *map, int apicid)
{
 return (__builtin_constant_p((apicid)) ? constant_test_bit((apicid), ((*map).mask)) : variable_test_bit((apicid), ((*map).mask)));
}

static inline __attribute__((no_instrument_function)) void default_ioapic_phys_id_map(physid_mask_t *phys_map, physid_mask_t *retmap)
{
 *retmap = *phys_map;
}

static inline __attribute__((no_instrument_function)) int __default_cpu_present_to_apicid(int mps_cpu)
{
 if (mps_cpu < nr_cpu_ids && cpumask_test_cpu((mps_cpu), ((const struct cpumask *)&__cpu_present_mask)))
  return (int)(*({ do { const void *__vpp_verify = (typeof((&(x86_bios_cpu_apicid)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(x86_bios_cpu_apicid)))) *)((&(x86_bios_cpu_apicid))))); (typeof((typeof(*((&(x86_bios_cpu_apicid)))) *)((&(x86_bios_cpu_apicid))))) (__ptr + (((__per_cpu_offset[(mps_cpu)])))); }); }));
 else
  return 0xFFFFu;
}

static inline __attribute__((no_instrument_function)) int
__default_check_phys_apicid_present(int phys_apicid)
{
 return (__builtin_constant_p((phys_apicid)) ? constant_test_bit((phys_apicid), ((phys_cpu_present_map).mask)) : variable_test_bit((phys_apicid), ((phys_cpu_present_map).mask)));
}
# 630 "./arch/x86/include/asm/apic.h"
extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);



extern void irq_enter(void);
extern void irq_exit(void);

static inline __attribute__((no_instrument_function)) void entering_irq(void)
{
 irq_enter();
 exit_idle();
}

static inline __attribute__((no_instrument_function)) void entering_ack_irq(void)
{
 entering_irq();
 ack_APIC_irq();
}

static inline __attribute__((no_instrument_function)) void ipi_entering_ack_irq(void)
{
 ack_APIC_irq();
 irq_enter();
}

static inline __attribute__((no_instrument_function)) void exiting_irq(void)
{
 irq_exit();
}

static inline __attribute__((no_instrument_function)) void exiting_ack_irq(void)
{
 irq_exit();

 ack_APIC_irq();
}

extern void ioapic_zap_locks(void);
# 13 "./arch/x86/include/asm/smp.h" 2

# 1 "./arch/x86/include/asm/io_apic.h" 1






# 1 "./arch/x86/include/asm/irq_vectors.h" 1
# 8 "./arch/x86/include/asm/io_apic.h" 2
# 27 "./arch/x86/include/asm/io_apic.h"
union IO_APIC_reg_00 {
 u32 raw;
 struct {
  u32 __reserved_2 : 14,
   LTS : 1,
   delivery_type : 1,
   __reserved_1 : 8,
   ID : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_01 {
 u32 raw;
 struct {
  u32 version : 8,
   __reserved_2 : 7,
   PRQ : 1,
   entries : 8,
   __reserved_1 : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_02 {
 u32 raw;
 struct {
  u32 __reserved_2 : 24,
   arbitration : 4,
   __reserved_1 : 4;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_03 {
 u32 raw;
 struct {
  u32 boot_DT : 1,
   __reserved_1 : 31;
 } __attribute__ ((packed)) bits;
};

struct IO_APIC_route_entry {
 __u32 vector : 8,
  delivery_mode : 3,



  dest_mode : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  __reserved_2 : 15;

 __u32 __reserved_3 : 24,
  dest : 8;
} __attribute__ ((packed));

struct IR_IO_APIC_route_entry {
 __u64 vector : 8,
  zero : 3,
  index2 : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  reserved : 31,
  format : 1,
  index : 15;
} __attribute__ ((packed));

struct irq_alloc_info;
struct ioapic_domain_cfg;
# 122 "./arch/x86/include/asm/io_apic.h"
extern int nr_ioapics;

extern int mpc_ioapic_id(int ioapic);
extern unsigned int mpc_ioapic_addr(int ioapic);


extern int mp_irq_entries;


extern struct mpc_intsrc mp_irqs[(256 * 4)];


extern int skip_ioapic_setup;


extern int noioapicquirk;


extern int noioapicreroute;

extern u32 gsi_top;

extern unsigned long io_apic_irqs;
# 155 "./arch/x86/include/asm/io_apic.h"
struct irq_cfg;
extern void ioapic_insert_resources(void);
extern int arch_early_ioapic_init(void);

extern int save_ioapic_entries(void);
extern void mask_ioapic_entries(void);
extern int restore_ioapic_entries(void);

extern void setup_ioapic_ids_from_mpc(void);
extern void setup_ioapic_ids_from_mpc_nocheck(void);

extern int mp_find_ioapic(u32 gsi);
extern int mp_find_ioapic_pin(int ioapic, u32 gsi);
extern int mp_map_gsi_to_irq(u32 gsi, unsigned int flags,
        struct irq_alloc_info *info);
extern void mp_unmap_irq(int irq);
extern int mp_register_ioapic(int id, u32 address, u32 gsi_base,
         struct ioapic_domain_cfg *cfg);
extern int mp_unregister_ioapic(u32 gsi_base);
extern int mp_ioapic_registered(u32 gsi_base);

extern void ioapic_set_alloc_attr(struct irq_alloc_info *info,
      int node, int trigger, int polarity);

extern void mp_save_irq(struct mpc_intsrc *m);

extern void disable_ioapic_support(void);

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) io_apic_init_mappings(void);
extern unsigned int native_io_apic_read(unsigned int apic, unsigned int reg);
extern void native_disable_io_apic(void);

static inline __attribute__((no_instrument_function)) unsigned int io_apic_read(unsigned int apic, unsigned int reg)
{
 return x86_io_apic_ops.read(apic, reg);
}

extern void setup_IO_APIC(void);
extern void enable_IO_APIC(void);
extern void disable_IO_APIC(void);
extern void setup_ioapic_dest(void);
extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin);
extern void print_IO_APICs(void);
# 15 "./arch/x86/include/asm/smp.h" 2





extern int smp_num_siblings;
extern unsigned int num_processors;

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_sibling_map;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_core_map;

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_llc_shared_map;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) cpu_llc_id;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;

static inline __attribute__((no_instrument_function)) struct cpumask *cpu_llc_shared_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_llc_shared_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_llc_shared_map)))) *)((&(cpu_llc_shared_map))))); (typeof((typeof(*((&(cpu_llc_shared_map)))) *)((&(cpu_llc_shared_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_cpu_to_apicid; extern __typeof__(u16) *x86_cpu_to_apicid_early_ptr; extern __typeof__(u16) x86_cpu_to_apicid_early_map[];
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];





extern unsigned long stack_start;

struct task_struct;

struct smp_ops {
 void (*smp_prepare_boot_cpu)(void);
 void (*smp_prepare_cpus)(unsigned max_cpus);
 void (*smp_cpus_done)(unsigned max_cpus);

 void (*stop_other_cpus)(int wait);
 void (*smp_send_reschedule)(int cpu);

 int (*cpu_up)(unsigned cpu, struct task_struct *tidle);
 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int cpu);
 void (*play_dead)(void);

 void (*send_call_func_ipi)(const struct cpumask *mask);
 void (*send_call_func_single_ipi)(int cpu);
};


extern void set_cpu_sibling_map(int cpu);


extern struct smp_ops smp_ops;

static inline __attribute__((no_instrument_function)) void smp_send_stop(void)
{
 smp_ops.stop_other_cpus(0);
}

static inline __attribute__((no_instrument_function)) void stop_other_cpus(void)
{
 smp_ops.stop_other_cpus(1);
}

static inline __attribute__((no_instrument_function)) void smp_prepare_boot_cpu(void)
{
 smp_ops.smp_prepare_boot_cpu();
}

static inline __attribute__((no_instrument_function)) void smp_prepare_cpus(unsigned int max_cpus)
{
 smp_ops.smp_prepare_cpus(max_cpus);
}

static inline __attribute__((no_instrument_function)) void smp_cpus_done(unsigned int max_cpus)
{
 smp_ops.smp_cpus_done(max_cpus);
}

static inline __attribute__((no_instrument_function)) int __cpu_up(unsigned int cpu, struct task_struct *tidle)
{
 return smp_ops.cpu_up(cpu, tidle);
}

static inline __attribute__((no_instrument_function)) int __cpu_disable(void)
{
 return smp_ops.cpu_disable();
}

static inline __attribute__((no_instrument_function)) void __cpu_die(unsigned int cpu)
{
 smp_ops.cpu_die(cpu);
}

static inline __attribute__((no_instrument_function)) void play_dead(void)
{
 smp_ops.play_dead();
}

static inline __attribute__((no_instrument_function)) void smp_send_reschedule(int cpu)
{
 smp_ops.smp_send_reschedule(cpu);
}

static inline __attribute__((no_instrument_function)) void arch_send_call_function_single_ipi(int cpu)
{
 smp_ops.send_call_func_single_ipi(cpu);
}

static inline __attribute__((no_instrument_function)) void arch_send_call_function_ipi_mask(const struct cpumask *mask)
{
 smp_ops.send_call_func_ipi(mask);
}

void cpu_disable_common(void);
void native_smp_prepare_boot_cpu(void);
void native_smp_prepare_cpus(unsigned int max_cpus);
void native_smp_cpus_done(unsigned int max_cpus);
void common_cpu_up(unsigned int cpunum, struct task_struct *tidle);
int native_cpu_up(unsigned int cpunum, struct task_struct *tidle);
int native_cpu_disable(void);
int common_cpu_die(unsigned int cpu);
void native_cpu_die(unsigned int cpu);
void native_play_dead(void);
void play_dead_common(void);
void wbinvd_on_cpu(int cpu);
int wbinvd_on_all_cpus(void);

void native_send_call_func_ipi(const struct cpumask *mask);
void native_send_call_func_single_ipi(int cpu);
void x86_idle_thread_init(unsigned int cpu, struct task_struct *idle);

void smp_store_boot_cpu_info(void);
void smp_store_cpu_info(int id);
# 161 "./arch/x86/include/asm/smp.h"
extern unsigned disabled_cpus;
# 196 "./arch/x86/include/asm/smp.h"
extern int hard_smp_processor_id(void);
# 11 "./arch/x86/include/asm/mmzone_64.h" 2

extern struct pglist_data *node_data[];
# 5 "./arch/x86/include/asm/mmzone.h" 2
# 864 "include/linux/mmzone.h" 2



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 899 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((no_instrument_function)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((no_instrument_function)) int zonelist_node_idx(struct zoneref *zoneref)
{


 return zoneref->zone->node;



}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 935 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 956 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1045 "include/linux/mmzone.h"
struct page;
struct page_ext;
struct mem_section {
# 1060 "include/linux/mmzone.h"
 unsigned long section_mem_map;


 unsigned long *pageblock_flags;
# 1076 "include/linux/mmzone.h"
};
# 1089 "include/linux/mmzone.h"
extern struct mem_section *mem_section[((((1UL << (46 - 27))) + ((((1UL) << 12) / sizeof (struct mem_section))) - 1) / ((((1UL) << 12) / sizeof (struct mem_section))))];




static inline __attribute__((no_instrument_function)) struct mem_section *__nr_to_section(unsigned long nr)
{
 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern int __section_nr(struct mem_section* ms);
extern unsigned long usemap_size(void);
# 1114 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<2)-1));
 return (struct page *)map;
}

static inline __attribute__((no_instrument_function)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((no_instrument_function)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((no_instrument_function)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((no_instrument_function)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((no_instrument_function)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(((pfn) >> (27 - 12)));
}


static inline __attribute__((no_instrument_function)) int pfn_valid(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (46 - 27)))
  return 0;
 return valid_section(__nr_to_section(((pfn) >> (27 - 12))));
}


static inline __attribute__((no_instrument_function)) int pfn_present(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (46 - 27)))
  return 0;
 return present_section(__nr_to_section(((pfn) >> (27 - 12))));
}
# 1178 "include/linux/mmzone.h"
void sparse_init(void);
# 1189 "include/linux/mmzone.h"
struct mminit_pfnnid_cache {
 unsigned long last_start;
 unsigned long last_end;
 int last_nid;
};





void memory_present(int nid, unsigned long start, unsigned long end);
unsigned long __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) node_memmap_size_bytes(int, unsigned long, unsigned long);
# 1233 "include/linux/mmzone.h"
static inline __attribute__((no_instrument_function)) bool memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone)
{
 return true;
}
# 6 "include/linux/gfp.h" 2


# 1 "include/linux/topology.h" 1
# 33 "include/linux/topology.h"
# 1 "include/linux/smp.h" 1
# 14 "include/linux/smp.h"
# 1 "include/linux/llist.h" 1
# 61 "include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 76 "include/linux/llist.h"
static inline __attribute__((no_instrument_function)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 158 "include/linux/llist.h"
static inline __attribute__((no_instrument_function)) bool llist_empty(const struct llist_head *head)
{
 return (*({ __attribute__((unused)) typeof(head->first) __var = ( typeof(head->first)) 0; (volatile typeof(head->first) *)&(head->first); })) == ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline __attribute__((no_instrument_function)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}
# 191 "include/linux/llist.h"
static inline __attribute__((no_instrument_function)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ __typeof__ (*((&head->first))) __ret = ((((void *)0))); switch (sizeof(*((&head->first)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 15 "include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
struct call_single_data {
 struct llist_node llist;
 smp_call_func_t func;
 void *info;
 unsigned int flags;
};


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




int on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

int smp_call_function_single_async(int cpu, struct call_single_data *csd);
# 69 "include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




int smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) setup_nr_cpu_ids(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) smp_init(void);
# 192 "include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_enable_nonboot_cpus_begin(void);
extern void arch_enable_nonboot_cpus_end(void);

void smp_setup_processor_id(void);
# 34 "include/linux/topology.h" 2
# 1 "include/linux/percpu.h" 1
# 51 "include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);



extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pcpu_page_first_chunk(size_t reserved_size,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn,
    pcpu_fc_populate_pte_fn_t populate_pte_fn);


extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool is_kernel_percpu_address(unsigned long addr);




extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) percpu_init_late(void);

extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 35 "include/linux/topology.h" 2
# 45 "include/linux/topology.h"
int arch_update_cpu_topology(void);
# 67 "include/linux/topology.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline __attribute__((no_instrument_function)) int numa_node_id(void)
{
 return ({ typeof(numa_node) pscr_ret__; do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: pscr_ret__ = ({ typeof(numa_node) pfo_ret__; switch (sizeof(numa_node)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (numa_node)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(numa_node) pfo_ret__; switch (sizeof(numa_node)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (numa_node)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(numa_node) pfo_ret__; switch (sizeof(numa_node)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (numa_node)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(numa_node) pfo_ret__; switch (sizeof(numa_node)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (numa_node)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (numa_node)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline __attribute__((no_instrument_function)) int cpu_to_node(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(numa_node)))) *)((&(numa_node))))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



static inline __attribute__((no_instrument_function)) void set_numa_node(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: do { typedef typeof((numa_node)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (node); (void)pto_tmp__; } switch (sizeof((numa_node))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "qi" ((pto_T__)(node))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "re" ((pto_T__)(node))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((numa_node)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (node); (void)pto_tmp__; } switch (sizeof((numa_node))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "qi" ((pto_T__)(node))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "re" ((pto_T__)(node))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((numa_node)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (node); (void)pto_tmp__; } switch (sizeof((numa_node))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "qi" ((pto_T__)(node))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "re" ((pto_T__)(node))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((numa_node)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (node); (void)pto_tmp__; } switch (sizeof((numa_node))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "qi" ((pto_T__)(node))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "ri" ((pto_T__)(node))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((numa_node)) : "re" ((pto_T__)(node))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline __attribute__((no_instrument_function)) void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(numa_node)))) *)((&(numa_node))))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })) = node;
}
# 162 "include/linux/topology.h"
static inline __attribute__((no_instrument_function)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((no_instrument_function)) int node_to_mem_node(int node)
{
 return node;
}



static inline __attribute__((no_instrument_function)) int cpu_to_mem(int cpu)
{
 return cpu_to_node(cpu);
}
# 198 "include/linux/topology.h"
static inline __attribute__((no_instrument_function)) const struct cpumask *cpu_smt_mask(int cpu)
{
 return ((*({ do { const void *__vpp_verify = (typeof((&(cpu_sibling_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))); (typeof((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })));
}


static inline __attribute__((no_instrument_function)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return cpumask_of_node(cpu_to_node(cpu));
}
# 9 "include/linux/gfp.h" 2

struct vm_area_struct;
# 266 "include/linux/gfp.h"
static inline __attribute__((no_instrument_function)) int gfpflags_to_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { bool __cond = !(!((1UL << 3) != 0x08u)); extern void __compiletime_assert_269(void) __attribute__((error("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (__cond) __compiletime_assert_269(); do { } while (0); } while (0);
 do { bool __cond = !(!((0x08u >> 3) != MIGRATE_MOVABLE)); extern void __compiletime_assert_270(void) __attribute__((error("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (__cond) __compiletime_assert_270(); do { } while (0); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((no_instrument_function)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400000u));
}
# 376 "include/linux/gfp.h"
static inline __attribute__((no_instrument_function)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 394 "include/linux/gfp.h"
static inline __attribute__((no_instrument_function)) int gfp_zonelist(gfp_t flags)
{

 if (__builtin_expect(!!(flags & (( gfp_t)0x40000u)), 0))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 412 "include/linux/gfp.h"
static inline __attribute__((no_instrument_function)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[nid])->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((no_instrument_function)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((no_instrument_function)) void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
         struct zonelist *zonelist, nodemask_t *nodemask);

static inline __attribute__((no_instrument_function)) struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order,
  struct zonelist *zonelist)
{
 return __alloc_pages_nodemask(gfp_mask, order, zonelist, ((void *)0));
}





static inline __attribute__((no_instrument_function)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 6)))));
 ((void)(sizeof(( long)(!node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));
}






static inline __attribute__((no_instrument_function)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);

static inline __attribute__((no_instrument_function)) struct page *
alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 return alloc_pages_current(gfp_mask, order);
}
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node, bool hugepage);
# 489 "include/linux/gfp.h"
extern struct page *alloc_kmem_pages(gfp_t gfp_mask, unsigned int order);
extern struct page *alloc_kmem_pages_node(int nid, gfp_t gfp_mask,
       unsigned int order);

extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_hot_cold_page(struct page *page, bool cold);
extern void free_hot_cold_page_list(struct list_head *list, bool cold);

struct page_frag_cache;
extern void *__alloc_page_frag(struct page_frag_cache *nc,
          unsigned int fragsz, gfp_t gfp_mask);
extern void __free_page_frag(void *addr);

extern void __free_kmem_pages(struct page *page, unsigned int order);
extern void free_kmem_pages(unsigned long addr, unsigned int order);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 536 "include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
# 15 "include/linux/slab.h" 2
# 117 "include/linux/slab.h"
# 1 "include/linux/kmemleak.h" 1
# 24 "include/linux/kmemleak.h"
# 1 "include/linux/slab.h" 1
# 25 "include/linux/kmemleak.h" 2
# 63 "include/linux/kmemleak.h"
static inline __attribute__((no_instrument_function)) void kmemleak_init(void)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_alloc(const void *ptr, size_t size, int min_count,
      gfp_t gfp)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_alloc_recursive(const void *ptr, size_t size,
         int min_count, unsigned long flags,
         gfp_t gfp)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_alloc_percpu(const void *ptr, size_t size,
      gfp_t gfp)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_free(const void *ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_free_part(const void *ptr, size_t size)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_free_recursive(const void *ptr, unsigned long flags)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_free_percpu(const void *ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_update_trace(const void *ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_not_leak(const void *ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_ignore(const void *ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_erase(void **ptr)
{
}
static inline __attribute__((no_instrument_function)) void kmemleak_no_scan(const void *ptr)
{
}
# 118 "include/linux/slab.h" 2
# 1 "include/linux/kasan.h" 1



# 1 "include/linux/sched.h" 1



# 1 "include/uapi/linux/sched.h" 1
# 5 "include/linux/sched.h" 2

# 1 "include/linux/sched/prio.h" 1
# 47 "include/linux/sched/prio.h"
static inline __attribute__((no_instrument_function)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((no_instrument_function)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 7 "include/linux/sched.h" 2


struct sched_param {
 int sched_priority;
};

# 1 "./arch/x86/include/uapi/asm/param.h" 1
# 14 "include/linux/sched.h" 2

# 1 "include/linux/capability.h" 1
# 15 "include/linux/capability.h"
# 1 "include/uapi/linux/capability.h" 1
# 18 "include/uapi/linux/capability.h"
struct task_struct;
# 40 "include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 69 "include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};
# 16 "include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
};





struct file;
struct inode;
struct dentry;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 115 "include/linux/capability.h"
static inline __attribute__((no_instrument_function)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((no_instrument_function)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 163 "include/linux/capability.h"
static inline __attribute__((no_instrument_function)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((no_instrument_function)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((no_instrument_function)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
# 237 "include/linux/capability.h"
extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);


extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);
# 16 "include/linux/sched.h" 2





# 1 "include/linux/plist.h" 1
# 81 "include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 123 "include/linux/plist.h"
static inline __attribute__((no_instrument_function)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((no_instrument_function)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 212 "include/linux/plist.h"
static inline __attribute__((no_instrument_function)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((no_instrument_function)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 282 "include/linux/plist.h"
static inline __attribute__((no_instrument_function)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ const typeof( ((struct plist_node *)0)->node_list ) *__mptr = (head->node_list.next); (struct plist_node *)( (char *)__mptr - __builtin_offsetof(struct plist_node, node_list) );})
                                  ;
}







static inline __attribute__((no_instrument_function)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ const typeof( ((struct plist_node *)0)->node_list ) *__mptr = (head->node_list.prev); (struct plist_node *)( (char *)__mptr - __builtin_offsetof(struct plist_node, node_list) );})
                                  ;
}
# 22 "include/linux/sched.h" 2
# 32 "include/linux/sched.h"
# 1 "include/linux/cputime.h" 1



# 1 "arch/x86/include/generated/asm/cputime.h" 1
# 1 "include/asm-generic/cputime.h" 1







# 1 "include/asm-generic/cputime_jiffies.h" 1



typedef unsigned long cputime_t;
# 13 "include/asm-generic/cputime_jiffies.h"
typedef u64 cputime64_t;
# 9 "include/asm-generic/cputime.h" 2
# 1 "arch/x86/include/generated/asm/cputime.h" 2
# 5 "include/linux/cputime.h" 2
# 33 "include/linux/sched.h" 2


# 1 "include/linux/sem.h" 1






# 1 "include/uapi/linux/sem.h" 1



# 1 "include/linux/ipc.h" 1




# 1 "include/linux/uidgid.h" 1
# 15 "include/linux/uidgid.h"
# 1 "include/linux/highuid.h" 1
# 34 "include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 81 "include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 16 "include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((no_instrument_function)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((no_instrument_function)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 60 "include/linux/uidgid.h"
static inline __attribute__((no_instrument_function)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((no_instrument_function)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((no_instrument_function)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((no_instrument_function)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((no_instrument_function)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((no_instrument_function)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((no_instrument_function)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((no_instrument_function)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((no_instrument_function)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((no_instrument_function)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((no_instrument_function)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((no_instrument_function)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}
# 142 "include/linux/uidgid.h"
static inline __attribute__((no_instrument_function)) kuid_t make_kuid(struct user_namespace *from, uid_t uid)
{
 return (kuid_t){ uid };
}

static inline __attribute__((no_instrument_function)) kgid_t make_kgid(struct user_namespace *from, gid_t gid)
{
 return (kgid_t){ gid };
}

static inline __attribute__((no_instrument_function)) uid_t from_kuid(struct user_namespace *to, kuid_t kuid)
{
 return __kuid_val(kuid);
}

static inline __attribute__((no_instrument_function)) gid_t from_kgid(struct user_namespace *to, kgid_t kgid)
{
 return __kgid_val(kgid);
}

static inline __attribute__((no_instrument_function)) uid_t from_kuid_munged(struct user_namespace *to, kuid_t kuid)
{
 uid_t uid = from_kuid(to, kuid);
 if (uid == (uid_t)-1)
  uid = overflowuid;
 return uid;
}

static inline __attribute__((no_instrument_function)) gid_t from_kgid_munged(struct user_namespace *to, kgid_t kgid)
{
 gid_t gid = from_kgid(to, kgid);
 if (gid == (gid_t)-1)
  gid = overflowgid;
 return gid;
}

static inline __attribute__((no_instrument_function)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return true;
}

static inline __attribute__((no_instrument_function)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return true;
}
# 6 "include/linux/ipc.h" 2
# 1 "include/uapi/linux/ipc.h" 1
# 9 "include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/x86/include/uapi/asm/ipcbuf.h" 1
# 1 "./include/uapi/asm-generic/ipcbuf.h" 1
# 19 "./include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 1 "./arch/x86/include/uapi/asm/ipcbuf.h" 2
# 22 "include/uapi/linux/ipc.h" 2
# 57 "include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 7 "include/linux/ipc.h" 2




struct kern_ipc_perm
{
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;
};
# 5 "include/uapi/linux/sem.h" 2
# 23 "include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/x86/include/uapi/asm/sembuf.h" 1
# 13 "./arch/x86/include/uapi/asm/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_ulong_t __unused1;
 __kernel_time_t sem_ctime;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t sem_nsems;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 36 "include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 8 "include/linux/sem.h" 2

struct task_struct;


struct sem_array {
 struct kern_ipc_perm __attribute__((__aligned__((1 << (6)))))
    sem_perm;
 time_t sem_ctime;
 struct sem *sem_base;
 struct list_head pending_alter;

 struct list_head pending_const;

 struct list_head list_id;
 int sem_nsems;
 int complex_count;
};



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 36 "include/linux/sched.h" 2
# 1 "include/linux/shm.h" 1





# 1 "include/uapi/linux/shm.h" 1
# 26 "include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/x86/include/uapi/asm/shmbuf.h" 1
# 1 "./include/uapi/asm-generic/shmbuf.h" 1
# 25 "./include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;
 __kernel_time_t shm_atime;



 __kernel_time_t shm_dtime;



 __kernel_time_t shm_ctime;



 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 __kernel_ulong_t shm_nattch;
 __kernel_ulong_t __unused4;
 __kernel_ulong_t __unused5;
};

struct shminfo64 {
 __kernel_ulong_t shmmax;
 __kernel_ulong_t shmmin;
 __kernel_ulong_t shmmni;
 __kernel_ulong_t shmseg;
 __kernel_ulong_t shmall;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 1 "./arch/x86/include/uapi/asm/shmbuf.h" 2
# 42 "include/uapi/linux/shm.h" 2
# 62 "include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 7 "include/linux/shm.h" 2
# 1 "./arch/x86/include/asm/shmparam.h" 1
# 8 "include/linux/shm.h" 2

struct shmid_kernel
{
 struct kern_ipc_perm shm_perm;
 struct file *shm_file;
 unsigned long shm_nattch;
 unsigned long shm_segsz;
 time_t shm_atim;
 time_t shm_dtim;
 time_t shm_ctim;
 pid_t shm_cprid;
 pid_t shm_lprid;
 struct user_struct *mlock_user;


 struct task_struct *shm_creator;
 struct list_head shm_clist;
};
# 49 "include/linux/shm.h"
struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 37 "include/linux/sched.h" 2
# 1 "include/linux/signal.h" 1





# 1 "include/uapi/linux/signal.h" 1



# 1 "./arch/x86/include/asm/signal.h" 1
# 20 "./arch/x86/include/asm/signal.h"
typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;






# 1 "./arch/x86/include/uapi/asm/signal.h" 1
# 10 "./arch/x86/include/uapi/asm/signal.h"
struct siginfo;
# 93 "./arch/x86/include/uapi/asm/signal.h"
# 1 "./include/uapi/asm-generic/signal-defs.h" 1
# 17 "./include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 94 "./arch/x86/include/uapi/asm/signal.h" 2
# 127 "./arch/x86/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 32 "./arch/x86/include/asm/signal.h" 2

extern void do_signal(struct pt_regs *regs);
# 5 "include/uapi/linux/signal.h" 2
# 1 "./arch/x86/include/uapi/asm/siginfo.h" 1
# 14 "./arch/x86/include/uapi/asm/siginfo.h"
# 1 "include/asm-generic/siginfo.h" 1



# 1 "include/uapi/asm-generic/siginfo.h" 1






typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 48 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
  } _kill;


  struct {
   __kernel_timer_t _tid;
   int _overrun;
   char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
   sigval_t _sigval;
   int _sys_private;
  } _timer;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   sigval_t _sigval;
  } _rt;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   int _status;
   __kernel_clock_t _utime;
   __kernel_clock_t _stime;
  } _sigchld;


  struct {
   void *_addr;



   short _addr_lsb;
   union {

    struct {
     void *_lower;
     void *_upper;
    } _addr_bnd;

    __u32 _pkey;
   };
  } _sigfault;


  struct {
   long _band;
   int _fd;
  } _sigpoll;


  struct {
   void *_call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} siginfo_t;
# 292 "include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 5 "include/asm-generic/siginfo.h" 2
# 17 "include/asm-generic/siginfo.h"
struct siginfo;
void do_schedule_next_timer(struct siginfo *info);

extern int copy_siginfo_to_user(struct siginfo *to, const struct siginfo *from);
# 15 "./arch/x86/include/uapi/asm/siginfo.h" 2
# 6 "include/uapi/linux/signal.h" 2
# 7 "include/linux/signal.h" 2

struct task_struct;


extern int print_fatal_signals;




struct sigqueue {
 struct list_head list;
 int flags;
 siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};





static inline __attribute__((no_instrument_function)) void copy_siginfo(struct siginfo *to, struct siginfo *from)
{
 if (from->si_code < 0)
  memcpy(to, from, sizeof(*to));
 else

  memcpy(to, from, (4 * sizeof(int)) + sizeof(from->_sifields._sigchld));
}
# 55 "include/linux/signal.h"
static inline __attribute__((no_instrument_function)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline __attribute__((no_instrument_function)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline __attribute__((no_instrument_function)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}



static inline __attribute__((no_instrument_function)) int sigisemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { bool __cond = !(!(1)); extern void __compiletime_assert_95(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_95(); do { } while (0); } while (0);
  return 0;
 }
}
# 129 "include/linux/signal.h"
static inline __attribute__((no_instrument_function)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { bool __cond = !(!(1)); extern void __compiletime_assert_129(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_129(); do { } while (0); } while (0); } }


static inline __attribute__((no_instrument_function)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { bool __cond = !(!(1)); extern void __compiletime_assert_132(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_132(); do { } while (0); } while (0); } }


static inline __attribute__((no_instrument_function)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { bool __cond = !(!(1)); extern void __compiletime_assert_135(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_135(); do { } while (0); } while (0); } }
# 157 "include/linux/signal.h"
static inline __attribute__((no_instrument_function)) void signotset(sigset_t *set) { switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); case 2: set->sig[1] = (~(set->sig[1])); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { bool __cond = !(!(1)); extern void __compiletime_assert_157(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_157(); do { } while (0); } while (0); } }




static inline __attribute__((no_instrument_function)) void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((no_instrument_function)) void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((no_instrument_function)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((no_instrument_function)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((no_instrument_function)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((no_instrument_function)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
 case 1: ;
 }
}

static inline __attribute__((no_instrument_function)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
 case 1: ;
 }
}



static inline __attribute__((no_instrument_function)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((no_instrument_function)) int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct siginfo *info,
    struct task_struct *p, bool group);
extern int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p);
extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);
extern int do_sigtimedwait(const sigset_t *, siginfo_t *,
    const struct timespec *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 288 "include/linux/signal.h"
struct ksignal {
 struct k_sigaction ka;
 siginfo_t info;
 int sig;
};

extern int get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);

static inline __attribute__((no_instrument_function)) void allow_signal(int sig)
{





 kernel_sigaction(sig, ( __sighandler_t)2);
}

static inline __attribute__((no_instrument_function)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

int unhandled_signal(struct task_struct *tsk, int sig);
# 439 "include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 455 "include/linux/signal.h"
struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 38 "include/linux/sched.h" 2


# 1 "include/linux/pid.h" 1





enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX
};
# 50 "include/linux/pid.h"
struct upid {

 int nr;
 struct pid_namespace *ns;
 struct hlist_node pid_chain;
};

struct pid
{
 atomic_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

struct pid_link
{
 struct hlist_node node;
 struct pid *pid;
};

static inline __attribute__((no_instrument_function)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  atomic_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 110 "include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
int next_pidmap(struct pid_namespace *pid_ns, unsigned int last);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 134 "include/linux/pid.h"
static inline __attribute__((no_instrument_function)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((no_instrument_function)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 164 "include/linux/pid.h"
static inline __attribute__((no_instrument_function)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 41 "include/linux/sched.h" 2


# 1 "include/linux/seccomp.h" 1



# 1 "include/uapi/linux/seccomp.h" 1
# 47 "include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};
# 5 "include/linux/seccomp.h" 2






# 1 "./arch/x86/include/asm/seccomp.h" 1



# 1 "./arch/x86/include/asm/unistd.h" 1



# 1 "./arch/x86/include/uapi/asm/unistd.h" 1
# 5 "./arch/x86/include/asm/unistd.h" 2
# 23 "./arch/x86/include/asm/unistd.h"
# 1 "arch/x86/include/generated/uapi/asm/unistd_64.h" 1
# 24 "./arch/x86/include/asm/unistd.h" 2
# 1 "arch/x86/include/generated/asm/unistd_64_x32.h" 1
# 25 "./arch/x86/include/asm/unistd.h" 2
# 5 "./arch/x86/include/asm/seccomp.h" 2






# 1 "./arch/x86/include/asm/ia32_unistd.h" 1
# 9 "./arch/x86/include/asm/ia32_unistd.h"
# 1 "arch/x86/include/generated/asm/unistd_32_ia32.h" 1
# 10 "./arch/x86/include/asm/ia32_unistd.h" 2
# 12 "./arch/x86/include/asm/seccomp.h" 2






# 1 "include/asm-generic/seccomp.h" 1
# 14 "include/asm-generic/seccomp.h"
# 1 "./include/uapi/linux/unistd.h" 1
# 15 "include/asm-generic/seccomp.h" 2
# 34 "include/asm-generic/seccomp.h"
static inline __attribute__((no_instrument_function)) const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 119,
  0,
 };
 return mode1_syscalls_32;
}
# 19 "./arch/x86/include/asm/seccomp.h" 2
# 12 "include/linux/seccomp.h" 2

struct seccomp_filter;
# 25 "include/linux/seccomp.h"
struct seccomp {
 int mode;
 struct seccomp_filter *filter;
};


extern int __secure_computing(void);
static inline __attribute__((no_instrument_function)) int secure_computing(void)
{
 if (__builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 8)), 0))
  return __secure_computing();
 return 0;
}




extern u32 seccomp_phase1(struct seccomp_data *sd);
int seccomp_phase2(u32 phase1_result);




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, char *);

static inline __attribute__((no_instrument_function)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 86 "include/linux/seccomp.h"
extern void put_seccomp_filter(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 103 "include/linux/seccomp.h"
static inline __attribute__((no_instrument_function)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
# 44 "include/linux/sched.h" 2

# 1 "include/linux/rculist.h" 1
# 30 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 ({ union { typeof(list->prev) __val; char __c[1]; } __u = { .__val = ( typeof(list->prev)) (list) }; __write_once_size(&(list->prev), __u.__c, sizeof(list->prev)); __u.__val; });
}
# 49 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 new->next = next;
 new->prev = prev;
 do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_54(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_54(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*(new)) *)(new)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0);
 next->prev = new;
}
# 78 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 99 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 129 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 155 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = ((void *)0);
 }
}
# 171 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long))); extern void __compiletime_assert_176(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_176(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(new->prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(new->prev)->next))))) ((typeof(*(new)) *)(new)) }; __write_once_size(&(*&(*((struct list_head **)(&(new->prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(new->prev)->next))))); __u.__val; }); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 200 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 223 "include/linux/rculist.h"
 sync();
# 233 "include/linux/rculist.h"
 last->next = next;
 do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_234(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_234(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*(first)) *)(first)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 246 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 261 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 426 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 439 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 new->pprev = old->pprev;
 do { do { bool __cond = !((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long))); extern void __compiletime_assert_446(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_446(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*(struct hlist_node **)new->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*(struct hlist_node **)new->pprev)) ((typeof(*(new)) *)(new)) }; __write_once_size(&(*&*(struct hlist_node **)new->pprev), __u.__c, sizeof(*&*(struct hlist_node **)new->pprev)); __u.__val; }); } while (0);
 if (next)
  new->next->pprev = &new->next;
 old->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 478 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long))); extern void __compiletime_assert_485(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_485(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(h)->first)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(h)->first))))) ((typeof(*(n)) *)(n)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(h)->first)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(h)->first))))); __u.__val; }); } while (0);
 if (first)
  first->pprev = &n->next;
}
# 509 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);

 for (i = (*((struct hlist_node **)(&(h)->first))); i; i = (*((struct hlist_node **)(&(i)->next))))
  last = i;

 if (last) {
  n->next = last->next;
  n->pprev = &last->next;
  do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long))); extern void __compiletime_assert_520(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_520(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(last)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(last)->next))))) ((typeof(*(n)) *)(n)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(last)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(last)->next))))); __u.__val; }); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 544 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long))); extern void __compiletime_assert_549(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_549(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)((n)->pprev)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)((n)->pprev))))) ((typeof(*(n)) *)(n)) }; __write_once_size(&(*&(*((struct hlist_node **)((n)->pprev)))), __u.__c, sizeof(*&(*((struct hlist_node **)((n)->pprev))))); __u.__val; }); } while (0);
 next->pprev = &n->next;
}
# 571 "include/linux/rculist.h"
static inline __attribute__((no_instrument_function)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_576(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_576(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(prev)->next))))) ((typeof(*(n)) *)(n)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(prev)->next))))); __u.__val; }); } while (0);
 if (n->next)
  n->next->pprev = &n->next;
}
# 46 "include/linux/sched.h" 2
# 1 "include/linux/rtmutex.h" 1
# 19 "include/linux/rtmutex.h"
extern int max_lock_depth;
# 29 "include/linux/rtmutex.h"
struct rt_mutex {
 raw_spinlock_t wait_lock;
 struct rb_root waiters;
 struct rb_node *waiters_leftmost;
 struct task_struct *owner;






};

struct rt_mutex_waiter;
struct hrtimer_sleeper;






 static inline __attribute__((no_instrument_function)) int rt_mutex_debug_check_no_locks_freed(const void *from,
             unsigned long len)
 {
 return 0;
 }
# 84 "include/linux/rtmutex.h"
static inline __attribute__((no_instrument_function)) int rt_mutex_is_locked(struct rt_mutex *lock)
{
 return lock->owner != ((void *)0);
}

extern void __rt_mutex_init(struct rt_mutex *lock, const char *name);
extern void rt_mutex_destroy(struct rt_mutex *lock);

extern void rt_mutex_lock(struct rt_mutex *lock);
extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_timed_lock(struct rt_mutex *lock,
          struct hrtimer_sleeper *timeout);

extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 47 "include/linux/sched.h" 2



# 1 "include/linux/resource.h" 1



# 1 "include/uapi/linux/resource.h" 1
# 23 "include/uapi/linux/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 77 "include/uapi/linux/resource.h"
# 1 "./arch/x86/include/uapi/asm/resource.h" 1
# 1 "include/asm-generic/resource.h" 1



# 1 "include/uapi/asm-generic/resource.h" 1
# 5 "include/asm-generic/resource.h" 2
# 1 "./arch/x86/include/uapi/asm/resource.h" 2
# 78 "include/uapi/linux/resource.h" 2
# 5 "include/linux/resource.h" 2


struct task_struct;

int getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 51 "include/linux/sched.h" 2

# 1 "include/linux/hrtimer.h" 1
# 25 "include/linux/hrtimer.h"
# 1 "include/linux/timerqueue.h" 1







struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root head;
 struct timerqueue_node *next;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 34 "include/linux/timerqueue.h"
static inline __attribute__((no_instrument_function))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 return head->next;
}

static inline __attribute__((no_instrument_function)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((no_instrument_function)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->head = (struct rb_root) { ((void *)0), };
 head->next = ((void *)0);
}
# 26 "include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;




enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x0,
 HRTIMER_MODE_REL = 0x1,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_ABS_PINNED = 0x02,
 HRTIMER_MODE_REL_PINNED = 0x03,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 100 "include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;

 int start_pid;
 void *start_site;
 char start_comm[16];

};
# 121 "include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 142 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 int index;
 clockid_t clockid;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__(64)));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_MAX_CLOCK_BASES,
};
# 186 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 seqcount_t seq;
 struct hrtimer *running;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 bool migration_enabled;
 bool nohz_active;

 unsigned int in_hrtirq : 1,
     hres_active : 1,
     hang_detected : 1;
 ktime_t expires_next;
 struct hrtimer *next_timer;
 unsigned int nr_events;
 unsigned int nr_retries;
 unsigned int nr_hangs;
 unsigned int max_hang_time;

 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((no_instrument_function)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 do { bool __cond = !(!(sizeof(struct hrtimer_clock_base) > 64)); extern void __compiletime_assert_211(void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct hrtimer_clock_base) > HRTIMER_CLOCK_BASE_ALIGN"))); if (__cond) __compiletime_assert_211(); do { } while (0); } while (0);

 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((no_instrument_function)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((no_instrument_function)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((no_instrument_function)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires.tv64 = tv64;
 timer->_softexpires.tv64 = tv64;
}

static inline __attribute__((no_instrument_function)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((no_instrument_function)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ({ (ktime_t){ .tv64 = (timer->node.expires).tv64 + (ns) }; });
 timer->_softexpires = ({ (ktime_t){ .tv64 = (timer->_softexpires).tv64 + (ns) }; });
}

static inline __attribute__((no_instrument_function)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((no_instrument_function)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((no_instrument_function)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires.tv64;
}
static inline __attribute__((no_instrument_function)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires.tv64;
}

static inline __attribute__((no_instrument_function)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ((timer->node.expires).tv64);
}

static inline __attribute__((no_instrument_function)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ({ (ktime_t){ .tv64 = (timer->node.expires).tv64 - (timer->base->get_time()).tv64 }; });
}

static inline __attribute__((no_instrument_function)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

static inline __attribute__((no_instrument_function)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return timer->base->cpu_base->hres_active;
}

extern void hrtimer_peek_ahead_timers(void);
# 304 "include/linux/hrtimer.h"
extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 326 "include/linux/hrtimer.h"
static inline __attribute__((no_instrument_function)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ({ (ktime_t){ .tv64 = (timer->node.expires).tv64 - (now).tv64 }; });





 if ((0 || 0) && timer->is_rel)
  rem.tv64 -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((no_instrument_function)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);







static inline __attribute__((no_instrument_function)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}
static inline __attribute__((no_instrument_function)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 390 "include/linux/hrtimer.h"
static inline __attribute__((no_instrument_function)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((no_instrument_function)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ((({ (ktime_t){ .tv64 = (hard).tv64 - (soft).tv64 }; })).tv64);
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

static inline __attribute__((no_instrument_function)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);

static inline __attribute__((no_instrument_function)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);

extern bool hrtimer_active(const struct hrtimer *timer);




static inline __attribute__((no_instrument_function)) int hrtimer_is_queued(struct hrtimer *timer)
{
 return timer->state & 0x01;
}





static inline __attribute__((no_instrument_function)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->cpu_base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 464 "include/linux/hrtimer.h"
static inline __attribute__((no_instrument_function)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}


extern long hrtimer_nanosleep(struct timespec *rqtp,
         struct timespec *rmtp,
         const enum hrtimer_mode mode,
         const clockid_t clockid);
extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
      const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       int clock);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) hrtimers_init(void);


extern void sysrq_timer_list_show(void);
# 53 "include/linux/sched.h" 2
# 1 "include/linux/kcov.h" 1



# 1 "include/uapi/linux/kcov.h" 1
# 5 "include/linux/kcov.h" 2

struct task_struct;
# 25 "include/linux/kcov.h"
static inline __attribute__((no_instrument_function)) void kcov_task_init(struct task_struct *t) {}
static inline __attribute__((no_instrument_function)) void kcov_task_exit(struct task_struct *t) {}
# 54 "include/linux/sched.h" 2
# 1 "include/linux/task_io_accounting.h" 1
# 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 43 "include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 55 "include/linux/sched.h" 2
# 1 "include/linux/latencytop.h" 1
# 13 "include/linux/latencytop.h"
struct task_struct;
# 45 "include/linux/latencytop.h"
static inline __attribute__((no_instrument_function)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((no_instrument_function)) void clear_all_latency_tracing(struct task_struct *p)
{
}
# 56 "include/linux/sched.h" 2
# 1 "include/linux/cred.h" 1
# 17 "include/linux/cred.h"
# 1 "include/linux/key.h" 1
# 25 "include/linux/key.h"
# 1 "include/linux/assoc_array.h" 1
# 26 "include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((no_instrument_function)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 26 "include/linux/key.h" 2





typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
# 76 "include/linux/key.h"
struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct keyring_list;
struct keyring_name;

struct keyring_index_key {
 struct key_type *type;
 const char *description;
 size_t desc_len;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 111 "include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((no_instrument_function)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((no_instrument_function)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((no_instrument_function)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}
# 137 "include/linux/key.h"
struct key {
 atomic_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time_t expiry;
  time_t revoked_at;
 };
 time_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;
# 167 "include/linux/key.h"
 unsigned long flags;
# 185 "include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   struct key_type *type;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
  int reject_error;
 };
# 217 "include/linux/key.h"
 int (*restrict_link)(struct key *keyring,
        const struct key_type *type,
        const union key_payload *payload);
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        int (*restrict_link)(struct key *,
        const struct key_type *,
        const union key_payload *));
# 239 "include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);

static inline __attribute__((no_instrument_function)) struct key *__key_get(struct key *key)
{
 atomic_inc(&key->usage);
 return key;
}

static inline __attribute__((no_instrument_function)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((no_instrument_function)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         const void *callout_info,
         size_t callout_len,
         void *aux);

extern struct key *request_key_async(struct key_type *type,
         const char *description,
         const void *callout_info,
         size_t callout_len);

extern struct key *request_key_async_with_auxdata(struct key_type *type,
        const char *description,
        const void *callout_info,
        size_t callout_len,
        void *aux);

extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     int (*restrict_link)(struct key *,
            const struct key_type *,
            const union key_payload *),
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((no_instrument_function)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);
# 351 "include/linux/key.h"
static inline __attribute__((no_instrument_function)) bool key_is_instantiated(const struct key *key)
{
 return (__builtin_constant_p((0)) ? constant_test_bit((0), (&key->flags)) : variable_test_bit((0), (&key->flags))) &&
  !(__builtin_constant_p((5)) ? constant_test_bit((5), (&key->flags)) : variable_test_bit((5), (&key->flags)));
}
# 367 "include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct task_struct *tsk);
extern void key_fsgid_changed(struct task_struct *tsk);
extern void key_init(void);
# 18 "include/linux/cred.h" 2
# 1 "include/linux/selinux.h" 1
# 17 "include/linux/selinux.h"
struct selinux_audit_rule;
struct audit_context;
struct kern_ipc_perm;






bool selinux_is_enabled(void);
# 19 "include/linux/cred.h" 2



struct user_struct;
struct cred;
struct inode;







struct group_info {
 atomic_t usage;
 int ngroups;
 int nblocks;
 kgid_t small_block[32];
 kgid_t *blocks[0];
};
# 49 "include/linux/cred.h"
static inline __attribute__((no_instrument_function)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 65 "include/linux/cred.h"
extern struct group_info init_groups;

extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
# 86 "include/linux/cred.h"
extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern int groups_search(const struct group_info *, kgid_t);
extern bool may_setgroups(void);
# 118 "include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;
 struct callback_head rcu;
};

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) cred_init(void);
# 205 "include/linux/cred.h"
static inline __attribute__((no_instrument_function)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((no_instrument_function)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((no_instrument_function)) void validate_process_creds(void)
{
}


static inline __attribute__((no_instrument_function)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 230 "include/linux/cred.h"
static inline __attribute__((no_instrument_function)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 249 "include/linux/cred.h"
static inline __attribute__((no_instrument_function)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 validate_creds(cred);
 return get_new_cred(nonconst_cred);
}
# 267 "include/linux/cred.h"
static inline __attribute__((no_instrument_function)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 validate_creds(cred);
 if (atomic_dec_and_test(&(cred)->usage))
  __put_cred(cred);
}
# 376 "include/linux/cred.h"
extern struct user_namespace init_user_ns;



static inline __attribute__((no_instrument_function)) struct user_namespace *current_user_ns(void)
{
 return &init_user_ns;
}
# 57 "include/linux/sched.h" 2



# 1 "./include/uapi/linux/magic.h" 1
# 61 "include/linux/sched.h" 2
# 1 "include/linux/cgroup-defs.h" 1
# 10 "include/linux/cgroup-defs.h"
# 1 "./include/uapi/linux/limits.h" 1
# 11 "include/linux/cgroup-defs.h" 2

# 1 "include/linux/idr.h" 1
# 30 "include/linux/idr.h"
struct idr_layer {
 int prefix;
 int layer;
 struct idr_layer *ary[1<<8];
 int count;
 union {

  unsigned long bitmap[((((1 << 8)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
  struct callback_head callback_head;
 };
};

struct idr {
 struct idr_layer *hint;
 struct idr_layer *top;
 int layers;
 int cur;
 spinlock_t lock;
 int id_free_cnt;
 struct idr_layer *id_free;
};
# 79 "include/linux/idr.h"
void *idr_find_slowpath(struct idr *idp, int id);
void idr_preload(gfp_t gfp_mask);
int idr_alloc(struct idr *idp, void *ptr, int start, int end, gfp_t gfp_mask);
int idr_alloc_cyclic(struct idr *idr, void *ptr, int start, int end, gfp_t gfp_mask);
int idr_for_each(struct idr *idp,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *idp, int *nextid);
void *idr_replace(struct idr *idp, void *ptr, int id);
void idr_remove(struct idr *idp, int id);
void idr_destroy(struct idr *idp);
void idr_init(struct idr *idp);
bool idr_is_empty(struct idr *idp);







static inline __attribute__((no_instrument_function)) void idr_preload_end(void)
{
 __asm__ __volatile__("": : :"memory");
}
# 115 "include/linux/idr.h"
static inline __attribute__((no_instrument_function)) void *idr_find(struct idr *idr, int id)
{
 struct idr_layer *hint = ({ typeof(*(idr->hint)) *________p1 = (typeof(*(idr->hint)) *)({ typeof((idr->hint)) _________p1 = ({ union { typeof((idr->hint)) __val; char __c[1]; } __u; if (1) __read_once_size(&((idr->hint)), __u.__c, sizeof((idr->hint))); else __read_once_size_nocheck(&((idr->hint)), __u.__c, sizeof((idr->hint))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(idr->hint)) *)(________p1)); });

 if (hint && (id & ~((1 << 8)-1)) == hint->prefix)
  return ({ typeof(*(hint->ary[id & ((1 << 8)-1)])) *________p1 = (typeof(*(hint->ary[id & ((1 << 8)-1)])) *)({ typeof((hint->ary[id & ((1 << 8)-1)])) _________p1 = ({ union { typeof((hint->ary[id & ((1 << 8)-1)])) __val; char __c[1]; } __u; if (1) __read_once_size(&((hint->ary[id & ((1 << 8)-1)])), __u.__c, sizeof((hint->ary[id & ((1 << 8)-1)]))); else __read_once_size_nocheck(&((hint->ary[id & ((1 << 8)-1)])), __u.__c, sizeof((hint->ary[id & ((1 << 8)-1)]))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(hint->ary[id & ((1 << 8)-1)])) *)(________p1)); });

 return idr_find_slowpath(idr, id);
}
# 163 "include/linux/idr.h"
struct ida_bitmap {
 long nr_busy;
 unsigned long bitmap[(128 / sizeof(long) - 1)];
};

struct ida {
 struct idr idr;
 struct ida_bitmap *free_bitmap;
};




int ida_pre_get(struct ida *ida, gfp_t gfp_mask);
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id);
void ida_remove(struct ida *ida, int id);
void ida_destroy(struct ida *ida);
void ida_init(struct ida *ida);

int ida_simple_get(struct ida *ida, unsigned int start, unsigned int end,
     gfp_t gfp_mask);
void ida_simple_remove(struct ida *ida, unsigned int id);
# 193 "include/linux/idr.h"
static inline __attribute__((no_instrument_function)) int ida_get_new(struct ida *ida, int *p_id)
{
 return ida_get_new_above(ida, 0, p_id);
}

void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) idr_init_cache(void);
# 13 "include/linux/cgroup-defs.h" 2



# 1 "include/linux/percpu-refcount.h" 1
# 54 "include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {






 PERCPU_REF_INIT_ATOMIC = 1 << 0,





 PERCPU_REF_INIT_DEAD = 1 << 1,
};

struct percpu_ref {
 atomic_long_t count;




 unsigned long percpu_count_ptr;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 struct callback_head rcu;
};

int __attribute__((warn_unused_result)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_reinit(struct percpu_ref *ref);
# 117 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((no_instrument_function)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 146 "include/linux/percpu-refcount.h"
 percpu_ptr = ({ typeof(ref->percpu_count_ptr) _________p1 = ({ union { typeof(ref->percpu_count_ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); else __read_once_size_nocheck(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); __u.__val; }); do { } while (0); (_________p1); });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 170 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(nr))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(nr))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(nr))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(nr))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(nr))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(nr))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(nr))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(nr))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(nr))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->count);

 rcu_read_unlock_sched();
}
# 192 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 206 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 int ret;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic64_add_unless(((atomic64_t *)(&ref->count)), 1, 0);
 }

 rcu_read_unlock_sched();

 return ret;
}
# 240 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 int ret = false;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic64_add_unless(((atomic64_t *)(&ref->count)), 1, 0);
 }

 rcu_read_unlock_sched();

 return ret;
}
# 269 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*percpu_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } switch (sizeof((*percpu_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "qi" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "ri" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*percpu_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*percpu_count)) : "re" ((pao_T__)(-(typeof(*percpu_count))(nr)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->count)), 0))
  ref->release(ref);

 rcu_read_unlock_sched();
}
# 292 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 306 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 319 "include/linux/percpu-refcount.h"
static inline __attribute__((no_instrument_function)) bool percpu_ref_is_zero(struct percpu_ref *ref)
{
 unsigned long *percpu_count;

 if (__ref_is_percpu(ref, &percpu_count))
  return false;
 return !atomic_long_read(&ref->count);
}
# 17 "include/linux/cgroup-defs.h" 2
# 1 "include/linux/percpu-rwsem.h" 1







# 1 "include/linux/rcu_sync.h" 1
# 29 "include/linux/rcu_sync.h"
enum rcu_sync_type { RCU_SYNC, RCU_SCHED_SYNC, RCU_BH_SYNC };


struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 int cb_state;
 struct callback_head cb_head;

 enum rcu_sync_type gp_type;
};

extern void rcu_sync_lockdep_assert(struct rcu_sync *);
# 53 "include/linux/rcu_sync.h"
static inline __attribute__((no_instrument_function)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{



 return !rsp->gp_state;
}

extern void rcu_sync_init(struct rcu_sync *, enum rcu_sync_type);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 9 "include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *fast_read_ctr;
 struct rw_semaphore rw_sem;
 atomic_t slow_read_ctr;
 wait_queue_head_t write_waitq;
};

extern void percpu_down_read(struct percpu_rw_semaphore *);
extern int percpu_down_read_trylock(struct percpu_rw_semaphore *);
extern void percpu_up_read(struct percpu_rw_semaphore *);

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);
extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 39 "include/linux/percpu-rwsem.h"
static inline __attribute__((no_instrument_function)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  sem->rw_sem.owner = ((void *)0);

}

static inline __attribute__((no_instrument_function)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}
# 18 "include/linux/cgroup-defs.h" 2




struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;







enum cgroup_subsys_id {
# 1 "include/linux/cgroup_subsys.h" 1
# 12 "include/linux/cgroup_subsys.h"
cpuset_cgrp_id,



cpu_cgrp_id,



cpuacct_cgrp_id,
# 36 "include/linux/cgroup_subsys.h"
freezer_cgrp_id,
# 39 "include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
};
# 98 "include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct cgroup_subsys_state *parent;


 struct list_head sibling;
 struct list_head children;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct callback_head callback_head;
 struct work_struct destroy_work;
};
# 149 "include/linux/cgroup-defs.h"
struct css_set {

 atomic_t refcount;





 struct hlist_node hlist;
# 166 "include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;





 struct list_head cgrp_links;


 struct cgroup *dfl_cgrp;






 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 199 "include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;
# 210 "include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head task_iters;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;
# 236 "include/linux/cgroup-defs.h"
 int id;







 int level;







 int populated_cnt;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 265 "include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 288 "include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 int ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 int cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 struct idr cgroup_idr;


 char release_agent_path[4096];


 char name[64];
};
# 353 "include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task);
 void (*cancel_fork)(struct task_struct *task);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*free)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 468 "include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 482 "include/linux/cgroup-defs.h"
 bool broken_hierarchy:1;
 bool warned_broken_hierarchy:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 518 "include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 530 "include/linux/cgroup-defs.h"
static inline __attribute__((no_instrument_function)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}
# 542 "include/linux/cgroup-defs.h"
static inline __attribute__((no_instrument_function)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 663 "include/linux/cgroup-defs.h"
struct sock_cgroup_data {
};
# 62 "include/linux/sched.h" 2
# 111 "include/linux/sched.h"
struct sched_attr {
 u32 size;

 u32 sched_policy;
 u64 sched_flags;


 s32 sched_nice;


 u32 sched_priority;


 u64 sched_runtime;
 u64 sched_deadline;
 u64 sched_period;
};

struct futex_pi_state;
struct robust_list_head;
struct bio_list;
struct fs_struct;
struct perf_event_context;
struct blk_plug;
struct filename;
struct nameidata;
# 152 "include/linux/sched.h"
extern unsigned long avenrun[];
extern void get_avenrun(unsigned long *loads, unsigned long offset, int shift);
# 167 "include/linux/sched.h"
extern unsigned long total_forks;
extern int nr_threads;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) process_counts;
extern int nr_processes(void);
extern unsigned long nr_running(void);
extern bool single_task_running(void);
extern unsigned long nr_iowait(void);
extern unsigned long nr_iowait_cpu(int cpu);
extern void get_iowait_load(unsigned long *nr_waiters, unsigned long *load);

extern void calc_global_load(unsigned long ticks);


extern void cpu_load_update_nohz_start(void);
extern void cpu_load_update_nohz_stop(void);





extern void dump_cpu_task(int cpu);

struct seq_file;
struct cfs_rq;
struct task_group;
# 226 "include/linux/sched.h"
extern char ___assert_task_state[1 - 2*!!(
  sizeof("RSDTtXZxKWPN")-1 != ( __builtin_constant_p(2048) ? ( (2048) < 1 ? ____ilog2_NaN() : (2048) & (1ULL << 63) ? 63 : (2048) & (1ULL << 62) ? 62 : (2048) & (1ULL << 61) ? 61 : (2048) & (1ULL << 60) ? 60 : (2048) & (1ULL << 59) ? 59 : (2048) & (1ULL << 58) ? 58 : (2048) & (1ULL << 57) ? 57 : (2048) & (1ULL << 56) ? 56 : (2048) & (1ULL << 55) ? 55 : (2048) & (1ULL << 54) ? 54 : (2048) & (1ULL << 53) ? 53 : (2048) & (1ULL << 52) ? 52 : (2048) & (1ULL << 51) ? 51 : (2048) & (1ULL << 50) ? 50 : (2048) & (1ULL << 49) ? 49 : (2048) & (1ULL << 48) ? 48 : (2048) & (1ULL << 47) ? 47 : (2048) & (1ULL << 46) ? 46 : (2048) & (1ULL << 45) ? 45 : (2048) & (1ULL << 44) ? 44 : (2048) & (1ULL << 43) ? 43 : (2048) & (1ULL << 42) ? 42 : (2048) & (1ULL << 41) ? 41 : (2048) & (1ULL << 40) ? 40 : (2048) & (1ULL << 39) ? 39 : (2048) & (1ULL << 38) ? 38 : (2048) & (1ULL << 37) ? 37 : (2048) & (1ULL << 36) ? 36 : (2048) & (1ULL << 35) ? 35 : (2048) & (1ULL << 34) ? 34 : (2048) & (1ULL << 33) ? 33 : (2048) & (1ULL << 32) ? 32 : (2048) & (1ULL << 31) ? 31 : (2048) & (1ULL << 30) ? 30 : (2048) & (1ULL << 29) ? 29 : (2048) & (1ULL << 28) ? 28 : (2048) & (1ULL << 27) ? 27 : (2048) & (1ULL << 26) ? 26 : (2048) & (1ULL << 25) ? 25 : (2048) & (1ULL << 24) ? 24 : (2048) & (1ULL << 23) ? 23 : (2048) & (1ULL << 22) ? 22 : (2048) & (1ULL << 21) ? 21 : (2048) & (1ULL << 20) ? 20 : (2048) & (1ULL << 19) ? 19 : (2048) & (1ULL << 18) ? 18 : (2048) & (1ULL << 17) ? 17 : (2048) & (1ULL << 16) ? 16 : (2048) & (1ULL << 15) ? 15 : (2048) & (1ULL << 14) ? 14 : (2048) & (1ULL << 13) ? 13 : (2048) & (1ULL << 12) ? 12 : (2048) & (1ULL << 11) ? 11 : (2048) & (1ULL << 10) ? 10 : (2048) & (1ULL << 9) ? 9 : (2048) & (1ULL << 8) ? 8 : (2048) & (1ULL << 7) ? 7 : (2048) & (1ULL << 6) ? 6 : (2048) & (1ULL << 5) ? 5 : (2048) & (1ULL << 4) ? 4 : (2048) & (1ULL << 3) ? 3 : (2048) & (1ULL << 2) ? 2 : (2048) & (1ULL << 1) ? 1 : (2048) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(2048) <= 4) ? __ilog2_u32(2048) : __ilog2_u64(2048) )+1)];
# 325 "include/linux/sched.h"
extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

struct task_struct;





extern void sched_init(void);
extern void sched_init_smp(void);
extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);
extern void init_idle_bootup_task(struct task_struct *idle);

extern cpumask_var_t cpu_isolated_map;

extern int runqueue_is_locked(int cpu);


extern void nohz_balance_enter_idle(int cpu);
extern void set_cpu_sd_state_idle(void);
extern int get_nohz_timer_target(void);
# 356 "include/linux/sched.h"
extern void show_state_filter(unsigned long state_filter);

static inline __attribute__((no_instrument_function)) void show_state(void)
{
 show_state_filter(0);
}

extern void show_regs(struct pt_regs *);






extern void show_stack(struct task_struct *task, unsigned long *sp);

extern void cpu_init (void);
extern void trap_init(void);
extern void update_process_times(int user);
extern void scheduler_tick(void);
extern int sched_cpu_starting(unsigned int cpu);
extern int sched_cpu_activate(unsigned int cpu);
extern int sched_cpu_deactivate(unsigned int cpu);


extern int sched_cpu_dying(unsigned int cpu);




extern void sched_show_task(struct task_struct *p);
# 400 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void touch_softlockup_watchdog_sched(void)
{
}
static inline __attribute__((no_instrument_function)) void touch_softlockup_watchdog(void)
{
}
static inline __attribute__((no_instrument_function)) void touch_softlockup_watchdog_sync(void)
{
}
static inline __attribute__((no_instrument_function)) void touch_all_softlockup_watchdogs(void)
{
}
static inline __attribute__((no_instrument_function)) void lockup_detector_init(void)
{
}





static inline __attribute__((no_instrument_function)) void reset_hung_task_detector(void)
{
}






extern char __sched_text_start[], __sched_text_end[];


extern int in_sched_functions(unsigned long addr);


extern signed long schedule_timeout(signed long timeout);
extern signed long schedule_timeout_interruptible(signed long timeout);
extern signed long schedule_timeout_killable(signed long timeout);
extern signed long schedule_timeout_uninterruptible(signed long timeout);
extern signed long schedule_timeout_idle(signed long timeout);
 void schedule(void);
extern void schedule_preempt_disabled(void);

extern long io_schedule_timeout(long timeout);

static inline __attribute__((no_instrument_function)) void io_schedule(void)
{
 io_schedule_timeout(((long)(~0UL>>1)));
}

struct nsproxy;
struct user_namespace;


extern void arch_pick_mmap_layout(struct mm_struct *mm);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);
# 476 "include/linux/sched.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((no_instrument_function)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((no_instrument_function)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 528 "include/linux/sched.h"
struct sighand_struct {
 atomic_t count;
 struct k_sigaction action[64];
 spinlock_t siglock;
 wait_queue_head_t signalfd_wqh;
};

struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 cputime_t ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 cputime_t expires;
 cputime_t incr;
 u32 error;
 u32 incr_error;
};
# 559 "include/linux/sched.h"
struct prev_cputime {

 cputime_t utime;
 cputime_t stime;
 raw_spinlock_t lock;

};

static inline __attribute__((no_instrument_function)) void prev_cputime_init(struct prev_cputime *prev)
{

 prev->utime = prev->stime = 0;
 do { *(&prev->lock) = (raw_spinlock_t) { .raw_lock = { { (0) } }, }; } while (0);

}
# 585 "include/linux/sched.h"
struct task_cputime {
 cputime_t utime;
 cputime_t stime;
 unsigned long long sum_exec_runtime;
};
# 607 "include/linux/sched.h"
struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 652 "include/linux/sched.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
 bool running;
 bool checking_timer;
};


struct autogroup;
# 668 "include/linux/sched.h"
struct signal_struct {
 atomic_t sigcnt;
 atomic_t live;
 int nr_threads;
 atomic_t oom_victims;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
# 706 "include/linux/sched.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;


 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 struct pid *leader_pid;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;


 struct task_cputime cputime_expires;





 struct list_head cpu_timers[3];

 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;
# 756 "include/linux/sched.h"
 seqlock_t stats_lock;
 cputime_t utime, stime, cutime, cstime;
 cputime_t gtime;
 cputime_t cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 784 "include/linux/sched.h"
 struct rlimit rlim[16];


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;






 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;


 struct mutex cred_guard_mutex;


};
# 828 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}




struct user_struct {
 atomic_t __count;
 atomic_t processes;
 atomic_t sigpending;

 atomic_t inotify_watches;
 atomic_t inotify_devs;





 atomic_long_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;
 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct key *uid_keyring;
 struct key *session_keyring;



 struct hlist_node uidhash_node;
 kuid_t uid;


 atomic_long_t locked_vm;

};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;



struct backing_dev_info;
struct reclaim_state;


struct sched_info {

 unsigned long pcount;
 unsigned long long run_delay;


 unsigned long long last_arrival,
      last_queued;
};



struct task_delay_info {
 spinlock_t lock;
 unsigned int flags;
# 916 "include/linux/sched.h"
 u64 blkio_start;
 u64 blkio_delay;
 u64 swapin_delay;
 u32 blkio_count;

 u32 swapin_count;


 u64 freepages_start;
 u64 freepages_delay;
 u32 freepages_count;
};


static inline __attribute__((no_instrument_function)) int sched_info_on(void)
{

 return 1;






}


void force_schedstat_enabled(void);


enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};
# 995 "include/linux/sched.h"
struct wake_q_node {
 struct wake_q_node *next;
};

struct wake_q_head {
 struct wake_q_node *first;
 struct wake_q_node **lastp;
};






extern void wake_q_add(struct wake_q_head *head,
         struct task_struct *task);
extern void wake_up_q(struct wake_q_head *head);
# 1033 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int cpu_smt_flags(void)
{
 return 0x0080 | 0x0200;
}



static inline __attribute__((no_instrument_function)) int cpu_core_flags(void)
{
 return 0x0200;
}



static inline __attribute__((no_instrument_function)) int cpu_numa_flags(void)
{
 return 0x4000;
}


struct sched_domain_attr {
 int relax_domain_level;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain {

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;
 unsigned int busy_idx;
 unsigned int idle_idx;
 unsigned int newidle_idx;
 unsigned int wake_idx;
 unsigned int forkexec_idx;
 unsigned int smt_gain;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long next_decay_max_lb_cost;



 unsigned int lb_count[CPU_MAX_IDLE_TYPES];
 unsigned int lb_failed[CPU_MAX_IDLE_TYPES];
 unsigned int lb_balanced[CPU_MAX_IDLE_TYPES];
 unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES];
 unsigned int lb_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES];


 unsigned int alb_count;
 unsigned int alb_failed;
 unsigned int alb_pushed;


 unsigned int sbe_count;
 unsigned int sbe_balanced;
 unsigned int sbe_pushed;


 unsigned int sbf_count;
 unsigned int sbf_balanced;
 unsigned int sbf_pushed;


 unsigned int ttwu_wake_remote;
 unsigned int ttwu_move_affine;
 unsigned int ttwu_move_balance;




 union {
  void *private;
  struct callback_head rcu;
 };

 unsigned int span_weight;







 unsigned long span[0];
};

static inline __attribute__((no_instrument_function)) struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);

typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
typedef int (*sched_domain_flags_f)(void);



struct sd_data {
 struct sched_domain ** sd;
 struct sched_group ** sg;
 struct sched_group_capacity ** sgc;
};

struct sched_domain_topology_level {
 sched_domain_mask_f mask;
 sched_domain_flags_f sd_flags;
 int flags;
 int numa_level;
 struct sd_data data;



};

extern void set_sched_topology(struct sched_domain_topology_level *tl);
extern void wake_up_if_idle(int cpu);
# 1208 "include/linux/sched.h"
struct io_context;





static inline __attribute__((no_instrument_function)) void prefetch_stack(struct task_struct *t) { }


struct audit_context;
struct mempolicy;
struct pipe_inode_info;
struct uts_namespace;

struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 1279 "include/linux/sched.h"
struct sched_avg {
 u64 last_update_time, load_sum;
 u32 util_sum, period_contrib;
 unsigned long load_avg, util_avg;
};


struct sched_statistics {
 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;
};


struct sched_entity {
 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;


 struct sched_statistics statistics;



 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;
# 1354 "include/linux/sched.h"
 struct sched_avg avg __attribute__((__aligned__((1 << (6)))));

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







};

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 1412 "include/linux/sched.h"
 int dl_throttled, dl_boosted, dl_yielded;





 struct hrtimer dl_timer;
};

union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_need_qs;
  u8 pad;
 } b;
 u32 s;
};
struct rcu_node;

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};


struct tlbflush_unmap_batch {




 struct cpumask cpumask;


 bool flush_required;






 bool writable;
};

struct task_struct {
 volatile long state;
 void *stack;
 atomic_t usage;
 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;
 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;

 int wake_cpu;

 int on_rq;

 int prio, static_prio, normal_prio;
 unsigned int rt_priority;
 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;

 struct task_group *sched_task_group;

 struct sched_dl_entity dl;







 unsigned int btrace_seq;


 unsigned int policy;
 int nr_cpus_allowed;
 cpumask_t cpus_allowed;
# 1513 "include/linux/sched.h"
 struct sched_info sched_info;


 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm, *active_mm;

 u32 vmacache_seqnum;
 struct vm_area_struct *vmacache[(1U << 2)];

 struct task_rss_stat rss_stat;


 int exit_state;
 int exit_code, exit_signal;
 int pdeath_signal;
 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;
 unsigned sched_remote_wakeup:1;
 unsigned :0;


 unsigned in_execve:1;
 unsigned in_iowait:1;
# 1558 "include/linux/sched.h"
 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;
# 1574 "include/linux/sched.h"
 struct task_struct *real_parent;
 struct task_struct *parent;



 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;






 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid_link pids[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;
 int *set_child_tid;
 int *clear_child_tid;

 cputime_t utime, stime, utimescaled, stimescaled;
 cputime_t gtime;
 struct prev_cputime prev_cputime;
# 1619 "include/linux/sched.h"
 unsigned long nvcsw, nivcsw;
 u64 start_time;
 u64 real_start_time;

 unsigned long min_flt, maj_flt;

 struct task_cputime cputime_expires;
 struct list_head cpu_timers[3];


 const struct cred *real_cred;

 const struct cred *cred;

 char comm[16];




 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;






 struct fs_struct *fs;

 struct files_struct *files;

 struct nsproxy *nsproxy;

 struct signal_struct *signal;
 struct sighand_struct *sighand;

 sigset_t blocked, real_blocked;
 sigset_t saved_sigmask;
 struct sigpending pending;

 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned sas_ss_flags;

 struct callback_head *task_works;

 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;


    u32 parent_exec_id;
    u32 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root pi_waiters;
 struct rb_node *pi_waiters_leftmost;

 struct rt_mutex_waiter *pi_blocked_on;
# 1727 "include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;

 unsigned long ptrace_message;
 siginfo_t *last_siginfo;
 struct task_io_accounting ioac;

 u64 acct_rss_mem1;
 u64 acct_vm_mem1;
 cputime_t acct_timexpd;


 nodemask_t mems_allowed;
 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;


 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;





 struct mempolicy *mempolicy;
 short il_next;
 short pref_node_fork;
# 1828 "include/linux/sched.h"
 struct tlbflush_unmap_batch tlb_ubc;


 struct callback_head rcu;




 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1850 "include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;
 unsigned long dirty_paused_when;
# 1862 "include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1885 "include/linux/sched.h"
 unsigned long trace;

 unsigned long trace_recursion;
# 1917 "include/linux/sched.h"
 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct thread_struct thread;






};


extern int arch_task_struct_size __attribute__((__section__(".data..read_mostly")));







static inline __attribute__((no_instrument_function)) int tsk_nr_cpus_allowed(struct task_struct *p)
{
 return p->nr_cpus_allowed;
}
# 1959 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void task_numa_fault(int last_node, int node, int pages,
       int flags)
{
}
static inline __attribute__((no_instrument_function)) pid_t task_numa_group_id(struct task_struct *p)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) void set_numabalancing_state(bool enabled)
{
}
static inline __attribute__((no_instrument_function)) void task_numa_free(struct task_struct *p)
{
}
static inline __attribute__((no_instrument_function)) bool should_numa_migrate_memory(struct task_struct *p,
    struct page *page, int src_nid, int dst_cpu)
{
 return true;
}


static inline __attribute__((no_instrument_function)) struct pid *task_pid(struct task_struct *task)
{
 return task->pids[PIDTYPE_PID].pid;
}

static inline __attribute__((no_instrument_function)) struct pid *task_tgid(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PID].pid;
}






static inline __attribute__((no_instrument_function)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PGID].pid;
}

static inline __attribute__((no_instrument_function)) struct pid *task_session(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_SID].pid;
}

struct pid_namespace;
# 2020 "include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type,
   struct pid_namespace *ns);

static inline __attribute__((no_instrument_function)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((no_instrument_function)) pid_t task_pid_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((no_instrument_function)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((no_instrument_function)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}

pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline __attribute__((no_instrument_function)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_tgid(tsk));
}


static inline __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p);
static inline __attribute__((no_instrument_function)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ typeof((tsk->real_parent)) _________p1 = ({ union { typeof((tsk->real_parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); else __read_once_size_nocheck(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((no_instrument_function)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}

static inline __attribute__((no_instrument_function)) pid_t task_pgrp_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((no_instrument_function)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((no_instrument_function)) pid_t task_session_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((no_instrument_function)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}


static inline __attribute__((no_instrument_function)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}
# 2110 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p)
{
 return p->pids[PIDTYPE_PID].pid != ((void *)0);
}
# 2124 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;

extern void free_task(struct task_struct *tsk);


extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((no_instrument_function)) void put_task_struct(struct task_struct *t)
{
 if (atomic_dec_and_test(&t->usage))
  __put_task_struct(t);
}
# 2149 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void task_cputime(struct task_struct *t,
    cputime_t *utime, cputime_t *stime)
{
 if (utime)
  *utime = t->utime;
 if (stime)
  *stime = t->stime;
}

static inline __attribute__((no_instrument_function)) void task_cputime_scaled(struct task_struct *t,
           cputime_t *utimescaled,
           cputime_t *stimescaled)
{
 if (utimescaled)
  *utimescaled = t->utimescaled;
 if (stimescaled)
  *stimescaled = t->stimescaled;
}

static inline __attribute__((no_instrument_function)) cputime_t task_gtime(struct task_struct *t)
{
 return t->gtime;
}

extern void task_cputime_adjusted(struct task_struct *p, cputime_t *ut, cputime_t *st);
extern void thread_group_cputime_adjusted(struct task_struct *p, cputime_t *ut, cputime_t *st);
# 2235 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) gfp_t memalloc_noio_flags(gfp_t flags)
{
 if (__builtin_expect(!!(get_current()->flags & 0x00080000), 0))
  flags &= ~((( gfp_t)0x40u) | (( gfp_t)0x80u));
 return flags;
}

static inline __attribute__((no_instrument_function)) unsigned int memalloc_noio_save(void)
{
 unsigned int flags = get_current()->flags & 0x00080000;
 get_current()->flags |= 0x00080000;
 return flags;
}

static inline __attribute__((no_instrument_function)) void memalloc_noio_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00080000) | flags;
}
# 2271 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) bool task_no_new_privs(struct task_struct *p) { return (__builtin_constant_p((0)) ? constant_test_bit((0), (&p->atomic_flags)) : variable_test_bit((0), (&p->atomic_flags))); }
static inline __attribute__((no_instrument_function)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((no_instrument_function)) bool task_spread_page(struct task_struct *p) { return (__builtin_constant_p((1)) ? constant_test_bit((1), (&p->atomic_flags)) : variable_test_bit((1), (&p->atomic_flags))); }
static inline __attribute__((no_instrument_function)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((no_instrument_function)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((no_instrument_function)) bool task_spread_slab(struct task_struct *p) { return (__builtin_constant_p((2)) ? constant_test_bit((2), (&p->atomic_flags)) : variable_test_bit((2), (&p->atomic_flags))); }
static inline __attribute__((no_instrument_function)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((no_instrument_function)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((no_instrument_function)) bool task_lmk_waiting(struct task_struct *p) { return (__builtin_constant_p((3)) ? constant_test_bit((3), (&p->atomic_flags)) : variable_test_bit((3), (&p->atomic_flags))); }
static inline __attribute__((no_instrument_function)) void task_set_lmk_waiting(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
# 2309 "include/linux/sched.h"
extern bool task_set_jobctl_pending(struct task_struct *task,
        unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task,
          unsigned long mask);

static inline __attribute__((no_instrument_function)) void rcu_copy_process(struct task_struct *p)
{
# 2328 "include/linux/sched.h"
}

static inline __attribute__((no_instrument_function)) void tsk_restore_flags(struct task_struct *task,
    unsigned long orig_flags, unsigned long flags)
{
 task->flags &= ~flags;
 task->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur,
         const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p,
      const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p,
          const struct cpumask *new_mask);

extern int set_cpus_allowed_ptr(struct task_struct *p,
    const struct cpumask *new_mask);
# 2362 "include/linux/sched.h"
void calc_load_enter_idle(void);
void calc_load_exit_idle(void);
# 2377 "include/linux/sched.h"
extern unsigned long long __attribute__((no_instrument_function)) sched_clock(void);



extern u64 running_clock(void);
extern u64 sched_clock_cpu(int cpu);


extern void sched_clock_init(void);
# 2416 "include/linux/sched.h"
extern int sched_clock_stable(void);
extern void set_sched_clock_stable(void);
extern void clear_sched_clock_stable(void);

extern void sched_clock_tick(void);
extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);
# 2434 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) u64 cpu_clock(int cpu)
{
 return sched_clock_cpu(cpu);
}

static inline __attribute__((no_instrument_function)) u64 local_clock(void)
{
 return sched_clock_cpu((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; })));
}
# 2454 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void enable_sched_clock_irqtime(void) {}
static inline __attribute__((no_instrument_function)) void disable_sched_clock_irqtime(void) {}


extern unsigned long long
task_sched_runtime(struct task_struct *task);



extern void sched_exec(void);




extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);


extern void idle_task_exit(void);





extern void wake_up_nohz_cpu(int cpu);
# 2497 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void sched_autogroup_create_attach(struct task_struct *p) { }
static inline __attribute__((no_instrument_function)) void sched_autogroup_detach(struct task_struct *p) { }
static inline __attribute__((no_instrument_function)) void sched_autogroup_fork(struct signal_struct *sig) { }
static inline __attribute__((no_instrument_function)) void sched_autogroup_exit(struct signal_struct *sig) { }


extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);






static inline __attribute__((no_instrument_function)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}
extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int,
         const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int,
          const struct sched_param *);
extern int sched_setattr(struct task_struct *,
    const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);






static inline __attribute__((no_instrument_function)) bool is_idle_task(const struct task_struct *p)
{
 return p->pid == 0;
}
extern struct task_struct *curr_task(int cpu);
extern void set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {
 struct thread_info thread_info;
 unsigned long stack[(((1UL) << 12) << (2 + 0))/sizeof(long)];
};


static inline __attribute__((no_instrument_function)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((((1UL) << 12) << (2 + 0))-sizeof(void*)));
}


extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern struct mm_struct init_mm;

extern struct pid_namespace init_pid_ns;
# 2574 "include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr,
  struct pid_namespace *ns);


extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((no_instrument_function)) struct user_struct *get_uid(struct user_struct *u)
{
 atomic_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);



extern void xtime_update(unsigned long ticks);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);

 extern void kick_process(struct task_struct *tsk);



extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_dead(struct task_struct *p);

extern void proc_caches_init(void);
extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info);

static inline __attribute__((no_instrument_function)) int kernel_dequeue_signal(siginfo_t *info)
{
 struct task_struct *tsk = get_current();
 siginfo_t __info;
 int ret;

 spin_lock_irq(&tsk->sighand->siglock);
 ret = dequeue_signal(tsk, &tsk->blocked, info ?: &__info);
 spin_unlock_irq(&tsk->sighand->siglock);

 return ret;
}

static inline __attribute__((no_instrument_function)) void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { get_current()->state = ((128 | 4)); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}

extern void release_task(struct task_struct * p);
extern int send_sig_info(int, struct siginfo *, struct task_struct *);
extern int force_sigsegv(int, struct task_struct *);
extern int force_sig_info(int, struct siginfo *, struct task_struct *);
extern int __kill_pgrp_info(int sig, struct siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct siginfo *info, struct pid *pid);
extern int kill_pid_info_as_cred(int, struct siginfo *, struct pid *,
    const struct cred *, u32);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern int kill_proc_info(int, struct siginfo *, pid_t);
extern __attribute__((warn_unused_result)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int, struct task_struct *);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct task_struct *, int group);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((no_instrument_function)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

static inline __attribute__((no_instrument_function)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline __attribute__((no_instrument_function)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}
# 2679 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int on_sig_stack(unsigned long sp)
{
# 2690 "include/linux/sched.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;





 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}

static inline __attribute__((no_instrument_function)) int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((no_instrument_function)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((no_instrument_function)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000u)), 0) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}




extern struct mm_struct * mm_alloc(void);


extern void __mmdrop(struct mm_struct *);
static inline __attribute__((no_instrument_function)) void mmdrop(struct mm_struct *mm)
{
 if (__builtin_expect(!!(atomic_dec_and_test(&mm->mm_count)), 0))
  __mmdrop(mm);
}

static inline __attribute__((no_instrument_function)) bool mmget_not_zero(struct mm_struct *mm)
{
 return atomic_add_unless((&mm->mm_users), 1, 0);
}


extern void mmput(struct mm_struct *);




extern void mmput_async(struct mm_struct *);



extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void mm_release(struct task_struct *, struct mm_struct *);


extern int copy_thread_tls(unsigned long, unsigned long, unsigned long,
   struct task_struct *, unsigned long);
# 2782 "include/linux/sched.h"
extern void flush_thread(void);


extern void exit_thread(struct task_struct *tsk);






extern void exit_files(struct task_struct *);
extern void __cleanup_sighand(struct sighand_struct *);

extern void exit_itimers(struct signal_struct *);
extern void flush_itimer_signals(void);

extern void do_group_exit(int);

extern int do_execve(struct filename *,
       const char * const *,
       const char * const *);
extern int do_execveat(int, struct filename *,
         const char * const *,
         const char * const *,
         int);
extern long _do_fork(unsigned long, unsigned long, unsigned long, int *, int *, unsigned long);
extern long do_fork(unsigned long, unsigned long, unsigned long, int *, int *);
struct task_struct *fork_idle(int);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);

extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);
static inline __attribute__((no_instrument_function)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}
extern char *get_task_comm(char *to, struct task_struct *tsk);


void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 2840 "include/linux/sched.h"
extern bool current_is_single_threaded(void);
# 2862 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) int get_nr_threads(struct task_struct *tsk)
{
 return tsk->signal->nr_threads;
}

static inline __attribute__((no_instrument_function)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}







static inline __attribute__((no_instrument_function)) bool has_group_leader_pid(struct task_struct *p)
{
 return task_pid(p) == p->signal->leader_pid;
}

static inline __attribute__((no_instrument_function))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((no_instrument_function)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ const typeof( ((struct task_struct *)0)->thread_group ) *__mptr = (({ typeof(p->thread_group.next) _________p1 = ({ union { typeof(p->thread_group.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); else __read_once_size_nocheck(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); __u.__val; }); do { } while (0); (_________p1); })); (struct task_struct *)( (char *)__mptr - __builtin_offsetof(struct task_struct, thread_group) );})
                                          ;
}

static inline __attribute__((no_instrument_function)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}
# 2913 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((no_instrument_function)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}

extern struct sighand_struct *__lock_task_sighand(struct task_struct *tsk,
       unsigned long *flags);

static inline __attribute__((no_instrument_function)) struct sighand_struct *lock_task_sighand(struct task_struct *tsk,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(tsk, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) void unlock_task_sighand(struct task_struct *tsk,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&tsk->sighand->siglock, *flags);
}
# 2953 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void threadgroup_change_begin(struct task_struct *tsk)
{
 do { _cond_resched(); } while (0);
 cgroup_threadgroup_change_begin(tsk);
}







static inline __attribute__((no_instrument_function)) void threadgroup_change_end(struct task_struct *tsk)
{
 cgroup_threadgroup_change_end(tsk);
}






static inline __attribute__((no_instrument_function)) void setup_thread_stack(struct task_struct *p, struct task_struct *org)
{
 *((struct thread_info *)(p)->stack) = *((struct thread_info *)(org)->stack);
 ((struct thread_info *)(p)->stack)->task = p;
}
# 2990 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) unsigned long *end_of_stack(struct task_struct *p)
{



 return (unsigned long *)(((struct thread_info *)(p)->stack) + 1);

}





static inline __attribute__((no_instrument_function)) int object_is_on_stack(void *obj)
{
 void *stack = ((get_current())->stack);

 return (obj >= stack) && (obj < (stack + (((1UL) << 12) << (2 + 0))));
}

extern void thread_info_cache_init(void);


static inline __attribute__((no_instrument_function)) unsigned long stack_not_used(struct task_struct *p)
{
 unsigned long *n = end_of_stack(p);

 do {



  n++;

 } while (!*n);




 return (unsigned long)n - (unsigned long)end_of_stack(p);

}

extern void set_task_stack_end_magic(struct task_struct *tsk);




static inline __attribute__((no_instrument_function)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((no_instrument_function)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((no_instrument_function)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((no_instrument_function)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((no_instrument_function)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(((struct thread_info *)(tsk)->stack), flag);
}

static inline __attribute__((no_instrument_function)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline __attribute__((no_instrument_function)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline __attribute__((no_instrument_function)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}

static inline __attribute__((no_instrument_function)) int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 2);
 return -513;
}

static inline __attribute__((no_instrument_function)) int signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
}

static inline __attribute__((no_instrument_function)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((no_instrument_function)) int fatal_signal_pending(struct task_struct *p)
{
 return signal_pending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((no_instrument_function)) int signal_pending_state(long state, struct task_struct *p)
{
 if (!(state & (1 | 128)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 1) || __fatal_signal_pending(p);
}
# 3115 "include/linux/sched.h"
extern int _cond_resched(void);






extern int __cond_resched_lock(spinlock_t *lock);






extern int __cond_resched_softirq(void);






static inline __attribute__((no_instrument_function)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ ___might_sleep("include/linux/sched.h", 3140, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((no_instrument_function)) int spin_needbreak(spinlock_t *lock)
{



 return 0;

}






static inline __attribute__((no_instrument_function)) int tsk_is_polling(struct task_struct *p)
{
 return test_tsk_thread_flag(p, 21);
}

static inline __attribute__((no_instrument_function)) void __current_set_polling(void)
{
 set_ti_thread_flag(current_thread_info(), 21);
}

static inline __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) current_set_polling_and_test(void)
{
 __current_set_polling();





 __asm__ __volatile__("": : :"memory");

 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}

static inline __attribute__((no_instrument_function)) void __current_clr_polling(void)
{
 clear_ti_thread_flag(current_thread_info(), 21);
}

static inline __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) current_clr_polling_and_test(void)
{
 __current_clr_polling();





 __asm__ __volatile__("": : :"memory");

 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}
# 3220 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void current_clr_polling(void)
{
 __current_clr_polling();







 asm volatile("mfence":::"memory");

 do { if (test_ti_thread_flag(current_thread_info(), 3)) set_preempt_need_resched(); } while (0);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}




void thread_group_cputime(struct task_struct *tsk, struct task_cputime *times);
void thread_group_cputimer(struct task_struct *tsk, struct task_cputime *times);







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((no_instrument_function)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 128 : 0);
}
static inline __attribute__((no_instrument_function)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 8 : 0);
}






static inline __attribute__((no_instrument_function)) unsigned int task_cpu(const struct task_struct *p)
{
 return ((struct thread_info *)(p)->stack)->cpu;
}

static inline __attribute__((no_instrument_function)) int task_node(const struct task_struct *p)
{
 return cpu_to_node(task_cpu(p));
}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 3296 "include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);


extern struct task_group root_task_group;


extern int task_can_switch_user(struct user_struct *up,
     struct task_struct *tsk);


static inline __attribute__((no_instrument_function)) void add_rchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.rchar += amt;
}

static inline __attribute__((no_instrument_function)) void add_wchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.wchar += amt;
}

static inline __attribute__((no_instrument_function)) void inc_syscr(struct task_struct *tsk)
{
 tsk->ioac.syscr++;
}

static inline __attribute__((no_instrument_function)) void inc_syscw(struct task_struct *tsk)
{
 tsk->ioac.syscw++;
}
# 3351 "include/linux/sched.h"
static inline __attribute__((no_instrument_function)) void mm_update_next_owner(struct mm_struct *mm)
{
}


static inline __attribute__((no_instrument_function)) unsigned long task_rlimit(const struct task_struct *tsk,
  unsigned int limit)
{
 return ({ union { typeof(tsk->signal->rlim[limit].rlim_cur) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->signal->rlim[limit].rlim_cur), __u.__c, sizeof(tsk->signal->rlim[limit].rlim_cur)); else __read_once_size_nocheck(&(tsk->signal->rlim[limit].rlim_cur), __u.__c, sizeof(tsk->signal->rlim[limit].rlim_cur)); __u.__val; });
}

static inline __attribute__((no_instrument_function)) unsigned long task_rlimit_max(const struct task_struct *tsk,
  unsigned int limit)
{
 return ({ union { typeof(tsk->signal->rlim[limit].rlim_max) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->signal->rlim[limit].rlim_max), __u.__c, sizeof(tsk->signal->rlim[limit].rlim_max)); else __read_once_size_nocheck(&(tsk->signal->rlim[limit].rlim_max), __u.__c, sizeof(tsk->signal->rlim[limit].rlim_max)); __u.__val; });
}

static inline __attribute__((no_instrument_function)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline __attribute__((no_instrument_function)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}


struct update_util_data {
 void (*func)(struct update_util_data *data,
       u64 time, unsigned long util, unsigned long max);
};

void cpufreq_add_update_util_hook(int cpu, struct update_util_data *data,
   void (*func)(struct update_util_data *data, u64 time,
         unsigned long util, unsigned long max));
void cpufreq_remove_update_util_hook(int cpu);
# 5 "include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
# 81 "include/linux/kasan.h"
static inline __attribute__((no_instrument_function)) void kasan_unpoison_shadow(const void *address, size_t size) {}

static inline __attribute__((no_instrument_function)) void kasan_unpoison_task_stack(struct task_struct *task) {}

static inline __attribute__((no_instrument_function)) void kasan_enable_current(void) {}
static inline __attribute__((no_instrument_function)) void kasan_disable_current(void) {}

static inline __attribute__((no_instrument_function)) void kasan_alloc_pages(struct page *page, unsigned int order) {}
static inline __attribute__((no_instrument_function)) void kasan_free_pages(struct page *page, unsigned int order) {}

static inline __attribute__((no_instrument_function)) void kasan_cache_create(struct kmem_cache *cache,
          size_t *size,
          unsigned long *flags) {}
static inline __attribute__((no_instrument_function)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((no_instrument_function)) void kasan_cache_destroy(struct kmem_cache *cache) {}

static inline __attribute__((no_instrument_function)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((no_instrument_function)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((no_instrument_function)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}

static inline __attribute__((no_instrument_function)) void kasan_kmalloc_large(void *ptr, size_t size, gfp_t flags) {}
static inline __attribute__((no_instrument_function)) void kasan_kfree_large(const void *ptr) {}
static inline __attribute__((no_instrument_function)) void kasan_kfree(void *ptr) {}
static inline __attribute__((no_instrument_function)) void kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags) {}
static inline __attribute__((no_instrument_function)) void kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags) {}

static inline __attribute__((no_instrument_function)) void kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags) {}
static inline __attribute__((no_instrument_function)) bool kasan_slab_free(struct kmem_cache *s, void *object)
{
 return false;
}
static inline __attribute__((no_instrument_function)) void kasan_poison_slab_free(struct kmem_cache *s, void *object) {}

static inline __attribute__((no_instrument_function)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((no_instrument_function)) void kasan_free_shadow(const struct vm_struct *vm) {}
# 119 "include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,
   unsigned long,
   void (*)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);

void memcg_create_kmem_cache(struct mem_cgroup *, struct kmem_cache *);
void memcg_deactivate_kmem_caches(struct mem_cgroup *);
void memcg_destroy_kmem_caches(struct mem_cgroup *);
# 152 "include/linux/slab.h"
void * __attribute__((warn_unused_result)) __krealloc(const void *, size_t, gfp_t);
void * __attribute__((warn_unused_result)) krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kzfree(const void *);
size_t ksize(const void *);
# 262 "include/linux/slab.h"
extern struct kmem_cache *kmalloc_caches[(12 + 1) + 1];

extern struct kmem_cache *kmalloc_dma_caches[(12 + 1) + 1];
# 275 "include/linux/slab.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/slab.h"), "i" (311), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 329 "include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}


void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node) __attribute__((__malloc__));
# 357 "include/linux/slab.h"
extern void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t) __attribute__((__malloc__));


extern void *kmem_cache_alloc_node_trace(struct kmem_cache *s,
        gfp_t gfpflags,
        int node, size_t size) __attribute__((__malloc__));
# 395 "include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));
# 407 "include/linux/slab.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = ( __builtin_constant_p(size) ? ( ((size) == 0UL) ? 64 - 12 : (((size) < (1UL << 12)) ? 0 : ( __builtin_constant_p((size) - 1) ? ( ((size) - 1) < 1 ? ____ilog2_NaN() : ((size) - 1) & (1ULL << 63) ? 63 : ((size) - 1) & (1ULL << 62) ? 62 : ((size) - 1) & (1ULL << 61) ? 61 : ((size) - 1) & (1ULL << 60) ? 60 : ((size) - 1) & (1ULL << 59) ? 59 : ((size) - 1) & (1ULL << 58) ? 58 : ((size) - 1) & (1ULL << 57) ? 57 : ((size) - 1) & (1ULL << 56) ? 56 : ((size) - 1) & (1ULL << 55) ? 55 : ((size) - 1) & (1ULL << 54) ? 54 : ((size) - 1) & (1ULL << 53) ? 53 : ((size) - 1) & (1ULL << 52) ? 52 : ((size) - 1) & (1ULL << 51) ? 51 : ((size) - 1) & (1ULL << 50) ? 50 : ((size) - 1) & (1ULL << 49) ? 49 : ((size) - 1) & (1ULL << 48) ? 48 : ((size) - 1) & (1ULL << 47) ? 47 : ((size) - 1) & (1ULL << 46) ? 46 : ((size) - 1) & (1ULL << 45) ? 45 : ((size) - 1) & (1ULL << 44) ? 44 : ((size) - 1) & (1ULL << 43) ? 43 : ((size) - 1) & (1ULL << 42) ? 42 : ((size) - 1) & (1ULL << 41) ? 41 : ((size) - 1) & (1ULL << 40) ? 40 : ((size) - 1) & (1ULL << 39) ? 39 : ((size) - 1) & (1ULL << 38) ? 38 : ((size) - 1) & (1ULL << 37) ? 37 : ((size) - 1) & (1ULL << 36) ? 36 : ((size) - 1) & (1ULL << 35) ? 35 : ((size) - 1) & (1ULL << 34) ? 34 : ((size) - 1) & (1ULL << 33) ? 33 : ((size) - 1) & (1ULL << 32) ? 32 : ((size) - 1) & (1ULL << 31) ? 31 : ((size) - 1) & (1ULL << 30) ? 30 : ((size) - 1) & (1ULL << 29) ? 29 : ((size) - 1) & (1ULL << 28) ? 28 : ((size) - 1) & (1ULL << 27) ? 27 : ((size) - 1) & (1ULL << 26) ? 26 : ((size) - 1) & (1ULL << 25) ? 25 : ((size) - 1) & (1ULL << 24) ? 24 : ((size) - 1) & (1ULL << 23) ? 23 : ((size) - 1) & (1ULL << 22) ? 22 : ((size) - 1) & (1ULL << 21) ? 21 : ((size) - 1) & (1ULL << 20) ? 20 : ((size) - 1) & (1ULL << 19) ? 19 : ((size) - 1) & (1ULL << 18) ? 18 : ((size) - 1) & (1ULL << 17) ? 17 : ((size) - 1) & (1ULL << 16) ? 16 : ((size) - 1) & (1ULL << 15) ? 15 : ((size) - 1) & (1ULL << 14) ? 14 : ((size) - 1) & (1ULL << 13) ? 13 : ((size) - 1) & (1ULL << 12) ? 12 : ((size) - 1) & (1ULL << 11) ? 11 : ((size) - 1) & (1ULL << 10) ? 10 : ((size) - 1) & (1ULL << 9) ? 9 : ((size) - 1) & (1ULL << 8) ? 8 : ((size) - 1) & (1ULL << 7) ? 7 : ((size) - 1) & (1ULL << 6) ? 6 : ((size) - 1) & (1ULL << 5) ? 5 : ((size) - 1) & (1ULL << 4) ? 4 : ((size) - 1) & (1ULL << 3) ? 3 : ((size) - 1) & (1ULL << 2) ? 2 : ((size) - 1) & (1ULL << 1) ? 1 : ((size) - 1) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1) ) : __get_order(size) );
 return kmalloc_order_trace(size, flags, order);
}
# 466 "include/linux/slab.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {
  if (size > (1UL << (12 + 1)))
   return kmalloc_large(size, flags);

  if (!(flags & (( gfp_t)0x01u))) {
   int index = kmalloc_index(size);

   if (!index)
    return ((void *)16);

   return kmem_cache_alloc_trace(kmalloc_caches[index],
     flags, size);
  }

 }
 return __kmalloc(size, flags);
}






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_size(int n)
{

 if (n > 2)
  return 1 << n;

 if (n == 1 && (1 << 3) <= 32)
  return 96;

 if (n == 2 && (1 << 3) <= 64)
  return 192;

 return 0;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1)) && !(flags & (( gfp_t)0x01u))) {
  int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(kmalloc_caches[i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}

struct memcg_cache_array {
 struct callback_head rcu;
 struct kmem_cache *entries[0];
};
# 544 "include/linux/slab.h"
struct memcg_cache_params {
 bool is_root_cache;
 struct list_head list;
 union {
  struct memcg_cache_array *memcg_caches;
  struct {
   struct mem_cgroup *memcg;
   struct kmem_cache *root_cache;
  };
 };
};

int memcg_update_all_caches(int num_memcgs);







static inline __attribute__((no_instrument_function)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 return __kmalloc(n * size, flags);
}







static inline __attribute__((no_instrument_function)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x8000u));
}
# 590 "include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);




extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
# 610 "include/linux/slab.h"
static inline __attribute__((no_instrument_function)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x8000u));
}






static inline __attribute__((no_instrument_function)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x8000u));
}







static inline __attribute__((no_instrument_function)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) kmem_cache_init_late(void);
# 9 "include/linux/textsearch.h" 2

struct module;

struct ts_config;
# 22 "include/linux/textsearch.h"
struct ts_state
{
 unsigned int offset;
 char cb[40];
};
# 38 "include/linux/textsearch.h"
struct ts_ops
{
 const char *name;
 struct ts_config * (*init)(const void *, unsigned int, gfp_t, int);
 unsigned int (*find)(struct ts_config *,
     struct ts_state *);
 void (*destroy)(struct ts_config *);
 void * (*get_pattern)(struct ts_config *);
 unsigned int (*get_pattern_len)(struct ts_config *);
 struct module *owner;
 struct list_head list;
};
# 58 "include/linux/textsearch.h"
struct ts_config
{
 struct ts_ops *ops;
 int flags;
# 75 "include/linux/textsearch.h"
 unsigned int (*get_next_block)(unsigned int consumed,
        const u8 **dst,
        struct ts_config *conf,
        struct ts_state *state);
# 88 "include/linux/textsearch.h"
 void (*finish)(struct ts_config *conf,
       struct ts_state *state);
};
# 104 "include/linux/textsearch.h"
static inline __attribute__((no_instrument_function)) unsigned int textsearch_next(struct ts_config *conf,
        struct ts_state *state)
{
 unsigned int ret = conf->ops->find(conf, state);

 if (conf->finish)
  conf->finish(conf, state);

 return ret;
}
# 123 "include/linux/textsearch.h"
static inline __attribute__((no_instrument_function)) unsigned int textsearch_find(struct ts_config *conf,
        struct ts_state *state)
{
 state->offset = 0;
 return textsearch_next(conf, state);
}





static inline __attribute__((no_instrument_function)) void *textsearch_get_pattern(struct ts_config *conf)
{
 return conf->ops->get_pattern(conf);
}





static inline __attribute__((no_instrument_function)) unsigned int textsearch_get_pattern_len(struct ts_config *conf)
{
 return conf->ops->get_pattern_len(conf);
}

extern int textsearch_register(struct ts_ops *);
extern int textsearch_unregister(struct ts_ops *);
extern struct ts_config *textsearch_prepare(const char *, const void *,
         unsigned int, gfp_t, int);
extern void textsearch_destroy(struct ts_config *conf);
extern unsigned int textsearch_find_continuous(struct ts_config *,
            struct ts_state *,
            const void *, unsigned int);





static inline __attribute__((no_instrument_function)) struct ts_config *alloc_ts_config(size_t payload,
      gfp_t gfp_mask)
{
 struct ts_config *conf;

 conf = kzalloc((((sizeof(*conf)) + 8 -1) & ~(8 -1)) + payload, gfp_mask);
 if (conf == ((void *)0))
  return ERR_PTR(-12);

 return conf;
}

static inline __attribute__((no_instrument_function)) void *ts_config_priv(struct ts_config *conf)
{
 return ((u8 *) conf + (((sizeof(struct ts_config)) + 8 -1) & ~(8 -1)));
}
# 31 "include/linux/skbuff.h" 2
# 1 "include/net/checksum.h" 1
# 25 "include/net/checksum.h"
# 1 "./arch/x86/include/asm/uaccess.h" 1







# 1 "include/linux/kasan-checks.h" 1







static inline __attribute__((no_instrument_function)) void kasan_check_read(const void *p, unsigned int size) { }
static inline __attribute__((no_instrument_function)) void kasan_check_write(const void *p, unsigned int size) { }
# 9 "./arch/x86/include/asm/uaccess.h" 2




# 1 "./arch/x86/include/asm/smap.h" 1
# 49 "./arch/x86/include/asm/smap.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void clac(void)
{

 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection" : : : "memory");
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void stac(void)
{

 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection" : : : "memory");
}
# 14 "./arch/x86/include/asm/uaccess.h" 2
# 45 "./arch/x86/include/asm/uaccess.h"
static inline __attribute__((no_instrument_function)) bool __chk_range_not_ok(unsigned long addr, unsigned long size, unsigned long limit)
{







 if (__builtin_constant_p(size))
  return __builtin_expect(!!(addr > limit - size), 0);


 addr += size;
 if (__builtin_expect(!!(addr < size), 0))
  return true;
 return __builtin_expect(!!(addr > limit), 0);
}
# 106 "./arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
 int insn, fixup, handler;
};
# 120 "./arch/x86/include/asm/uaccess.h"
extern int fixup_exception(struct pt_regs *regs, int trapnr);
extern bool ex_has_fault_handler(unsigned long ip);
extern void early_fixup_exception(struct pt_regs *regs, int trapnr);
# 139 "./arch/x86/include/asm/uaccess.h"
extern int __get_user_1(void);
extern int __get_user_2(void);
extern int __get_user_4(void);
extern int __get_user_8(void);
extern int __get_user_bad(void);
# 241 "./arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void);





extern void __put_user_1(void);
extern void __put_user_2(void);
extern void __put_user_4(void);
extern void __put_user_8(void);
# 441 "./arch/x86/include/asm/uaccess.h"
struct __large_struct { unsigned long buf[100]; };
# 554 "./arch/x86/include/asm/uaccess.h"
extern unsigned long
copy_from_user_nmi(void *to, const void *from, unsigned long n);
extern __attribute__((warn_unused_result)) long
strncpy_from_user(char *dst, const char *src, long count);

extern __attribute__((warn_unused_result)) long strlen_user(const char *str);
extern __attribute__((warn_unused_result)) long strnlen_user(const char *str, long n);

unsigned long __attribute__((warn_unused_result)) clear_user(void *mem, unsigned long len);
unsigned long __attribute__((warn_unused_result)) __clear_user(void *mem, unsigned long len);

extern void __cmpxchg_wrong_size(void)
 __attribute__((error("Bad argument size for cmpxchg")));
# 673 "./arch/x86/include/asm/uaccess.h"
# 1 "./arch/x86/include/asm/uaccess_64.h" 1
# 20 "./arch/x86/include/asm/uaccess_64.h"
__attribute__((warn_unused_result)) unsigned long
copy_user_enhanced_fast_string(void *to, const void *from, unsigned len);
__attribute__((warn_unused_result)) unsigned long
copy_user_generic_string(void *to, const void *from, unsigned len);
__attribute__((warn_unused_result)) unsigned long
copy_user_generic_unrolled(void *to, const void *from, unsigned len);

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result)) unsigned long
copy_user_generic(void *to, const void *from, unsigned len)
{
 unsigned ret;






 asm volatile ("661:\n\t" "call %P[old]" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") - (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n\t" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n\t" ".popsection" : "=a" (ret), "=D" (to), "=S" (from), "=d" (len) : [old] "i" (copy_user_generic_unrolled), [new1] "i" (copy_user_generic_string), [new2] "i" (copy_user_enhanced_fast_string), "1" (to), "2" (from), "3" (len) : "memory", "rcx", "r8", "r9", "r10", "r11")







                                                ;
 return ret;
}

__attribute__((warn_unused_result)) unsigned long
copy_in_user(void *to, const void *from, unsigned len);

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_from_user_nocheck(void *dst, const void *src, unsigned size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(dst, ( void *)src, size);
 switch (size) {
 case 1:
  stac();
  asm volatile("\n" "1:	mov""b"" %2,%""b""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=q"(*(u8 *)dst) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                ;
  clac();
  return ret;
 case 2:
  stac();
  asm volatile("\n" "1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)dst) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                ;
  clac();
  return ret;
 case 4:
  stac();
  asm volatile("\n" "1:	mov""l"" %2,%""k""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u32 *)dst) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                ;
  clac();
  return ret;
 case 8:
  stac();
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                               ;
  clac();
  return ret;
 case 10:
  stac();
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (10), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u16 *)(8 + (char *)src)))), "i" (2), "0" (ret))

                                  ;
  clac();
  return ret;
 case 16:
  stac();
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u64 *)(8 + (char *)src)))), "i" (8), "0" (ret))

                                 ;
  clac();
  return ret;
 default:
  return copy_user_generic(dst, ( void *)src, size);
 }
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_from_user(void *dst, const void *src, unsigned size)
{
 might_fault();
 kasan_check_write(dst, size);
 return __copy_from_user_nocheck(dst, src, size);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_to_user_nocheck(void *dst, const void *src, unsigned size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst, src, size);
 switch (size) {
 case 1:
  stac();
  asm volatile("\n" "1:	mov""b"" %""b""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "iq"(*(u8 *)src), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                ;
  clac();
  return ret;
 case 2:
  stac();
  asm volatile("\n" "1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u16 *)src), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                ;
  clac();
  return ret;
 case 4:
  stac();
  asm volatile("\n" "1:	mov""l"" %""k""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u32 *)src), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                ;
  clac();
  return ret;
 case 8:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                               ;
  clac();
  return ret;
 case 10:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (10), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1)) {
   asm("":::"memory");
   asm volatile("\n" "1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(4[(u16 *)src]), "m" ((*(struct __large_struct *)(4 + (u16 *)dst))), "i" (2), "0" (ret))
                                  ;
  }
  clac();
  return ret;
 case 16:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1)) {
   asm("":::"memory");
   asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(1[(u64 *)src]), "m" ((*(struct __large_struct *)(1 + (u64 *)dst))), "i" (8), "0" (ret))
                                 ;
  }
  clac();
  return ret;
 default:
  return copy_user_generic(( void *)dst, src, size);
 }
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_to_user(void *dst, const void *src, unsigned size)
{
 might_fault();
 kasan_check_read(src, size);
 return __copy_to_user_nocheck(dst, src, size);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_in_user(void *dst, const void *src, unsigned size)
{
 int ret = 0;

 might_fault();
 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 switch (size) {
 case 1: {
  u8 tmp;
  stac();
  asm volatile("\n" "1:	mov""b"" %2,%""b""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=q"(tmp) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""b"" %""b""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "iq"(tmp), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                  ;
  clac();
  return ret;
 }
 case 2: {
  u16 tmp;
  stac();
  asm volatile("\n" "1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                  ;
  clac();
  return ret;
 }

 case 4: {
  u32 tmp;
  stac();
  asm volatile("\n" "1:	mov""l"" %2,%""k""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""l"" %""k""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                  ;
  clac();
  return ret;
 }
 case 8: {
  u64 tmp;
  stac();
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                                ;
  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(tmp), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                                 ;
  clac();
  return ret;
 }
 default:
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 }
}

static __attribute__((warn_unused_result)) inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int
__copy_from_user_inatomic(void *dst, const void *src, unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_from_user_nocheck(dst, src, size);
}

static __attribute__((warn_unused_result)) inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int
__copy_to_user_inatomic(void *dst, const void *src, unsigned size)
{
 kasan_check_read(src, size);
 return __copy_to_user_nocheck(dst, src, size);
}

extern long __copy_user_nocache(void *dst, const void *src,
    unsigned size, int zerorest);

static inline __attribute__((no_instrument_function)) int
__copy_from_user_nocache(void *dst, const void *src, unsigned size)
{
 might_fault();
 kasan_check_write(dst, size);
 return __copy_user_nocache(dst, src, size, 1);
}

static inline __attribute__((no_instrument_function)) int
__copy_from_user_inatomic_nocache(void *dst, const void *src,
      unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_nocache(dst, src, size, 0);
}

unsigned long
copy_user_handle_tail(char *to, char *from, unsigned len);
# 674 "./arch/x86/include/asm/uaccess.h" 2


unsigned long __attribute__((warn_unused_result)) _copy_from_user(void *to, const void *from,
        unsigned n);
unsigned long __attribute__((warn_unused_result)) _copy_to_user(void *to, const void *from,
      unsigned n);







extern void __attribute__((warning("copy_from_user() buffer size is too small")))
copy_from_user_overflow(void);
extern void __attribute__((warning("copy_to_user() buffer size is too small")))
copy_to_user_overflow(void) __asm__("copy_from_user_overflow");
# 708 "./arch/x86/include/asm/uaccess.h"
static inline __attribute__((no_instrument_function)) void
__copy_from_user_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_fmt("./arch/x86/include/asm/uaccess.h", 711, "Buffer overflow detected (%d < %lu)!\n", size, count); __builtin_expect(!!(__ret_warn_on), 0); });
}





static inline __attribute__((no_instrument_function)) unsigned long __attribute__((warn_unused_result))
copy_from_user(void *to, const void *from, unsigned long n)
{
 int sz = -1;

 might_fault();

 kasan_check_write(to, n);
# 745 "./arch/x86/include/asm/uaccess.h"
 if (__builtin_expect(!!(sz < 0 || sz >= n), 1))
  n = _copy_from_user(to, from, n);
 else if(__builtin_constant_p(n))
  copy_from_user_overflow();
 else
  __copy_from_user_overflow(sz, n);

 return n;
}

static inline __attribute__((no_instrument_function)) unsigned long __attribute__((warn_unused_result))
copy_to_user(void *to, const void *from, unsigned long n)
{
 int sz = -1;

 kasan_check_read(from, n);

 might_fault();


 if (__builtin_expect(!!(sz < 0 || sz >= n), 1))
  n = _copy_to_user(to, from, n);
 else if(__builtin_constant_p(n))
  copy_to_user_overflow();
 else
  __copy_from_user_overflow(sz, n);

 return n;
}
# 26 "include/net/checksum.h" 2
# 1 "./arch/x86/include/asm/checksum.h" 1



# 1 "./arch/x86/include/asm/checksum_64.h" 1
# 22 "./arch/x86/include/asm/checksum_64.h"
static inline __attribute__((no_instrument_function)) __sum16 csum_fold(__wsum sum)
{
 asm("  addl %1,%0\n"
     "  adcl $0xffff,%0"
     : "=r" (sum)
     : "r" (( u32)sum << 16),
       "0" (( u32)sum & 0xffff0000));
 return ( __sum16)(~( u32)sum >> 16);
}
# 45 "./arch/x86/include/asm/checksum_64.h"
static inline __attribute__((no_instrument_function)) __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
{
 unsigned int sum;

 asm("  movl (%1), %0\n"
     "  subl $4, %2\n"
     "  jbe 2f\n"
     "  addl 4(%1), %0\n"
     "  adcl 8(%1), %0\n"
     "  adcl 12(%1), %0\n"
     "1: adcl 16(%1), %0\n"
     "  lea 4(%1), %1\n"
     "  decl %2\n"
     "  jne	1b\n"
     "  adcl $0, %0\n"
     "  movl %0, %2\n"
     "  shrl $16, %0\n"
     "  addw %w2, %w0\n"
     "  adcl $0, %0\n"
     "  notl %0\n"
     "2:"



     : "=r" (sum), "=r" (iph), "=r" (ihl)
     : "1" (iph), "2" (ihl)
     : "memory");
 return ( __sum16)sum;
}
# 86 "./arch/x86/include/asm/checksum_64.h"
static inline __attribute__((no_instrument_function)) __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
     __u8 proto, __wsum sum)
{
 asm("  addl %1, %0\n"
     "  adcl %2, %0\n"
     "  adcl %3, %0\n"
     "  adcl $0, %0\n"
     : "=r" (sum)
     : "g" (daddr), "g" (saddr),
       "g" ((len + proto)<<8), "0" (sum));
 return sum;
}
# 112 "./arch/x86/include/asm/checksum_64.h"
static inline __attribute__((no_instrument_function)) __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr,
     __u32 len, __u8 proto,
     __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}
# 129 "./arch/x86/include/asm/checksum_64.h"
extern __wsum csum_partial(const void *buff, int len, __wsum sum);






extern __attribute__((externally_visible)) __wsum csum_partial_copy_generic(const void *src, const void *dst,
     int len, __wsum sum,
     int *src_err_ptr, int *dst_err_ptr);


extern __wsum csum_partial_copy_from_user(const void *src, void *dst,
       int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_to_user(const void *src, void *dst,
     int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_nocheck(const void *src, void *dst,
     int len, __wsum sum);
# 160 "./arch/x86/include/asm/checksum_64.h"
extern __sum16 ip_compute_csum(const void *buff, int len);
# 175 "./arch/x86/include/asm/checksum_64.h"
struct in6_addr;


extern __sum16
csum_ipv6_magic(const struct in6_addr *saddr, const struct in6_addr *daddr,
  __u32 len, __u8 proto, __wsum sum);

static inline __attribute__((no_instrument_function)) unsigned add32_with_carry(unsigned a, unsigned b)
{
 asm("addl %2,%0\n\t"
     "adcl $0,%0"
     : "=r" (a)
     : "0" (a), "rm" (b));
 return a;
}


static inline __attribute__((no_instrument_function)) __wsum csum_add(__wsum csum, __wsum addend)
{
 return ( __wsum)add32_with_carry(( unsigned)csum,
      ( unsigned)addend);
}
# 5 "./arch/x86/include/asm/checksum.h" 2
# 27 "include/net/checksum.h" 2
# 69 "include/net/checksum.h"
static inline __attribute__((no_instrument_function)) __wsum csum_sub(__wsum csum, __wsum addend)
{
 return csum_add(csum, ~addend);
}

static inline __attribute__((no_instrument_function)) __sum16 csum16_add(__sum16 csum, __be16 addend)
{
 u16 res = ( u16)csum;

 res += ( u16)addend;
 return ( __sum16)(res + (res < ( u16)addend));
}

static inline __attribute__((no_instrument_function)) __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
 return csum16_add(csum, ~addend);
}

static inline __attribute__((no_instrument_function)) __wsum
csum_block_add(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;


 if (offset & 1)
  sum = ror32(sum, 8);

 return csum_add(csum, ( __wsum)sum);
}

static inline __attribute__((no_instrument_function)) __wsum
csum_block_add_ext(__wsum csum, __wsum csum2, int offset, int len)
{
 return csum_block_add(csum, csum2, offset);
}

static inline __attribute__((no_instrument_function)) __wsum
csum_block_sub(__wsum csum, __wsum csum2, int offset)
{
 return csum_block_add(csum, ~csum2, offset);
}

static inline __attribute__((no_instrument_function)) __wsum csum_unfold(__sum16 n)
{
 return ( __wsum)n;
}

static inline __attribute__((no_instrument_function)) __wsum csum_partial_ext(const void *buff, int len, __wsum sum)
{
 return csum_partial(buff, len, sum);
}



static inline __attribute__((no_instrument_function)) void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
 *sum = csum_fold(csum_add(diff, ~csum_unfold(*sum)));
}

static inline __attribute__((no_instrument_function)) void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
{
 __wsum tmp = csum_sub(~csum_unfold(*sum), ( __wsum)from);

 *sum = csum_fold(csum_add(tmp, ( __wsum)to));
}







static inline __attribute__((no_instrument_function)) void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
 *sum = ~csum16_add(csum16_sub(~(*sum), old), new);
}

struct sk_buff;
void inet_proto_csum_replace4(__sum16 *sum, struct sk_buff *skb,
         __be32 from, __be32 to, bool pseudohdr);
void inet_proto_csum_replace16(__sum16 *sum, struct sk_buff *skb,
          const __be32 *from, const __be32 *to,
          bool pseudohdr);
void inet_proto_csum_replace_by_diff(__sum16 *sum, struct sk_buff *skb,
         __wsum diff, bool pseudohdr);

static inline __attribute__((no_instrument_function)) void inet_proto_csum_replace2(__sum16 *sum, struct sk_buff *skb,
         __be16 from, __be16 to,
         bool pseudohdr)
{
 inet_proto_csum_replace4(sum, skb, ( __be32)from,
     ( __be32)to, pseudohdr);
}

static inline __attribute__((no_instrument_function)) __wsum remcsum_adjust(void *ptr, __wsum csum,
        int start, int offset)
{
 __sum16 *psum = (__sum16 *)(ptr + offset);
 __wsum delta;


 csum = csum_sub(csum, csum_partial(ptr, start, 0));


 delta = csum_sub(( __wsum)csum_fold(csum),
    ( __wsum)*psum);
 *psum = csum_fold(csum);

 return delta;
}

static inline __attribute__((no_instrument_function)) void remcsum_unadjust(__sum16 *psum, __wsum delta)
{
 *psum = csum_fold(csum_sub(delta, *psum));
}
# 32 "include/linux/skbuff.h" 2


# 1 "include/linux/dma-mapping.h" 1



# 1 "include/linux/sizes.h" 1
# 5 "include/linux/dma-mapping.h" 2

# 1 "include/linux/device.h" 1
# 17 "include/linux/device.h"
# 1 "include/linux/kobject.h" 1
# 21 "include/linux/kobject.h"
# 1 "include/linux/sysfs.h" 1
# 15 "include/linux/sysfs.h"
# 1 "include/linux/kernfs.h" 1
# 20 "include/linux/kernfs.h"
struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;

struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};




enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 70 "include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 106 "include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 118 "include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;

 unsigned short flags;
 umode_t mode;
 unsigned int ino;
 struct kernfs_iattrs *iattr;
};
# 146 "include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*remount_fs)(struct kernfs_root *root, int *flags, char *data);
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct ida ino_ida;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {
# 204 "include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 220 "include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};



static inline __attribute__((no_instrument_function)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}
# 253 "include/linux/kernfs.h"
static inline __attribute__((no_instrument_function)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/kernfs.h", 255); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(!(({ union { typeof((&kn->dir.children)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); else __read_once_size_nocheck(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); __u.__val; }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/kernfs.h", 256); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((no_instrument_function)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
size_t kernfs_path_len(struct kernfs_node *kn);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
char *kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name,
      umode_t mode, loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
void kernfs_notify(struct kernfs_node *kn);

const void *kernfs_super_ns(struct super_block *sb);
struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
          struct kernfs_root *root, unsigned long magic,
          bool *new_sb_created, const void *ns);
void kernfs_kill_sb(struct super_block *sb);
struct super_block *kernfs_pin_sb(struct kernfs_root *root, const void *ns);

void kernfs_init(void);
# 439 "include/linux/kernfs.h"
static inline __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode, priv, ((void *)0));
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, size, ops, priv, ns,
        key);
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode, size, ops, priv, ((void *)0));
}

static inline __attribute__((no_instrument_function)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((no_instrument_function)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}

static inline __attribute__((no_instrument_function)) struct dentry *
kernfs_mount(struct file_system_type *fs_type, int flags,
  struct kernfs_root *root, unsigned long magic,
  bool *new_sb_created)
{
 return kernfs_mount_ns(fs_type, flags, root,
    magic, new_sb_created, ((void *)0));
}
# 16 "include/linux/sysfs.h" 2




# 1 "include/linux/kobject_ns.h" 1
# 20 "include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 40 "include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 21 "include/linux/sysfs.h" 2
# 1 "include/linux/stat.h" 1




# 1 "./arch/x86/include/uapi/asm/stat.h" 1



# 1 "./arch/x86/include/asm/posix_types.h" 1
# 5 "./arch/x86/include/uapi/asm/stat.h" 2
# 82 "./arch/x86/include/uapi/asm/stat.h"
struct stat {
 __kernel_ulong_t st_dev;
 __kernel_ulong_t st_ino;
 __kernel_ulong_t st_nlink;

 unsigned int st_mode;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned int __pad0;
 __kernel_ulong_t st_rdev;
 __kernel_long_t st_size;
 __kernel_long_t st_blksize;
 __kernel_long_t st_blocks;

 __kernel_ulong_t st_atime;
 __kernel_ulong_t st_atime_nsec;
 __kernel_ulong_t st_mtime;
 __kernel_ulong_t st_mtime_nsec;
 __kernel_ulong_t st_ctime;
 __kernel_ulong_t st_ctime_nsec;
 __kernel_long_t __unused[3];
};
# 116 "./arch/x86/include/uapi/asm/stat.h"
struct __old_kernel_stat {
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;






 unsigned int st_size;
 unsigned int st_atime;
 unsigned int st_mtime;
 unsigned int st_ctime;

};
# 6 "include/linux/stat.h" 2
# 1 "include/uapi/linux/stat.h" 1
# 7 "include/linux/stat.h" 2
# 21 "include/linux/stat.h"
struct kstat {
 u64 ino;
 dev_t dev;
 umode_t mode;
 unsigned int nlink;
 kuid_t uid;
 kgid_t gid;
 dev_t rdev;
 loff_t size;
 struct timespec atime;
 struct timespec mtime;
 struct timespec ctime;
 unsigned long blksize;
 unsigned long long blocks;
};
# 22 "include/linux/sysfs.h" 2


struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 83 "include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 152 "include/linux/sysfs.h"
struct file;
struct vm_area_struct;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 209 "include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((warn_unused_result)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((warn_unused_result)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((warn_unused_result)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((warn_unused_result)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((warn_unused_result)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((warn_unused_result)) sysfs_create_files(struct kobject *kobj,
       const struct attribute **attr);
int __attribute__((warn_unused_result)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute **attr);

int __attribute__((warn_unused_result)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((warn_unused_result)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((warn_unused_result)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((warn_unused_result)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((warn_unused_result)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
          struct kobject *target_kobj,
          const char *target_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((warn_unused_result)) sysfs_init(void);

static inline __attribute__((no_instrument_function)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}
# 491 "include/linux/sysfs.h"
static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((no_instrument_function)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const unsigned char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((no_instrument_function)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 22 "include/linux/kobject.h" 2


# 1 "include/linux/kref.h" 1
# 23 "include/linux/kref.h"
struct kref {
 atomic_t refcount;
};





static inline __attribute__((no_instrument_function)) void kref_init(struct kref *kref)
{
 atomic_set(&kref->refcount, 1);
}





static inline __attribute__((no_instrument_function)) void kref_get(struct kref *kref)
{




 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!((atomic_add_return(1, &kref->refcount)) < 2); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/kref.h", 46); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
}
# 67 "include/linux/kref.h"
static inline __attribute__((no_instrument_function)) int kref_sub(struct kref *kref, unsigned int count,
      void (*release)(struct kref *kref))
{
 ({ int __ret_warn_on = !!(release == ((void *)0)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/kref.h", 70); __builtin_expect(!!(__ret_warn_on), 0); });

 if (atomic_sub_and_test((int) count, &kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 96 "include/linux/kref.h"
static inline __attribute__((no_instrument_function)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 return kref_sub(kref, 1, release);
}

static inline __attribute__((no_instrument_function)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 ({ int __ret_warn_on = !!(release == ((void *)0)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/kref.h", 105); __builtin_expect(!!(__ret_warn_on), 0); });
 if (__builtin_expect(!!(!atomic_add_unless(&kref->refcount, -1, 1)), 0)) {
  mutex_lock(lock);
  if (__builtin_expect(!!(!atomic_dec_and_test(&kref->refcount)), 0)) {
   mutex_unlock(lock);
   return 0;
  }
  release(kref);
  return 1;
 }
 return 0;
}
# 134 "include/linux/kref.h"
static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kref_get_unless_zero(struct kref *kref)
{
 return atomic_add_unless(&kref->refcount, 1, 0);
}
# 25 "include/linux/kobject.h" 2
# 37 "include/linux/kobject.h"
extern char uevent_helper[];



extern u64 uevent_seqnum;
# 53 "include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_MAX
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((format(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((format(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((no_instrument_function)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((format(printf, 3, 4))) __attribute__((warn_unused_result))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((format(printf, 4, 5))) __attribute__((warn_unused_result))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((warn_unused_result)) kobject_create(void);
extern struct kobject * __attribute__((warn_unused_result)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((warn_unused_result)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((warn_unused_result)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 168 "include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
};

extern void kset_init(struct kset *kset);
extern int __attribute__((warn_unused_result)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((warn_unused_result)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((no_instrument_function)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ const typeof( ((struct kset *)0)->kobj ) *__mptr = (kobj); (struct kset *)( (char *)__mptr - __builtin_offsetof(struct kset, kobj) );}) : ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((no_instrument_function)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((no_instrument_function)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);

__attribute__((format(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);

int kobject_action_type(const char *buf, size_t count,
   enum kobject_action *type);
# 18 "include/linux/device.h" 2
# 1 "include/linux/klist.h" 1
# 19 "include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 36 "include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 19 "include/linux/device.h" 2





# 1 "include/linux/pinctrl/devinfo.h" 1
# 48 "include/linux/pinctrl/devinfo.h"
static inline __attribute__((no_instrument_function)) int pinctrl_bind_pins(struct device *dev)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int pinctrl_init_done(struct device *dev)
{
 return 0;
}
# 25 "include/linux/device.h" 2


# 1 "include/linux/ratelimit.h" 1
# 10 "include/linux/ratelimit.h"
struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
};
# 34 "include/linux/ratelimit.h"
static inline __attribute__((no_instrument_function)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { { (0) } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
 rs->printed = 0;
 rs->missed = 0;
 rs->begin = 0;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 28 "include/linux/device.h" 2


# 1 "./arch/x86/include/asm/device.h" 1



struct dev_archdata {

 struct dma_map_ops *dma_ops;


 void *iommu;

};


struct dma_domain {
 struct list_head node;
 struct dma_map_ops *dma_ops;
 int domain_nr;
};
void add_dma_domain(struct dma_domain *domain);
void del_dma_domain(struct dma_domain *domain);


struct pdev_archdata {
};
# 31 "include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 58 "include/linux/device.h"
extern int __attribute__((warn_unused_result)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
# 108 "include/linux/device.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 struct device_attribute *dev_attrs;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;
};

extern int __attribute__((warn_unused_result)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((warn_unused_result)) bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          void *data,
          int (*match)(struct device *dev, void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name);
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 199 "include/linux/device.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 224 "include/linux/device.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 263 "include/linux/device.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;

 const struct dev_pm_ops *pm;

 struct driver_private *p;
};


extern int __attribute__((warn_unused_result)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);




struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 316 "include/linux/device.h"
extern int __attribute__((warn_unused_result)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((warn_unused_result)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, void *data,
      int (*match)(struct device *dev, void *data));
# 343 "include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 387 "include/linux/device.h"
struct class {
 const char *name;
 struct module *owner;

 struct class_attribute *class_attrs;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((warn_unused_result)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 431 "include/linux/device.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));

struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 468 "include/linux/device.h"
extern int __attribute__((warn_unused_result)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 500 "include/linux/device.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((warn_unused_result)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((warn_unused_result)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 536 "include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 595 "include/linux/device.h"
extern int device_create_file(struct device *device,
         const struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          const struct device_attribute *attr);
extern bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
extern int __attribute__((warn_unused_result)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);


extern void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));
# 626 "include/linux/device.h"
extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * __attribute__((warn_unused_result)) devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 0)))
char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
        va_list ap) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 4)))
char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((no_instrument_function)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x8000u));
}
static inline __attribute__((no_instrument_function)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 return devm_kmalloc(dev, n * size, flags);
}
static inline __attribute__((no_instrument_function)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x8000u));
}
extern void devm_kfree(struct device *dev, void *p);
extern char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
extern void *devm_kmemdup(struct device *dev, const void *src, size_t len,
     gfp_t gfp);

extern unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
extern void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev, struct resource *res);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((no_instrument_function)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;
};
# 780 "include/linux/device.h"
struct device {
 struct device *parent;

 struct device_private *p;

 struct kobject kobj;
 const char *init_name;
 const struct device_type *type;

 struct mutex mutex;



 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;

 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct irq_domain *msi_domain;





 struct list_head msi_list;



 int numa_node;

 u64 *dma_mask;
 u64 coherent_dma_mask;




 unsigned long dma_pfn_offset;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;

 struct dma_coherent_mem *dma_mem;






 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct klist_node knode_class;
 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;

 bool offline_disabled:1;
 bool offline:1;
};

static inline __attribute__((no_instrument_function)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ const typeof( ((struct device *)0)->kobj ) *__mptr = (kobj); (struct device *)( (char *)__mptr - __builtin_offsetof(struct device, kobj) );});
}


# 1 "include/linux/pm_wakeup.h" 1
# 31 "include/linux/pm_wakeup.h"
struct wake_irq;
# 54 "include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 bool active:1;
 bool autosleep_enabled:1;
};







static inline __attribute__((no_instrument_function)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((no_instrument_function)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}


extern void wakeup_source_prepare(struct wakeup_source *ws, const char *name);
extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_drop(struct wakeup_source *ws);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec);
extern void pm_wakeup_event(struct device *dev, unsigned int msec);
# 191 "include/linux/pm_wakeup.h"
static inline __attribute__((no_instrument_function)) void wakeup_source_init(struct wakeup_source *ws,
          const char *name)
{
 wakeup_source_prepare(ws, name);
 wakeup_source_add(ws);
}

static inline __attribute__((no_instrument_function)) void wakeup_source_trash(struct wakeup_source *ws)
{
 wakeup_source_remove(ws);
 wakeup_source_drop(ws);
}
# 864 "include/linux/device.h" 2

static inline __attribute__((no_instrument_function)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((format(printf, 2, 3)))
int dev_set_name(struct device *dev, const char *name, ...);


static inline __attribute__((no_instrument_function)) int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline __attribute__((no_instrument_function)) void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 896 "include/linux/device.h"
static inline __attribute__((no_instrument_function)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((no_instrument_function)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((no_instrument_function)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((no_instrument_function)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((no_instrument_function)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((no_instrument_function)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((no_instrument_function)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((no_instrument_function)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((no_instrument_function)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((no_instrument_function)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((no_instrument_function)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((no_instrument_function)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((no_instrument_function)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((no_instrument_function)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((no_instrument_function)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((no_instrument_function)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((no_instrument_function)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((no_instrument_function)) struct device_node *dev_of_node(struct device *dev)
{
 if (!(0 || 0))
  return ((void *)0);
 return dev->of_node;
}

void driver_init(void);




extern int __attribute__((warn_unused_result)) device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int __attribute__((warn_unused_result)) device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern int device_for_each_child_reverse(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern int device_rename(struct device *dev, const char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern const char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          const char **tmp);

static inline __attribute__((no_instrument_function)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);
extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);




extern struct device *__root_device_register(const char *name,
          struct module *owner);





extern void root_device_unregister(struct device *root);

static inline __attribute__((no_instrument_function)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





extern int __attribute__((warn_unused_result)) device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int __attribute__((warn_unused_result)) device_attach(struct device *dev);
extern int __attribute__((warn_unused_result)) driver_attach(struct device_driver *drv);
extern void device_initial_probe(struct device *dev);
extern int __attribute__((warn_unused_result)) device_reprobe(struct device *dev);

extern bool device_is_bound(struct device *dev);




extern __attribute__((format(printf, 5, 0)))
struct device *device_create_vargs(struct class *cls, struct device *parent,
       dev_t devt, void *drvdata,
       const char *fmt, va_list vargs);
extern __attribute__((format(printf, 5, 6)))
struct device *device_create(struct class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        const char *fmt, ...);
extern __attribute__((format(printf, 6, 7)))
struct device *device_create_with_groups(struct class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        const struct attribute_group **groups,
        const char *fmt, ...);
extern void device_destroy(struct class *cls, dev_t devt);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);


extern int devtmpfs_create_node(struct device *dev);
extern int devtmpfs_delete_node(struct device *dev);
extern int devtmpfs_mount(const char *mntdir);







extern void device_shutdown(void);


extern const char *dev_driver_string(const struct device *dev);




extern __attribute__((format(printf, 3, 0)))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

extern __attribute__((format(printf, 3, 4)))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_emerg(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_alert(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_crit(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_err(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_warn(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_notice(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 7 "include/linux/dma-mapping.h" 2

# 1 "include/linux/dma-attrs.h" 1
# 13 "include/linux/dma-attrs.h"
enum dma_attr {
 DMA_ATTR_WRITE_BARRIER,
 DMA_ATTR_WEAK_ORDERING,
 DMA_ATTR_WRITE_COMBINE,
 DMA_ATTR_NON_CONSISTENT,
 DMA_ATTR_NO_KERNEL_MAPPING,
 DMA_ATTR_SKIP_CPU_SYNC,
 DMA_ATTR_FORCE_CONTIGUOUS,
 DMA_ATTR_ALLOC_SINGLE_PAGES,
 DMA_ATTR_MAX,
};







struct dma_attrs {
 unsigned long flags[(((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
};






static inline __attribute__((no_instrument_function)) void init_dma_attrs(struct dma_attrs *attrs)
{
 bitmap_zero(attrs->flags, (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))));
}






static inline __attribute__((no_instrument_function)) void dma_set_attr(enum dma_attr attr, struct dma_attrs *attrs)
{
 if (attrs == ((void *)0))
  return;
 do { if (__builtin_expect(!!(attr >= DMA_ATTR_MAX), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-attrs.h"), "i" (54), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 __set_bit(attr, attrs->flags);
}






static inline __attribute__((no_instrument_function)) int dma_get_attr(enum dma_attr attr, struct dma_attrs *attrs)
{
 if (attrs == ((void *)0))
  return 0;
 do { if (__builtin_expect(!!(attr >= DMA_ATTR_MAX), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-attrs.h"), "i" (67), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return (__builtin_constant_p((attr)) ? constant_test_bit((attr), (attrs->flags)) : variable_test_bit((attr), (attrs->flags)));
}
# 9 "include/linux/dma-mapping.h" 2
# 1 "include/linux/dma-debug.h" 1
# 25 "include/linux/dma-debug.h"
struct device;
struct scatterlist;
struct bus_type;
# 92 "include/linux/dma-debug.h"
static inline __attribute__((no_instrument_function)) void dma_debug_add_bus(struct bus_type *bus)
{
}

static inline __attribute__((no_instrument_function)) void dma_debug_init(u32 num_entries)
{
}

static inline __attribute__((no_instrument_function)) int dma_debug_resize_entries(u32 num_entries)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void debug_dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          int direction, dma_addr_t dma_addr,
          bool map_single)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_mapping_error(struct device *dev,
       dma_addr_t dma_addr)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
     size_t size, int direction,
     bool map_single)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_map_sg(struct device *dev, struct scatterlist *sg,
        int nents, int mapped_ents, int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_unmap_sg(struct device *dev,
          struct scatterlist *sglist,
          int nelems, int dir)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_alloc_coherent(struct device *dev, size_t size,
         dma_addr_t dma_addr, void *virt)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_free_coherent(struct device *dev, size_t size,
        void *virt, dma_addr_t addr)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_single_for_cpu(struct device *dev,
       dma_addr_t dma_handle,
       size_t size, int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_single_for_device(struct device *dev,
          dma_addr_t dma_handle,
          size_t size, int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_single_range_for_cpu(struct device *dev,
             dma_addr_t dma_handle,
             unsigned long offset,
             size_t size,
             int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_single_range_for_device(struct device *dev,
         dma_addr_t dma_handle,
         unsigned long offset,
         size_t size,
         int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_sg_for_cpu(struct device *dev,
          struct scatterlist *sg,
          int nelems, int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_sync_sg_for_device(struct device *dev,
      struct scatterlist *sg,
      int nelems, int direction)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_dump_mappings(struct device *dev)
{
}

static inline __attribute__((no_instrument_function)) void debug_dma_assert_idle(struct page *page)
{
}
# 10 "include/linux/dma-mapping.h" 2
# 1 "include/linux/dma-direction.h" 1






enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};
# 11 "include/linux/dma-mapping.h" 2
# 1 "include/linux/scatterlist.h" 1






# 1 "include/linux/mm.h" 1
# 15 "include/linux/mm.h"
# 1 "include/linux/debug_locks.h" 1







struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;


static inline __attribute__((no_instrument_function)) int __debug_locks_off(void)
{
 return ({ __typeof__ (*((&debug_locks))) __ret = ((0)); switch (sizeof(*((&debug_locks)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}




extern int debug_locks_off(void);
# 48 "include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((no_instrument_function)) void debug_show_all_locks(void)
{
}

static inline __attribute__((no_instrument_function)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((no_instrument_function)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((no_instrument_function)) void
debug_check_no_locks_held(void)
{
}
# 16 "include/linux/mm.h" 2




# 1 "include/linux/bit_spinlock.h" 1
# 15 "include/linux/bit_spinlock.h"
static inline __attribute__((no_instrument_function)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 __asm__ __volatile__("": : :"memory");

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  do {
   cpu_relax();
  } while ((__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr))));
  __asm__ __volatile__("": : :"memory");
 }

 (void)0;
}




static inline __attribute__((no_instrument_function)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((no_instrument_function)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}






static inline __attribute__((no_instrument_function)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}




static inline __attribute__((no_instrument_function)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return (__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr)));





}
# 21 "include/linux/mm.h" 2
# 1 "include/linux/shrinker.h" 1
# 11 "include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;






 unsigned long nr_to_scan;


 int nid;


 struct mem_cgroup *memcg;
};
# 49 "include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 int seeks;
 long batch;
 unsigned long flags;


 struct list_head list;

 atomic_long_t *nr_deferred;
};






extern int register_shrinker(struct shrinker *);
extern void unregister_shrinker(struct shrinker *);
# 22 "include/linux/mm.h" 2

# 1 "include/linux/page_ext.h" 1




# 1 "include/linux/stacktrace.h" 1





struct task_struct;
struct pt_regs;


struct stack_trace {
 unsigned int nr_entries, max_entries;
 unsigned long *entries;
 int skip;
};

extern void save_stack_trace(struct stack_trace *trace);
extern void save_stack_trace_regs(struct pt_regs *regs,
      struct stack_trace *trace);
extern void save_stack_trace_tsk(struct task_struct *tsk,
    struct stack_trace *trace);

extern void print_stack_trace(struct stack_trace *trace, int spaces);
extern int snprint_stack_trace(char *buf, size_t size,
   struct stack_trace *trace, int spaces);


extern void save_stack_trace_user(struct stack_trace *trace);
# 6 "include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 bool (*need)(void);
 void (*init)(void);
};
# 70 "include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((no_instrument_function)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((no_instrument_function)) struct page_ext *lookup_page_ext(struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) void page_ext_init(void)
{
}

static inline __attribute__((no_instrument_function)) void page_ext_init_flatmem(void)
{
}
# 24 "include/linux/mm.h" 2

# 1 "include/linux/page_ref.h" 1





# 1 "include/linux/page-flags.h" 1
# 74 "include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_error,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_swapcache,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,


 PG_uncached,
# 108 "include/linux/page-flags.h"
 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_private_2,
};



struct page;

static inline __attribute__((no_instrument_function)) struct page *compound_head(struct page *page)
{
 unsigned long head = ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });

 if (__builtin_expect(!!(head & 1), 0))
  return (struct page *) (head - 1);
 return page;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageTail(struct page *page)
{
 return ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; }) & 1;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageCompound(struct page *page)
{
 return (__builtin_constant_p((PG_head)) ? constant_test_bit((PG_head), (&page->flags)) : variable_test_bit((PG_head), (&page->flags))) || PageTail(page);
}
# 252 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageLocked(struct page *page) { return (__builtin_constant_p((PG_locked)) ? constant_test_bit((PG_locked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags)) : variable_test_bit((PG_locked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageError(struct page *page) { return (__builtin_constant_p((PG_error)) ? constant_test_bit((PG_error), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_error), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReferenced(struct page *page) { return (__builtin_constant_p((PG_referenced)) ? constant_test_bit((PG_referenced), (&compound_head(page)->flags)) : variable_test_bit((PG_referenced), (&compound_head(page)->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &compound_head(page)->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageDirty(struct page *page) { return (__builtin_constant_p((PG_dirty)) ? constant_test_bit((PG_dirty), (&compound_head(page)->flags)) : variable_test_bit((PG_dirty), (&compound_head(page)->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &compound_head(page)->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageLRU(struct page *page) { return (__builtin_constant_p((PG_lru)) ? constant_test_bit((PG_lru), (&compound_head(page)->flags)) : variable_test_bit((PG_lru), (&compound_head(page)->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &compound_head(page)->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageActive(struct page *page) { return (__builtin_constant_p((PG_active)) ? constant_test_bit((PG_active), (&compound_head(page)->flags)) : variable_test_bit((PG_active), (&compound_head(page)->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageActive(struct page *page) { set_bit(PG_active, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &compound_head(page)->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSlab(struct page *page) { return (__builtin_constant_p((PG_slab)) ? constant_test_bit((PG_slab), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags)) : variable_test_bit((PG_slab), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSlobFree(struct page *page) { return (__builtin_constant_p((PG_slob_free)) ? constant_test_bit((PG_slob_free), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags)) : variable_test_bit((PG_slob_free), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageChecked(struct page *page) { return (__builtin_constant_p((PG_checked)) ? constant_test_bit((PG_checked), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_checked), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePinned(struct page *page) { return (__builtin_constant_p((PG_pinned)) ? constant_test_bit((PG_pinned), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_pinned), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSavePinned(struct page *page) { return (__builtin_constant_p((PG_savepinned)) ? constant_test_bit((PG_savepinned), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_savepinned), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); };
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageForeign(struct page *page) { return (__builtin_constant_p((PG_foreign)) ? constant_test_bit((PG_foreign), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_foreign), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); };

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReserved(struct page *page) { return (__builtin_constant_p((PG_reserved)) ? constant_test_bit((PG_reserved), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_reserved), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSwapBacked(struct page *page) { return (__builtin_constant_p((PG_swapbacked)) ? constant_test_bit((PG_swapbacked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags)) : variable_test_bit((PG_swapbacked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePrivate(struct page *page) { return (__builtin_constant_p((PG_private)) ? constant_test_bit((PG_private), (&page->flags)) : variable_test_bit((PG_private), (&page->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &page->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &page->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePrivate2(struct page *page) { return (__builtin_constant_p((PG_private_2)) ? constant_test_bit((PG_private_2), (&page->flags)) : variable_test_bit((PG_private_2), (&page->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &page->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageOwnerPriv1(struct page *page) { return (__builtin_constant_p((PG_owner_priv_1)) ? constant_test_bit((PG_owner_priv_1), (&page->flags)) : variable_test_bit((PG_owner_priv_1), (&page->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &page->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &page->flags); }





static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageWriteback(struct page *page) { return (__builtin_constant_p((PG_writeback)) ? constant_test_bit((PG_writeback), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_writeback), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageMappedToDisk(struct page *page) { return (__builtin_constant_p((PG_mappedtodisk)) ? constant_test_bit((PG_mappedtodisk), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_mappedtodisk), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReclaim(struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_reclaim), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReadahead(struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_reclaim), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
# 310 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((no_instrument_function)) void SetPageHighMem(struct page *page) { } static inline __attribute__((no_instrument_function)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSwapCache(struct page *page) { return (__builtin_constant_p((PG_swapcache)) ? constant_test_bit((PG_swapcache), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_swapcache), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }




static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageUnevictable(struct page *page) { return (__builtin_constant_p((PG_unevictable)) ? constant_test_bit((PG_unevictable), (&compound_head(page)->flags)) : variable_test_bit((PG_unevictable), (&compound_head(page)->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &compound_head(page)->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &compound_head(page)->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &compound_head(page)->flags); }


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageMlocked(struct page *page) { return (__builtin_constant_p((PG_mlocked)) ? constant_test_bit((PG_mlocked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags)) : variable_test_bit((PG_mlocked), (&({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageUncached(struct page *page) { return (__builtin_constant_p((PG_uncached)) ? constant_test_bit((PG_uncached), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags)) : variable_test_bit((PG_uncached), (&({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageUncached(struct page *page) { set_bit(PG_uncached, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageUncached(struct page *page) { clear_bit(PG_uncached, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
# 343 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((no_instrument_function)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((no_instrument_function)) void ClearPageHWPoison(struct page *page) { }
# 374 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageAnonHead(struct page *page)
{
 return ((unsigned long)page->mapping & 1) != 0;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageAnon(struct page *page)
{
 page = compound_head(page);
 return PageAnonHead(page);
}
# 399 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int PageKsm(const struct page *page) { return 0; }


u64 stable_page_flags(struct page *page);

static inline __attribute__((no_instrument_function)) int PageUptodate(struct page *page)
{
 int ret;
 page = compound_head(page);
 ret = (__builtin_constant_p((PG_uptodate)) ? constant_test_bit((PG_uptodate), (&(page)->flags)) : variable_test_bit((PG_uptodate), (&(page)->flags)));
# 417 "include/linux/page-flags.h"
 if (ret)
  __asm__ __volatile__("": : :"memory");

 return ret;
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 __asm__ __volatile__("": : :"memory");
 __set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));





 __asm__ __volatile__("": : :"memory");
 set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline __attribute__((no_instrument_function)) void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline __attribute__((no_instrument_function)) void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageHead(struct page *page) { return (__builtin_constant_p((PG_head)) ? constant_test_bit((PG_head), (&page->flags)) : variable_test_bit((PG_head), (&page->flags))); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &page->flags); } static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &page->flags); }

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void set_compound_head(struct page *page, struct page *head)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) ((unsigned long)head + 1) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_compound_head(struct page *page)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) (0) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}
# 485 "include/linux/page-flags.h"
int PageHuge(struct page *page);
int PageHeadHuge(struct page *page);
bool page_huge_active(struct page *page);
# 586 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((no_instrument_function)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((no_instrument_function)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((no_instrument_function)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((no_instrument_function)) int PageDoubleMap(const struct page *page) { return 0; }
 static inline __attribute__((no_instrument_function)) int TestSetPageDoubleMap(struct page *page) { return 0; }
 static inline __attribute__((no_instrument_function)) int TestClearPageDoubleMap(struct page *page) { return 0; }
# 606 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int PageBuddy(struct page *page)
{
 return atomic_read(&page->_mapcount) == (-128);
}

static inline __attribute__((no_instrument_function)) void __SetPageBuddy(struct page *page)
{
 ((void)(sizeof(( long)(atomic_read(&page->_mapcount) != -1))));
 atomic_set(&page->_mapcount, (-128));
}

static inline __attribute__((no_instrument_function)) void __ClearPageBuddy(struct page *page)
{
 ((void)(sizeof(( long)(!PageBuddy(page)))));
 atomic_set(&page->_mapcount, -1);
}

extern bool is_free_buddy_page(struct page *page);



static inline __attribute__((no_instrument_function)) int PageBalloon(struct page *page)
{
 return atomic_read(&page->_mapcount) == (-256);
}

static inline __attribute__((no_instrument_function)) void __SetPageBalloon(struct page *page)
{
 ((void)(sizeof(( long)(atomic_read(&page->_mapcount) != -1))));
 atomic_set(&page->_mapcount, (-256));
}

static inline __attribute__((no_instrument_function)) void __ClearPageBalloon(struct page *page)
{
 ((void)(sizeof(( long)(!PageBalloon(page)))));
 atomic_set(&page->_mapcount, -1);
}





static inline __attribute__((no_instrument_function)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}

static inline __attribute__((no_instrument_function)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((no_instrument_function)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((no_instrument_function)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 709 "include/linux/page-flags.h"
static inline __attribute__((no_instrument_function)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 7 "include/linux/page_ref.h" 2


extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 40 "include/linux/page_ref.h"
static inline __attribute__((no_instrument_function)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((no_instrument_function)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((no_instrument_function)) int page_ref_count(struct page *page)
{
 return atomic_read(&page->_refcount);
}

static inline __attribute__((no_instrument_function)) int page_count(struct page *page)
{
 return atomic_read(&compound_head(page)->_refcount);
}

static inline __attribute__((no_instrument_function)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}





static inline __attribute__((no_instrument_function)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((no_instrument_function)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((no_instrument_function)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((no_instrument_function)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((no_instrument_function)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((no_instrument_function)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) int page_ref_dec_return(struct page *page)
{
 int ret = (atomic_sub_return(1, &page->_refcount));

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) int page_ref_add_unless(struct page *page, int nr, int u)
{
 int ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((no_instrument_function)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 atomic_set(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}
# 26 "include/linux/mm.h" 2

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct bdi_writeback;
# 43 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void set_max_mapnr(unsigned long limit) { }


extern unsigned long totalram_pages;
extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));



# 1 "./arch/x86/include/asm/pgtable.h" 1
# 21 "./arch/x86/include/asm/pgtable.h"
void ptdump_walk_pgd_level(struct seq_file *m, pgd_t *pgd);
void ptdump_walk_pgd_level_checkwx(void);
# 34 "./arch/x86/include/asm/pgtable.h"
extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)]
 __attribute__((externally_visible));


extern spinlock_t pgd_lock;
extern struct list_head pgd_list;

extern struct mm_struct *pgd_page_get_mm(struct page *page);
# 97 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) int pte_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}


static inline __attribute__((no_instrument_function)) u32 read_pkru(void)
{
 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==0 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==1 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==2 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==3 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==4 && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==5 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==6 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==7 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==8 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==9 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==10 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==11 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==12 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==13 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==14 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==15 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==16 && (1UL<<(((16*32+ 4))&31) & 0)) ) ? 1 : (__builtin_constant_p(((16*32+ 4))) ? constant_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return __read_pkru();
 return 0;
}

static inline __attribute__((no_instrument_function)) void write_pkru(u32 pkru)
{
 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==0 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==1 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==2 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==3 && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==4 && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==5 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==6 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==7 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==8 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==9 && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==10 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==11 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==12 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==13 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==14 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==15 && (1UL<<(((16*32+ 4))&31) & 0)) || ((((16*32+ 4))>>5)==16 && (1UL<<(((16*32+ 4))&31) & 0)) ) ? 1 : (__builtin_constant_p(((16*32+ 4))) ? constant_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  __write_pkru(pkru);
}

static inline __attribute__((no_instrument_function)) int pte_young(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((no_instrument_function)) int pmd_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((no_instrument_function)) int pmd_young(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((no_instrument_function)) int pte_write(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 1);
}

static inline __attribute__((no_instrument_function)) int pte_huge(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline __attribute__((no_instrument_function)) int pte_global(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 8);
}

static inline __attribute__((no_instrument_function)) int pte_exec(pte_t pte)
{
 return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
}

static inline __attribute__((no_instrument_function)) int pte_special(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 9);
}

static inline __attribute__((no_instrument_function)) unsigned long pte_pfn(pte_t pte)
{
 return (native_pte_val(pte) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))))) >> 12;
}

static inline __attribute__((no_instrument_function)) unsigned long pmd_pfn(pmd_t pmd)
{
 return (native_pmd_val(pmd) & pmd_pfn_mask(pmd)) >> 12;
}

static inline __attribute__((no_instrument_function)) unsigned long pud_pfn(pud_t pud)
{
 return (native_pud_val(pud) & pud_pfn_mask(pud)) >> 12;
}



static inline __attribute__((no_instrument_function)) int pmd_large(pmd_t pte)
{
 return pmd_flags(pte) & (((pteval_t)(1)) << 7);
}
# 198 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) pte_t pte_set_flags(pte_t pte, pteval_t set)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v | set);
}

static inline __attribute__((no_instrument_function)) pte_t pte_clear_flags(pte_t pte, pteval_t clear)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v & ~clear);
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkclean(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 6));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkold(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((no_instrument_function)) pte_t pte_wrprotect(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkexec(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 63));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkdirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkyoung(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkwrite(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkhuge(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((no_instrument_function)) pte_t pte_clrhuge(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkglobal(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((no_instrument_function)) pte_t pte_clrglobal(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkspecial(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mkdevmap(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9)|(((u64)(1)) << 58));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_set_flags(pmd_t pmd, pmdval_t set)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v | set);
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_clear_flags(pmd_t pmd, pmdval_t clear)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v & ~clear);
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkold(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkclean(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 6));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_wrprotect(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkdirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((u64)(1)) << 58));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkhuge(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 7));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkyoung(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mkwrite(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mknotpresent(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8));
}


static inline __attribute__((no_instrument_function)) int pte_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((no_instrument_function)) int pmd_soft_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(0)));
}

static inline __attribute__((no_instrument_function)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(0))));
}







static inline __attribute__((no_instrument_function)) pgprotval_t massage_pgprot(pgprot_t pgprot)
{
 pgprotval_t protval = ((pgprot).pgprot);

 if (protval & (((pteval_t)(1)) << 0))
  protval &= __supported_pte_mask;

 return protval;
}

static inline __attribute__((no_instrument_function)) pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
{
 return native_make_pte(((phys_addr_t)page_nr << 12) | massage_pgprot(pgprot))
                              ;
}

static inline __attribute__((no_instrument_function)) pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
{
 return native_make_pmd(((phys_addr_t)page_nr << 12) | massage_pgprot(pgprot))
                              ;
}

static inline __attribute__((no_instrument_function)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 pteval_t val = native_pte_val(pte);





 val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
 val |= massage_pgprot(newprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))));

 return native_make_pte(val);
}

static inline __attribute__((no_instrument_function)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 pmdval_t val = native_pmd_val(pmd);

 val &= ((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));
 val |= massage_pgprot(newprot) & ~((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));

 return native_make_pmd(val);
}



static inline __attribute__((no_instrument_function)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
 pgprotval_t addbits = ((newprot).pgprot);
 return ((pgprot_t) { (preservebits | addbits) } );
}







static inline __attribute__((no_instrument_function)) int is_new_memtype_allowed(u64 paddr, unsigned long size,
      enum page_cache_mode pcm,
      enum page_cache_mode new_pcm)
{



 if (x86_platform.is_untracked_pat_range(paddr, paddr + size))
  return 1;
# 452 "./arch/x86/include/asm/pgtable.h"
 if ((pcm == _PAGE_CACHE_MODE_UC_MINUS &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WC &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WC)) {
  return 0;
 }

 return 1;
}

pmd_t *populate_extra_pmd(unsigned long vaddr);
pte_t *populate_extra_pte(unsigned long vaddr);





# 1 "./arch/x86/include/asm/pgtable_64.h" 1
# 17 "./arch/x86/include/asm/pgtable_64.h"
extern pud_t level3_kernel_pgt[512];
extern pud_t level3_ident_pgt[512];
extern pmd_t level2_kernel_pgt[512];
extern pmd_t level2_fixmap_pgt[512];
extern pmd_t level2_ident_pgt[512];
extern pte_t level1_fixmap_pgt[512];
extern pgd_t init_level4_pgt[];



extern void paging_init(void);
# 42 "./arch/x86/include/asm/pgtable_64.h"
struct mm_struct;

void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);


static inline __attribute__((no_instrument_function)) void native_pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 *ptep = native_make_pte(0);
}

static inline __attribute__((no_instrument_function)) void native_set_pte(pte_t *ptep, pte_t pte)
{
 *ptep = pte;
}

static inline __attribute__((no_instrument_function)) void native_set_pte_atomic(pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((no_instrument_function)) void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 *pmdp = pmd;
}

static inline __attribute__((no_instrument_function)) void native_pmd_clear(pmd_t *pmd)
{
 native_set_pmd(pmd, native_make_pmd(0));
}

static inline __attribute__((no_instrument_function)) pte_t native_ptep_get_and_clear(pte_t *xp)
{

 return native_make_pte(({ __typeof__ (*((&xp->pte))) __ret = ((0)); switch (sizeof(*((&xp->pte)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }));







}

static inline __attribute__((no_instrument_function)) pmd_t native_pmdp_get_and_clear(pmd_t *xp)
{

 return native_make_pmd(({ __typeof__ (*((&xp->pmd))) __ret = ((0)); switch (sizeof(*((&xp->pmd)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }));







}

static inline __attribute__((no_instrument_function)) void native_set_pud(pud_t *pudp, pud_t pud)
{
 *pudp = pud;
}

static inline __attribute__((no_instrument_function)) void native_pud_clear(pud_t *pud)
{
 native_set_pud(pud, native_make_pud(0));
}

static inline __attribute__((no_instrument_function)) void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 *pgdp = pgd;
}

static inline __attribute__((no_instrument_function)) void native_pgd_clear(pgd_t *pgd)
{
 native_set_pgd(pgd, native_make_pgd(0));
}

extern void sync_global_pgds(unsigned long start, unsigned long end,
        int removed);
# 130 "./arch/x86/include/asm/pgtable_64.h"
static inline __attribute__((no_instrument_function)) int pgd_large(pgd_t pgd) { return 0; }
# 158 "./arch/x86/include/asm/pgtable_64.h"
extern int kern_addr_valid(unsigned long addr);
extern void cleanup_highmap(void);
# 178 "./arch/x86/include/asm/pgtable_64.h"
extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);
# 474 "./arch/x86/include/asm/pgtable.h" 2







static inline __attribute__((no_instrument_function)) int pte_none(pte_t pte)
{
 return !pte.pte;
}


static inline __attribute__((no_instrument_function)) int pte_same(pte_t a, pte_t b)
{
 return a.pte == b.pte;
}

static inline __attribute__((no_instrument_function)) int pte_present(pte_t a)
{
 return pte_flags(a) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8));
}


static inline __attribute__((no_instrument_function)) int pte_devmap(pte_t a)
{
 return (pte_flags(a) & (((u64)(1)) << 58)) == (((u64)(1)) << 58);
}



static inline __attribute__((no_instrument_function)) bool pte_accessible(struct mm_struct *mm, pte_t a)
{
 if (pte_flags(a) & (((pteval_t)(1)) << 0))
  return true;

 if ((pte_flags(a) & (((pteval_t)(1)) << 8)) &&
   mm_tlb_flush_pending(mm))
  return true;

 return false;
}

static inline __attribute__((no_instrument_function)) int pte_hidden(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((no_instrument_function)) int pmd_present(pmd_t pmd)
{






 return pmd_flags(pmd) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 7));
}
# 551 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) int pmd_none(pmd_t pmd)
{


 return (unsigned long)native_pmd_val(pmd) == 0;
}

static inline __attribute__((no_instrument_function)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(native_pmd_val(pmd) & pmd_pfn_mask(pmd))+((unsigned long)(0xffff880000000000UL))));
}
# 576 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) unsigned long pmd_index(unsigned long address)
{
 return (address >> 21) & (512 - 1);
}
# 596 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) unsigned long pte_index(unsigned long address)
{
 return (address >> 12) & (512 - 1);
}

static inline __attribute__((no_instrument_function)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}

static inline __attribute__((no_instrument_function)) int pmd_bad(pmd_t pmd)
{
 return (pmd_flags(pmd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline __attribute__((no_instrument_function)) unsigned long pages_to_mb(unsigned long npg)
{
 return npg >> (20 - 12);
}


static inline __attribute__((no_instrument_function)) int pud_none(pud_t pud)
{
 return native_pud_val(pud) == 0;
}

static inline __attribute__((no_instrument_function)) int pud_present(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((no_instrument_function)) unsigned long pud_page_vaddr(pud_t pud)
{
 return (unsigned long)((void *)((unsigned long)(native_pud_val(pud) & pud_pfn_mask(pud))+((unsigned long)(0xffff880000000000UL))));
}
# 640 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return (pmd_t *)pud_page_vaddr(*pud) + pmd_index(address);
}

static inline __attribute__((no_instrument_function)) int pud_large(pud_t pud)
{
 return (native_pud_val(pud) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}

static inline __attribute__((no_instrument_function)) int pud_bad(pud_t pud)
{
 return (pud_flags(pud) & ~(((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6)) | (((pteval_t)(1)) << 2))) != 0;
}
# 663 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) int pgd_present(pgd_t pgd)
{
 return pgd_flags(pgd) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((no_instrument_function)) unsigned long pgd_page_vaddr(pgd_t pgd)
{
 return (unsigned long)((void *)((unsigned long)((unsigned long)native_pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))))+((unsigned long)(0xffff880000000000UL))));
}
# 680 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) unsigned long pud_index(unsigned long address)
{
 return (address >> 30) & (512 - 1);
}

static inline __attribute__((no_instrument_function)) pud_t *pud_offset(pgd_t *pgd, unsigned long address)
{
 return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);
}

static inline __attribute__((no_instrument_function)) int pgd_bad(pgd_t pgd)
{
 return (pgd_flags(pgd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline __attribute__((no_instrument_function)) int pgd_none(pgd_t pgd)
{
 return !native_pgd_val(pgd);
}
# 728 "./arch/x86/include/asm/pgtable.h"
extern int direct_gbpages;
void init_mem_mapping(void);
void early_alloc_pgt_buf(void);


static inline __attribute__((no_instrument_function)) pte_t native_local_ptep_get_and_clear(pte_t *ptep)
{
 pte_t res = *ptep;


 native_pte_clear(((void *)0), 0, ptep);
 return res;
}

static inline __attribute__((no_instrument_function)) pmd_t native_local_pmdp_get_and_clear(pmd_t *pmdp)
{
 pmd_t res = *pmdp;

 native_pmd_clear(pmdp);
 return res;
}

static inline __attribute__((no_instrument_function)) void native_set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep , pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((no_instrument_function)) void native_set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp , pmd_t pmd)
{
 native_set_pmd(pmdp, pmd);
}
# 782 "./arch/x86/include/asm/pgtable.h"
struct vm_area_struct;


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);


extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pte_t *ptep);


extern int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);


static inline __attribute__((no_instrument_function)) pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep)
{
 pte_t pte = native_ptep_get_and_clear(ptep);
 do { } while (0);
 return pte;
}


static inline __attribute__((no_instrument_function)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep,
         int full)
{
 pte_t pte;
 if (full) {




  pte = native_local_ptep_get_and_clear(ptep);
 } else {
  pte = ptep_get_and_clear(mm, addr, ptep);
 }
 return pte;
}


static inline __attribute__((no_instrument_function)) void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pte_t *ptep)
{
 clear_bit(1, (unsigned long *)&ptep->pte);
 do { } while (0);
}






extern int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty);


extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pmd_t *pmdp);


extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);



static inline __attribute__((no_instrument_function)) int pmd_write(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 1);
}


static inline __attribute__((no_instrument_function)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pmd_t *pmdp)
{
 return native_pmdp_get_and_clear(pmdp);
}


static inline __attribute__((no_instrument_function)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pmd_t *pmdp)
{
 clear_bit(1, (unsigned long *)pmdp);
}
# 880 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((no_instrument_function)) void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
{
       memcpy(dst, src, count * sizeof(pgd_t));
}


static inline __attribute__((no_instrument_function)) int page_level_shift(enum pg_level level)
{
 return (12 - ( __builtin_constant_p(512) ? ( (512) < 1 ? ____ilog2_NaN() : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : (512) & (1ULL << 1) ? 1 : (512) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) )) + level * ( __builtin_constant_p(512) ? ( (512) < 1 ? ____ilog2_NaN() : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : (512) & (1ULL << 1) ? 1 : (512) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) );
}
static inline __attribute__((no_instrument_function)) unsigned long page_level_size(enum pg_level level)
{
 return 1UL << page_level_shift(level);
}
static inline __attribute__((no_instrument_function)) unsigned long page_level_mask(enum pg_level level)
{
 return ~(page_level_size(level) - 1);
}





static inline __attribute__((no_instrument_function)) void update_mmu_cache(struct vm_area_struct *vma,
  unsigned long addr, pte_t *ptep)
{
}
static inline __attribute__((no_instrument_function)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd)
{
}


static inline __attribute__((no_instrument_function)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((no_instrument_function)) int pte_swp_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((no_instrument_function)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}






static inline __attribute__((no_instrument_function)) bool __pkru_allows_read(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;
 return !(pkru & (0x1 << pkru_pkey_bits));
}

static inline __attribute__((no_instrument_function)) bool __pkru_allows_write(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;




 return !(pkru & ((0x1|0x2) << pkru_pkey_bits));
}

static inline __attribute__((no_instrument_function)) u16 pte_flags_pkey(unsigned long pte_flags)
{


 return (pte_flags & ((((pteval_t)(1)) << 59) | (((pteval_t)(1)) << 60) | (((pteval_t)(1)) << 61) | (((pteval_t)(1)) << 62))) >> 59;



}

# 1 "include/asm-generic/pgtable.h" 1
# 165 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 native_pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
# 217 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_221(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_221(); do { } while (0); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);



extern void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);



static inline __attribute__((no_instrument_function)) void pmdp_huge_split_prepare(struct vm_area_struct *vma,
        unsigned long address, pmd_t *pmdp)
{

}
# 264 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int pte_unused(pte_t pte)
{
 return 0;
}
# 277 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_279(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_279(); do { } while (0); } while (0);
 return 0;
}
# 361 "include/asm-generic/pgtable.h"
void pgd_clear_bad(pgd_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline __attribute__((no_instrument_function)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((no_instrument_function)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((no_instrument_function)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((no_instrument_function)) pte_t __ptep_modify_prot_start(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(mm, addr, ptep);
}

static inline __attribute__((no_instrument_function)) void __ptep_modify_prot_commit(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 native_set_pte_at(mm, addr, ptep, pte);
}
# 436 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) pte_t ptep_modify_prot_start(struct mm_struct *mm,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(mm, addr, ptep);
}





static inline __attribute__((no_instrument_function)) void ptep_modify_prot_commit(struct mm_struct *mm,
        unsigned long addr,
        pte_t *ptep, pte_t pte)
{
 __ptep_modify_prot_commit(mm, addr, ptep, pte);
}
# 593 "include/asm-generic/pgtable.h"
extern int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size);
extern int track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
       pfn_t pfn);
extern int track_pfn_copy(struct vm_area_struct *vma);
extern void untrack_pfn(struct vm_area_struct *vma, unsigned long pfn,
   unsigned long size);
extern void untrack_pfn_moved(struct vm_area_struct *vma);
# 615 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((no_instrument_function)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}





static inline __attribute__((no_instrument_function)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}
# 645 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}



static inline __attribute__((no_instrument_function)) int pmd_move_must_withdraw(spinlock_t *new_pmd_ptl,
      spinlock_t *old_pmd_ptl)
{




 return new_pmd_ptl != old_pmd_ptl;
}
# 689 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 709 "include/asm-generic/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 731 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}
# 749 "include/asm-generic/pgtable.h"
static inline __attribute__((no_instrument_function)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}





int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
# 960 "./arch/x86/include/asm/pgtable.h" 2
# 69 "include/linux/mm.h" 2
# 109 "include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

extern int overcommit_ratio_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
extern int overcommit_kbytes_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
# 140 "include/linux/mm.h"
extern struct kmem_cache *vm_area_cachep;
# 272 "include/linux/mm.h"
extern pgprot_t protection_map[16];
# 294 "include/linux/mm.h"
struct vm_fault {
 unsigned int flags;
 gfp_t gfp_mask;
 unsigned long pgoff;
 void *virtual_address;

 struct page *cow_page;
 struct page *page;




 void *entry;






 unsigned long max_pgoff;

 pte_t *pte;
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);
 int (*mremap)(struct vm_area_struct * area);
 int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);
 int (*pmd_fault)(struct vm_area_struct *, unsigned long address,
      pmd_t *, unsigned int flags);
 void (*map_pages)(struct vm_area_struct *vma, struct vm_fault *vmf);



 int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);


 int (*pfn_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);




 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 358 "include/linux/mm.h"
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
# 370 "include/linux/mm.h"
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);






 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

struct mmu_gather;
struct inode;





static inline __attribute__((no_instrument_function)) int pmd_devmap(pmd_t pmd)
{
 return 0;
}







# 1 "include/linux/huge_mm.h" 1



extern int do_huge_pmd_anonymous_page(struct mm_struct *mm,
          struct vm_area_struct *vma,
          unsigned long address, pmd_t *pmd,
          unsigned int flags);
extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *vma);
extern void huge_pmd_set_accessed(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmd,
      pmd_t orig_pmd, int dirty);
extern int do_huge_pmd_wp_page(struct mm_struct *mm, struct vm_area_struct *vma,
          unsigned long address, pmd_t *pmd,
          pmd_t orig_pmd);
extern struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr,
       pmd_t *pmd,
       unsigned int flags);
extern int madvise_free_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr, unsigned long next);
extern int zap_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr);
extern int mincore_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, unsigned long end,
   unsigned char *vec);
extern bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
    unsigned long new_addr, unsigned long old_end,
    pmd_t *old_pmd, pmd_t *new_pmd);
extern int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, pgprot_t newprot,
   int prot_numa);
int vmf_insert_pfn_pmd(struct vm_area_struct *, unsigned long addr, pmd_t *,
   pfn_t pfn, bool write);
enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,



};
# 165 "include/linux/huge_mm.h"
static inline __attribute__((no_instrument_function)) int
split_huge_page_to_list(struct page *page, struct list_head *list)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) int split_huge_page(struct page *page)
{
 return 0;
}
static inline __attribute__((no_instrument_function)) void deferred_split_huge_page(struct page *page) {}



static inline __attribute__((no_instrument_function)) void split_huge_pmd_address(struct vm_area_struct *vma,
  unsigned long address, bool freeze, struct page *page) {}

static inline __attribute__((no_instrument_function)) int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice)
{
 do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/huge_mm.h"), "i" (184), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);
 return 0;
}
static inline __attribute__((no_instrument_function)) void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
}
static inline __attribute__((no_instrument_function)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int do_huge_pmd_numa_page(struct mm_struct *mm, struct vm_area_struct *vma,
     unsigned long addr, pmd_t pmd, pmd_t *pmdp)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) bool is_huge_zero_page(struct page *page)
{
 return false;
}

static inline __attribute__((no_instrument_function)) void put_huge_zero_page(void)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_212(void) __attribute__((error("BUILD_BUG failed"))); if (__cond) __compiletime_assert_212(); do { } while (0); } while (0);
}

static inline __attribute__((no_instrument_function)) struct page *follow_devmap_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd, int flags)
{
 return ((void *)0);
}
# 401 "include/linux/mm.h" 2
# 418 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}







static inline __attribute__((no_instrument_function)) int get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);







static inline __attribute__((no_instrument_function)) bool is_vmalloc_addr(const void *x)
{

 unsigned long addr = (unsigned long)x;

 return addr >= (0xffffc90000000000UL) && addr < (0xffffe8ffffffffffUL);



}

extern int is_vmalloc_or_module_addr(const void *x);







extern void kvfree(const void *addr);

static inline __attribute__((no_instrument_function)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((no_instrument_function)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = compound_head(page);
 return atomic_read(compound_mapcount_ptr(page)) + 1;
}






static inline __attribute__((no_instrument_function)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);

static inline __attribute__((no_instrument_function)) int page_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(PageSlab(page)))));

 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}





static inline __attribute__((no_instrument_function)) int total_mapcount(struct page *page)
{
 return page_mapcount(page);
}
static inline __attribute__((no_instrument_function)) int page_trans_huge_mapcount(struct page *page,
        int *total_mapcount)
{
 int mapcount = page_mapcount(page);
 if (total_mapcount)
  *total_mapcount = mapcount;
 return mapcount;
}


static inline __attribute__((no_instrument_function)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(x)) >> 12));

 return compound_head(page);
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
int split_free_page(struct page *page);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,

 HUGETLB_PAGE_DTOR,




 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[];

static inline __attribute__((no_instrument_function)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((no_instrument_function)) compound_page_dtor *get_compound_page_dtor(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 return compound_page_dtors[page[1].compound_dtor];
}

static inline __attribute__((no_instrument_function)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}

static inline __attribute__((no_instrument_function)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
}

void free_compound_page(struct page *page);
# 597 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

void do_set_pte(struct vm_area_struct *vma, unsigned long address,
  struct page *page, pte_t *pte, bool write, bool anon, bool old);
# 712 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) enum zone_type page_zonenum(const struct page *page)
{
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}
# 725 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void get_zone_device_page(struct page *page)
{
}
static inline __attribute__((no_instrument_function)) void put_zone_device_page(struct page *page)
{
}
static inline __attribute__((no_instrument_function)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((no_instrument_function)) void get_page(struct page *page)
{
 page = compound_head(page);




 ((void)(sizeof(( long)(page_ref_count(page) <= 0))));
 page_ref_inc(page);

 if (__builtin_expect(!!(is_zone_device_page(page)), 0))
  get_zone_device_page(page);
}

static inline __attribute__((no_instrument_function)) void put_page(struct page *page)
{
 page = compound_head(page);

 if (put_page_testzero(page))
  __put_page(page);

 if (__builtin_expect(!!(is_zone_device_page(page)), 0))
  put_zone_device_page(page);
}
# 774 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 6) < ((((sizeof(unsigned long)*8) - 0) - 6) - 2))? (((sizeof(unsigned long)*8) - 0) - 6) : ((((sizeof(unsigned long)*8) - 0) - 6) - 2)) * ((6 + 2) != 0))) & ((1UL << (6 + 2)) - 1);
}

static inline __attribute__((no_instrument_function)) int zone_to_nid(struct zone *zone)
{

 return zone->node;



}




static inline __attribute__((no_instrument_function)) int page_to_nid(const struct page *page)
{
 return (page->flags >> ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0))) & ((1UL << 6) - 1);
}
# 862 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) int page_cpupid_xchg_last(struct page *page, int cpupid)
{
 return page_to_nid(page);
}

static inline __attribute__((no_instrument_function)) int page_cpupid_last(struct page *page)
{
 return page_to_nid(page);
}

static inline __attribute__((no_instrument_function)) int cpupid_to_nid(int cpupid)
{
 return -1;
}

static inline __attribute__((no_instrument_function)) int cpupid_to_pid(int cpupid)
{
 return -1;
}

static inline __attribute__((no_instrument_function)) int cpupid_to_cpu(int cpupid)
{
 return -1;
}

static inline __attribute__((no_instrument_function)) int cpu_pid_to_cpupid(int nid, int pid)
{
 return -1;
}

static inline __attribute__((no_instrument_function)) bool cpupid_pid_unset(int cpupid)
{
 return 1;
}

static inline __attribute__((no_instrument_function)) void page_cpupid_reset_last(struct page *page)
{
}

static inline __attribute__((no_instrument_function)) bool cpupid_match_pid(struct task_struct *task, int cpupid)
{
 return false;
}


static inline __attribute__((no_instrument_function)) struct zone *page_zone(const struct page *page)
{
 return &(node_data[page_to_nid(page)])->node_zones[page_zonenum(page)];
}
# 925 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0));
}

static inline __attribute__((no_instrument_function)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 6) - 1) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0)));
 page->flags |= (node & ((1UL << 6) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0));
}

static inline __attribute__((no_instrument_function)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}







static inline __attribute__((no_instrument_function)) struct mem_cgroup *page_memcg(struct page *page)
{
 return ((void *)0);
}





# 1 "include/linux/vmstat.h" 1





# 1 "include/linux/mm.h" 1
# 7 "include/linux/vmstat.h" 2

# 1 "include/linux/vm_event_item.h" 1
# 24 "include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA, PGALLOC_DMA32, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL_DMA, PGREFILL_DMA32, PGREFILL_NORMAL, PGREFILL_MOVABLE,
  PGSTEAL_KSWAPD_DMA, PGSTEAL_KSWAPD_DMA32, PGSTEAL_KSWAPD_NORMAL, PGSTEAL_KSWAPD_MOVABLE,
  PGSTEAL_DIRECT_DMA, PGSTEAL_DIRECT_DMA32, PGSTEAL_DIRECT_NORMAL, PGSTEAL_DIRECT_MOVABLE,
  PGSCAN_KSWAPD_DMA, PGSCAN_KSWAPD_DMA32, PGSCAN_KSWAPD_NORMAL, PGSCAN_KSWAPD_MOVABLE,
  PGSCAN_DIRECT_DMA, PGSCAN_DIRECT_DMA32, PGSCAN_DIRECT_NORMAL, PGSCAN_DIRECT_MOVABLE,
  PGSCAN_DIRECT_THROTTLE,

  PGSCAN_ZONE_RECLAIM_FAILED,

  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, ALLOCSTALL, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
# 50 "include/linux/vm_event_item.h"
  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,


  HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL,

  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,
# 100 "include/linux/vm_event_item.h"
  NR_VM_EVENT_ITEMS
};
# 9 "include/linux/vmstat.h" 2


extern int sysctl_stat_interval;
# 24 "include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((no_instrument_function)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((no_instrument_function)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((no_instrument_function)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((no_instrument_function)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((vm_event_states.event[item])) pao_T__; const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } switch (sizeof((vm_event_states.event[item]))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "qi" ((pao_T__)(delta))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "ri" ((pao_T__)(delta))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item]))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((vm_event_states.event[item])) : "re" ((pao_T__)(delta))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 111 "include/linux/vmstat.h"
extern atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];

static inline __attribute__((no_instrument_function)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_stat[item]);
}

static inline __attribute__((no_instrument_function)) unsigned long global_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((no_instrument_function)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((no_instrument_function)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->pageset) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((zone->pageset))) *)((zone->pageset)))); (typeof((typeof(*((zone->pageset))) *)((zone->pageset)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}



extern unsigned long node_page_state(int node, enum zone_stat_item item);
# 177 "include/linux/vmstat.h"
void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

extern void inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_pageset *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 261 "include/linux/vmstat.h"
static inline __attribute__((no_instrument_function)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (false)
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];
# 963 "include/linux/mm.h" 2

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void *lowmem_page_address(const struct page *page)
{
 return ((void *)((unsigned long)(((phys_addr_t)((unsigned long)((page) - ((struct page *)(0xffffea0000000000UL)))) << 12))+((unsigned long)(0xffff880000000000UL))));
}
# 997 "include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern struct address_space *page_mapping(struct page *page);

extern struct address_space *__page_file_mapping(struct page *);

static inline __attribute__((no_instrument_function))
struct address_space *page_file_mapping(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_mapping(page);

 return page->mapping;
}





static inline __attribute__((no_instrument_function)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return ((page)->private);
 return page->index;
}

extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((no_instrument_function)) unsigned long page_file_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);

 return page->index;
}

bool page_mapped(struct page *page);






static inline __attribute__((no_instrument_function)) bool page_is_pfmemalloc(struct page *page)
{




 return page->index == -1UL;
}





static inline __attribute__((no_instrument_function)) void set_page_pfmemalloc(struct page *page)
{
 page->index = -1UL;
}

static inline __attribute__((no_instrument_function)) void clear_page_pfmemalloc(struct page *page)
{
 page->index = 0;
}
# 1100 "include/linux/mm.h"
extern void pagefault_out_of_memory(void);
# 1110 "include/linux/mm.h"
extern void show_free_areas(unsigned int flags);
extern bool skip_free_areas_node(unsigned int flags, int nid);

int shmem_zero_setup(struct vm_area_struct *);

bool shmem_mapping(struct address_space *mapping);







extern bool can_do_mlock(void);
extern int user_shm_lock(size_t, struct user_struct *);
extern void user_shm_unlock(size_t, struct user_struct *);




struct zap_details {
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
 bool ignore_dirty;
 bool check_swap_entries;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
  pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
  unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
  unsigned long size, struct zap_details *);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);
# 1170 "include/linux/mm.h"
struct mm_walk {
 int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_entry)(pte_t *pte, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_hole)(unsigned long addr, unsigned long next,
   struct mm_walk *walk);
 int (*hugetlb_entry)(pte_t *pte, unsigned long hmask,
        unsigned long addr, unsigned long next,
        struct mm_walk *walk);
 int (*test_walk)(unsigned long addr, unsigned long next,
   struct mm_walk *walk);
 struct mm_struct *mm;
 struct vm_area_struct *vma;
 void *private;
};

int walk_page_range(unsigned long addr, unsigned long end,
  struct mm_walk *walk);
int walk_page_vma(struct vm_area_struct *vma, struct mm_walk *walk);
void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
   struct vm_area_struct *vma);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

static inline __attribute__((no_instrument_function)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern int handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,
   unsigned long address, unsigned int flags);
extern int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
# 1242 "include/linux/mm.h"
extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, int write);

long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
        unsigned long start, unsigned long nr_pages,
        unsigned int foll_flags, struct page **pages,
        struct vm_area_struct **vmas, int *nonblocking);
long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       int write, int force, struct page **pages,
       struct vm_area_struct **vmas);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       int write, int force, struct page **pages,
       struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      int write, int force, struct page **pages, int *locked);
long __get_user_pages_unlocked(struct task_struct *tsk, struct mm_struct *mm,
          unsigned long start, unsigned long nr_pages,
          int write, int force, struct page **pages,
          unsigned int gup_flags);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      int write, int force, struct page **pages);
int get_user_pages_fast(unsigned long start, int nr_pages, int write,
   struct page **pages);


struct frame_vector {
 unsigned int nr_allocated;
 unsigned int nr_frames;
 bool got_ref;
 bool is_pfns;
 void *ptrs[0];


};

struct frame_vector *frame_vector_create(unsigned int nr_frames);
void frame_vector_destroy(struct frame_vector *vec);
int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
       bool write, bool force, struct frame_vector *vec);
void put_vaddr_frames(struct frame_vector *vec);
int frame_vector_to_pages(struct frame_vector *vec);
void frame_vector_to_pfns(struct frame_vector *vec);

static inline __attribute__((no_instrument_function)) unsigned int frame_vector_count(struct frame_vector *vec)
{
 return vec->nr_frames;
}

static inline __attribute__((no_instrument_function)) struct page **frame_vector_pages(struct frame_vector *vec)
{
 if (vec->is_pfns) {
  int err = frame_vector_to_pages(vec);

  if (err)
   return ERR_PTR(err);
 }
 return (struct page **)(vec->ptrs);
}

static inline __attribute__((no_instrument_function)) unsigned long *frame_vector_pfns(struct frame_vector *vec)
{
 if (!vec->is_pfns)
  frame_vector_to_pfns(vec);
 return (unsigned long *)(vec->ptrs);
}

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
int get_kernel_page(unsigned long start, int write, struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);
int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
void account_page_dirtied(struct page *page, struct address_space *mapping);
void account_page_cleaned(struct page *page, struct address_space *mapping,
     struct bdi_writeback *wb);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
void cancel_dirty_page(struct page *page);
int clear_page_dirty_for_io(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);


static inline __attribute__((no_instrument_function)) int vma_growsdown(struct vm_area_struct *vma, unsigned long addr)
{
 return vma && (vma->vm_end == addr) && (vma->vm_flags & 0x00000100);
}

static inline __attribute__((no_instrument_function)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((no_instrument_function)) int stack_guard_page_start(struct vm_area_struct *vma,
          unsigned long addr)
{
 return (vma->vm_flags & 0x00000100) &&
  (vma->vm_start == addr) &&
  !vma_growsdown(vma->vm_prev, addr);
}


static inline __attribute__((no_instrument_function)) int vma_growsup(struct vm_area_struct *vma, unsigned long addr)
{
 return vma && (vma->vm_start == addr) && (vma->vm_flags & 0x00000000);
}

static inline __attribute__((no_instrument_function)) int stack_guard_page_end(struct vm_area_struct *vma,
        unsigned long addr)
{
 return (vma->vm_flags & 0x00000000) &&
  (vma->vm_end == addr) &&
  !vma_growsup(vma->vm_next, addr);
}

int vma_is_stack_for_task(struct vm_area_struct *vma, struct task_struct *t);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         int dirty_accountable, int prot_numa);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int __get_user_pages_fast(unsigned long start, int nr_pages, int write,
     struct page **pages);



static inline __attribute__((no_instrument_function)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

static inline __attribute__((no_instrument_function)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 atomic_long_add(value, &mm->rss_stat.count[member]);
}

static inline __attribute__((no_instrument_function)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_inc(&mm->rss_stat.count[member]);
}

static inline __attribute__((no_instrument_function)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_dec(&mm->rss_stat.count[member]);
}


static inline __attribute__((no_instrument_function)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((no_instrument_function)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((no_instrument_function)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_rss) _max1 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) _max2 = (get_mm_rss(mm)); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; });
}

static inline __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_vm) _max1 = (mm->hiwater_vm); typeof(mm->total_vm) _max2 = (mm->total_vm); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; });
}

static inline __attribute__((no_instrument_function)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((no_instrument_function)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((no_instrument_function)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((no_instrument_function)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 1493 "include/linux/mm.h"
int vma_wants_writenotify(struct vm_area_struct *vma);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((no_instrument_function)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}
# 1512 "include/linux/mm.h"
int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
# 1533 "include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((no_instrument_function)) void mm_nr_pmds_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->nr_pmds, 0);
}

static inline __attribute__((no_instrument_function)) unsigned long mm_nr_pmds(struct mm_struct *mm)
{
 return atomic_long_read(&mm->nr_pmds);
}

static inline __attribute__((no_instrument_function)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 atomic_long_inc(&mm->nr_pmds);
}

static inline __attribute__((no_instrument_function)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 atomic_long_dec(&mm->nr_pmds);
}


int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address);
int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);






static inline __attribute__((no_instrument_function)) pud_t *pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __pud_alloc(mm, pgd, address))?
  ((void *)0): pud_offset(pgd, address);
}

static inline __attribute__((no_instrument_function)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): pmd_offset(pud, address);
}
# 1588 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void ptlock_cache_init(void)
{
}

static inline __attribute__((no_instrument_function)) bool ptlock_alloc(struct page *page)
{
 return true;
}

static inline __attribute__((no_instrument_function)) void ptlock_free(struct page *page)
{
}

static inline __attribute__((no_instrument_function)) spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline __attribute__((no_instrument_function)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((((struct page *)(0xffffea0000000000UL)) + ((native_pmd_val(*pmd) & pmd_pfn_mask(*pmd)) >> 12)));
}

static inline __attribute__((no_instrument_function)) bool ptlock_init(struct page *page)
{







 ((void)(sizeof(( long)(*(unsigned long *)&page->ptl))));
 if (!ptlock_alloc(page))
  return false;
 do { spinlock_check(ptlock_ptr(page)); do { *(&(ptlock_ptr(page))->rlock) = (raw_spinlock_t) { .raw_lock = { { (0) } }, }; } while (0); } while (0);
 return true;
}


static inline __attribute__((no_instrument_function)) void pte_lock_deinit(struct page *page)
{
 page->mapping = ((void *)0);
 ptlock_free(page);
}
# 1648 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void pgtable_init(void)
{
 ptlock_cache_init();
 do { } while (0);
}

static inline __attribute__((no_instrument_function)) bool pgtable_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 inc_zone_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((no_instrument_function)) void pgtable_page_dtor(struct page *page)
{
 pte_lock_deinit(page);
 dec_zone_page_state(page, NR_PAGETABLE);
}
# 1698 "include/linux/mm.h"
static struct page *pmd_to_page(pmd_t *pmd)
{
 unsigned long mask = ~(512 * sizeof(pmd_t) - 1);
 return (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)((void *)((unsigned long) pmd & mask))) >> 12));
}

static inline __attribute__((no_instrument_function)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr(pmd_to_page(pmd));
}

static inline __attribute__((no_instrument_function)) bool pgtable_pmd_page_ctor(struct page *page)
{



 return ptlock_init(page);
}

static inline __attribute__((no_instrument_function)) void pgtable_pmd_page_dtor(struct page *page)
{



 ptlock_free(page);
}
# 1741 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}

extern void free_area_init(unsigned long * zones_size);
extern void free_area_init_node(int nid, unsigned long * zones_size,
  unsigned long zone_start_pfn, unsigned long *zholes_size);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, char *s);
# 1770 "include/linux/mm.h"
extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(const char *str);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((no_instrument_function)) void __free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
}

static inline __attribute__((no_instrument_function)) void free_reserved_page(struct page *page)
{
 __free_reserved_page(page);
 adjust_managed_page_count(page, 1);
}

static inline __attribute__((no_instrument_function)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((no_instrument_function)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel");
}

static inline __attribute__((no_instrument_function)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((node_data[nid])->node_present_pages);

 return phys_pages;
}
# 1847 "include/linux/mm.h"
extern void free_area_init_nodes(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
extern void free_bootmem_with_active_regions(int nid,
      unsigned long max_low_pfn);
extern void sparse_memory_present_with_active_regions(int nid);
# 1871 "include/linux/mm.h"
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) early_pfn_to_nid(unsigned long pfn);

extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) __early_pfn_to_nid(unsigned long pfn,
     struct mminit_pfnnid_cache *state);


extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_zone(unsigned long, int, unsigned long,
    unsigned long, enum memmap_context);
extern void setup_per_zone_wmarks(void);
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) mmap_init(void);
extern void show_mem(unsigned int flags);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);

extern __attribute__((format(printf, 3, 4)))
void warn_alloc_failed(gfp_t gfp_mask, unsigned int order,
  const char *fmt, ...);

extern void setup_per_cpu_pageset(void);

extern void zone_pcp_update(struct zone *zone);
extern void zone_pcp_reset(struct zone *zone);


extern int min_free_kbytes;
extern int watermark_scale_factor;


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root *root);
struct anon_vma_chain *anon_vma_interval_tree_iter_first(
 struct rb_root *root, unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 1940 "include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert);
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int split_vma(struct mm_struct *,
 struct vm_area_struct *, unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((no_instrument_function)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 vm_flags_t vm_flags, unsigned long pgoff, unsigned long *populate);
extern int do_munmap(struct mm_struct *, unsigned long, size_t);

static inline __attribute__((no_instrument_function)) unsigned long
do_mmap_pgoff(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate)
{
 return do_mmap(file, addr, len, prot, flags, 0, pgoff, populate);
}


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((no_instrument_function)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((warn_unused_result)) vm_brk(unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((warn_unused_result)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long unmapped_area(struct vm_unmapped_area_info *info);
extern unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info);
# 2049 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) unsigned long
vm_unmapped_area(struct vm_unmapped_area_info *info)
{
 if (info->flags & 1)
  return unmapped_area_topdown(info);
 else
  return unmapped_area(info);
}


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern int filemap_fault(struct vm_area_struct *, struct vm_fault *);
extern void filemap_map_pages(struct vm_area_struct *vma, struct vm_fault *vmf);
extern int filemap_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf);


int write_one_page(struct page *page, int wait);
void task_dirty_inc(struct task_struct *tsk);





int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);

void page_cache_sync_readahead(struct address_space *mapping,
          struct file_ra_state *ra,
          struct file *filp,
          unsigned long offset,
          unsigned long size);

void page_cache_async_readahead(struct address_space *mapping,
    struct file_ra_state *ra,
    struct file *filp,
    struct page *pg,
    unsigned long offset,
    unsigned long size);


extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);



static inline __attribute__((no_instrument_function)) struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
 struct vm_area_struct * vma = find_vma(mm,start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}

static inline __attribute__((no_instrument_function)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 12;
}


static inline __attribute__((no_instrument_function)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2157 "include/linux/mm.h"
struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
int vm_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);


struct page *follow_page_mask(struct vm_area_struct *vma,
         unsigned long address, unsigned int foll_flags,
         unsigned int *page_mask);

static inline __attribute__((no_instrument_function)) struct page *follow_page(struct vm_area_struct *vma,
  unsigned long address, unsigned int foll_flags)
{
 unsigned int unused_page_mask;
 return follow_page_mask(vma, address, foll_flags, &unused_page_mask);
}
# 2197 "include/linux/mm.h"
typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
   void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);







static inline __attribute__((no_instrument_function)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((no_instrument_function)) void kernel_poison_pages(struct page *page, int numpages,
     int enable) { }
static inline __attribute__((no_instrument_function)) bool page_is_poisoned(struct page *page) { return false; }
# 2235 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) void
kernel_map_pages(struct page *page, int numpages, int enable) {}

static inline __attribute__((no_instrument_function)) bool kernel_page_present(struct page *page) { return true; }

static inline __attribute__((no_instrument_function)) bool debug_pagealloc_enabled(void)
{
 return false;
}



extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);
extern int in_gate_area_no_mm(unsigned long addr);
extern int in_gate_area(struct mm_struct *mm, unsigned long addr);
# 2263 "include/linux/mm.h"
extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);
void print_vma_addr(char *prefix, unsigned long rip);

void sparse_mem_maps_populate_node(struct page **map_map,
       unsigned long pnum_begin,
       unsigned long pnum_end,
       unsigned long map_count,
       int nodeid);

struct page *sparse_mem_map_populate(unsigned long pnum, int nid);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
pud_t *vmemmap_pud_populate(pgd_t *pgd, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *__vmemmap_alloc_block_buf(unsigned long size, int node,
  struct vmem_altmap *altmap);
static inline __attribute__((no_instrument_function)) void *vmemmap_alloc_block_buf(unsigned long size, int node)
{
 return __vmemmap_alloc_block_buf(size, node, ((void *)0));
}

void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node);
int vmemmap_populate(unsigned long start, unsigned long end, int node);
void vmemmap_populate_print_last(void);



void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long size);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int trapno, int flags);
extern void memory_failure_queue(unsigned long pfn, int trapno, int flags);
extern int unpoison_memory(unsigned long pfn);
extern int get_hwpoison_page(struct page *page);

extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p, int access);
extern atomic_long_t num_poisoned_pages;
extern int soft_offline_page(struct page *page, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_UNKNOWN,
};


extern void clear_huge_page(struct page *page,
       unsigned long addr,
       unsigned int pages_per_huge_page);
extern void copy_user_huge_page(struct page *dst, struct page *src,
    unsigned long addr, struct vm_area_struct *vma,
    unsigned int pages_per_huge_page);


extern struct page_ext_operations debug_guardpage_ops;
extern struct page_ext_operations page_poisoning_ops;
# 2402 "include/linux/mm.h"
static inline __attribute__((no_instrument_function)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((no_instrument_function)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((no_instrument_function)) bool page_is_guard(struct page *page) { return false; }



void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) setup_nr_node_ids(void);
# 8 "include/linux/scatterlist.h" 2


struct scatterlist {



 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;

 unsigned int dma_length;

};
# 38 "include/linux/scatterlist.h"
struct sg_table {
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;
};
# 82 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & 0x3;





 do { if (__builtin_expect(!!((unsigned long) page & 0x03), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/scatterlist.h"), "i" (90), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);




 sg->page_link = page_link | (unsigned long) page;
}
# 112 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline __attribute__((no_instrument_function)) struct page *sg_page(struct scatterlist *sg)
{




 return (struct page *)((sg)->page_link & ~0x3);
}
# 136 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_set_buf(struct scatterlist *sg, const void *buf,
         unsigned int buflen)
{



 sg_set_page(sg, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(buf)) >> 12)), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 12)-1))));
}
# 161 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{



 prv[prv_nents - 1].offset = 0;
 prv[prv_nents - 1].length = 0;





 prv[prv_nents - 1].page_link = ((unsigned long) sgl | 0x01) & ~0x02;
}
# 186 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_mark_end(struct scatterlist *sg)
{






 sg->page_link |= 0x02;
 sg->page_link &= ~0x01;
}
# 206 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void sg_unmark_end(struct scatterlist *sg)
{



 sg->page_link &= ~0x02;
}
# 224 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) dma_addr_t sg_phys(struct scatterlist *sg)
{
 return ((dma_addr_t)(unsigned long)((sg_page(sg)) - ((struct page *)(0xffffea0000000000UL))) << 12) + sg->offset;
}
# 239 "include/linux/scatterlist.h"
static inline __attribute__((no_instrument_function)) void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}

int sg_nents(struct scatterlist *sg);
int sg_nents_for_len(struct scatterlist *sg, u64 len);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, const void *, unsigned int);
int sg_split(struct scatterlist *in, const int in_mapped_nents,
      const off_t skip, const int nb_splits,
      const size_t *split_sizes,
      struct scatterlist **out, int *out_mapped_nents,
      gfp_t gfp_mask);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, bool, sg_free_fn *);
void sg_free_table(struct sg_table *);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
       struct scatterlist *, gfp_t, sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int sg_alloc_table_from_pages(struct sg_table *sgt,
 struct page **pages, unsigned int n_pages,
 unsigned long offset, unsigned long size,
 gfp_t gfp_mask);

size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
        size_t buflen, off_t skip, bool to_buffer);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      const void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       const void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
# 308 "include/linux/scatterlist.h"
void sg_free_table_chained(struct sg_table *table, bool first_chunk);
int sg_alloc_table_chained(struct sg_table *table, int nents,
      struct scatterlist *first_chunk);
# 323 "include/linux/scatterlist.h"
struct sg_page_iter {
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;

};

bool __sg_page_iter_next(struct sg_page_iter *piter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline __attribute__((no_instrument_function)) struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return (((struct page *)(0xffffea0000000000UL)) + ((unsigned long)(((sg_page(piter->sg))) - ((struct page *)(0xffffea0000000000UL))) + (piter->sg_pgoffset)));
}






static inline __attribute__((no_instrument_function)) dma_addr_t sg_page_iter_dma_address(struct sg_page_iter *piter)
{
 return ((piter->sg)->dma_address) + (piter->sg_pgoffset << 12);
}
# 387 "include/linux/scatterlist.h"
struct sg_mapping_iter {

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_skip(struct sg_mapping_iter *miter, off_t offset);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
# 12 "include/linux/dma-mapping.h" 2
# 21 "include/linux/dma-mapping.h"
struct dma_map_ops {
 void* (*alloc)(struct device *dev, size_t size,
    dma_addr_t *dma_handle, gfp_t gfp,
    struct dma_attrs *attrs);
 void (*free)(struct device *dev, size_t size,
         void *vaddr, dma_addr_t dma_handle,
         struct dma_attrs *attrs);
 int (*mmap)(struct device *, struct vm_area_struct *,
     void *, dma_addr_t, size_t, struct dma_attrs *attrs);

 int (*get_sgtable)(struct device *dev, struct sg_table *sgt, void *,
      dma_addr_t, size_t, struct dma_attrs *attrs);

 dma_addr_t (*map_page)(struct device *dev, struct page *page,
          unsigned long offset, size_t size,
          enum dma_data_direction dir,
          struct dma_attrs *attrs);
 void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      struct dma_attrs *attrs);




 int (*map_sg)(struct device *dev, struct scatterlist *sg,
        int nents, enum dma_data_direction dir,
        struct dma_attrs *attrs);
 void (*unmap_sg)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir,
    struct dma_attrs *attrs);
 void (*sync_single_for_cpu)(struct device *dev,
        dma_addr_t dma_handle, size_t size,
        enum dma_data_direction dir);
 void (*sync_single_for_device)(struct device *dev,
           dma_addr_t dma_handle, size_t size,
           enum dma_data_direction dir);
 void (*sync_sg_for_cpu)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir);
 void (*sync_sg_for_device)(struct device *dev,
       struct scatterlist *sg, int nents,
       enum dma_data_direction dir);
 int (*mapping_error)(struct device *dev, dma_addr_t dma_addr);
 int (*dma_supported)(struct device *dev, u64 mask);
 int (*set_dma_mask)(struct device *dev, u64 mask);



 int is_phys;
};

extern struct dma_map_ops dma_noop_ops;





static inline __attribute__((no_instrument_function)) int valid_dma_direction(int dma_direction)
{
 return ((dma_direction == DMA_BIDIRECTIONAL) ||
  (dma_direction == DMA_TO_DEVICE) ||
  (dma_direction == DMA_FROM_DEVICE));
}

static inline __attribute__((no_instrument_function)) int is_device_dma_capable(struct device *dev)
{
 return dev->dma_mask != ((void *)0) && *dev->dma_mask != 0x0ULL;
}
# 109 "include/linux/dma-mapping.h"
# 1 "./arch/x86/include/asm/dma-mapping.h" 1
# 14 "./arch/x86/include/asm/dma-mapping.h"
# 1 "./arch/x86/include/asm/swiotlb.h" 1



# 1 "include/linux/swiotlb.h" 1







struct device;
struct dma_attrs;
struct page;
struct scatterlist;

extern int swiotlb_force;
# 28 "include/linux/swiotlb.h"
extern void swiotlb_init(int verbose);
int swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose);
extern unsigned long swiotlb_nr_tbl(void);
unsigned long swiotlb_size_or_default(void);
extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);




enum dma_sync_target {
 SYNC_FOR_CPU = 0,
 SYNC_FOR_DEVICE = 1,
};




extern phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,
       dma_addr_t tbl_dma_addr,
       phys_addr_t phys, size_t size,
       enum dma_data_direction dir);

extern void swiotlb_tbl_unmap_single(struct device *hwdev,
         phys_addr_t tlb_addr,
         size_t size, enum dma_data_direction dir);

extern void swiotlb_tbl_sync_single(struct device *hwdev,
        phys_addr_t tlb_addr,
        size_t size, enum dma_data_direction dir,
        enum dma_sync_target target);


extern void
*swiotlb_alloc_coherent(struct device *hwdev, size_t size,
   dma_addr_t *dma_handle, gfp_t flags);

extern void
swiotlb_free_coherent(struct device *hwdev, size_t size,
        void *vaddr, dma_addr_t dma_handle);

extern dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,
       unsigned long offset, size_t size,
       enum dma_data_direction dir,
       struct dma_attrs *attrs);
extern void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,
          size_t size, enum dma_data_direction dir,
          struct dma_attrs *attrs);

extern int
swiotlb_map_sg(struct device *hwdev, struct scatterlist *sg, int nents,
        enum dma_data_direction dir);

extern void
swiotlb_unmap_sg(struct device *hwdev, struct scatterlist *sg, int nents,
   enum dma_data_direction dir);

extern int
swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl, int nelems,
       enum dma_data_direction dir, struct dma_attrs *attrs);

extern void
swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,
         int nelems, enum dma_data_direction dir,
         struct dma_attrs *attrs);

extern void
swiotlb_sync_single_for_cpu(struct device *hwdev, dma_addr_t dev_addr,
       size_t size, enum dma_data_direction dir);

extern void
swiotlb_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,
   int nelems, enum dma_data_direction dir);

extern void
swiotlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,
          size_t size, enum dma_data_direction dir);

extern void
swiotlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir);

extern int
swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr);

extern int
swiotlb_dma_supported(struct device *hwdev, u64 mask);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) swiotlb_free(void);




extern void swiotlb_print_info(void);
extern int is_swiotlb_buffer(phys_addr_t paddr);
# 5 "./arch/x86/include/asm/swiotlb.h" 2


extern int swiotlb;
extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_swiotlb_detect_override(void);
extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_swiotlb_detect_4gb(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_swiotlb_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_swiotlb_late_init(void);
# 30 "./arch/x86/include/asm/swiotlb.h"
static inline __attribute__((no_instrument_function)) void dma_mark_clean(void *addr, size_t size) {}

extern void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
     dma_addr_t *dma_handle, gfp_t flags,
     struct dma_attrs *attrs);
extern void x86_swiotlb_free_coherent(struct device *dev, size_t size,
     void *vaddr, dma_addr_t dma_addr,
     struct dma_attrs *attrs);
# 15 "./arch/x86/include/asm/dma-mapping.h" 2
# 1 "include/linux/dma-contiguous.h" 1
# 58 "include/linux/dma-contiguous.h"
struct cma;
struct page;
# 121 "include/linux/dma-contiguous.h"
static inline __attribute__((no_instrument_function)) struct cma *dev_get_cma_area(struct device *dev)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) void dev_set_cma_area(struct device *dev, struct cma *cma) { }

static inline __attribute__((no_instrument_function)) void dma_contiguous_set_default(struct cma *cma) { }

static inline __attribute__((no_instrument_function)) void dma_contiguous_reserve(phys_addr_t limit) { }

static inline __attribute__((no_instrument_function)) int dma_contiguous_reserve_area(phys_addr_t size, phys_addr_t base,
           phys_addr_t limit, struct cma **res_cma,
           bool fixed)
{
 return -38;
}

static inline __attribute__((no_instrument_function))
int dma_declare_contiguous(struct device *dev, phys_addr_t size,
      phys_addr_t base, phys_addr_t limit)
{
 return -38;
}

static inline __attribute__((no_instrument_function))
struct page *dma_alloc_from_contiguous(struct device *dev, size_t count,
           unsigned int order)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function))
bool dma_release_from_contiguous(struct device *dev, struct page *pages,
     int count)
{
 return false;
}
# 16 "./arch/x86/include/asm/dma-mapping.h" 2
# 25 "./arch/x86/include/asm/dma-mapping.h"
extern int iommu_merge;
extern struct device x86_dma_fallback_dev;
extern int panic_on_overflow;

extern struct dma_map_ops *dma_ops;

static inline __attribute__((no_instrument_function)) struct dma_map_ops *get_dma_ops(struct device *dev)
{



 if (__builtin_expect(!!(!dev), 0) || !dev->archdata.dma_ops)
  return dma_ops;
 else
  return dev->archdata.dma_ops;

}

bool arch_dma_alloc_attrs(struct device **dev, gfp_t *gfp);



extern int dma_supported(struct device *hwdev, u64 mask);

extern void *dma_generic_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t flag,
     struct dma_attrs *attrs);

extern void dma_generic_free_coherent(struct device *dev, size_t size,
          void *vaddr, dma_addr_t dma_addr,
          struct dma_attrs *attrs);







static inline __attribute__((no_instrument_function)) bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)
{
 if (!dev->dma_mask)
  return 0;

 return addr + size - 1 <= *dev->dma_mask;
}

static inline __attribute__((no_instrument_function)) dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
{
 return paddr;
}

static inline __attribute__((no_instrument_function)) phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
{
 return daddr;
}


static inline __attribute__((no_instrument_function)) void
dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 enum dma_data_direction dir)
{
 flush_write_buffers();
}

static inline __attribute__((no_instrument_function)) unsigned long dma_alloc_coherent_mask(struct device *dev,
          gfp_t gfp)
{
 unsigned long dma_mask = 0;

 dma_mask = dev->coherent_dma_mask;
 if (!dma_mask)
  dma_mask = (gfp & (( gfp_t)0x01u)) ? (((24) == 64) ? ~0ULL : ((1ULL<<(24))-1)) : (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));

 return dma_mask;
}

static inline __attribute__((no_instrument_function)) gfp_t dma_alloc_coherent_gfp_flags(struct device *dev, gfp_t gfp)
{
 unsigned long dma_mask = dma_alloc_coherent_mask(dev, gfp);

 if (dma_mask <= (((24) == 64) ? ~0ULL : ((1ULL<<(24))-1)))
  gfp |= (( gfp_t)0x01u);

 if (dma_mask <= (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1)) && !(gfp & (( gfp_t)0x01u)))
  gfp |= (( gfp_t)0x04u);

       return gfp;
}
# 110 "include/linux/dma-mapping.h" 2
# 123 "include/linux/dma-mapping.h"
static inline __attribute__((no_instrument_function)) dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr,
           size_t size,
           enum dma_data_direction dir,
           struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 kmemcheck_mark_initialized(ptr, size);
 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (132), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 addr = ops->map_page(dev, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(ptr)) >> 12)),
        ((unsigned long)(ptr) & ~(~(((1UL) << 12)-1))), size,
        dir, attrs);
 debug_dma_map_page(dev, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(ptr)) >> 12)),
      ((unsigned long)(ptr) & ~(~(((1UL) << 12)-1))), size,
      dir, addr, true);
 return addr;
}

static inline __attribute__((no_instrument_function)) void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr,
       size_t size,
       enum dma_data_direction dir,
       struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (149), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, attrs);
 debug_dma_unmap_page(dev, addr, size, dir, true);
}





static inline __attribute__((no_instrument_function)) int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg,
       int nents, enum dma_data_direction dir,
       struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 int i, ents;
 struct scatterlist *s;

 for (i = 0, s = (sg); i < (nents); i++, s = sg_next(s))
  kmemcheck_mark_initialized(sg_virt(s), s->length);
 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (169), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 ents = ops->map_sg(dev, sg, nents, dir, attrs);
 do { if (__builtin_expect(!!(ents < 0), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (171), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 debug_dma_map_sg(dev, sg, nents, ents, dir);

 return ents;
}

static inline __attribute__((no_instrument_function)) void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg,
          int nents, enum dma_data_direction dir,
          struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (183), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 debug_dma_unmap_sg(dev, sg, nents, dir);
 if (ops->unmap_sg)
  ops->unmap_sg(dev, sg, nents, dir, attrs);
}

static inline __attribute__((no_instrument_function)) dma_addr_t dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 kmemcheck_mark_initialized(lowmem_page_address(page) + offset, size);
 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (197), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 addr = ops->map_page(dev, page, offset, size, dir, ((void *)0));
 debug_dma_map_page(dev, page, offset, size, dir, addr, false);

 return addr;
}

static inline __attribute__((no_instrument_function)) void dma_unmap_page(struct device *dev, dma_addr_t addr,
      size_t size, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (209), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, ((void *)0));
 debug_dma_unmap_page(dev, addr, size, dir, false);
}

static inline __attribute__((no_instrument_function)) void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr,
        size_t size,
        enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (221), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr, size, dir);
 debug_dma_sync_single_for_cpu(dev, addr, size, dir);
}

static inline __attribute__((no_instrument_function)) void dma_sync_single_for_device(struct device *dev,
           dma_addr_t addr, size_t size,
           enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (233), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr, size, dir);
 debug_dma_sync_single_for_device(dev, addr, size, dir);
}

static inline __attribute__((no_instrument_function)) void dma_sync_single_range_for_cpu(struct device *dev,
       dma_addr_t addr,
       unsigned long offset,
       size_t size,
       enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (247), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_cpu(dev, addr, offset, size, dir);
}

static inline __attribute__((no_instrument_function)) void dma_sync_single_range_for_device(struct device *dev,
          dma_addr_t addr,
          unsigned long offset,
          size_t size,
          enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (261), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_device(dev, addr, offset, size, dir);
}

static inline __attribute__((no_instrument_function)) void
dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (273), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_sg_for_cpu)
  ops->sync_sg_for_cpu(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_cpu(dev, sg, nelems, dir);
}

static inline __attribute__((no_instrument_function)) void
dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg,
         int nelems, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (285), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->sync_sg_for_device)
  ops->sync_sg_for_device(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_device(dev, sg, nelems, dir);

}






extern int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
      void *cpu_addr, dma_addr_t dma_addr, size_t size);

void *dma_common_contiguous_remap(struct page *page, size_t size,
   unsigned long vm_flags,
   pgprot_t prot, const void *caller);

void *dma_common_pages_remap(struct page **pages, size_t size,
   unsigned long vm_flags, pgprot_t prot,
   const void *caller);
void dma_common_free_remap(void *cpu_addr, size_t size, unsigned long vm_flags);
# 322 "include/linux/dma-mapping.h"
static inline __attribute__((no_instrument_function)) int
dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma, void *cpu_addr,
        dma_addr_t dma_addr, size_t size, struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (327), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->mmap)
  return ops->mmap(dev, vma, cpu_addr, dma_addr, size, attrs);
 return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
}



int
dma_common_get_sgtable(struct device *dev, struct sg_table *sgt,
         void *cpu_addr, dma_addr_t dma_addr, size_t size);

static inline __attribute__((no_instrument_function)) int
dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt, void *cpu_addr,
        dma_addr_t dma_addr, size_t size, struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (344), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (ops->get_sgtable)
  return ops->get_sgtable(dev, sgt, cpu_addr, dma_addr, size,
     attrs);
 return dma_common_get_sgtable(dev, sgt, cpu_addr, dma_addr, size);
}







static inline __attribute__((no_instrument_function)) void *dma_alloc_attrs(struct device *dev, size_t size,
           dma_addr_t *dma_handle, gfp_t flag,
           struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 void *cpu_addr;

 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (364), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);

 if ((0))
  return cpu_addr;

 if (!arch_dma_alloc_attrs(&dev, &flag))
  return ((void *)0);
 if (!ops->alloc)
  return ((void *)0);

 cpu_addr = ops->alloc(dev, size, dma_handle, flag, attrs);
 debug_dma_alloc_coherent(dev, size, *dma_handle, cpu_addr);
 return cpu_addr;
}

static inline __attribute__((no_instrument_function)) void dma_free_attrs(struct device *dev, size_t size,
         void *cpu_addr, dma_addr_t dma_handle,
         struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dma-mapping.h"), "i" (385), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 ({ int __ret_warn_on = !!(({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/dma-mapping.h", 386); __builtin_expect(!!(__ret_warn_on), 0); });

 if ((0))
  return;

 if (!ops->free || !cpu_addr)
  return;

 debug_dma_free_coherent(dev, size, cpu_addr, dma_handle);
 ops->free(dev, size, cpu_addr, dma_handle, attrs);
}

static inline __attribute__((no_instrument_function)) void *dma_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t flag)
{
 return dma_alloc_attrs(dev, size, dma_handle, flag, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void dma_free_coherent(struct device *dev, size_t size,
  void *cpu_addr, dma_addr_t dma_handle)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_handle, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void *dma_alloc_noncoherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t gfp)
{
 struct dma_attrs attrs = { .flags = { [0 ... (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))-1] = 0 }, };

 dma_set_attr(DMA_ATTR_NON_CONSISTENT, &attrs);
 return dma_alloc_attrs(dev, size, dma_handle, gfp, &attrs);
}

static inline __attribute__((no_instrument_function)) void dma_free_noncoherent(struct device *dev, size_t size,
  void *cpu_addr, dma_addr_t dma_handle)
{
 struct dma_attrs attrs = { .flags = { [0 ... (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))-1] = 0 }, };

 dma_set_attr(DMA_ATTR_NON_CONSISTENT, &attrs);
 dma_free_attrs(dev, size, cpu_addr, dma_handle, &attrs);
}

static inline __attribute__((no_instrument_function)) int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
 debug_dma_mapping_error(dev, dma_addr);

 if (get_dma_ops(dev)->mapping_error)
  return get_dma_ops(dev)->mapping_error(dev, dma_addr);


 return dma_addr == 0;



}
# 456 "include/linux/dma-mapping.h"
static inline __attribute__((no_instrument_function)) int dma_set_mask(struct device *dev, u64 mask)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 if (ops->set_dma_mask)
  return ops->set_dma_mask(dev, mask);

 if (!dev->dma_mask || !dma_supported(dev, mask))
  return -5;
 *dev->dma_mask = mask;
 return 0;
}


static inline __attribute__((no_instrument_function)) u64 dma_get_mask(struct device *dev)
{
 if (dev && dev->dma_mask && *dev->dma_mask)
  return *dev->dma_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}




static inline __attribute__((no_instrument_function)) int dma_set_coherent_mask(struct device *dev, u64 mask)
{
 if (!dma_supported(dev, mask))
  return -5;
 dev->coherent_dma_mask = mask;
 return 0;
}
# 495 "include/linux/dma-mapping.h"
static inline __attribute__((no_instrument_function)) int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
 int rc = dma_set_mask(dev, mask);
 if (rc == 0)
  dma_set_coherent_mask(dev, mask);
 return rc;
}





static inline __attribute__((no_instrument_function)) int dma_coerce_mask_and_coherent(struct device *dev, u64 mask)
{
 dev->dma_mask = &dev->coherent_dma_mask;
 return dma_set_mask_and_coherent(dev, mask);
}

extern u64 dma_get_required_mask(struct device *dev);


static inline __attribute__((no_instrument_function)) void arch_setup_dma_ops(struct device *dev, u64 dma_base,
          u64 size, const struct iommu_ops *iommu,
          bool coherent) { }



static inline __attribute__((no_instrument_function)) void arch_teardown_dma_ops(struct device *dev) { }


static inline __attribute__((no_instrument_function)) unsigned int dma_get_max_seg_size(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->max_segment_size)
  return dev->dma_parms->max_segment_size;
 return 0x00010000;
}

static inline __attribute__((no_instrument_function)) unsigned int dma_set_max_seg_size(struct device *dev,
      unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 }
 return -5;
}

static inline __attribute__((no_instrument_function)) unsigned long dma_get_seg_boundary(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->segment_boundary_mask)
  return dev->dma_parms->segment_boundary_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}

static inline __attribute__((no_instrument_function)) int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 }
 return -5;
}


static inline __attribute__((no_instrument_function)) unsigned long dma_max_pfn(struct device *dev)
{
 return *dev->dma_mask >> 12;
}


static inline __attribute__((no_instrument_function)) void *dma_zalloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t flag)
{
 void *ret = dma_alloc_coherent(dev, size, dma_handle,
           flag | (( gfp_t)0x8000u));
 return ret;
}


static inline __attribute__((no_instrument_function)) int dma_get_cache_alignment(void)
{



 return 1;
}
# 596 "include/linux/dma-mapping.h"
static inline __attribute__((no_instrument_function)) int
dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
       dma_addr_t device_addr, size_t size, int flags)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void
dma_release_declared_memory(struct device *dev)
{
}

static inline __attribute__((no_instrument_function)) void *
dma_mark_declared_memory_occupied(struct device *dev,
      dma_addr_t device_addr, size_t size)
{
 return ERR_PTR(-16);
}





extern void *dmam_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
          dma_addr_t dma_handle);
extern void *dmam_alloc_noncoherent(struct device *dev, size_t size,
        dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_noncoherent(struct device *dev, size_t size, void *vaddr,
      dma_addr_t dma_handle);







static inline __attribute__((no_instrument_function)) int dmam_declare_coherent_memory(struct device *dev,
    phys_addr_t phys_addr, dma_addr_t device_addr,
    size_t size, gfp_t gfp)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void dmam_release_declared_memory(struct device *dev)
{
}


static inline __attribute__((no_instrument_function)) void *dma_alloc_wc(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t gfp)
{
 struct dma_attrs attrs = { .flags = { [0 ... (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))-1] = 0 }, };
 dma_set_attr(DMA_ATTR_WRITE_COMBINE, &attrs);
 return dma_alloc_attrs(dev, size, dma_addr, gfp, &attrs);
}




static inline __attribute__((no_instrument_function)) void dma_free_wc(struct device *dev, size_t size,
          void *cpu_addr, dma_addr_t dma_addr)
{
 struct dma_attrs attrs = { .flags = { [0 ... (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))-1] = 0 }, };
 dma_set_attr(DMA_ATTR_WRITE_COMBINE, &attrs);
 return dma_free_attrs(dev, size, cpu_addr, dma_addr, &attrs);
}




static inline __attribute__((no_instrument_function)) int dma_mmap_wc(struct device *dev,
         struct vm_area_struct *vma,
         void *cpu_addr, dma_addr_t dma_addr,
         size_t size)
{
 struct dma_attrs attrs = { .flags = { [0 ... (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))-1] = 0 }, };
 dma_set_attr(DMA_ATTR_WRITE_COMBINE, &attrs);
 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size, &attrs);
}
# 35 "include/linux/skbuff.h" 2
# 1 "include/linux/netdev_features.h" 1
# 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;

enum {
 NETIF_F_SG_BIT,
 NETIF_F_IP_CSUM_BIT,
 __UNUSED_NETIF_F_1,
 NETIF_F_HW_CSUM_BIT,
 NETIF_F_IPV6_CSUM_BIT,
 NETIF_F_HIGHDMA_BIT,
 NETIF_F_FRAGLIST_BIT,
 NETIF_F_HW_VLAN_CTAG_TX_BIT,
 NETIF_F_HW_VLAN_CTAG_RX_BIT,
 NETIF_F_HW_VLAN_CTAG_FILTER_BIT,
 NETIF_F_VLAN_CHALLENGED_BIT,
 NETIF_F_GSO_BIT,
 NETIF_F_LLTX_BIT,

 NETIF_F_NETNS_LOCAL_BIT,
 NETIF_F_GRO_BIT,
 NETIF_F_LRO_BIT,

     NETIF_F_GSO_SHIFT,
 NETIF_F_TSO_BIT
  = NETIF_F_GSO_SHIFT,
 NETIF_F_UFO_BIT,
 NETIF_F_GSO_ROBUST_BIT,
 NETIF_F_TSO_ECN_BIT,
 NETIF_F_TSO_MANGLEID_BIT,
 NETIF_F_TSO6_BIT,
 NETIF_F_FSO_BIT,
 NETIF_F_GSO_GRE_BIT,
 NETIF_F_GSO_GRE_CSUM_BIT,
 NETIF_F_GSO_IPXIP4_BIT,
 NETIF_F_GSO_IPXIP6_BIT,
 NETIF_F_GSO_UDP_TUNNEL_BIT,
 NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT,
 NETIF_F_GSO_PARTIAL_BIT,



 NETIF_F_GSO_TUNNEL_REMCSUM_BIT,
     NETIF_F_GSO_LAST =
  NETIF_F_GSO_TUNNEL_REMCSUM_BIT,

 NETIF_F_FCOE_CRC_BIT,
 NETIF_F_SCTP_CRC_BIT,
 NETIF_F_FCOE_MTU_BIT,
 NETIF_F_NTUPLE_BIT,
 NETIF_F_RXHASH_BIT,
 NETIF_F_RXCSUM_BIT,
 NETIF_F_NOCACHE_COPY_BIT,
 NETIF_F_LOOPBACK_BIT,
 NETIF_F_RXFCS_BIT,
 NETIF_F_RXALL_BIT,
 NETIF_F_HW_VLAN_STAG_TX_BIT,
 NETIF_F_HW_VLAN_STAG_RX_BIT,
 NETIF_F_HW_VLAN_STAG_FILTER_BIT,
 NETIF_F_HW_L2FW_DOFFLOAD_BIT,
 NETIF_F_BUSY_POLL_BIT,

 NETIF_F_HW_TC_BIT,
# 84 "include/linux/netdev_features.h"
     NETDEV_FEATURE_COUNT
};
# 36 "include/linux/skbuff.h" 2

# 1 "include/net/flow_dissector.h" 1




# 1 "include/linux/in6.h" 1
# 23 "include/linux/in6.h"
# 1 "include/uapi/linux/in6.h" 1
# 25 "include/uapi/linux/in6.h"
# 1 "./include/uapi/linux/libc-compat.h" 1
# 26 "include/uapi/linux/in6.h" 2






struct in6_addr {
 union {
  __u8 u6_addr8[16];

  __be16 u6_addr16[8];
  __be32 u6_addr32[4];

 } in6_u;





};



struct sockaddr_in6 {
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;
};



struct ipv6_mreq {

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;
};




struct in6_flowlabel_req {
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;

};
# 24 "include/linux/in6.h" 2





extern const struct in6_addr in6addr_any;

extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_linklocal_allnodes;


extern const struct in6_addr in6addr_linklocal_allrouters;


extern const struct in6_addr in6addr_interfacelocal_allnodes;


extern const struct in6_addr in6addr_interfacelocal_allrouters;


extern const struct in6_addr in6addr_sitelocal_allrouters;
# 6 "include/net/flow_dissector.h" 2
# 1 "include/uapi/linux/if_ether.h" 1
# 140 "include/uapi/linux/if_ether.h"
struct ethhdr {
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;
} __attribute__((packed));
# 7 "include/net/flow_dissector.h" 2





struct flow_dissector_key_control {
 u16 thoff;
 u16 addr_type;
 u32 flags;
};
# 28 "include/net/flow_dissector.h"
struct flow_dissector_key_basic {
 __be16 n_proto;
 u8 ip_proto;
 u8 padding;
};

struct flow_dissector_key_tags {
 u32 vlan_id:12,
  flow_label:20;
};

struct flow_dissector_key_keyid {
 __be32 keyid;
};






struct flow_dissector_key_ipv4_addrs {

 __be32 src;
 __be32 dst;
};






struct flow_dissector_key_ipv6_addrs {

 struct in6_addr src;
 struct in6_addr dst;
};





struct flow_dissector_key_tipc_addrs {
 __be32 srcnode;
};






struct flow_dissector_key_addrs {
 union {
  struct flow_dissector_key_ipv4_addrs v4addrs;
  struct flow_dissector_key_ipv6_addrs v6addrs;
  struct flow_dissector_key_tipc_addrs tipcaddrs;
 };
};







struct flow_dissector_key_ports {
 union {
  __be32 ports;
  struct {
   __be16 src;
   __be16 dst;
  };
 };
};







struct flow_dissector_key_eth_addrs {

 unsigned char dst[6];
 unsigned char src[6];
};

enum flow_dissector_key_id {
 FLOW_DISSECTOR_KEY_CONTROL,
 FLOW_DISSECTOR_KEY_BASIC,
 FLOW_DISSECTOR_KEY_IPV4_ADDRS,
 FLOW_DISSECTOR_KEY_IPV6_ADDRS,
 FLOW_DISSECTOR_KEY_PORTS,
 FLOW_DISSECTOR_KEY_ETH_ADDRS,
 FLOW_DISSECTOR_KEY_TIPC_ADDRS,
 FLOW_DISSECTOR_KEY_VLANID,
 FLOW_DISSECTOR_KEY_FLOW_LABEL,
 FLOW_DISSECTOR_KEY_GRE_KEYID,
 FLOW_DISSECTOR_KEY_MPLS_ENTROPY,

 FLOW_DISSECTOR_KEY_MAX,
};






struct flow_dissector_key {
 enum flow_dissector_key_id key_id;
 size_t offset;

};

struct flow_dissector {
 unsigned int used_keys;
 unsigned short int offset[FLOW_DISSECTOR_KEY_MAX];
};

struct flow_keys {
 struct flow_dissector_key_control control;

 struct flow_dissector_key_basic basic;
 struct flow_dissector_key_tags tags;
 struct flow_dissector_key_keyid keyid;
 struct flow_dissector_key_ports ports;
 struct flow_dissector_key_addrs addrs;
};




__be32 flow_get_u32_src(const struct flow_keys *flow);
__be32 flow_get_u32_dst(const struct flow_keys *flow);

extern struct flow_dissector flow_keys_dissector;
extern struct flow_dissector flow_keys_buf_dissector;
# 173 "include/net/flow_dissector.h"
struct flow_keys_digest {
 u8 data[16];
};

void make_flow_keys_digest(struct flow_keys_digest *digest,
      const struct flow_keys *flow);

static inline __attribute__((no_instrument_function)) bool flow_keys_have_l4(struct flow_keys *keys)
{
 return (keys->ports.ports || keys->tags.flow_label);
}

u32 flow_hash_from_keys(struct flow_keys *keys);

static inline __attribute__((no_instrument_function)) bool dissector_uses_key(const struct flow_dissector *flow_dissector,
          enum flow_dissector_key_id key_id)
{
 return flow_dissector->used_keys & (1 << key_id);
}

static inline __attribute__((no_instrument_function)) void *skb_flow_dissector_target(struct flow_dissector *flow_dissector,
           enum flow_dissector_key_id key_id,
           void *target_container)
{
 return ((char *)target_container) + flow_dissector->offset[key_id];
}
# 38 "include/linux/skbuff.h" 2
# 1 "include/linux/splice.h" 1
# 11 "include/linux/splice.h"
# 1 "include/linux/pipe_fs_i.h" 1
# 20 "include/linux/pipe_fs_i.h"
struct pipe_buffer {
 struct page *page;
 unsigned int offset, len;
 const struct pipe_buf_operations *ops;
 unsigned int flags;
 unsigned long private;
};
# 47 "include/linux/pipe_fs_i.h"
struct pipe_inode_info {
 struct mutex mutex;
 wait_queue_head_t wait;
 unsigned int nrbufs, curbuf, buffers;
 unsigned int readers;
 unsigned int writers;
 unsigned int files;
 unsigned int waiting_writers;
 unsigned int r_counter;
 unsigned int w_counter;
 struct page *tmp_page;
 struct fasync_struct *fasync_readers;
 struct fasync_struct *fasync_writers;
 struct pipe_buffer *bufs;
 struct user_struct *user;
};
# 79 "include/linux/pipe_fs_i.h"
struct pipe_buf_operations {





 int can_merge;
# 94 "include/linux/pipe_fs_i.h"
 int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *);





 void (*release)(struct pipe_inode_info *, struct pipe_buffer *);
# 110 "include/linux/pipe_fs_i.h"
 int (*steal)(struct pipe_inode_info *, struct pipe_buffer *);




 void (*get)(struct pipe_inode_info *, struct pipe_buffer *);
};






void pipe_lock(struct pipe_inode_info *);
void pipe_unlock(struct pipe_inode_info *);
void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);

extern unsigned int pipe_max_size, pipe_min_size;
extern unsigned long pipe_user_pages_hard;
extern unsigned long pipe_user_pages_soft;
int pipe_proc_fn(struct ctl_table *, int, void *, size_t *, loff_t *);



void pipe_wait(struct pipe_inode_info *pipe);

struct pipe_inode_info *alloc_pipe_info(void);
void free_pipe_info(struct pipe_inode_info *);


void generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
int generic_pipe_buf_confirm(struct pipe_inode_info *, struct pipe_buffer *);
int generic_pipe_buf_steal(struct pipe_inode_info *, struct pipe_buffer *);
void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);

extern const struct pipe_buf_operations nosteal_pipe_buf_ops;


long pipe_fcntl(struct file *, unsigned int, unsigned long arg);
struct pipe_inode_info *get_pipe_info(struct file *file);

int create_pipe_files(struct file **, int);
# 12 "include/linux/splice.h" 2
# 26 "include/linux/splice.h"
struct splice_desc {
 size_t total_len;
 unsigned int len;
 unsigned int flags;



 union {
  void *userptr;
  struct file *file;
  void *data;
 } u;
 loff_t pos;
 loff_t *opos;
 size_t num_spliced;
 bool need_wakeup;
};

struct partial_page {
 unsigned int offset;
 unsigned int len;
 unsigned long private;
};




struct splice_pipe_desc {
 struct page **pages;
 struct partial_page *partial;
 int nr_pages;
 unsigned int nr_pages_max;
 unsigned int flags;
 const struct pipe_buf_operations *ops;
 void (*spd_release)(struct splice_pipe_desc *, unsigned int);
};

typedef int (splice_actor)(struct pipe_inode_info *, struct pipe_buffer *,
      struct splice_desc *);
typedef int (splice_direct_actor)(struct pipe_inode_info *,
      struct splice_desc *);

extern ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *,
    loff_t *, size_t, unsigned int,
    splice_actor *);
extern ssize_t __splice_from_pipe(struct pipe_inode_info *,
      struct splice_desc *, splice_actor *);
extern ssize_t splice_to_pipe(struct pipe_inode_info *,
         struct splice_pipe_desc *);
extern ssize_t splice_direct_to_actor(struct file *, struct splice_desc *,
          splice_direct_actor *);




extern int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
extern void splice_shrink_spd(struct splice_pipe_desc *);
extern void spd_release_page(struct splice_pipe_desc *, unsigned int);

extern const struct pipe_buf_operations page_cache_pipe_buf_ops;
# 39 "include/linux/skbuff.h" 2

# 1 "include/net/flow.h" 1
# 23 "include/net/flow.h"
struct flowi_tunnel {
 __be64 tun_id;
};

struct flowi_common {
 int flowic_oif;
 int flowic_iif;
 __u32 flowic_mark;
 __u8 flowic_tos;
 __u8 flowic_scope;
 __u8 flowic_proto;
 __u8 flowic_flags;




 __u32 flowic_secid;
 struct flowi_tunnel flowic_tun_key;
};

union flowi_uli {
 struct {
  __be16 dport;
  __be16 sport;
 } ports;

 struct {
  __u8 type;
  __u8 code;
 } icmpt;

 struct {
  __le16 dport;
  __le16 sport;
 } dnports;

 __be32 spi;
 __be32 gre_key;

 struct {
  __u8 type;
 } mht;
};

struct flowi4 {
 struct flowi_common __fl_common;
# 80 "include/net/flow.h"
 __be32 saddr;
 __be32 daddr;

 union flowi_uli uli;







} __attribute__((__aligned__(64/8)));

static inline __attribute__((no_instrument_function)) void flowi4_init_output(struct flowi4 *fl4, int oif,
          __u32 mark, __u8 tos, __u8 scope,
          __u8 proto, __u8 flags,
          __be32 daddr, __be32 saddr,
          __be16 dport, __be16 sport)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_iif = 1;
 fl4->__fl_common.flowic_mark = mark;
 fl4->__fl_common.flowic_tos = tos;
 fl4->__fl_common.flowic_scope = scope;
 fl4->__fl_common.flowic_proto = proto;
 fl4->__fl_common.flowic_flags = flags;
 fl4->__fl_common.flowic_secid = 0;
 fl4->__fl_common.flowic_tun_key.tun_id = 0;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
 fl4->uli.ports.dport = dport;
 fl4->uli.ports.sport = sport;
}


static inline __attribute__((no_instrument_function)) void flowi4_update_output(struct flowi4 *fl4, int oif, __u8 tos,
     __be32 daddr, __be32 saddr)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_tos = tos;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
}


struct flowi6 {
 struct flowi_common __fl_common;
# 135 "include/net/flow.h"
 struct in6_addr daddr;
 struct in6_addr saddr;

 __be32 flowlabel;
 union flowi_uli uli;







} __attribute__((__aligned__(64/8)));

struct flowidn {
 struct flowi_common __fl_common;






 __le16 daddr;
 __le16 saddr;
 union flowi_uli uli;


} __attribute__((__aligned__(64/8)));

struct flowi {
 union {
  struct flowi_common __fl_common;
  struct flowi4 ip4;
  struct flowi6 ip6;
  struct flowidn dn;
 } u;
# 180 "include/net/flow.h"
} __attribute__((__aligned__(64/8)));

static inline __attribute__((no_instrument_function)) struct flowi *flowi4_to_flowi(struct flowi4 *fl4)
{
 return ({ const typeof( ((struct flowi *)0)->u.ip4 ) *__mptr = (fl4); (struct flowi *)( (char *)__mptr - __builtin_offsetof(struct flowi, u.ip4) );});
}

static inline __attribute__((no_instrument_function)) struct flowi *flowi6_to_flowi(struct flowi6 *fl6)
{
 return ({ const typeof( ((struct flowi *)0)->u.ip6 ) *__mptr = (fl6); (struct flowi *)( (char *)__mptr - __builtin_offsetof(struct flowi, u.ip6) );});
}

static inline __attribute__((no_instrument_function)) struct flowi *flowidn_to_flowi(struct flowidn *fldn)
{
 return ({ const typeof( ((struct flowi *)0)->u.dn ) *__mptr = (fldn); (struct flowi *)( (char *)__mptr - __builtin_offsetof(struct flowi, u.dn) );});
}

typedef unsigned long flow_compare_t;

static inline __attribute__((no_instrument_function)) size_t flow_key_size(u16 family)
{
 switch (family) {
 case 2:
  do { bool __cond = !(!(sizeof(struct flowi4) % sizeof(flow_compare_t))); extern void __compiletime_assert_203(void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct flowi4) % sizeof(flow_compare_t)"))); if (__cond) __compiletime_assert_203(); do { } while (0); } while (0);
  return sizeof(struct flowi4) / sizeof(flow_compare_t);
 case 10:
  do { bool __cond = !(!(sizeof(struct flowi6) % sizeof(flow_compare_t))); extern void __compiletime_assert_206(void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct flowi6) % sizeof(flow_compare_t)"))); if (__cond) __compiletime_assert_206(); do { } while (0); } while (0);
  return sizeof(struct flowi6) / sizeof(flow_compare_t);
 case 12:
  do { bool __cond = !(!(sizeof(struct flowidn) % sizeof(flow_compare_t))); extern void __compiletime_assert_209(void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct flowidn) % sizeof(flow_compare_t)"))); if (__cond) __compiletime_assert_209(); do { } while (0); } while (0);
  return sizeof(struct flowidn) / sizeof(flow_compare_t);
 }
 return 0;
}





struct net;
struct sock;
struct flow_cache_ops;

struct flow_cache_object {
 const struct flow_cache_ops *ops;
};

struct flow_cache_ops {
 struct flow_cache_object *(*get)(struct flow_cache_object *);
 int (*check)(struct flow_cache_object *);
 void (*delete)(struct flow_cache_object *);
};

typedef struct flow_cache_object *(*flow_resolve_t)(
  struct net *net, const struct flowi *key, u16 family,
  u8 dir, struct flow_cache_object *oldobj, void *ctx);

struct flow_cache_object *flow_cache_lookup(struct net *net,
         const struct flowi *key, u16 family,
         u8 dir, flow_resolve_t resolver,
         void *ctx);
int flow_cache_init(struct net *net);
void flow_cache_fini(struct net *net);

void flow_cache_flush(struct net *net);
void flow_cache_flush_deferred(struct net *net);
extern atomic_t flow_cache_genid;

__u32 __get_hash_from_flowi6(const struct flowi6 *fl6, struct flow_keys *keys);

static inline __attribute__((no_instrument_function)) __u32 get_hash_from_flowi6(const struct flowi6 *fl6)
{
 struct flow_keys keys;

 return __get_hash_from_flowi6(fl6, &keys);
}

__u32 __get_hash_from_flowi4(const struct flowi4 *fl4, struct flow_keys *keys);

static inline __attribute__((no_instrument_function)) __u32 get_hash_from_flowi4(const struct flowi4 *fl4)
{
 struct flow_keys keys;

 return __get_hash_from_flowi4(fl4, &keys);
}
# 41 "include/linux/skbuff.h" 2
# 237 "include/linux/skbuff.h"
struct net_device;
struct scatterlist;
struct pipe_inode_info;
struct iov_iter;
struct napi_struct;


struct nf_conntrack {
 atomic_t use;
};
# 279 "include/linux/skbuff.h"
struct sk_buff_head {

 struct sk_buff *next;
 struct sk_buff *prev;

 __u32 qlen;
 spinlock_t lock;
};

struct sk_buff;
# 302 "include/linux/skbuff.h"
extern int sysctl_max_skb_frags;

typedef struct skb_frag_struct skb_frag_t;

struct skb_frag_struct {
 struct {
  struct page *p;
 } page;

 __u32 page_offset;
 __u32 size;




};

static inline __attribute__((no_instrument_function)) unsigned int skb_frag_size(const skb_frag_t *frag)
{
 return frag->size;
}

static inline __attribute__((no_instrument_function)) void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
 frag->size = size;
}

static inline __attribute__((no_instrument_function)) void skb_frag_size_add(skb_frag_t *frag, int delta)
{
 frag->size += delta;
}

static inline __attribute__((no_instrument_function)) void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
 frag->size -= delta;
}
# 355 "include/linux/skbuff.h"
struct skb_shared_hwtstamps {
 ktime_t hwtstamp;
};


enum {

 SKBTX_HW_TSTAMP = 1 << 0,


 SKBTX_SW_TSTAMP = 1 << 1,


 SKBTX_IN_PROGRESS = 1 << 2,


 SKBTX_DEV_ZEROCOPY = 1 << 3,


 SKBTX_WIFI_STATUS = 1 << 4,






 SKBTX_SHARED_FRAG = 1 << 5,


 SKBTX_SCHED_TSTAMP = 1 << 6,
};
# 399 "include/linux/skbuff.h"
struct ubuf_info {
 void (*callback)(struct ubuf_info *, bool zerocopy_success);
 void *ctx;
 unsigned long desc;
};




struct skb_shared_info {
 unsigned char nr_frags;
 __u8 tx_flags;
 unsigned short gso_size;

 unsigned short gso_segs;
 unsigned short gso_type;
 struct sk_buff *frag_list;
 struct skb_shared_hwtstamps hwtstamps;
 u32 tskey;
 __be32 ip6_frag_id;




 atomic_t dataref;



 void * destructor_arg;


 skb_frag_t frags[(65536/((1UL) << 12) + 1)];
};
# 448 "include/linux/skbuff.h"
enum {
 SKB_FCLONE_UNAVAILABLE,
 SKB_FCLONE_ORIG,
 SKB_FCLONE_CLONE,
};

enum {
 SKB_GSO_TCPV4 = 1 << 0,
 SKB_GSO_UDP = 1 << 1,


 SKB_GSO_DODGY = 1 << 2,


 SKB_GSO_TCP_ECN = 1 << 3,

 SKB_GSO_TCP_FIXEDID = 1 << 4,

 SKB_GSO_TCPV6 = 1 << 5,

 SKB_GSO_FCOE = 1 << 6,

 SKB_GSO_GRE = 1 << 7,

 SKB_GSO_GRE_CSUM = 1 << 8,

 SKB_GSO_IPXIP4 = 1 << 9,

 SKB_GSO_IPXIP6 = 1 << 10,

 SKB_GSO_UDP_TUNNEL = 1 << 11,

 SKB_GSO_UDP_TUNNEL_CSUM = 1 << 12,

 SKB_GSO_PARTIAL = 1 << 13,

 SKB_GSO_TUNNEL_REMCSUM = 1 << 14,
};






typedef unsigned int sk_buff_data_t;
# 502 "include/linux/skbuff.h"
struct skb_mstamp {
 union {
  u64 v64;
  struct {
   u32 stamp_us;
   u32 stamp_jiffies;
  };
 };
};





static inline __attribute__((no_instrument_function)) void skb_mstamp_get(struct skb_mstamp *cl)
{
 u64 val = local_clock();

 ({ uint32_t __base = (1000L); uint32_t __rem; __rem = ((uint64_t)(val)) % __base; (val) = ((uint64_t)(val)) / __base; __rem; });
 cl->stamp_us = (u32)val;
 cl->stamp_jiffies = (u32)jiffies;
}






static inline __attribute__((no_instrument_function)) u32 skb_mstamp_us_delta(const struct skb_mstamp *t1,
          const struct skb_mstamp *t0)
{
 s32 delta_us = t1->stamp_us - t0->stamp_us;
 u32 delta_jiffies = t1->stamp_jiffies - t0->stamp_jiffies;




 if (delta_us <= 0 ||
     delta_jiffies >= (((int)(~0U>>1)) / (1000000L / 1000)))

  delta_us = jiffies_to_usecs(delta_jiffies);

 return delta_us;
}

static inline __attribute__((no_instrument_function)) bool skb_mstamp_after(const struct skb_mstamp *t1,
        const struct skb_mstamp *t0)
{
 s32 diff = t1->stamp_jiffies - t0->stamp_jiffies;

 if (!diff)
  diff = t1->stamp_us - t0->stamp_us;
 return diff > 0;
}
# 626 "include/linux/skbuff.h"
struct sk_buff {
 union {
  struct {

   struct sk_buff *next;
   struct sk_buff *prev;

   union {
    ktime_t tstamp;
    struct skb_mstamp skb_mstamp;
   };
  };
  struct rb_node rbnode;
 };
 struct sock *sk;
 struct net_device *dev;







 char cb[48] __attribute__((aligned(8)));

 unsigned long _skb_refdst;
 void (*destructor)(struct sk_buff *skb);

 struct sec_path *sp;


 struct nf_conntrack *nfct;




 unsigned int len,
    data_len;
 __u16 mac_len,
    hdr_len;




 ;
 __u16 queue_mapping;
 __u8 cloned:1,
    nohdr:1,
    fclone:2,
    peeked:1,
    head_frag:1,
    xmit_more:1;

 ;





 __u32 headers_start[0];
# 696 "include/linux/skbuff.h"
 __u8 __pkt_type_offset[0];
 __u8 pkt_type:3;
 __u8 pfmemalloc:1;
 __u8 ignore_df:1;
 __u8 nfctinfo:3;

 __u8 nf_trace:1;
 __u8 ip_summed:2;
 __u8 ooo_okay:1;
 __u8 l4_hash:1;
 __u8 sw_hash:1;
 __u8 wifi_acked_valid:1;
 __u8 wifi_acked:1;

 __u8 no_fcs:1;

 __u8 encapsulation:1;
 __u8 encap_hdr_csum:1;
 __u8 csum_valid:1;
 __u8 csum_complete_sw:1;
 __u8 csum_level:2;
 __u8 csum_bad:1;


 __u8 ndisc_nodetype:2;

 __u8 ipvs_property:1;
 __u8 inner_protocol_type:1;
 __u8 remcsum_offload:1;



 __u16 tc_index;

 __u16 tc_verd;



 union {
  __wsum csum;
  struct {
   __u16 csum_start;
   __u16 csum_offset;
  };
 };
 __u32 priority;
 int skb_iif;
 __u32 hash;
 __be16 vlan_proto;
 __u16 vlan_tci;

 union {
  unsigned int napi_id;
  unsigned int sender_cpu;
 };

 union {

  __u32 secmark;




 };

 union {
  __u32 mark;
  __u32 reserved_tailroom;
 };

 union {
  __be16 inner_protocol;
  __u8 inner_ipproto;
 };

 __u16 inner_transport_header;
 __u16 inner_network_header;
 __u16 inner_mac_header;

 __be16 protocol;
 __u16 transport_header;
 __u16 network_header;
 __u16 mac_header;


 __u32 headers_end[0];



 sk_buff_data_t tail;
 sk_buff_data_t end;
 unsigned char *head,
    *data;
 unsigned int truesize;
 atomic_t users;
};
# 805 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_pfmemalloc(const struct sk_buff *skb)
{
 return __builtin_expect(!!(skb->pfmemalloc), 0);
}
# 823 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct dst_entry *skb_dst(const struct sk_buff *skb)
{



 ({ int __ret_warn_on = !!((skb->_skb_refdst & 1UL) && !rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null(

 "include/linux/skbuff.h"
# 828 "include/linux/skbuff.h"
 ,

 830
# 828 "include/linux/skbuff.h"
 ); __builtin_expect(!!(__ret_warn_on), 0); })

                           ;
 return (struct dst_entry *)(skb->_skb_refdst & ~(1UL));
}
# 842 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst)
{
 skb->_skb_refdst = (unsigned long)dst;
}
# 857 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/skbuff.h", 859); __builtin_expect(!!(__ret_warn_on), 0); });
 skb->_skb_refdst = (unsigned long)dst | 1UL;
}





static inline __attribute__((no_instrument_function)) bool skb_dst_is_noref(const struct sk_buff *skb)
{
 return (skb->_skb_refdst & 1UL) && skb_dst(skb);
}

static inline __attribute__((no_instrument_function)) struct rtable *skb_rtable(const struct sk_buff *skb)
{
 return (struct rtable *)skb_dst(skb);
}

void kfree_skb(struct sk_buff *skb);
void kfree_skb_list(struct sk_buff *segs);
void skb_tx_error(struct sk_buff *skb);
void consume_skb(struct sk_buff *skb);
void __kfree_skb(struct sk_buff *skb);
extern struct kmem_cache *skbuff_head_cache;

void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);
bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
        bool *fragstolen, int *delta_truesize);

struct sk_buff *__alloc_skb(unsigned int size, gfp_t priority, int flags,
       int node);
struct sk_buff *__build_skb(void *data, unsigned int frag_size);
struct sk_buff *build_skb(void *data, unsigned int frag_size);
static inline __attribute__((no_instrument_function)) struct sk_buff *alloc_skb(unsigned int size,
     gfp_t priority)
{
 return __alloc_skb(size, priority, 0, (-1));
}

struct sk_buff *alloc_skb_with_frags(unsigned long header_len,
         unsigned long data_len,
         int max_page_order,
         int *errcode,
         gfp_t gfp_mask);


struct sk_buff_fclones {
 struct sk_buff skb1;

 struct sk_buff skb2;

 atomic_t fclone_ref;
};
# 921 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_fclone_busy(const struct sock *sk,
       const struct sk_buff *skb)
{
 const struct sk_buff_fclones *fclones;

 fclones = ({ const typeof( ((struct sk_buff_fclones *)0)->skb1 ) *__mptr = (skb); (struct sk_buff_fclones *)( (char *)__mptr - __builtin_offsetof(struct sk_buff_fclones, skb1) );});

 return skb->fclone == SKB_FCLONE_ORIG &&
        atomic_read(&fclones->fclone_ref) > 1 &&
        fclones->skb2.sk == sk;
}

static inline __attribute__((no_instrument_function)) struct sk_buff *alloc_skb_fclone(unsigned int size,
            gfp_t priority)
{
 return __alloc_skb(size, priority, 0x01, (-1));
}

struct sk_buff *__alloc_skb_head(gfp_t priority, int node);
static inline __attribute__((no_instrument_function)) struct sk_buff *alloc_skb_head(gfp_t priority)
{
 return __alloc_skb_head(priority, -1);
}

struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);
struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t priority);
struct sk_buff *skb_copy(const struct sk_buff *skb, gfp_t priority);
struct sk_buff *__pskb_copy_fclone(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask, bool fclone);
static inline __attribute__((no_instrument_function)) struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, headroom, gfp_mask, false);
}

int pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask);
struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
         unsigned int headroom);
struct sk_buff *skb_copy_expand(const struct sk_buff *skb, int newheadroom,
    int newtailroom, gfp_t priority);
int skb_to_sgvec_nomark(struct sk_buff *skb, struct scatterlist *sg,
   int offset, int len);
int skb_to_sgvec(struct sk_buff *skb, struct scatterlist *sg, int offset,
   int len);
int skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer);
int skb_pad(struct sk_buff *skb, int pad);


int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,
       int getfrag(void *from, char *to, int offset,
     int len, int odd, struct sk_buff *skb),
       void *from, int length);

int skb_append_pagefrags(struct sk_buff *skb, struct page *page,
    int offset, size_t size);

struct skb_seq_state {
 __u32 lower_offset;
 __u32 upper_offset;
 __u32 frag_idx;
 __u32 stepped_offset;
 struct sk_buff *root_skb;
 struct sk_buff *cur_skb;
 __u8 *frag_data;
};

void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
     unsigned int to, struct skb_seq_state *st);
unsigned int skb_seq_read(unsigned int consumed, const u8 **data,
     struct skb_seq_state *st);
void skb_abort_seq_read(struct skb_seq_state *st);

unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
      unsigned int to, struct ts_config *config);
# 1023 "include/linux/skbuff.h"
enum pkt_hash_types {
 PKT_HASH_TYPE_NONE,
 PKT_HASH_TYPE_L2,
 PKT_HASH_TYPE_L3,
 PKT_HASH_TYPE_L4,
};

static inline __attribute__((no_instrument_function)) void skb_clear_hash(struct sk_buff *skb)
{
 skb->hash = 0;
 skb->sw_hash = 0;
 skb->l4_hash = 0;
}

static inline __attribute__((no_instrument_function)) void skb_clear_hash_if_not_l4(struct sk_buff *skb)
{
 if (!skb->l4_hash)
  skb_clear_hash(skb);
}

static inline __attribute__((no_instrument_function)) void
__skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
 skb->l4_hash = is_l4;
 skb->sw_hash = is_sw;
 skb->hash = hash;
}

static inline __attribute__((no_instrument_function)) void
skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{

 __skb_set_hash(skb, hash, false, type == PKT_HASH_TYPE_L4);
}

static inline __attribute__((no_instrument_function)) void
__skb_set_sw_hash(struct sk_buff *skb, __u32 hash, bool is_l4)
{
 __skb_set_hash(skb, hash, true, is_l4);
}

void __skb_get_hash(struct sk_buff *skb);
u32 skb_get_poff(const struct sk_buff *skb);
u32 __skb_get_poff(const struct sk_buff *skb, void *data,
     const struct flow_keys *keys, int hlen);
__be32 __skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto,
       void *data, int hlen_proto);

static inline __attribute__((no_instrument_function)) __be32 skb_flow_get_ports(const struct sk_buff *skb,
     int thoff, u8 ip_proto)
{
 return __skb_flow_get_ports(skb, thoff, ip_proto, ((void *)0), 0);
}

void skb_flow_dissector_init(struct flow_dissector *flow_dissector,
        const struct flow_dissector_key *key,
        unsigned int key_count);

bool __skb_flow_dissect(const struct sk_buff *skb,
   struct flow_dissector *flow_dissector,
   void *target_container,
   void *data, __be16 proto, int nhoff, int hlen,
   unsigned int flags);

static inline __attribute__((no_instrument_function)) bool skb_flow_dissect(const struct sk_buff *skb,
        struct flow_dissector *flow_dissector,
        void *target_container, unsigned int flags)
{
 return __skb_flow_dissect(skb, flow_dissector, target_container,
      ((void *)0), 0, 0, 0, flags);
}

static inline __attribute__((no_instrument_function)) bool skb_flow_dissect_flow_keys(const struct sk_buff *skb,
           struct flow_keys *flow,
           unsigned int flags)
{
 memset(flow, 0, sizeof(*flow));
 return __skb_flow_dissect(skb, &flow_keys_dissector, flow,
      ((void *)0), 0, 0, 0, flags);
}

static inline __attribute__((no_instrument_function)) bool skb_flow_dissect_flow_keys_buf(struct flow_keys *flow,
        void *data, __be16 proto,
        int nhoff, int hlen,
        unsigned int flags)
{
 memset(flow, 0, sizeof(*flow));
 return __skb_flow_dissect(((void *)0), &flow_keys_buf_dissector, flow,
      data, proto, nhoff, hlen, flags);
}

static inline __attribute__((no_instrument_function)) __u32 skb_get_hash(struct sk_buff *skb)
{
 if (!skb->l4_hash && !skb->sw_hash)
  __skb_get_hash(skb);

 return skb->hash;
}

__u32 __skb_get_hash_flowi6(struct sk_buff *skb, const struct flowi6 *fl6);

static inline __attribute__((no_instrument_function)) __u32 skb_get_hash_flowi6(struct sk_buff *skb, const struct flowi6 *fl6)
{
 if (!skb->l4_hash && !skb->sw_hash) {
  struct flow_keys keys;
  __u32 hash = __get_hash_from_flowi6(fl6, &keys);

  __skb_set_sw_hash(skb, hash, flow_keys_have_l4(&keys));
 }

 return skb->hash;
}

__u32 __skb_get_hash_flowi4(struct sk_buff *skb, const struct flowi4 *fl);

static inline __attribute__((no_instrument_function)) __u32 skb_get_hash_flowi4(struct sk_buff *skb, const struct flowi4 *fl4)
{
 if (!skb->l4_hash && !skb->sw_hash) {
  struct flow_keys keys;
  __u32 hash = __get_hash_from_flowi4(fl4, &keys);

  __skb_set_sw_hash(skb, hash, flow_keys_have_l4(&keys));
 }

 return skb->hash;
}

__u32 skb_get_hash_perturb(const struct sk_buff *skb, u32 perturb);

static inline __attribute__((no_instrument_function)) __u32 skb_get_hash_raw(const struct sk_buff *skb)
{
 return skb->hash;
}

static inline __attribute__((no_instrument_function)) void skb_copy_hash(struct sk_buff *to, const struct sk_buff *from)
{
 to->hash = from->hash;
 to->sw_hash = from->sw_hash;
 to->l4_hash = from->l4_hash;
};


static inline __attribute__((no_instrument_function)) unsigned char *skb_end_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->end;
}

static inline __attribute__((no_instrument_function)) unsigned int skb_end_offset(const struct sk_buff *skb)
{
 return skb->end;
}
# 1189 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
 return &((struct skb_shared_info *)(skb_end_pointer(skb)))->hwtstamps;
}







static inline __attribute__((no_instrument_function)) int skb_queue_empty(const struct sk_buff_head *list)
{
 return list->next == (const struct sk_buff *) list;
}
# 1212 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_queue_is_last(const struct sk_buff_head *list,
         const struct sk_buff *skb)
{
 return skb->next == (const struct sk_buff *) list;
}
# 1225 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_queue_is_first(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{
 return skb->prev == (const struct sk_buff *) list;
}
# 1239 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_queue_next(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_last(list, skb)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (1245), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return skb->next;
}
# 1257 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_queue_prev(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_first(list, skb)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (1263), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return skb->prev;
}
# 1274 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_get(struct sk_buff *skb)
{
 atomic_inc(&skb->users);
 return skb;
}
# 1293 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_cloned(const struct sk_buff *skb)
{
 return skb->cloned &&
        (atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref) & ((1 << 16) - 1)) != 1;
}

static inline __attribute__((no_instrument_function)) int skb_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { _cond_resched(); } while (0); } while (0);

 if (skb_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}
# 1316 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_header_cloned(const struct sk_buff *skb)
{
 int dataref;

 if (!skb->cloned)
  return 0;

 dataref = atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref);
 dataref = (dataref & ((1 << 16) - 1)) - (dataref >> 16);
 return dataref != 1;
}

static inline __attribute__((no_instrument_function)) int skb_header_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { _cond_resched(); } while (0); } while (0);

 if (skb_header_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}
# 1347 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_header_release(struct sk_buff *skb)
{
 do { if (__builtin_expect(!!(skb->nohdr), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (1349), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 skb->nohdr = 1;
 atomic_add(1 << 16, &((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref);
}
# 1361 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void __skb_header_release(struct sk_buff *skb)
{
 skb->nohdr = 1;
 atomic_set(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref, 1 + (1 << 16));
}
# 1375 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_shared(const struct sk_buff *skb)
{
 return atomic_read(&skb->users) != 1;
}
# 1393 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { _cond_resched(); } while (0); } while (0);
 if (skb_shared(skb)) {
  struct sk_buff *nskb = skb_clone(skb, pri);

  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 1428 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_unshare(struct sk_buff *skb,
       gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { _cond_resched(); } while (0); } while (0);
 if (skb_cloned(skb)) {
  struct sk_buff *nskb = skb_copy(skb, pri);


  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 1458 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_peek(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->next;

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;
}
# 1476 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_peek_next(struct sk_buff *skb,
  const struct sk_buff_head *list_)
{
 struct sk_buff *next = skb->next;

 if (next == (struct sk_buff *)list_)
  next = ((void *)0);
 return next;
}
# 1499 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *skb_peek_tail(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->prev;

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;

}







static inline __attribute__((no_instrument_function)) __u32 skb_queue_len(const struct sk_buff_head *list_)
{
 return list_->qlen;
}
# 1530 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void __skb_queue_head_init(struct sk_buff_head *list)
{
 list->prev = list->next = (struct sk_buff *)list;
 list->qlen = 0;
}
# 1544 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_queue_head_init(struct sk_buff_head *list)
{
 do { spinlock_check(&list->lock); do { *(&(&list->lock)->rlock) = (raw_spinlock_t) { .raw_lock = { { (0) } }, }; } while (0); } while (0);
 __skb_queue_head_init(list);
}

static inline __attribute__((no_instrument_function)) void skb_queue_head_init_class(struct sk_buff_head *list,
  struct lock_class_key *class)
{
 skb_queue_head_init(list);
 do { (void)(class); } while (0);
}







void skb_insert(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);
static inline __attribute__((no_instrument_function)) void __skb_insert(struct sk_buff *newsk,
    struct sk_buff *prev, struct sk_buff *next,
    struct sk_buff_head *list)
{
 newsk->next = next;
 newsk->prev = prev;
 next->prev = prev->next = newsk;
 list->qlen++;
}

static inline __attribute__((no_instrument_function)) void __skb_queue_splice(const struct sk_buff_head *list,
          struct sk_buff *prev,
          struct sk_buff *next)
{
 struct sk_buff *first = list->next;
 struct sk_buff *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((no_instrument_function)) void skb_queue_splice(const struct sk_buff_head *list,
        struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
 }
}
# 1610 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_queue_splice_init(struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}






static inline __attribute__((no_instrument_function)) void skb_queue_splice_tail(const struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
 }
}
# 1642 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_queue_splice_tail_init(struct sk_buff_head *list,
           struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}
# 1663 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void __skb_queue_after(struct sk_buff_head *list,
         struct sk_buff *prev,
         struct sk_buff *newsk)
{
 __skb_insert(newsk, prev, prev->next, list);
}

void skb_append(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);

static inline __attribute__((no_instrument_function)) void __skb_queue_before(struct sk_buff_head *list,
          struct sk_buff *next,
          struct sk_buff *newsk)
{
 __skb_insert(newsk, next->prev, next, list);
}
# 1690 "include/linux/skbuff.h"
void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
static inline __attribute__((no_instrument_function)) void __skb_queue_head(struct sk_buff_head *list,
        struct sk_buff *newsk)
{
 __skb_queue_after(list, (struct sk_buff *)list, newsk);
}
# 1707 "include/linux/skbuff.h"
void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);
static inline __attribute__((no_instrument_function)) void __skb_queue_tail(struct sk_buff_head *list,
       struct sk_buff *newsk)
{
 __skb_queue_before(list, (struct sk_buff *)list, newsk);
}





void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline __attribute__((no_instrument_function)) void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
 struct sk_buff *next, *prev;

 list->qlen--;
 next = skb->next;
 prev = skb->prev;
 skb->next = skb->prev = ((void *)0);
 next->prev = prev;
 prev->next = next;
}
# 1739 "include/linux/skbuff.h"
struct sk_buff *skb_dequeue(struct sk_buff_head *list);
static inline __attribute__((no_instrument_function)) struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
# 1756 "include/linux/skbuff.h"
struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
static inline __attribute__((no_instrument_function)) struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek_tail(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}


static inline __attribute__((no_instrument_function)) bool skb_is_nonlinear(const struct sk_buff *skb)
{
 return skb->data_len;
}

static inline __attribute__((no_instrument_function)) unsigned int skb_headlen(const struct sk_buff *skb)
{
 return skb->len - skb->data_len;
}

static inline __attribute__((no_instrument_function)) int skb_pagelen(const struct sk_buff *skb)
{
 int i, len = 0;

 for (i = (int)((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags - 1; i >= 0; i--)
  len += skb_frag_size(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i]);
 return len + skb_headlen(skb);
}
# 1798 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void __skb_fill_page_desc(struct sk_buff *skb, int i,
     struct page *page, int off, int size)
{
 skb_frag_t *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i];






 frag->page.p = page;
 frag->page_offset = off;
 skb_frag_size_set(frag, size);

 page = compound_head(page);
 if (page_is_pfmemalloc(page))
  skb->pfmemalloc = true;
}
# 1831 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_fill_page_desc(struct sk_buff *skb, int i,
          struct page *page, int off, int size)
{
 __skb_fill_page_desc(skb, i, page, off, size);
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags = i + 1;
}

void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,
       int size, unsigned int truesize);

void skb_coalesce_rx_frag(struct sk_buff *skb, int i, int size,
     unsigned int truesize);






static inline __attribute__((no_instrument_function)) unsigned char *skb_tail_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->tail;
}

static inline __attribute__((no_instrument_function)) void skb_reset_tail_pointer(struct sk_buff *skb)
{
 skb->tail = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_tail_pointer(struct sk_buff *skb, const int offset)
{
 skb_reset_tail_pointer(skb);
 skb->tail += offset;
}
# 1886 "include/linux/skbuff.h"
unsigned char *pskb_put(struct sk_buff *skb, struct sk_buff *tail, int len);
unsigned char *skb_put(struct sk_buff *skb, unsigned int len);
static inline __attribute__((no_instrument_function)) unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
 unsigned char *tmp = skb_tail_pointer(skb);
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (1891), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 skb->tail += len;
 skb->len += len;
 return tmp;
}

unsigned char *skb_push(struct sk_buff *skb, unsigned int len);
static inline __attribute__((no_instrument_function)) unsigned char *__skb_push(struct sk_buff *skb, unsigned int len)
{
 skb->data -= len;
 skb->len += len;
 return skb->data;
}

unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
static inline __attribute__((no_instrument_function)) unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
 skb->len -= len;
 do { if (__builtin_expect(!!(skb->len < skb->data_len), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (1909), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return skb->data += len;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_pull_inline(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __skb_pull(skb, len);
}

unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);

static inline __attribute__((no_instrument_function)) unsigned char *__pskb_pull(struct sk_buff *skb, unsigned int len)
{
 if (len > skb_headlen(skb) &&
     !__pskb_pull_tail(skb, len - skb_headlen(skb)))
  return ((void *)0);
 skb->len -= len;
 return skb->data += len;
}

static inline __attribute__((no_instrument_function)) unsigned char *pskb_pull(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __pskb_pull(skb, len);
}

static inline __attribute__((no_instrument_function)) int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len <= skb_headlen(skb)), 1))
  return 1;
 if (__builtin_expect(!!(len > skb->len), 0))
  return 0;
 return __pskb_pull_tail(skb, len - skb_headlen(skb)) != ((void *)0);
}







static inline __attribute__((no_instrument_function)) unsigned int skb_headroom(const struct sk_buff *skb)
{
 return skb->data - skb->head;
}







static inline __attribute__((no_instrument_function)) int skb_tailroom(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
}
# 1972 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_availroom(const struct sk_buff *skb)
{
 if (skb_is_nonlinear(skb))
  return 0;

 return skb->end - skb->tail - skb->reserved_tailroom;
}
# 1988 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_reserve(struct sk_buff *skb, int len)
{
 skb->data += len;
 skb->tail += len;
}
# 2006 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_tailroom_reserve(struct sk_buff *skb, unsigned int mtu,
     unsigned int needed_tailroom)
{
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (2009), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (mtu < skb_tailroom(skb) - needed_tailroom)

  skb->reserved_tailroom = skb_tailroom(skb) - mtu;
 else

  skb->reserved_tailroom = needed_tailroom;
}




static inline __attribute__((no_instrument_function)) void skb_set_inner_protocol(struct sk_buff *skb,
       __be16 protocol)
{
 skb->inner_protocol = protocol;
 skb->inner_protocol_type = 0;
}

static inline __attribute__((no_instrument_function)) void skb_set_inner_ipproto(struct sk_buff *skb,
      __u8 ipproto)
{
 skb->inner_ipproto = ipproto;
 skb->inner_protocol_type = 1;
}

static inline __attribute__((no_instrument_function)) void skb_reset_inner_headers(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->mac_header;
 skb->inner_network_header = skb->network_header;
 skb->inner_transport_header = skb->transport_header;
}

static inline __attribute__((no_instrument_function)) void skb_reset_mac_len(struct sk_buff *skb)
{
 skb->mac_len = skb->network_header - skb->mac_header;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_inner_transport_header(const struct sk_buff
       *skb)
{
 return skb->head + skb->inner_transport_header;
}

static inline __attribute__((no_instrument_function)) int skb_inner_transport_offset(const struct sk_buff *skb)
{
 return skb_inner_transport_header(skb) - skb->data;
}

static inline __attribute__((no_instrument_function)) void skb_reset_inner_transport_header(struct sk_buff *skb)
{
 skb->inner_transport_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_inner_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_transport_header(skb);
 skb->inner_transport_header += offset;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_inner_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_network_header;
}

static inline __attribute__((no_instrument_function)) void skb_reset_inner_network_header(struct sk_buff *skb)
{
 skb->inner_network_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_inner_network_header(struct sk_buff *skb,
      const int offset)
{
 skb_reset_inner_network_header(skb);
 skb->inner_network_header += offset;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_inner_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_mac_header;
}

static inline __attribute__((no_instrument_function)) void skb_reset_inner_mac_header(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_inner_mac_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_mac_header(skb);
 skb->inner_mac_header += offset;
}
static inline __attribute__((no_instrument_function)) bool skb_transport_header_was_set(const struct sk_buff *skb)
{
 return skb->transport_header != (typeof(skb->transport_header))~0U;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_transport_header(const struct sk_buff *skb)
{
 return skb->head + skb->transport_header;
}

static inline __attribute__((no_instrument_function)) void skb_reset_transport_header(struct sk_buff *skb)
{
 skb->transport_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_transport_header(skb);
 skb->transport_header += offset;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->network_header;
}

static inline __attribute__((no_instrument_function)) void skb_reset_network_header(struct sk_buff *skb)
{
 skb->network_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_network_header(struct sk_buff *skb, const int offset)
{
 skb_reset_network_header(skb);
 skb->network_header += offset;
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->mac_header;
}

static inline __attribute__((no_instrument_function)) int skb_mac_header_was_set(const struct sk_buff *skb)
{
 return skb->mac_header != (typeof(skb->mac_header))~0U;
}

static inline __attribute__((no_instrument_function)) void skb_reset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->data - skb->head;
}

static inline __attribute__((no_instrument_function)) void skb_set_mac_header(struct sk_buff *skb, const int offset)
{
 skb_reset_mac_header(skb);
 skb->mac_header += offset;
}

static inline __attribute__((no_instrument_function)) void skb_pop_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->network_header;
}

static inline __attribute__((no_instrument_function)) void skb_probe_transport_header(struct sk_buff *skb,
           const int offset_hint)
{
 struct flow_keys keys;

 if (skb_transport_header_was_set(skb))
  return;
 else if (skb_flow_dissect_flow_keys(skb, &keys, 0))
  skb_set_transport_header(skb, keys.control.thoff);
 else
  skb_set_transport_header(skb, offset_hint);
}

static inline __attribute__((no_instrument_function)) void skb_mac_header_rebuild(struct sk_buff *skb)
{
 if (skb_mac_header_was_set(skb)) {
  const unsigned char *old_mac = skb_mac_header(skb);

  skb_set_mac_header(skb, -skb->mac_len);
  memmove(skb_mac_header(skb), old_mac, skb->mac_len);
 }
}

static inline __attribute__((no_instrument_function)) int skb_checksum_start_offset(const struct sk_buff *skb)
{
 return skb->csum_start - skb_headroom(skb);
}

static inline __attribute__((no_instrument_function)) unsigned char *skb_checksum_start(const struct sk_buff *skb)
{
 return skb->head + skb->csum_start;
}

static inline __attribute__((no_instrument_function)) int skb_transport_offset(const struct sk_buff *skb)
{
 return skb_transport_header(skb) - skb->data;
}

static inline __attribute__((no_instrument_function)) u32 skb_network_header_len(const struct sk_buff *skb)
{
 return skb->transport_header - skb->network_header;
}

static inline __attribute__((no_instrument_function)) u32 skb_inner_network_header_len(const struct sk_buff *skb)
{
 return skb->inner_transport_header - skb->inner_network_header;
}

static inline __attribute__((no_instrument_function)) int skb_network_offset(const struct sk_buff *skb)
{
 return skb_network_header(skb) - skb->data;
}

static inline __attribute__((no_instrument_function)) int skb_inner_network_offset(const struct sk_buff *skb)
{
 return skb_inner_network_header(skb) - skb->data;
}

static inline __attribute__((no_instrument_function)) int pskb_network_may_pull(struct sk_buff *skb, unsigned int len)
{
 return pskb_may_pull(skb, skb_network_offset(skb) + len);
}
# 2278 "include/linux/skbuff.h"
int ___pskb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((no_instrument_function)) void __skb_trim(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) {
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/linux/skbuff.h", 2283); __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 skb->len = len;
 skb_set_tail_pointer(skb, len);
}

void skb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((no_instrument_function)) int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
 if (skb->data_len)
  return ___pskb_trim(skb, len);
 __skb_trim(skb, len);
 return 0;
}

static inline __attribute__((no_instrument_function)) int pskb_trim(struct sk_buff *skb, unsigned int len)
{
 return (len < skb->len) ? __pskb_trim(skb, len) : 0;
}
# 2314 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void pskb_trim_unique(struct sk_buff *skb, unsigned int len)
{
 int err = pskb_trim(skb, len);
 do { if (__builtin_expect(!!(err), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (2317), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
}
# 2328 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_orphan(struct sk_buff *skb)
{
 if (skb->destructor) {
  skb->destructor(skb);
  skb->destructor = ((void *)0);
  skb->sk = ((void *)0);
 } else {
  do { if (__builtin_expect(!!(skb->sk), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/skbuff.h"), "i" (2335), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 }
}
# 2348 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!(((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_DEV_ZEROCOPY)), 1))
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}
# 2363 "include/linux/skbuff.h"
void skb_queue_purge(struct sk_buff_head *list);
static inline __attribute__((no_instrument_function)) void __skb_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;
 while ((skb = __skb_dequeue(list)) != ((void *)0))
  kfree_skb(skb);
}

void *netdev_alloc_frag(unsigned int fragsz);

struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
       gfp_t gfp_mask);
# 2389 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *netdev_alloc_skb(struct net_device *dev,
            unsigned int length)
{
 return __netdev_alloc_skb(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}


static inline __attribute__((no_instrument_function)) struct sk_buff *__dev_alloc_skb(unsigned int length,
           gfp_t gfp_mask)
{
 return __netdev_alloc_skb(((void *)0), length, gfp_mask);
}


static inline __attribute__((no_instrument_function)) struct sk_buff *dev_alloc_skb(unsigned int length)
{
 return netdev_alloc_skb(((void *)0), length);
}


static inline __attribute__((no_instrument_function)) struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length, gfp_t gfp)
{
 struct sk_buff *skb = __netdev_alloc_skb(dev, length + 0, gfp);

 if (0 && skb)
  skb_reserve(skb, 0);
 return skb;
}

static inline __attribute__((no_instrument_function)) struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length)
{
 return __netdev_alloc_skb_ip_align(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}

static inline __attribute__((no_instrument_function)) void skb_free_frag(void *addr)
{
 __free_page_frag(addr);
}

void *napi_alloc_frag(unsigned int fragsz);
struct sk_buff *__napi_alloc_skb(struct napi_struct *napi,
     unsigned int length, gfp_t gfp_mask);
static inline __attribute__((no_instrument_function)) struct sk_buff *napi_alloc_skb(struct napi_struct *napi,
          unsigned int length)
{
 return __napi_alloc_skb(napi, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}
void napi_consume_skb(struct sk_buff *skb, int budget);

void __kfree_skb_flush(void);
void __kfree_skb_defer(struct sk_buff *skb);
# 2452 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct page *__dev_alloc_pages(gfp_t gfp_mask,
          unsigned int order)
{
# 2463 "include/linux/skbuff.h"
 gfp_mask |= (( gfp_t)0x100u) | (( gfp_t)0x4000u) | (( gfp_t)0x2000u);

 return alloc_pages_node((-1), gfp_mask, order);
}

static inline __attribute__((no_instrument_function)) struct page *dev_alloc_pages(unsigned int order)
{
 return __dev_alloc_pages(((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)) | (( gfp_t)0x200u), order);
}
# 2481 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) struct page *__dev_alloc_page(gfp_t gfp_mask)
{
 return __dev_alloc_pages(gfp_mask, 0);
}

static inline __attribute__((no_instrument_function)) struct page *dev_alloc_page(void)
{
 return dev_alloc_pages(0);
}






static inline __attribute__((no_instrument_function)) void skb_propagate_pfmemalloc(struct page *page,
          struct sk_buff *skb)
{
 if (page_is_pfmemalloc(page))
  skb->pfmemalloc = true;
}







static inline __attribute__((no_instrument_function)) struct page *skb_frag_page(const skb_frag_t *frag)
{
 return frag->page.p;
}







static inline __attribute__((no_instrument_function)) void __skb_frag_ref(skb_frag_t *frag)
{
 get_page(skb_frag_page(frag));
}
# 2532 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_frag_ref(struct sk_buff *skb, int f)
{
 __skb_frag_ref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}







static inline __attribute__((no_instrument_function)) void __skb_frag_unref(skb_frag_t *frag)
{
 put_page(skb_frag_page(frag));
}
# 2555 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_frag_unref(struct sk_buff *skb, int f)
{
 __skb_frag_unref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}
# 2567 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void *skb_frag_address(const skb_frag_t *frag)
{
 return lowmem_page_address(skb_frag_page(frag)) + frag->page_offset;
}
# 2579 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void *skb_frag_address_safe(const skb_frag_t *frag)
{
 void *ptr = lowmem_page_address(skb_frag_page(frag));
 if (__builtin_expect(!!(!ptr), 0))
  return ((void *)0);

 return ptr + frag->page_offset;
}
# 2595 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
 frag->page.p = page;
}
# 2608 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_frag_set_page(struct sk_buff *skb, int f,
         struct page *page)
{
 __skb_frag_set_page(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f], page);
}

bool skb_page_frag_refill(unsigned int sz, struct page_frag *pfrag, gfp_t prio);
# 2627 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) dma_addr_t skb_frag_dma_map(struct device *dev,
       const skb_frag_t *frag,
       size_t offset, size_t size,
       enum dma_data_direction dir)
{
 return dma_map_page(dev, skb_frag_page(frag),
       frag->page_offset + offset, size, dir);
}

static inline __attribute__((no_instrument_function)) struct sk_buff *pskb_copy(struct sk_buff *skb,
     gfp_t gfp_mask)
{
 return __pskb_copy(skb, skb_headroom(skb), gfp_mask);
}


static inline __attribute__((no_instrument_function)) struct sk_buff *pskb_copy_for_clone(struct sk_buff *skb,
        gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, skb_headroom(skb), gfp_mask, true);
}
# 2658 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_clone_writable(const struct sk_buff *skb, unsigned int len)
{
 return !skb_header_cloned(skb) &&
        skb_headroom(skb) + len <= skb->hdr_len;
}

static inline __attribute__((no_instrument_function)) int skb_try_make_writable(struct sk_buff *skb,
     unsigned int write_len)
{
 return skb_cloned(skb) && !skb_clone_writable(skb, write_len) &&
        pskb_expand_head(skb, 0, 0, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}

static inline __attribute__((no_instrument_function)) int __skb_cow(struct sk_buff *skb, unsigned int headroom,
       int cloned)
{
 int delta = 0;

 if (headroom > skb_headroom(skb))
  delta = headroom - skb_headroom(skb);

 if (delta || cloned)
  return pskb_expand_head(skb, ((((delta)) + ((typeof((delta)))((({ typeof(32) _max1 = (32); typeof((1 << (6))) _max2 = ((1 << (6))); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }))) - 1)) & ~((typeof((delta)))((({ typeof(32) _max1 = (32); typeof((1 << (6))) _max2 = ((1 << (6))); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }))) - 1)), 0,
     ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
 return 0;
}
# 2697 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_cloned(skb));
}
# 2712 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_header_cloned(skb));
}
# 2727 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;
 if (__builtin_expect(!!(size >= len), 1))
  return 0;
 return skb_pad(skb, len - size);
}
# 2745 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;

 if (__builtin_expect(!!(size < len), 0)) {
  len -= size;
  if (skb_pad(skb, len))
   return -12;
  __skb_put(skb, len);
 }
 return 0;
}

static inline __attribute__((no_instrument_function)) int skb_add_data(struct sk_buff *skb,
          struct iov_iter *from, int copy)
{
 const int off = skb->len;

 if (skb->ip_summed == 0) {
  __wsum csum = 0;
  if (csum_and_copy_from_iter(skb_put(skb, copy), copy,
         &csum, from) == copy) {
   skb->csum = csum_block_add(skb->csum, csum, off);
   return 0;
  }
 } else if (copy_from_iter(skb_put(skb, copy), copy, from) == copy)
  return 0;

 __skb_trim(skb, off);
 return -14;
}

static inline __attribute__((no_instrument_function)) bool skb_can_coalesce(struct sk_buff *skb, int i,
        const struct page *page, int off)
{
 if (i) {
  const struct skb_frag_struct *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i - 1];

  return page == skb_frag_page(frag) &&
         off == frag->page_offset + skb_frag_size(frag);
 }
 return false;
}

static inline __attribute__((no_instrument_function)) int __skb_linearize(struct sk_buff *skb)
{
 return __pskb_pull_tail(skb, skb->data_len) ? 0 : -12;
}
# 2801 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_linearize(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? __skb_linearize(skb) : 0;
}
# 2813 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_has_shared_frag(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) &&
        ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SHARED_FRAG;
}
# 2826 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int skb_linearize_cow(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) || skb_cloned(skb) ?
        __skb_linearize(skb) : 0;
}
# 2843 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_postpull_rcsum(struct sk_buff *skb,
          const void *start, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->csum = csum_sub(skb->csum, csum_partial(start, len, 0));
 else if (skb->ip_summed == 3 &&
   skb_checksum_start_offset(skb) < 0)
  skb->ip_summed = 0;
}

unsigned char *skb_pull_rcsum(struct sk_buff *skb, unsigned int len);

static inline __attribute__((no_instrument_function)) void skb_postpush_rcsum(struct sk_buff *skb,
          const void *start, unsigned int len)
{
# 2868 "include/linux/skbuff.h"
 if (skb->ip_summed == 2)
  skb->csum = csum_partial(start, len, skb->csum);
}
# 2881 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len >= skb->len), 1))
  return 0;
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 return __pskb_trim(skb, len);
}
# 2924 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_has_frag_list(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list != ((void *)0);
}

static inline __attribute__((no_instrument_function)) void skb_frag_list_init(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list = ((void *)0);
}





int __skb_wait_for_more_packets(struct sock *sk, int *err, long *timeo_p,
    const struct sk_buff *skb);
struct sk_buff *__skb_try_recv_datagram(struct sock *sk, unsigned flags,
     int *peeked, int *off, int *err,
     struct sk_buff **last);
struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,
        int *peeked, int *off, int *err);
struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags, int noblock,
      int *err);
unsigned int datagram_poll(struct file *file, struct socket *sock,
      struct poll_table_struct *wait);
int skb_copy_datagram_iter(const struct sk_buff *from, int offset,
      struct iov_iter *to, int size);
static inline __attribute__((no_instrument_function)) int skb_copy_datagram_msg(const struct sk_buff *from, int offset,
     struct msghdr *msg, int size)
{
 return skb_copy_datagram_iter(from, offset, &msg->msg_iter, size);
}
int skb_copy_and_csum_datagram_msg(struct sk_buff *skb, int hlen,
       struct msghdr *msg);
int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
     struct iov_iter *from, int len);
int zerocopy_sg_from_iter(struct sk_buff *skb, struct iov_iter *frm);
void skb_free_datagram(struct sock *sk, struct sk_buff *skb);
void __skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb, int len);
static inline __attribute__((no_instrument_function)) void skb_free_datagram_locked(struct sock *sk,
         struct sk_buff *skb)
{
 __skb_free_datagram_locked(sk, skb, 0);
}
int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);
int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len);
int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len);
__wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset, u8 *to,
         int len, __wsum csum);
ssize_t skb_socket_splice(struct sock *sk,
     struct pipe_inode_info *pipe,
     struct splice_pipe_desc *spd);
int skb_splice_bits(struct sk_buff *skb, struct sock *sk, unsigned int offset,
      struct pipe_inode_info *pipe, unsigned int len,
      unsigned int flags,
      ssize_t (*splice_cb)(struct sock *,
      struct pipe_inode_info *,
      struct splice_pipe_desc *));
void skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to);
unsigned int skb_zerocopy_headlen(const struct sk_buff *from);
int skb_zerocopy(struct sk_buff *to, struct sk_buff *from,
   int len, int hlen);
void skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len);
int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen);
void skb_scrub_packet(struct sk_buff *skb, bool xnet);
unsigned int skb_gso_transport_seglen(const struct sk_buff *skb);
struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features);
struct sk_buff *skb_vlan_untag(struct sk_buff *skb);
int skb_ensure_writable(struct sk_buff *skb, int write_len);
int skb_vlan_pop(struct sk_buff *skb);
int skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci);
struct sk_buff *pskb_extract(struct sk_buff *skb, int off, int to_copy,
        gfp_t gfp);

static inline __attribute__((no_instrument_function)) int memcpy_from_msg(void *data, struct msghdr *msg, int len)
{
 return copy_from_iter(data, len, &msg->msg_iter) == len ? 0 : -14;
}

static inline __attribute__((no_instrument_function)) int memcpy_to_msg(struct msghdr *msg, void *data, int len)
{
 return copy_to_iter(data, len, &msg->msg_iter) == len ? 0 : -14;
}

struct skb_checksum_ops {
 __wsum (*update)(const void *mem, int len, __wsum wsum);
 __wsum (*combine)(__wsum csum, __wsum csum2, int offset, int len);
};

__wsum __skb_checksum(const struct sk_buff *skb, int offset, int len,
        __wsum csum, const struct skb_checksum_ops *ops);
__wsum skb_checksum(const struct sk_buff *skb, int offset, int len,
      __wsum csum);

static inline __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result))
__skb_header_pointer(const struct sk_buff *skb, int offset,
       int len, void *data, int hlen, void *buffer)
{
 if (hlen - offset >= len)
  return data + offset;

 if (!skb ||
     skb_copy_bits(skb, offset, buffer, len) < 0)
  return ((void *)0);

 return buffer;
}

static inline __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result))
skb_header_pointer(const struct sk_buff *skb, int offset, int len, void *buffer)
{
 return __skb_header_pointer(skb, offset, len, skb->data,
        skb_headlen(skb), buffer);
}
# 3049 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_needs_linearize(struct sk_buff *skb,
           netdev_features_t features)
{
 return skb_is_nonlinear(skb) &&
        ((skb_has_frag_list(skb) && !(features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT)))) ||
  (((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags && !(features & ((netdev_features_t)1 << (NETIF_F_SG_BIT)))));
}

static inline __attribute__((no_instrument_function)) void skb_copy_from_linear_data(const struct sk_buff *skb,
          void *to,
          const unsigned int len)
{
 memcpy(to, skb->data, len);
}

static inline __attribute__((no_instrument_function)) void skb_copy_from_linear_data_offset(const struct sk_buff *skb,
          const int offset, void *to,
          const unsigned int len)
{
 memcpy(to, skb->data + offset, len);
}

static inline __attribute__((no_instrument_function)) void skb_copy_to_linear_data(struct sk_buff *skb,
        const void *from,
        const unsigned int len)
{
 memcpy(skb->data, from, len);
}

static inline __attribute__((no_instrument_function)) void skb_copy_to_linear_data_offset(struct sk_buff *skb,
        const int offset,
        const void *from,
        const unsigned int len)
{
 memcpy(skb->data + offset, from, len);
}

void skb_init(void);

static inline __attribute__((no_instrument_function)) ktime_t skb_get_ktime(const struct sk_buff *skb)
{
 return skb->tstamp;
}
# 3102 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_get_timestamp(const struct sk_buff *skb,
         struct timeval *stamp)
{
 *stamp = ns_to_timeval((skb->tstamp).tv64);
}

static inline __attribute__((no_instrument_function)) void skb_get_timestampns(const struct sk_buff *skb,
           struct timespec *stamp)
{
 *stamp = ns_to_timespec((skb->tstamp).tv64);
}

static inline __attribute__((no_instrument_function)) void __net_timestamp(struct sk_buff *skb)
{
 skb->tstamp = ktime_get_real();
}

static inline __attribute__((no_instrument_function)) ktime_t net_timedelta(ktime_t t)
{
 return ({ (ktime_t){ .tv64 = (ktime_get_real()).tv64 - (t).tv64 }; });
}

static inline __attribute__((no_instrument_function)) ktime_t net_invalid_timestamp(void)
{
 return ktime_set(0, 0);
}

struct sk_buff *skb_clone_sk(struct sk_buff *skb);
# 3138 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_clone_tx_timestamp(struct sk_buff *skb)
{
}

static inline __attribute__((no_instrument_function)) bool skb_defer_rx_timestamp(struct sk_buff *skb)
{
 return false;
}
# 3161 "include/linux/skbuff.h"
void skb_complete_tx_timestamp(struct sk_buff *skb,
          struct skb_shared_hwtstamps *hwtstamps);

void __skb_tstamp_tx(struct sk_buff *orig_skb,
       struct skb_shared_hwtstamps *hwtstamps,
       struct sock *sk, int tstype);
# 3179 "include/linux/skbuff.h"
void skb_tstamp_tx(struct sk_buff *orig_skb,
     struct skb_shared_hwtstamps *hwtstamps);

static inline __attribute__((no_instrument_function)) void sw_tx_timestamp(struct sk_buff *skb)
{
 if (((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SW_TSTAMP &&
     !(((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_IN_PROGRESS))
  skb_tstamp_tx(skb, ((void *)0));
}
# 3201 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_tx_timestamp(struct sk_buff *skb)
{
 skb_clone_tx_timestamp(skb);
 sw_tx_timestamp(skb);
}
# 3214 "include/linux/skbuff.h"
void skb_complete_wifi_ack(struct sk_buff *skb, bool acked);

__sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);
__sum16 __skb_checksum_complete(struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) int skb_csum_unnecessary(const struct sk_buff *skb)
{
 return ((skb->ip_summed == 1) ||
  skb->csum_valid ||
  (skb->ip_summed == 3 &&
   skb_checksum_start_offset(skb) >= 0));
}
# 3243 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) __sum16 skb_checksum_complete(struct sk_buff *skb)
{
 return skb_csum_unnecessary(skb) ?
        0 : __skb_checksum_complete(skb);
}

static inline __attribute__((no_instrument_function)) void __skb_decr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level == 0)
   skb->ip_summed = 0;
  else
   skb->csum_level--;
 }
}

static inline __attribute__((no_instrument_function)) void __skb_incr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level < 3)
   skb->csum_level++;
 } else if (skb->ip_summed == 0) {
  skb->ip_summed = 1;
  skb->csum_level = 0;
 }
}

static inline __attribute__((no_instrument_function)) void __skb_mark_checksum_bad(struct sk_buff *skb)
{
# 3280 "include/linux/skbuff.h"
 if (skb->ip_summed == 0 ||
     skb->ip_summed == 1)
  skb->csum_bad = 1;
}






static inline __attribute__((no_instrument_function)) bool __skb_checksum_validate_needed(struct sk_buff *skb,
        bool zero_okay,
        __sum16 check)
{
 if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
  skb->csum_valid = 1;
  __skb_decr_checksum_unnecessary(skb);
  return false;
 }

 return true;
}
# 3314 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_checksum_complete_unset(struct sk_buff *skb)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
# 3329 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) __sum16 __skb_checksum_validate_complete(struct sk_buff *skb,
             bool complete,
             __wsum psum)
{
 if (skb->ip_summed == 2) {
  if (!csum_fold(csum_add(psum, skb->csum))) {
   skb->csum_valid = 1;
   return 0;
  }
 } else if (skb->csum_bad) {

  return ( __sum16)1;
 }

 skb->csum = psum;

 if (complete || skb->len <= 76) {
  __sum16 csum;

  csum = __skb_checksum_complete(skb);
  skb->csum_valid = !csum;
  return csum;
 }

 return 0;
}

static inline __attribute__((no_instrument_function)) __wsum null_compute_pseudo(struct sk_buff *skb, int proto)
{
 return 0;
}
# 3398 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool __skb_checksum_convert_check(struct sk_buff *skb)
{
 return (skb->ip_summed == 0 &&
  skb->csum_valid && !skb->csum_bad);
}

static inline __attribute__((no_instrument_function)) void __skb_checksum_convert(struct sk_buff *skb,
       __sum16 check, __wsum pseudo)
{
 skb->csum = ~pseudo;
 skb->ip_summed = 2;
}
# 3418 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_remcsum_adjust_partial(struct sk_buff *skb, void *ptr,
           u16 start, u16 offset)
{
 skb->ip_summed = 3;
 skb->csum_start = ((unsigned char *)ptr + start) - skb->head;
 skb->csum_offset = offset - start;
}






static inline __attribute__((no_instrument_function)) void skb_remcsum_process(struct sk_buff *skb, void *ptr,
           int start, int offset, bool nopartial)
{
 __wsum delta;

 if (!nopartial) {
  skb_remcsum_adjust_partial(skb, ptr, start, offset);
  return;
 }

  if (__builtin_expect(!!(skb->ip_summed != 2), 0)) {
  __skb_checksum_complete(skb);
  skb_postpull_rcsum(skb, skb->data, ptr - (void *)skb->data);
 }

 delta = remcsum_adjust(ptr, skb->csum, start, offset);


 skb->csum = csum_add(skb->csum, delta);
}


void nf_conntrack_destroy(struct nf_conntrack *nfct);
static inline __attribute__((no_instrument_function)) void nf_conntrack_put(struct nf_conntrack *nfct)
{
 if (nfct && atomic_dec_and_test(&nfct->use))
  nf_conntrack_destroy(nfct);
}
static inline __attribute__((no_instrument_function)) void nf_conntrack_get(struct nf_conntrack *nfct)
{
 if (nfct)
  atomic_inc(&nfct->use);
}
# 3477 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void nf_reset(struct sk_buff *skb)
{

 nf_conntrack_put(skb->nfct);
 skb->nfct = ((void *)0);





}

static inline __attribute__((no_instrument_function)) void nf_reset_trace(struct sk_buff *skb)
{



}


static inline __attribute__((no_instrument_function)) void __nf_copy(struct sk_buff *dst, const struct sk_buff *src,
        bool copy)
{

 dst->nfct = src->nfct;
 nf_conntrack_get(src->nfct);
 if (copy)
  dst->nfctinfo = src->nfctinfo;
# 3514 "include/linux/skbuff.h"
}

static inline __attribute__((no_instrument_function)) void nf_copy(struct sk_buff *dst, const struct sk_buff *src)
{

 nf_conntrack_put(dst->nfct);




 __nf_copy(dst, src, true);
}


static inline __attribute__((no_instrument_function)) void skb_copy_secmark(struct sk_buff *to, const struct sk_buff *from)
{
 to->secmark = from->secmark;
}

static inline __attribute__((no_instrument_function)) void skb_init_secmark(struct sk_buff *skb)
{
 skb->secmark = 0;
}
# 3545 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_irq_freeable(const struct sk_buff *skb)
{
 return !skb->destructor &&

  !skb->sp &&


  !skb->nfct &&

  !skb->_skb_refdst &&
  !skb_has_frag_list(skb);
}

static inline __attribute__((no_instrument_function)) void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
 skb->queue_mapping = queue_mapping;
}

static inline __attribute__((no_instrument_function)) u16 skb_get_queue_mapping(const struct sk_buff *skb)
{
 return skb->queue_mapping;
}

static inline __attribute__((no_instrument_function)) void skb_copy_queue_mapping(struct sk_buff *to, const struct sk_buff *from)
{
 to->queue_mapping = from->queue_mapping;
}

static inline __attribute__((no_instrument_function)) void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
 skb->queue_mapping = rx_queue + 1;
}

static inline __attribute__((no_instrument_function)) u16 skb_get_rx_queue(const struct sk_buff *skb)
{
 return skb->queue_mapping - 1;
}

static inline __attribute__((no_instrument_function)) bool skb_rx_queue_recorded(const struct sk_buff *skb)
{
 return skb->queue_mapping != 0;
}

static inline __attribute__((no_instrument_function)) struct sec_path *skb_sec_path(struct sk_buff *skb)
{

 return skb->sp;



}







struct skb_gso_cb {
 union {
  int mac_offset;
  int data_offset;
 };
 int encap_level;
 __wsum csum;
 __u16 csum_start;
};



static inline __attribute__((no_instrument_function)) int skb_tnl_header_len(const struct sk_buff *inner_skb)
{
 return (skb_mac_header(inner_skb) - inner_skb->head) -
  ((struct skb_gso_cb *)((inner_skb)->cb + 32))->mac_offset;
}

static inline __attribute__((no_instrument_function)) int gso_pskb_expand_head(struct sk_buff *skb, int extra)
{
 int new_headroom, headroom;
 int ret;

 headroom = skb_headroom(skb);
 ret = pskb_expand_head(skb, extra, 0, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
 if (ret)
  return ret;

 new_headroom = skb_headroom(skb);
 ((struct skb_gso_cb *)((skb)->cb + 32))->mac_offset += (new_headroom - headroom);
 return 0;
}

static inline __attribute__((no_instrument_function)) void gso_reset_checksum(struct sk_buff *skb, __wsum res)
{

 if (skb->remcsum_offload)
  return;

 ((struct skb_gso_cb *)((skb)->cb + 32))->csum = res;
 ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start = skb_checksum_start(skb) - skb->head;
}
# 3654 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) __sum16 gso_make_checksum(struct sk_buff *skb, __wsum res)
{
 unsigned char *csum_start = skb_transport_header(skb);
 int plen = (skb->head + ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start) - csum_start;
 __wsum partial = ((struct skb_gso_cb *)((skb)->cb + 32))->csum;

 ((struct skb_gso_cb *)((skb)->cb + 32))->csum = res;
 ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start = csum_start - skb->head;

 return csum_fold(csum_partial(csum_start, plen, partial));
}

static inline __attribute__((no_instrument_function)) bool skb_is_gso(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size;
}


static inline __attribute__((no_instrument_function)) bool skb_is_gso_v6(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_TCPV6;
}

void __skb_warn_lro_forwarding(const struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) bool skb_warn_if_lro(const struct sk_buff *skb)
{


 const struct skb_shared_info *shinfo = ((struct skb_shared_info *)(skb_end_pointer(skb)));

 if (skb_is_nonlinear(skb) && shinfo->gso_size != 0 &&
     __builtin_expect(!!(shinfo->gso_type == 0), 0)) {
  __skb_warn_lro_forwarding(skb);
  return true;
 }
 return false;
}

static inline __attribute__((no_instrument_function)) void skb_forward_csum(struct sk_buff *skb)
{

 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
# 3708 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) void skb_checksum_none_assert(const struct sk_buff *skb)
{



}

bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);

int skb_checksum_setup(struct sk_buff *skb, bool recalculate);
struct sk_buff *skb_checksum_trimmed(struct sk_buff *skb,
         unsigned int transport_len,
         __sum16(*skb_chkf)(struct sk_buff *skb));
# 3731 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) bool skb_head_is_locked(const struct sk_buff *skb)
{
 return !skb->head_frag || skb_cloned(skb);
}
# 3746 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) unsigned int skb_gso_network_seglen(const struct sk_buff *skb)
{
 unsigned int hdr_len = skb_transport_header(skb) -
          skb_network_header(skb);
 return hdr_len + skb_gso_transport_seglen(skb);
}
# 3762 "include/linux/skbuff.h"
static inline __attribute__((no_instrument_function)) __wsum lco_csum(struct sk_buff *skb)
{
 unsigned char *csum_start = skb_checksum_start(skb);
 unsigned char *l4_hdr = skb_transport_header(skb);
 __wsum partial;


 partial = ~csum_unfold(*( __sum16 *)(csum_start +
          skb->csum_offset));




 return csum_partial(l4_hdr, csum_start - l4_hdr, partial);
}
# 24 "include/linux/if_ether.h" 2


static inline __attribute__((no_instrument_function)) struct ethhdr *eth_hdr(const struct sk_buff *skb)
{
 return (struct ethhdr *)skb_mac_header(skb);
}

static inline __attribute__((no_instrument_function)) struct ethhdr *inner_eth_hdr(const struct sk_buff *skb)
{
 return (struct ethhdr *)skb_inner_mac_header(skb);
}

int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr);

extern ssize_t sysfs_format_mac(char *buf, const unsigned char *addr, int len);
# 23 "drivers/net/wireless/ath/ath10k/core.h" 2

# 1 "include/linux/pci.h" 1
# 20 "include/linux/pci.h"
# 1 "include/linux/mod_devicetable.h" 1
# 12 "include/linux/mod_devicetable.h"
# 1 "include/linux/uuid.h" 1
# 19 "include/linux/uuid.h"
# 1 "include/uapi/linux/uuid.h" 1
# 23 "include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} uuid_le;

typedef struct {
 __u8 b[16];
} uuid_be;
# 20 "include/linux/uuid.h" 2







static inline __attribute__((no_instrument_function)) int uuid_le_cmp(const uuid_le u1, const uuid_le u2)
{
 return memcmp(&u1, &u2, sizeof(uuid_le));
}

static inline __attribute__((no_instrument_function)) int uuid_be_cmp(const uuid_be u1, const uuid_be u2)
{
 return memcmp(&u1, &u2, sizeof(uuid_be));
}

void generate_random_uuid(unsigned char uuid[16]);

extern void uuid_le_gen(uuid_le *u);
extern void uuid_be_gen(uuid_be *u);

bool __attribute__((warn_unused_result)) uuid_is_valid(const char *uuid);

extern const u8 uuid_le_index[16];
extern const u8 uuid_be_index[16];

int uuid_le_to_bin(const char *uuid, uuid_le *u);
int uuid_be_to_bin(const char *uuid, uuid_be *u);
# 13 "include/linux/mod_devicetable.h" 2
typedef unsigned long kernel_ulong_t;




struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 101 "include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 146 "include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};




struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 311 "include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 64 + 1];
 kernel_ulong_t keybit[0x2ff / 64 + 1];
 kernel_ulong_t relbit[0x0f / 64 + 1];
 kernel_ulong_t absbit[0x3f / 64 + 1];
 kernel_ulong_t mscbit[0x07 / 64 + 1];
 kernel_ulong_t ledbit[0x0f / 64 + 1];
 kernel_ulong_t sndbit[0x07 / 64 + 1];
 kernel_ulong_t ffbit[0x7f / 64 + 1];
 kernel_ulong_t swbit[0x0f / 64 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 361 "include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 383 "include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 397 "include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 uuid_le guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 498 "include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 524 "include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 553 "include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 577 "include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 598 "include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 623 "include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 644 "include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 21 "include/linux/pci.h" 2
# 31 "include/linux/pci.h"
# 1 "include/linux/io.h" 1
# 28 "include/linux/io.h"
struct device;
struct resource;

__attribute__((externally_visible)) void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 47 "include/linux/io.h"
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) ioremap_huge_init(void);
int arch_ioremap_pud_supported(void);
int arch_ioremap_pmd_supported(void);
# 58 "include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 76 "include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_nocache(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);

void *__devm_memremap_pages(struct device *dev, struct resource *res);
# 134 "include/linux/io.h"
enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 32 "include/linux/pci.h" 2
# 1 "include/linux/resource_ext.h" 1
# 22 "include/linux/resource_ext.h"
struct resource_win {
 struct resource res;
 resource_size_t offset;
};





struct resource_entry {
 struct list_head node;
 struct resource *res;
 resource_size_t offset;
 struct resource __res;
};

extern struct resource_entry *
resource_list_create_entry(struct resource *res, size_t extra_size);
extern void resource_list_free(struct list_head *head);

static inline __attribute__((no_instrument_function)) void resource_list_add(struct resource_entry *entry,
         struct list_head *head)
{
 list_add(&entry->node, head);
}

static inline __attribute__((no_instrument_function)) void resource_list_add_tail(struct resource_entry *entry,
       struct list_head *head)
{
 list_add_tail(&entry->node, head);
}

static inline __attribute__((no_instrument_function)) void resource_list_del(struct resource_entry *entry)
{
 list_del(&entry->node);
}

static inline __attribute__((no_instrument_function)) void resource_list_free_entry(struct resource_entry *entry)
{
 kfree(entry);
}

static inline __attribute__((no_instrument_function)) void
resource_list_destroy_entry(struct resource_entry *entry)
{
 resource_list_del(entry);
 resource_list_free_entry(entry);
}
# 33 "include/linux/pci.h" 2
# 1 "include/uapi/linux/pci.h" 1
# 20 "include/uapi/linux/pci.h"
# 1 "./include/uapi/linux/pci_regs.h" 1
# 21 "include/uapi/linux/pci.h" 2
# 34 "include/linux/pci.h" 2

# 1 "include/linux/pci_ids.h" 1
# 36 "include/linux/pci.h" 2
# 54 "include/linux/pci.h"
struct pci_slot {
 struct pci_bus *bus;
 struct list_head list;
 struct hotplug_slot *hotplug;
 unsigned char number;
 struct kobject kobj;
};

static inline __attribute__((no_instrument_function)) const char *pci_slot_name(const struct pci_slot *slot)
{
 return kobject_name(&slot->kobj);
}


enum pci_mmap_state {
 pci_mmap_io,
 pci_mmap_mem
};




enum {

 PCI_STD_RESOURCES,
 PCI_STD_RESOURCE_END = 5,


 PCI_ROM_RESOURCE,
# 93 "include/linux/pci.h"
 PCI_BRIDGE_RESOURCES,
 PCI_BRIDGE_RESOURCE_END = PCI_BRIDGE_RESOURCES +
      4 - 1,


 PCI_NUM_RESOURCES,


 DEVICE_COUNT_RESOURCE = PCI_NUM_RESOURCES,
};

typedef int pci_power_t;
# 115 "include/linux/pci.h"
extern const char *pci_power_names[];

static inline __attribute__((no_instrument_function)) const char *pci_power_name(pci_power_t state)
{
 return pci_power_names[1 + (int) state];
}
# 131 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

enum pci_channel_state {

 pci_channel_io_normal = ( pci_channel_state_t) 1,


 pci_channel_io_frozen = ( pci_channel_state_t) 2,


 pci_channel_io_perm_failure = ( pci_channel_state_t) 3,
};

typedef unsigned int pcie_reset_state_t;

enum pcie_reset_state {

 pcie_deassert_reset = ( pcie_reset_state_t) 1,


 pcie_warm_reset = ( pcie_reset_state_t) 2,


 pcie_hot_reset = ( pcie_reset_state_t) 3
};

typedef unsigned short pci_dev_flags_t;
enum pci_dev_flags {



 PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = ( pci_dev_flags_t) (1 << 0),

 PCI_DEV_FLAGS_NO_D3 = ( pci_dev_flags_t) (1 << 1),

 PCI_DEV_FLAGS_ASSIGNED = ( pci_dev_flags_t) (1 << 2),

 PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = ( pci_dev_flags_t) (1 << 3),

 PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = ( pci_dev_flags_t) (1 << 5),

 PCI_DEV_FLAGS_NO_BUS_RESET = ( pci_dev_flags_t) (1 << 6),

 PCI_DEV_FLAGS_NO_PM_RESET = ( pci_dev_flags_t) (1 << 7),

 PCI_DEV_FLAGS_VPD_REF_F0 = ( pci_dev_flags_t) (1 << 8),
};

enum pci_irq_reroute_variant {
 INTEL_IRQ_REROUTE_VARIANT = 1,
 MAX_IRQ_REROUTE_VARIANTS = 3
};

typedef unsigned short pci_bus_flags_t;
enum pci_bus_flags {
 PCI_BUS_FLAGS_NO_MSI = ( pci_bus_flags_t) 1,
 PCI_BUS_FLAGS_NO_MMRBC = ( pci_bus_flags_t) 2,
};


enum pcie_link_width {
 PCIE_LNK_WIDTH_RESRV = 0x00,
 PCIE_LNK_X1 = 0x01,
 PCIE_LNK_X2 = 0x02,
 PCIE_LNK_X4 = 0x04,
 PCIE_LNK_X8 = 0x08,
 PCIE_LNK_X12 = 0x0C,
 PCIE_LNK_X16 = 0x10,
 PCIE_LNK_X32 = 0x20,
 PCIE_LNK_WIDTH_UNKNOWN = 0xFF,
};


enum pci_bus_speed {
 PCI_SPEED_33MHz = 0x00,
 PCI_SPEED_66MHz = 0x01,
 PCI_SPEED_66MHz_PCIX = 0x02,
 PCI_SPEED_100MHz_PCIX = 0x03,
 PCI_SPEED_133MHz_PCIX = 0x04,
 PCI_SPEED_66MHz_PCIX_ECC = 0x05,
 PCI_SPEED_100MHz_PCIX_ECC = 0x06,
 PCI_SPEED_133MHz_PCIX_ECC = 0x07,
 PCI_SPEED_66MHz_PCIX_266 = 0x09,
 PCI_SPEED_100MHz_PCIX_266 = 0x0a,
 PCI_SPEED_133MHz_PCIX_266 = 0x0b,
 AGP_UNKNOWN = 0x0c,
 AGP_1X = 0x0d,
 AGP_2X = 0x0e,
 AGP_4X = 0x0f,
 AGP_8X = 0x10,
 PCI_SPEED_66MHz_PCIX_533 = 0x11,
 PCI_SPEED_100MHz_PCIX_533 = 0x12,
 PCI_SPEED_133MHz_PCIX_533 = 0x13,
 PCIE_SPEED_2_5GT = 0x14,
 PCIE_SPEED_5_0GT = 0x15,
 PCIE_SPEED_8_0GT = 0x16,
 PCI_SPEED_UNKNOWN = 0xff,
};

struct pci_cap_saved_data {
 u16 cap_nr;
 bool cap_extended;
 unsigned int size;
 u32 data[0];
};

struct pci_cap_saved_state {
 struct hlist_node next;
 struct pci_cap_saved_data cap;
};

struct pcie_link_state;
struct pci_vpd;
struct pci_sriov;
struct pci_ats;




struct pci_dev {
 struct list_head bus_list;
 struct pci_bus *bus;
 struct pci_bus *subordinate;

 void *sysdata;
 struct proc_dir_entry *procent;
 struct pci_slot *slot;

 unsigned int devfn;
 unsigned short vendor;
 unsigned short device;
 unsigned short subsystem_vendor;
 unsigned short subsystem_device;
 unsigned int class;
 u8 revision;
 u8 hdr_type;
 u8 pcie_cap;
 u8 msi_cap;
 u8 msix_cap;
 u8 pcie_mpss:3;
 u8 rom_base_reg;
 u8 pin;
 u16 pcie_flags_reg;
 unsigned long *dma_alias_mask;

 struct pci_driver *driver;
 u64 dma_mask;





 struct device_dma_parameters dma_parms;

 pci_power_t current_state;


 u8 pm_cap;
 unsigned int pme_support:5;

 unsigned int pme_interrupt:1;
 unsigned int pme_poll:1;
 unsigned int d1_support:1;
 unsigned int d2_support:1;
 unsigned int no_d1d2:1;
 unsigned int no_d3cold:1;
 unsigned int d3cold_allowed:1;
 unsigned int mmio_always_on:1;

 unsigned int wakeup_prepared:1;
 unsigned int runtime_d3cold:1;



 unsigned int ignore_hotplug:1;
 unsigned int d3_delay;
 unsigned int d3cold_delay;


 struct pcie_link_state *link_state;


 pci_channel_state_t error_state;
 struct device dev;

 int cfg_size;





 unsigned int irq;
 struct resource resource[DEVICE_COUNT_RESOURCE];

 bool match_driver;

 unsigned int transparent:1;
 unsigned int multifunction:1;

 unsigned int is_added:1;
 unsigned int is_busmaster:1;
 unsigned int no_msi:1;
 unsigned int no_64bit_msi:1;
 unsigned int block_cfg_access:1;
 unsigned int broken_parity_status:1;
 unsigned int irq_reroute_variant:2;
 unsigned int msi_enabled:1;
 unsigned int msix_enabled:1;
 unsigned int ari_enabled:1;
 unsigned int ats_enabled:1;
 unsigned int is_managed:1;
 unsigned int needs_freset:1;
 unsigned int state_saved:1;
 unsigned int is_physfn:1;
 unsigned int is_virtfn:1;
 unsigned int reset_fn:1;
 unsigned int is_hotplug_bridge:1;
 unsigned int __aer_firmware_first_valid:1;
 unsigned int __aer_firmware_first:1;
 unsigned int broken_intx_masking:1;
 unsigned int io_window_1k:1;
 unsigned int irq_managed:1;
 unsigned int has_secondary_link:1;
 unsigned int non_compliant_bars:1;
 pci_dev_flags_t dev_flags;
 atomic_t enable_cnt;

 u32 saved_config_space[16];
 struct hlist_head saved_cap_space;
 struct bin_attribute *rom_attr;
 int rom_attr_enabled;
 struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE];
 struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE];

 const struct attribute_group **msi_irq_groups;

 struct pci_vpd *vpd;

 union {
  struct pci_sriov *sriov;
  struct pci_dev *physfn;
 };
 u16 ats_cap;
 u8 ats_stu;
 atomic_t ats_ref_cnt;

 phys_addr_t rom;
 size_t romlen;
 char *driver_override;
};

static inline __attribute__((no_instrument_function)) struct pci_dev *pci_physfn(struct pci_dev *dev)
{




 return dev;
}

struct pci_dev *pci_alloc_dev(struct pci_bus *bus);




static inline __attribute__((no_instrument_function)) int pci_channel_offline(struct pci_dev *pdev)
{
 return (pdev->error_state != pci_channel_io_normal);
}

struct pci_host_bridge {
 struct device dev;
 struct pci_bus *bus;
 struct list_head windows;
 void (*release_fn)(struct pci_host_bridge *);
 void *release_data;
 unsigned int ignore_reset_delay:1;

 resource_size_t (*align_resource)(struct pci_dev *dev,
   const struct resource *res,
   resource_size_t start,
   resource_size_t size,
   resource_size_t align);
};



struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus);

void pci_set_host_bridge_release(struct pci_host_bridge *bridge,
       void (*release_fn)(struct pci_host_bridge *),
       void *release_data);

int pcibios_root_bridge_prepare(struct pci_host_bridge *bridge);
# 441 "include/linux/pci.h"
struct pci_bus_resource {
 struct list_head list;
 struct resource *res;
 unsigned int flags;
};



struct pci_bus {
 struct list_head node;
 struct pci_bus *parent;
 struct list_head children;
 struct list_head devices;
 struct pci_dev *self;
 struct list_head slots;

 struct resource *resource[4];
 struct list_head resources;
 struct resource busn_res;

 struct pci_ops *ops;
 struct msi_controller *msi;
 void *sysdata;
 struct proc_dir_entry *procdir;

 unsigned char number;
 unsigned char primary;
 unsigned char max_bus_speed;
 unsigned char cur_bus_speed;




 char name[48];

 unsigned short bridge_ctl;
 pci_bus_flags_t bus_flags;
 struct device *bridge;
 struct device dev;
 struct bin_attribute *legacy_io;
 struct bin_attribute *legacy_mem;
 unsigned int is_added:1;
};
# 495 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) bool pci_is_root_bus(struct pci_bus *pbus)
{
 return !(pbus->parent);
}
# 507 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) bool pci_is_bridge(struct pci_dev *dev)
{
 return dev->hdr_type == 1 ||
  dev->hdr_type == 2;
}

static inline __attribute__((no_instrument_function)) struct pci_dev *pci_upstream_bridge(struct pci_dev *dev)
{
 dev = pci_physfn(dev);
 if (pci_is_root_bus(dev->bus))
  return ((void *)0);

 return dev->bus->self;
}

struct device *pci_get_host_bridge_device(struct pci_dev *dev);
void pci_put_host_bridge_device(struct device *dev);


static inline __attribute__((no_instrument_function)) bool pci_dev_msi_enabled(struct pci_dev *pci_dev)
{
 return pci_dev->msi_enabled || pci_dev->msix_enabled;
}
# 548 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) int pcibios_err_to_errno(int err)
{
 if (err <= 0x00)
  return err;

 switch (err) {
 case 0x81:
  return -2;
 case 0x83:
  return -25;
 case 0x86:
  return -19;
 case 0x87:
  return -14;
 case 0x88:
  return -5;
 case 0x89:
  return -28;
 }

 return -34;
}



struct pci_ops {
 int (*add_bus)(struct pci_bus *bus);
 void (*remove_bus)(struct pci_bus *bus);
 void *(*map_bus)(struct pci_bus *bus, unsigned int devfn, int where);
 int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val);
 int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val);
};





int raw_pci_read(unsigned int domain, unsigned int bus, unsigned int devfn,
   int reg, int len, u32 *val);
int raw_pci_write(unsigned int domain, unsigned int bus, unsigned int devfn,
    int reg, int len, u32 val);


typedef u64 pci_bus_addr_t;




struct pci_bus_region {
 pci_bus_addr_t start;
 pci_bus_addr_t end;
};

struct pci_dynids {
 spinlock_t lock;
 struct list_head list;
};
# 614 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

enum pci_ers_result {

 PCI_ERS_RESULT_NONE = ( pci_ers_result_t) 1,


 PCI_ERS_RESULT_CAN_RECOVER = ( pci_ers_result_t) 2,


 PCI_ERS_RESULT_NEED_RESET = ( pci_ers_result_t) 3,


 PCI_ERS_RESULT_DISCONNECT = ( pci_ers_result_t) 4,


 PCI_ERS_RESULT_RECOVERED = ( pci_ers_result_t) 5,


 PCI_ERS_RESULT_NO_AER_DRIVER = ( pci_ers_result_t) 6,
};


struct pci_error_handlers {

 pci_ers_result_t (*error_detected)(struct pci_dev *dev,
        enum pci_channel_state error);


 pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev);


 pci_ers_result_t (*link_reset)(struct pci_dev *dev);


 pci_ers_result_t (*slot_reset)(struct pci_dev *dev);


 void (*reset_notify)(struct pci_dev *dev, bool prepare);


 void (*resume)(struct pci_dev *dev);
};


struct module;
struct pci_driver {
 struct list_head node;
 const char *name;
 const struct pci_device_id *id_table;
 int (*probe) (struct pci_dev *dev, const struct pci_device_id *id);
 void (*remove) (struct pci_dev *dev);
 int (*suspend) (struct pci_dev *dev, pm_message_t state);
 int (*suspend_late) (struct pci_dev *dev, pm_message_t state);
 int (*resume_early) (struct pci_dev *dev);
 int (*resume) (struct pci_dev *dev);
 void (*shutdown) (struct pci_dev *dev);
 int (*sriov_configure) (struct pci_dev *dev, int num_vfs);
 const struct pci_error_handlers *err_handler;
 struct device_driver driver;
 struct pci_dynids dynids;
};
# 744 "include/linux/pci.h"
enum {
 PCI_REASSIGN_ALL_RSRC = 0x00000001,
 PCI_REASSIGN_ALL_BUS = 0x00000002,
 PCI_PROBE_ONLY = 0x00000004,
 PCI_CAN_SKIP_ISA_ALIGN = 0x00000008,
 PCI_ENABLE_PROC_DOMAINS = 0x00000010,
 PCI_COMPAT_DOMAIN_0 = 0x00000020,
 PCI_SCAN_ALL_PCIE_DEVS = 0x00000040,
};




extern unsigned int pci_flags;

static inline __attribute__((no_instrument_function)) void pci_set_flags(int flags) { pci_flags = flags; }
static inline __attribute__((no_instrument_function)) void pci_add_flags(int flags) { pci_flags |= flags; }
static inline __attribute__((no_instrument_function)) void pci_clear_flags(int flags) { pci_flags &= ~flags; }
static inline __attribute__((no_instrument_function)) int pci_has_flag(int flag) { return pci_flags & flag; }

void pcie_bus_configure_settings(struct pci_bus *bus);

enum pcie_bus_config_types {
 PCIE_BUS_TUNE_OFF,
 PCIE_BUS_DEFAULT,
 PCIE_BUS_SAFE,
 PCIE_BUS_PERFORMANCE,
 PCIE_BUS_PEER2PEER,
};

extern enum pcie_bus_config_types pcie_bus_config;

extern struct bus_type pci_bus_type;



extern struct list_head pci_root_buses;

int no_pci_devices(void);

void pcibios_resource_survey_bus(struct pci_bus *bus);
void pcibios_bus_add_device(struct pci_dev *pdev);
void pcibios_add_bus(struct pci_bus *bus);
void pcibios_remove_bus(struct pci_bus *bus);
void pcibios_fixup_bus(struct pci_bus *);
int __attribute__((warn_unused_result)) pcibios_enable_device(struct pci_dev *, int mask);

char *pcibios_setup(char *str);


resource_size_t pcibios_align_resource(void *, const struct resource *,
    resource_size_t,
    resource_size_t);
void pcibios_update_irq(struct pci_dev *, int irq);


void pci_fixup_cardbus(struct pci_bus *);



void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
        struct resource *res);
void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
        struct pci_bus_region *region);
void pcibios_scan_specific_bus(int busn);
struct pci_bus *pci_find_bus(int domain, int busnr);
void pci_bus_add_devices(const struct pci_bus *bus);
struct pci_bus *pci_scan_bus(int bus, struct pci_ops *ops, void *sysdata);
struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
        struct pci_ops *ops, void *sysdata,
        struct list_head *resources);
int pci_bus_insert_busn_res(struct pci_bus *b, int bus, int busmax);
int pci_bus_update_busn_res_end(struct pci_bus *b, int busmax);
void pci_bus_release_busn_res(struct pci_bus *b);
struct pci_bus *pci_scan_root_bus_msi(struct device *parent, int bus,
          struct pci_ops *ops, void *sysdata,
          struct list_head *resources,
          struct msi_controller *msi);
struct pci_bus *pci_scan_root_bus(struct device *parent, int bus,
          struct pci_ops *ops, void *sysdata,
          struct list_head *resources);
struct pci_bus *pci_add_new_bus(struct pci_bus *parent, struct pci_dev *dev,
    int busnr);
void pcie_update_link_speed(struct pci_bus *bus, u16 link_status);
struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
     const char *name,
     struct hotplug_slot *hotplug);
void pci_destroy_slot(struct pci_slot *slot);

void pci_dev_assign_slot(struct pci_dev *dev);



int pci_scan_slot(struct pci_bus *bus, int devfn);
struct pci_dev *pci_scan_single_device(struct pci_bus *bus, int devfn);
void pci_device_add(struct pci_dev *dev, struct pci_bus *bus);
unsigned int pci_scan_child_bus(struct pci_bus *bus);
void pci_bus_add_device(struct pci_dev *dev);
void pci_read_bridge_bases(struct pci_bus *child);
struct resource *pci_find_parent_resource(const struct pci_dev *dev,
       struct resource *res);
struct pci_dev *pci_find_pcie_root_port(struct pci_dev *dev);
u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev, u8 pin);
int pci_get_interrupt_pin(struct pci_dev *dev, struct pci_dev **bridge);
u8 pci_common_swizzle(struct pci_dev *dev, u8 *pinp);
struct pci_dev *pci_dev_get(struct pci_dev *dev);
void pci_dev_put(struct pci_dev *dev);
void pci_remove_bus(struct pci_bus *b);
void pci_stop_and_remove_bus_device(struct pci_dev *dev);
void pci_stop_and_remove_bus_device_locked(struct pci_dev *dev);
void pci_stop_root_bus(struct pci_bus *bus);
void pci_remove_root_bus(struct pci_bus *bus);
void pci_setup_cardbus(struct pci_bus *bus);
void pci_sort_breadthfirst(void);






enum pci_lost_interrupt_reason {
 PCI_LOST_IRQ_NO_INFORMATION = 0,
 PCI_LOST_IRQ_DISABLE_MSI,
 PCI_LOST_IRQ_DISABLE_MSIX,
 PCI_LOST_IRQ_DISABLE_ACPI,
};
enum pci_lost_interrupt_reason pci_lost_interrupt(struct pci_dev *dev);
int pci_find_capability(struct pci_dev *dev, int cap);
int pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap);
int pci_find_ext_capability(struct pci_dev *dev, int cap);
int pci_find_next_ext_capability(struct pci_dev *dev, int pos, int cap);
int pci_find_ht_capability(struct pci_dev *dev, int ht_cap);
int pci_find_next_ht_capability(struct pci_dev *dev, int pos, int ht_cap);
struct pci_bus *pci_find_next_bus(const struct pci_bus *from);

struct pci_dev *pci_get_device(unsigned int vendor, unsigned int device,
    struct pci_dev *from);
struct pci_dev *pci_get_subsys(unsigned int vendor, unsigned int device,
    unsigned int ss_vendor, unsigned int ss_device,
    struct pci_dev *from);
struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn);
struct pci_dev *pci_get_domain_bus_and_slot(int domain, unsigned int bus,
         unsigned int devfn);
static inline __attribute__((no_instrument_function)) struct pci_dev *pci_get_bus_and_slot(unsigned int bus,
         unsigned int devfn)
{
 return pci_get_domain_bus_and_slot(0, bus, devfn);
}
struct pci_dev *pci_get_class(unsigned int class, struct pci_dev *from);
int pci_dev_present(const struct pci_device_id *ids);

int pci_bus_read_config_byte(struct pci_bus *bus, unsigned int devfn,
        int where, u8 *val);
int pci_bus_read_config_word(struct pci_bus *bus, unsigned int devfn,
        int where, u16 *val);
int pci_bus_read_config_dword(struct pci_bus *bus, unsigned int devfn,
         int where, u32 *val);
int pci_bus_write_config_byte(struct pci_bus *bus, unsigned int devfn,
         int where, u8 val);
int pci_bus_write_config_word(struct pci_bus *bus, unsigned int devfn,
         int where, u16 val);
int pci_bus_write_config_dword(struct pci_bus *bus, unsigned int devfn,
          int where, u32 val);

int pci_generic_config_read(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 *val);
int pci_generic_config_write(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 val);
int pci_generic_config_read32(struct pci_bus *bus, unsigned int devfn,
         int where, int size, u32 *val);
int pci_generic_config_write32(struct pci_bus *bus, unsigned int devfn,
          int where, int size, u32 val);

struct pci_ops *pci_bus_set_ops(struct pci_bus *bus, struct pci_ops *ops);

static inline __attribute__((no_instrument_function)) int pci_read_config_byte(const struct pci_dev *dev, int where, u8 *val)
{
 return pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
}
static inline __attribute__((no_instrument_function)) int pci_read_config_word(const struct pci_dev *dev, int where, u16 *val)
{
 return pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
}
static inline __attribute__((no_instrument_function)) int pci_read_config_dword(const struct pci_dev *dev, int where,
     u32 *val)
{
 return pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
}
static inline __attribute__((no_instrument_function)) int pci_write_config_byte(const struct pci_dev *dev, int where, u8 val)
{
 return pci_bus_write_config_byte(dev->bus, dev->devfn, where, val);
}
static inline __attribute__((no_instrument_function)) int pci_write_config_word(const struct pci_dev *dev, int where, u16 val)
{
 return pci_bus_write_config_word(dev->bus, dev->devfn, where, val);
}
static inline __attribute__((no_instrument_function)) int pci_write_config_dword(const struct pci_dev *dev, int where,
      u32 val)
{
 return pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
}

int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val);
int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val);
int pcie_capability_write_word(struct pci_dev *dev, int pos, u16 val);
int pcie_capability_write_dword(struct pci_dev *dev, int pos, u32 val);
int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
           u16 clear, u16 set);
int pcie_capability_clear_and_set_dword(struct pci_dev *dev, int pos,
     u32 clear, u32 set);

static inline __attribute__((no_instrument_function)) int pcie_capability_set_word(struct pci_dev *dev, int pos,
        u16 set)
{
 return pcie_capability_clear_and_set_word(dev, pos, 0, set);
}

static inline __attribute__((no_instrument_function)) int pcie_capability_set_dword(struct pci_dev *dev, int pos,
         u32 set)
{
 return pcie_capability_clear_and_set_dword(dev, pos, 0, set);
}

static inline __attribute__((no_instrument_function)) int pcie_capability_clear_word(struct pci_dev *dev, int pos,
          u16 clear)
{
 return pcie_capability_clear_and_set_word(dev, pos, clear, 0);
}

static inline __attribute__((no_instrument_function)) int pcie_capability_clear_dword(struct pci_dev *dev, int pos,
           u32 clear)
{
 return pcie_capability_clear_and_set_dword(dev, pos, clear, 0);
}


int pci_user_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_user_read_config_word(struct pci_dev *dev, int where, u16 *val);
int pci_user_read_config_dword(struct pci_dev *dev, int where, u32 *val);
int pci_user_write_config_byte(struct pci_dev *dev, int where, u8 val);
int pci_user_write_config_word(struct pci_dev *dev, int where, u16 val);
int pci_user_write_config_dword(struct pci_dev *dev, int where, u32 val);

int __attribute__((warn_unused_result)) pci_enable_device(struct pci_dev *dev);
int __attribute__((warn_unused_result)) pci_enable_device_io(struct pci_dev *dev);
int __attribute__((warn_unused_result)) pci_enable_device_mem(struct pci_dev *dev);
int __attribute__((warn_unused_result)) pci_reenable_device(struct pci_dev *);
int __attribute__((warn_unused_result)) pcim_enable_device(struct pci_dev *pdev);
void pcim_pin_device(struct pci_dev *pdev);

static inline __attribute__((no_instrument_function)) int pci_is_enabled(struct pci_dev *pdev)
{
 return (atomic_read(&pdev->enable_cnt) > 0);
}

static inline __attribute__((no_instrument_function)) int pci_is_managed(struct pci_dev *pdev)
{
 return pdev->is_managed;
}

void pci_disable_device(struct pci_dev *dev);

extern unsigned int pcibios_max_latency;
void pci_set_master(struct pci_dev *dev);
void pci_clear_master(struct pci_dev *dev);

int pci_set_pcie_reset_state(struct pci_dev *dev, enum pcie_reset_state state);
int pci_set_cacheline_size(struct pci_dev *dev);

int __attribute__((warn_unused_result)) pci_set_mwi(struct pci_dev *dev);
int pci_try_set_mwi(struct pci_dev *dev);
void pci_clear_mwi(struct pci_dev *dev);
void pci_intx(struct pci_dev *dev, int enable);
bool pci_intx_mask_supported(struct pci_dev *dev);
bool pci_check_and_mask_intx(struct pci_dev *dev);
bool pci_check_and_unmask_intx(struct pci_dev *dev);
int pci_wait_for_pending(struct pci_dev *dev, int pos, u16 mask);
int pci_wait_for_pending_transaction(struct pci_dev *dev);
int pcix_get_max_mmrbc(struct pci_dev *dev);
int pcix_get_mmrbc(struct pci_dev *dev);
int pcix_set_mmrbc(struct pci_dev *dev, int mmrbc);
int pcie_get_readrq(struct pci_dev *dev);
int pcie_set_readrq(struct pci_dev *dev, int rq);
int pcie_get_mps(struct pci_dev *dev);
int pcie_set_mps(struct pci_dev *dev, int mps);
int pcie_get_minimum_link(struct pci_dev *dev, enum pci_bus_speed *speed,
     enum pcie_link_width *width);
int __pci_reset_function(struct pci_dev *dev);
int __pci_reset_function_locked(struct pci_dev *dev);
int pci_reset_function(struct pci_dev *dev);
int pci_try_reset_function(struct pci_dev *dev);
int pci_probe_reset_slot(struct pci_slot *slot);
int pci_reset_slot(struct pci_slot *slot);
int pci_try_reset_slot(struct pci_slot *slot);
int pci_probe_reset_bus(struct pci_bus *bus);
int pci_reset_bus(struct pci_bus *bus);
int pci_try_reset_bus(struct pci_bus *bus);
void pci_reset_secondary_bus(struct pci_dev *dev);
void pcibios_reset_secondary_bus(struct pci_dev *dev);
void pci_reset_bridge_secondary_bus(struct pci_dev *dev);
void pci_update_resource(struct pci_dev *dev, int resno);
int __attribute__((warn_unused_result)) pci_assign_resource(struct pci_dev *dev, int i);
int __attribute__((warn_unused_result)) pci_reassign_resource(struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align);
int pci_select_bars(struct pci_dev *dev, unsigned long flags);
bool pci_device_is_present(struct pci_dev *pdev);
void pci_ignore_hotplug(struct pci_dev *dev);


int pci_enable_rom(struct pci_dev *pdev);
void pci_disable_rom(struct pci_dev *pdev);
void __attribute__((warn_unused_result)) *pci_map_rom(struct pci_dev *pdev, size_t *size);
void pci_unmap_rom(struct pci_dev *pdev, void *rom);
size_t pci_get_rom_size(struct pci_dev *pdev, void *rom, size_t size);
void __attribute__((warn_unused_result)) *pci_platform_rom(struct pci_dev *pdev, size_t *size);


int pci_save_state(struct pci_dev *dev);
void pci_restore_state(struct pci_dev *dev);
struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
int pci_load_saved_state(struct pci_dev *dev,
    struct pci_saved_state *state);
int pci_load_and_free_saved_state(struct pci_dev *dev,
      struct pci_saved_state **state);
struct pci_cap_saved_state *pci_find_saved_cap(struct pci_dev *dev, char cap);
struct pci_cap_saved_state *pci_find_saved_ext_cap(struct pci_dev *dev,
         u16 cap);
int pci_add_cap_save_buffer(struct pci_dev *dev, char cap, unsigned int size);
int pci_add_ext_cap_save_buffer(struct pci_dev *dev,
    u16 cap, unsigned int size);
int __pci_complete_power_transition(struct pci_dev *dev, pci_power_t state);
int pci_set_power_state(struct pci_dev *dev, pci_power_t state);
pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state);
bool pci_pme_capable(struct pci_dev *dev, pci_power_t state);
void pci_pme_active(struct pci_dev *dev, bool enable);
int __pci_enable_wake(struct pci_dev *dev, pci_power_t state,
        bool runtime, bool enable);
int pci_wake_from_d3(struct pci_dev *dev, bool enable);
int pci_prepare_to_sleep(struct pci_dev *dev);
int pci_back_from_sleep(struct pci_dev *dev);
bool pci_dev_run_wake(struct pci_dev *dev);
bool pci_check_pme_status(struct pci_dev *dev);
void pci_pme_wakeup_bus(struct pci_bus *bus);

static inline __attribute__((no_instrument_function)) int pci_enable_wake(struct pci_dev *dev, pci_power_t state,
      bool enable)
{
 return __pci_enable_wake(dev, state, false, enable);
}


int pci_save_vc_state(struct pci_dev *dev);
void pci_restore_vc_state(struct pci_dev *dev);
void pci_allocate_vc_save_buffers(struct pci_dev *dev);


void set_pcie_port_type(struct pci_dev *pdev);
void set_pcie_hotplug_bridge(struct pci_dev *pdev);


int pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap);
unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
unsigned int pci_rescan_bus(struct pci_bus *bus);
void pci_lock_rescan_remove(void);
void pci_unlock_rescan_remove(void);


ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);
int pci_set_vpd_size(struct pci_dev *dev, size_t len);


resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev, int idx);
void pci_bus_assign_resources(const struct pci_bus *bus);
void pci_bus_size_bridges(struct pci_bus *bus);
int pci_claim_resource(struct pci_dev *, int);
int pci_claim_bridge_resource(struct pci_dev *bridge, int i);
void pci_assign_unassigned_resources(void);
void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus);
void pdev_enable_device(struct pci_dev *);
int pci_enable_resources(struct pci_dev *, int mask);
void pci_fixup_irqs(u8 (*)(struct pci_dev *, u8 *),
      int (*)(const struct pci_dev *, u8, u8));

int __attribute__((warn_unused_result)) pci_request_regions(struct pci_dev *, const char *);
int __attribute__((warn_unused_result)) pci_request_regions_exclusive(struct pci_dev *, const char *);
void pci_release_regions(struct pci_dev *);
int __attribute__((warn_unused_result)) pci_request_region(struct pci_dev *, int, const char *);
int __attribute__((warn_unused_result)) pci_request_region_exclusive(struct pci_dev *, int, const char *);
void pci_release_region(struct pci_dev *, int);
int pci_request_selected_regions(struct pci_dev *, int, const char *);
int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);
void pci_release_selected_regions(struct pci_dev *, int);


struct pci_bus *pci_bus_get(struct pci_bus *bus);
void pci_bus_put(struct pci_bus *bus);
void pci_add_resource(struct list_head *resources, struct resource *res);
void pci_add_resource_offset(struct list_head *resources, struct resource *res,
        resource_size_t offset);
void pci_free_resource_list(struct list_head *resources);
void pci_bus_add_resource(struct pci_bus *bus, struct resource *res, unsigned int flags);
struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n);
void pci_bus_remove_resources(struct pci_bus *bus);






int __attribute__((warn_unused_result)) pci_bus_alloc_resource(struct pci_bus *bus,
   struct resource *res, resource_size_t size,
   resource_size_t align, resource_size_t min,
   unsigned long type_mask,
   resource_size_t (*alignf)(void *,
        const struct resource *,
        resource_size_t,
        resource_size_t),
   void *alignf_data);


int pci_register_io_range(phys_addr_t addr, resource_size_t size);
unsigned long pci_address_to_pio(phys_addr_t addr);
phys_addr_t pci_pio_to_address(unsigned long pio);
int pci_remap_iospace(const struct resource *res, phys_addr_t phys_addr);

static inline __attribute__((no_instrument_function)) pci_bus_addr_t pci_bus_address(struct pci_dev *pdev, int bar)
{
 struct pci_bus_region region;

 pcibios_resource_to_bus(pdev->bus, &region, &pdev->resource[bar]);
 return region.start;
}


int __attribute__((warn_unused_result)) __pci_register_driver(struct pci_driver *, struct module *,
           const char *mod_name);







void pci_unregister_driver(struct pci_driver *dev);
# 1214 "include/linux/pci.h"
struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
int pci_add_dynid(struct pci_driver *drv,
    unsigned int vendor, unsigned int device,
    unsigned int subvendor, unsigned int subdevice,
    unsigned int class, unsigned int class_mask,
    unsigned long driver_data);
const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
      struct pci_dev *dev);
int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max,
      int pass);

void pci_walk_bus(struct pci_bus *top, int (*cb)(struct pci_dev *, void *),
    void *userdata);
int pci_cfg_space_size(struct pci_dev *dev);
unsigned char pci_bus_max_busnr(struct pci_bus *bus);
void pci_setup_bridge(struct pci_bus *bus);
resource_size_t pcibios_window_alignment(struct pci_bus *bus,
      unsigned long type);
resource_size_t pcibios_iov_resource_alignment(struct pci_dev *dev, int resno);




int pci_set_vga_state(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);



# 1 "include/linux/pci-dma.h" 1
# 1243 "include/linux/pci.h" 2
# 1 "include/linux/dmapool.h" 1
# 17 "include/linux/dmapool.h"
struct device;

struct dma_pool *dma_pool_create(const char *name, struct device *dev,
   size_t size, size_t align, size_t allocation);

void dma_pool_destroy(struct dma_pool *pool);

void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,
       dma_addr_t *handle);

static inline __attribute__((no_instrument_function)) void *dma_pool_zalloc(struct dma_pool *pool, gfp_t mem_flags,
        dma_addr_t *handle)
{
 return dma_pool_alloc(pool, mem_flags | (( gfp_t)0x8000u), handle);
}

void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t addr);




struct dma_pool *dmam_pool_create(const char *name, struct device *dev,
      size_t size, size_t align, size_t allocation);
void dmam_pool_destroy(struct dma_pool *pool);
# 1244 "include/linux/pci.h" 2
# 1254 "include/linux/pci.h"
struct msix_entry {
 u32 vector;
 u16 entry;
};


int pci_msi_vec_count(struct pci_dev *dev);
void pci_msi_shutdown(struct pci_dev *dev);
void pci_disable_msi(struct pci_dev *dev);
int pci_msix_vec_count(struct pci_dev *dev);
int pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries, int nvec);
void pci_msix_shutdown(struct pci_dev *dev);
void pci_disable_msix(struct pci_dev *dev);
void pci_restore_msi_state(struct pci_dev *dev);
int pci_msi_enabled(void);
int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec);
static inline __attribute__((no_instrument_function)) int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
 int rc = pci_enable_msi_range(dev, nvec, nvec);
 if (rc < 0)
  return rc;
 return 0;
}
int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
     int minvec, int maxvec);
static inline __attribute__((no_instrument_function)) int pci_enable_msix_exact(struct pci_dev *dev,
     struct msix_entry *entries, int nvec)
{
 int rc = pci_enable_msix_range(dev, entries, nvec, nvec);
 if (rc < 0)
  return rc;
 return 0;
}
# 1313 "include/linux/pci.h"
extern bool pcie_ports_disabled;
extern bool pcie_ports_auto;






bool pcie_aspm_support_enabled(void);





void pci_no_aer(void);
bool pci_aer_available(void);
# 1338 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) void pcie_set_ecrc_checking(struct pci_dev *dev) { }
static inline __attribute__((no_instrument_function)) void pcie_ecrc_get_policy(char *str) { }






int ht_create_irq(struct pci_dev *dev, int idx);
void ht_destroy_irq(unsigned int irq);




void pci_ats_init(struct pci_dev *dev);
int pci_enable_ats(struct pci_dev *dev, int ps);
void pci_disable_ats(struct pci_dev *dev);
int pci_ats_queue_depth(struct pci_dev *dev);







void pci_cfg_access_lock(struct pci_dev *dev);
bool pci_cfg_access_trylock(struct pci_dev *dev);
void pci_cfg_access_unlock(struct pci_dev *dev);







extern int pci_domains_supported;
int pci_get_new_domain_nr(void);
# 1394 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) void pci_bus_assign_domain_nr(struct pci_bus *bus,
     struct device *parent)
{
}



typedef int (*arch_set_vga_state_t)(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);
void pci_register_set_vga_state(arch_set_vga_state_t func);
# 1512 "include/linux/pci.h"
# 1 "./arch/x86/include/asm/pci.h" 1
# 14 "./arch/x86/include/asm/pci.h"
struct pci_sysdata {
 int domain;
 int node;

 struct acpi_device *companion;


 void *iommu;


 void *fwnode;

};

extern int pci_routeirq;
extern int noioapicquirk;
extern int noioapicreroute;




static inline __attribute__((no_instrument_function)) int pci_domain_nr(struct pci_bus *bus)
{
 struct pci_sysdata *sd = bus->sysdata;

 return sd->domain;
}

static inline __attribute__((no_instrument_function)) int pci_proc_domain(struct pci_bus *bus)
{
 return pci_domain_nr(bus);
}



static inline __attribute__((no_instrument_function)) void *_pci_root_bus_fwnode(struct pci_bus *bus)
{
 struct pci_sysdata *sd = bus->sysdata;

 return sd->fwnode;
}
# 63 "./arch/x86/include/asm/pci.h"
extern unsigned int pcibios_assign_all_busses(void);
extern int pci_legacy_init(void);
# 75 "./arch/x86/include/asm/pci.h"
extern unsigned long pci_mem_start;





extern int pcibios_enabled;
void pcibios_config_init(void);
void pcibios_scan_root(int bus);

void pcibios_set_master(struct pci_dev *dev);
struct irq_routing_table *pcibios_get_irq_routing_table(void);
int pcibios_set_irq_routing(struct pci_dev *dev, int pin, int irq);



extern int pci_mmap_page_range(struct pci_dev *dev, struct vm_area_struct *vma,
          enum pci_mmap_state mmap_state,
          int write_combine);



extern void early_quirks(void);




extern void pci_iommu_alloc(void);



struct msi_desc;
int native_setup_msi_irqs(struct pci_dev *dev, int nvec, int type);
void native_teardown_msi_irq(unsigned int irq);
void native_restore_msi_irqs(struct pci_dev *dev);
# 120 "./arch/x86/include/asm/pci.h"
# 1 "./arch/x86/include/asm/pci_64.h" 1






static inline __attribute__((no_instrument_function)) void *pci_iommu(struct pci_bus *bus)
{
 struct pci_sysdata *sd = bus->sysdata;
 return sd->iommu;
}

static inline __attribute__((no_instrument_function)) void set_pci_iommu(struct pci_bus *bus, void *val)
{
 struct pci_sysdata *sd = bus->sysdata;
 sd->iommu = val;
}


extern int (*pci_config_read)(int seg, int bus, int dev, int fn,
         int reg, int len, u32 *value);
extern int (*pci_config_write)(int seg, int bus, int dev, int fn,
          int reg, int len, u32 value);
# 121 "./arch/x86/include/asm/pci.h" 2



# 1 "include/asm-generic/pci.h" 1
# 10 "include/asm-generic/pci.h"
static inline __attribute__((no_instrument_function)) int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
{
 return channel ? 15 : 14;
}
# 125 "./arch/x86/include/asm/pci.h" 2



static inline __attribute__((no_instrument_function)) int __pcibus_to_node(const struct pci_bus *bus)
{
 const struct pci_sysdata *sd = bus->sysdata;

 return sd->node;
}

static inline __attribute__((no_instrument_function)) const struct cpumask *
cpumask_of_pcibus(const struct pci_bus *bus)
{
 int node;

 node = __pcibus_to_node(bus);
 return (node == -1) ? ((const struct cpumask *)&__cpu_online_mask) :
         cpumask_of_node(node);
}


struct pci_setup_rom {
 struct setup_data data;
 uint16_t vendor;
 uint16_t devid;
 uint64_t pcilen;
 unsigned long segment;
 unsigned long bus;
 unsigned long device;
 unsigned long function;
 uint8_t romdata[0];
};
# 1513 "include/linux/pci.h" 2
# 1535 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) void *pci_get_drvdata(struct pci_dev *pdev)
{
 return dev_get_drvdata(&pdev->dev);
}

static inline __attribute__((no_instrument_function)) void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
 dev_set_drvdata(&pdev->dev, data);
}




static inline __attribute__((no_instrument_function)) const char *pci_name(const struct pci_dev *pdev)
{
 return dev_name(&pdev->dev);
}






static inline __attribute__((no_instrument_function)) void pci_resource_to_user(const struct pci_dev *dev, int bar,
  const struct resource *rsrc, resource_size_t *start,
  resource_size_t *end)
{
 *start = rsrc->start;
 *end = rsrc->end;
}
# 1575 "include/linux/pci.h"
struct pci_fixup {
 u16 vendor;
 u16 device;
 u32 class;
 unsigned int class_shift;
 void (*hook)(struct pci_dev *dev);
};

enum pci_fixup_pass {
 pci_fixup_early,
 pci_fixup_header,
 pci_fixup_final,
 pci_fixup_enable,
 pci_fixup_resume,
 pci_fixup_suspend,
 pci_fixup_resume_early,
 pci_fixup_suspend_late,
};
# 1668 "include/linux/pci.h"
void pci_fixup_device(enum pci_fixup_pass pass, struct pci_dev *dev);
int pci_dev_specific_acs_enabled(struct pci_dev *dev, u16 acs_flags);
int pci_dev_specific_enable_acs(struct pci_dev *dev);
# 1685 "include/linux/pci.h"
void *pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen);
void pcim_iounmap(struct pci_dev *pdev, void *addr);
void * const *pcim_iomap_table(struct pci_dev *pdev);
int pcim_iomap_regions(struct pci_dev *pdev, int mask, const char *name);
int pcim_iomap_regions_request_all(struct pci_dev *pdev, int mask,
       const char *name);
void pcim_iounmap_regions(struct pci_dev *pdev, int mask);

extern int pci_pci_problems;
# 1702 "include/linux/pci.h"
extern unsigned long pci_cardbus_io_size;
extern unsigned long pci_cardbus_mem_size;
extern u8 pci_dfl_cache_line_size;
extern u8 pci_cache_line_size;

extern unsigned long pci_hotplug_io_size;
extern unsigned long pci_hotplug_mem_size;


void pcibios_disable_device(struct pci_dev *dev);
void pcibios_set_master(struct pci_dev *dev);
int pcibios_set_pcie_reset_state(struct pci_dev *dev,
     enum pcie_reset_state state);
int pcibios_add_device(struct pci_dev *dev);
void pcibios_release_device(struct pci_dev *dev);
void pcibios_penalize_isa_irq(int irq, int active);
int pcibios_alloc_irq(struct pci_dev *dev);
void pcibios_free_irq(struct pci_dev *dev);


extern struct dev_pm_ops pcibios_pm_ops;



void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_mmcfg_early_init(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) pci_mmcfg_late_init(void);





int pci_ext_cfg_avail(void);

void *pci_ioremap_bar(struct pci_dev *pdev, int bar);
void *pci_ioremap_wc_bar(struct pci_dev *pdev, int bar);
# 1752 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) int pci_iov_virtfn_bus(struct pci_dev *dev, int id)
{
 return -38;
}
static inline __attribute__((no_instrument_function)) int pci_iov_virtfn_devfn(struct pci_dev *dev, int id)
{
 return -38;
}
static inline __attribute__((no_instrument_function)) int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn)
{ return -19; }
static inline __attribute__((no_instrument_function)) int pci_iov_add_virtfn(struct pci_dev *dev, int id, int reset)
{
 return -38;
}
static inline __attribute__((no_instrument_function)) void pci_iov_remove_virtfn(struct pci_dev *dev,
      int id, int reset) { }
static inline __attribute__((no_instrument_function)) void pci_disable_sriov(struct pci_dev *dev) { }
static inline __attribute__((no_instrument_function)) int pci_num_vf(struct pci_dev *dev) { return 0; }
static inline __attribute__((no_instrument_function)) int pci_vfs_assigned(struct pci_dev *dev)
{ return 0; }
static inline __attribute__((no_instrument_function)) int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs)
{ return 0; }
static inline __attribute__((no_instrument_function)) int pci_sriov_get_totalvfs(struct pci_dev *dev)
{ return 0; }
static inline __attribute__((no_instrument_function)) resource_size_t pci_iov_resource_size(struct pci_dev *dev, int resno)
{ return 0; }



void pci_hp_create_module_link(struct pci_slot *pci_slot);
void pci_hp_remove_module_link(struct pci_slot *pci_slot);
# 1796 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) int pci_pcie_cap(struct pci_dev *dev)
{
 return dev->pcie_cap;
}







static inline __attribute__((no_instrument_function)) bool pci_is_pcie(struct pci_dev *dev)
{
 return pci_pcie_cap(dev);
}





static inline __attribute__((no_instrument_function)) u16 pcie_caps_reg(const struct pci_dev *dev)
{
 return dev->pcie_flags_reg;
}





static inline __attribute__((no_instrument_function)) int pci_pcie_type(const struct pci_dev *dev)
{
 return (pcie_caps_reg(dev) & 0x00f0) >> 4;
}

void pci_request_acs(void);
bool pci_acs_enabled(struct pci_dev *pdev, u16 acs_flags);
bool pci_acs_path_enabled(struct pci_dev *start,
     struct pci_dev *end, u16 acs_flags);
# 1872 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) u16 pci_vpd_lrdt_size(const u8 *lrdt)
{
 return (u16)lrdt[1] + ((u16)lrdt[2] << 8);
}







static inline __attribute__((no_instrument_function)) u16 pci_vpd_lrdt_tag(const u8 *lrdt)
{
    return (u16)(lrdt[0] & 0x7f);
}







static inline __attribute__((no_instrument_function)) u8 pci_vpd_srdt_size(const u8 *srdt)
{
 return (*srdt) & 0x07;
}







static inline __attribute__((no_instrument_function)) u8 pci_vpd_srdt_tag(const u8 *srdt)
{
 return ((*srdt) & 0x78) >> 3;
}







static inline __attribute__((no_instrument_function)) u8 pci_vpd_info_field_size(const u8 *info_field)
{
 return info_field[2];
}
# 1931 "include/linux/pci.h"
int pci_vpd_find_tag(const u8 *buf, unsigned int off, unsigned int len, u8 rdt);
# 1943 "include/linux/pci.h"
int pci_vpd_find_info_keyword(const u8 *buf, unsigned int off,
         unsigned int len, const char *kw);
# 1971 "include/linux/pci.h"
static inline __attribute__((no_instrument_function)) void pci_set_of_node(struct pci_dev *dev) { }
static inline __attribute__((no_instrument_function)) void pci_release_of_node(struct pci_dev *dev) { }
static inline __attribute__((no_instrument_function)) void pci_set_bus_of_node(struct pci_bus *bus) { }
static inline __attribute__((no_instrument_function)) void pci_release_bus_of_node(struct pci_bus *bus) { }
static inline __attribute__((no_instrument_function)) struct device_node *
pci_device_to_OF_node(const struct pci_dev *pdev) { return ((void *)0); }
static inline __attribute__((no_instrument_function)) struct irq_domain *
pci_host_bridge_of_msi_domain(struct pci_bus *bus) { return ((void *)0); }



struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *bus);

void
pci_msi_register_fwnode_provider(struct fwnode_handle *(*fn)(struct device *));
# 1998 "include/linux/pci.h"
void pci_add_dma_alias(struct pci_dev *dev, u8 devfn);
bool pci_devs_are_dma_aliases(struct pci_dev *dev1, struct pci_dev *dev2);
int pci_for_each_dma_alias(struct pci_dev *pdev,
      int (*fn)(struct pci_dev *pdev,
         u16 alias, void *data), void *data);


static inline __attribute__((no_instrument_function)) void pci_set_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((no_instrument_function)) void pci_clear_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((no_instrument_function)) bool pci_is_dev_assigned(struct pci_dev *pdev)
{
 return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
}







static inline __attribute__((no_instrument_function)) bool pci_ari_enabled(struct pci_bus *bus)
{
 return bus->self && bus->self->ari_enabled;
}


# 1 "include/linux/pci-dma-compat.h" 1
# 15 "include/linux/pci-dma-compat.h"
static inline __attribute__((no_instrument_function)) void *
pci_alloc_consistent(struct pci_dev *hwdev, size_t size,
       dma_addr_t *dma_handle)
{
 return dma_alloc_coherent(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}

static inline __attribute__((no_instrument_function)) void *
pci_zalloc_consistent(struct pci_dev *hwdev, size_t size,
        dma_addr_t *dma_handle)
{
 return dma_zalloc_coherent(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev,
       size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));
}

static inline __attribute__((no_instrument_function)) void
pci_free_consistent(struct pci_dev *hwdev, size_t size,
      void *vaddr, dma_addr_t dma_handle)
{
 dma_free_coherent(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, size, vaddr, dma_handle);
}

static inline __attribute__((no_instrument_function)) dma_addr_t
pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
 return dma_map_single_attrs(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, ptr, size, (enum dma_data_direction)direction, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void
pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr,
   size_t size, int direction)
{
 dma_unmap_single_attrs(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, dma_addr, size, (enum dma_data_direction)direction, ((void *)0));
}

static inline __attribute__((no_instrument_function)) dma_addr_t
pci_map_page(struct pci_dev *hwdev, struct page *page,
      unsigned long offset, size_t size, int direction)
{
 return dma_map_page(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, page, offset, size, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) void
pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address,
        size_t size, int direction)
{
 dma_unmap_page(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, dma_address, size, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) int
pci_map_sg(struct pci_dev *hwdev, struct scatterlist *sg,
    int nents, int direction)
{
 return dma_map_sg_attrs(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, sg, nents, (enum dma_data_direction)direction, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void
pci_unmap_sg(struct pci_dev *hwdev, struct scatterlist *sg,
      int nents, int direction)
{
 dma_unmap_sg_attrs(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, sg, nents, (enum dma_data_direction)direction, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void
pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_cpu(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) void
pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_device(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) void
pci_dma_sync_sg_for_cpu(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_cpu(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) void
pci_dma_sync_sg_for_device(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_device(hwdev == ((void *)0) ? ((void *)0) : &hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((no_instrument_function)) int
pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
 return dma_mapping_error(&pdev->dev, dma_addr);
}


static inline __attribute__((no_instrument_function)) int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_mask(&dev->dev, mask);
}

static inline __attribute__((no_instrument_function)) int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_coherent_mask(&dev->dev, mask);
}

static inline __attribute__((no_instrument_function)) int pci_set_dma_max_seg_size(struct pci_dev *dev,
        unsigned int size)
{
 return dma_set_max_seg_size(&dev->dev, size);
}

static inline __attribute__((no_instrument_function)) int pci_set_dma_seg_boundary(struct pci_dev *dev,
        unsigned long mask)
{
 return dma_set_seg_boundary(&dev->dev, mask);
}
# 2031 "include/linux/pci.h" 2
# 25 "drivers/net/wireless/ath/ath10k/core.h" 2



# 1 "drivers/net/wireless/ath/ath10k/htt.h" 1
# 22 "drivers/net/wireless/ath/ath10k/htt.h"
# 1 "include/linux/interrupt.h" 1
# 10 "include/linux/interrupt.h"
# 1 "include/linux/irqreturn.h" 1
# 10 "include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 11 "include/linux/interrupt.h" 2

# 1 "include/linux/hardirq.h" 1





# 1 "include/linux/ftrace_irq.h" 1
# 9 "include/linux/ftrace_irq.h"
static inline __attribute__((no_instrument_function)) void ftrace_nmi_enter(void) { }
static inline __attribute__((no_instrument_function)) void ftrace_nmi_exit(void) { }
# 7 "include/linux/hardirq.h" 2
# 1 "include/linux/vtime.h" 1



# 1 "include/linux/context_tracking_state.h" 1




# 1 "include/linux/static_key.h" 1
# 6 "include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 43 "include/linux/context_tracking_state.h"
static inline __attribute__((no_instrument_function)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((no_instrument_function)) bool context_tracking_active(void) { return false; }
static inline __attribute__((no_instrument_function)) bool context_tracking_is_enabled(void) { return false; }
static inline __attribute__((no_instrument_function)) bool context_tracking_cpu_is_enabled(void) { return false; }
# 5 "include/linux/vtime.h" 2





struct task_struct;
# 43 "include/linux/vtime.h"
static inline __attribute__((no_instrument_function)) bool vtime_accounting_cpu_enabled(void) { return false; }
# 80 "include/linux/vtime.h"
static inline __attribute__((no_instrument_function)) void vtime_task_switch(struct task_struct *prev) { }
static inline __attribute__((no_instrument_function)) void vtime_account_system(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_account_user(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_account_irq_enter(struct task_struct *tsk) { }
# 106 "include/linux/vtime.h"
static inline __attribute__((no_instrument_function)) void vtime_account_irq_exit(struct task_struct *tsk)
{

 vtime_account_system(tsk);
}
static inline __attribute__((no_instrument_function)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((no_instrument_function)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }





static inline __attribute__((no_instrument_function)) void irqtime_account_irq(struct task_struct *tsk) { }


static inline __attribute__((no_instrument_function)) void account_irq_enter_time(struct task_struct *tsk)
{
 vtime_account_irq_enter(tsk);
 irqtime_account_irq(tsk);
}

static inline __attribute__((no_instrument_function)) void account_irq_exit_time(struct task_struct *tsk)
{
 vtime_account_irq_exit(tsk);
 irqtime_account_irq(tsk);
}
# 8 "include/linux/hardirq.h" 2
# 1 "./arch/x86/include/asm/hardirq.h" 1




# 1 "include/linux/irq.h" 1
# 18 "include/linux/irq.h"
# 1 "include/linux/irqhandler.h" 1
# 9 "include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
typedef void (*irq_preflow_handler_t)(struct irq_data *data);
# 19 "include/linux/irq.h" 2







# 1 "./arch/x86/include/asm/irq.h" 1
# 13 "./arch/x86/include/asm/irq.h"
static inline __attribute__((no_instrument_function)) int irq_canonicalize(int irq)
{
 return ((irq == 2) ? 9 : irq);
}
# 26 "./arch/x86/include/asm/irq.h"
struct irq_desc;



extern int check_irq_vectors_for_cpu_disable(void);
extern void fixup_irqs(void);
extern void irq_force_complete_move(struct irq_desc *desc);



extern void kvm_set_posted_intr_wakeup_handler(void (*handler)(void));


extern void (*x86_platform_ipi_callback)(void);
extern void native_init_IRQ(void);

extern bool handle_irq(struct irq_desc *desc, struct pt_regs *regs);

extern __attribute__((externally_visible)) unsigned int do_IRQ(struct pt_regs *regs);


extern unsigned long used_vectors[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
extern int vector_used_by_percpu_irq(unsigned int vector);

extern void init_ISA_irqs(void);


void arch_trigger_all_cpu_backtrace(bool);
# 27 "include/linux/irq.h" 2

# 1 "./arch/x86/include/asm/irq_regs.h" 1
# 14 "./arch/x86/include/asm/irq_regs.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs *) irq_regs;

static inline __attribute__((no_instrument_function)) struct pt_regs *get_irq_regs(void)
{
 return ({ typeof(irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(irq_regs)) { case 1: pscr_ret__ = ({ typeof(irq_regs) pfo_ret__; switch (sizeof(irq_regs)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (irq_regs)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(irq_regs) pfo_ret__; switch (sizeof(irq_regs)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (irq_regs)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(irq_regs) pfo_ret__; switch (sizeof(irq_regs)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (irq_regs)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(irq_regs) pfo_ret__; switch (sizeof(irq_regs)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (irq_regs)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (irq_regs)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}

static inline __attribute__((no_instrument_function)) struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = get_irq_regs();
 do { do { const void *__vpp_verify = (typeof((&(irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(irq_regs)) { case 1: do { typedef typeof((irq_regs)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } switch (sizeof((irq_regs))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "qi" ((pto_T__)(new_regs))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "re" ((pto_T__)(new_regs))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((irq_regs)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } switch (sizeof((irq_regs))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "qi" ((pto_T__)(new_regs))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "re" ((pto_T__)(new_regs))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((irq_regs)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } switch (sizeof((irq_regs))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "qi" ((pto_T__)(new_regs))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "re" ((pto_T__)(new_regs))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((irq_regs)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } switch (sizeof((irq_regs))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "qi" ((pto_T__)(new_regs))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "ri" ((pto_T__)(new_regs))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((irq_regs)) : "re" ((pto_T__)(new_regs))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);

 return old_regs;
}
# 29 "include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
enum irqchip_irq_state;
# 77 "include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
};
# 121 "include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 142 "include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;

 unsigned int node;

 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;



};
# 169 "include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;

 void *chip_data;
};
# 201 "include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
};



static inline __attribute__((no_instrument_function)) bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline __attribute__((no_instrument_function)) bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline __attribute__((no_instrument_function)) bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline __attribute__((no_instrument_function)) bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline __attribute__((no_instrument_function)) void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline __attribute__((no_instrument_function)) u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}




static inline __attribute__((no_instrument_function)) void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
}

static inline __attribute__((no_instrument_function)) bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}

static inline __attribute__((no_instrument_function)) bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline __attribute__((no_instrument_function)) bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline __attribute__((no_instrument_function)) bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline __attribute__((no_instrument_function)) bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline __attribute__((no_instrument_function)) bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline __attribute__((no_instrument_function)) bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline __attribute__((no_instrument_function)) bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((no_instrument_function)) void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((no_instrument_function)) void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}



static inline __attribute__((no_instrument_function)) irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 356 "include/linux/irq.h"
struct irq_chip {
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);

 void (*irq_cpu_online)(struct irq_data *data);
 void (*irq_cpu_offline)(struct irq_data *data);

 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 unsigned long flags;
};
# 416 "include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
};

# 1 "include/linux/irqdesc.h" 1
# 10 "include/linux/irqdesc.h"
struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 49 "include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;



 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;

 const struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;

 cpumask_var_t pending_mask;


 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;

 unsigned int nr_actions;
 unsigned int no_suspend_depth;
 unsigned int cond_suspend_depth;
 unsigned int force_resume_depth;


 struct proc_dir_entry *dir;


 struct callback_head rcu;

 int parent_irq;
 struct module *owner;
 const char *name;
} __attribute__((__aligned__(1 << (6))));


extern void irq_lock_sparse(void);
extern void irq_unlock_sparse(void);






static inline __attribute__((no_instrument_function)) struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ const typeof( ((struct irq_desc *)0)->irq_common_data ) *__mptr = (data->common); (struct irq_desc *)( (char *)__mptr - __builtin_offsetof(struct irq_desc, irq_common_data) );});
}

static inline __attribute__((no_instrument_function)) unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline __attribute__((no_instrument_function)) struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline __attribute__((no_instrument_function)) struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline __attribute__((no_instrument_function)) void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline __attribute__((no_instrument_function)) void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}

static inline __attribute__((no_instrument_function)) struct msi_desc *irq_desc_get_msi_desc(struct irq_desc *desc)
{
 return desc->irq_common_data.msi_desc;
}





static inline __attribute__((no_instrument_function)) void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int generic_handle_irq(unsigned int irq);
# 170 "include/linux/irqdesc.h"
static inline __attribute__((no_instrument_function)) int irq_desc_has_action(struct irq_desc *desc)
{
 return desc->action != ((void *)0);
}

static inline __attribute__((no_instrument_function)) int irq_has_action(unsigned int irq)
{
 return irq_desc_has_action(irq_to_desc(irq));
}
# 190 "include/linux/irqdesc.h"
static inline __attribute__((no_instrument_function)) void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 210 "include/linux/irqdesc.h"
static inline __attribute__((no_instrument_function)) void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

static inline __attribute__((no_instrument_function)) int irq_balancing_disabled(unsigned int irq)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 return desc->status_use_accessors & (IRQ_PER_CPU | IRQ_NO_BALANCING);
}

static inline __attribute__((no_instrument_function)) int irq_is_percpu(unsigned int irq)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 return desc->status_use_accessors & IRQ_PER_CPU;
}

static inline __attribute__((no_instrument_function)) void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *class)
{
 struct irq_desc *desc = irq_to_desc(irq);

 if (desc)
  do { (void)(class); } while (0);
}
# 427 "include/linux/irq.h" 2




# 1 "./arch/x86/include/asm/hw_irq.h" 1
# 21 "./arch/x86/include/asm/hw_irq.h"
# 1 "include/linux/profile.h" 1
# 9 "include/linux/profile.h"
# 1 "./arch/x86/include/uapi/asm/errno.h" 1
# 10 "include/linux/profile.h" 2






struct proc_dir_entry;
struct pt_regs;
struct notifier_block;


void create_prof_cpu_mask(void);
int create_proc_profile(void);
# 34 "include/linux/profile.h"
enum profile_type {
 PROFILE_TASK_EXIT,
 PROFILE_MUNMAP
};



extern int prof_on __attribute__((__section__(".data..read_mostly")));


int profile_init(void);
int profile_setup(char *str);
void profile_tick(int type);
int setup_profiling_timer(unsigned int multiplier);




void profile_hits(int type, void *ip, unsigned int nr_hits);




static inline __attribute__((no_instrument_function)) void profile_hit(int type, void *ip)
{



 if (__builtin_expect(!!(prof_on == type), 0))
  profile_hits(type, ip, 1);
}

struct task_struct;
struct mm_struct;


void profile_task_exit(struct task_struct * task);




int profile_handoff_task(struct task_struct * task);


void profile_munmap(unsigned long addr);

int task_handoff_register(struct notifier_block * n);
int task_handoff_unregister(struct notifier_block * n);

int profile_event_register(enum profile_type, struct notifier_block * n);
int profile_event_unregister(enum profile_type, struct notifier_block * n);

struct pt_regs;
# 22 "./arch/x86/include/asm/hw_irq.h" 2




# 1 "./arch/x86/include/asm/sections.h" 1



# 1 "include/asm-generic/sections.h" 1
# 29 "include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];


extern char __ctors_start[], __ctors_end[];

extern __attribute__((externally_visible)) const void __nosave_begin, __nosave_end;
# 54 "include/asm-generic/sections.h"
static inline __attribute__((no_instrument_function)) int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline __attribute__((no_instrument_function)) int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 78 "include/asm-generic/sections.h"
static inline __attribute__((no_instrument_function)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 95 "include/asm-generic/sections.h"
static inline __attribute__((no_instrument_function)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 112 "include/asm-generic/sections.h"
static inline __attribute__((no_instrument_function)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 126 "include/asm-generic/sections.h"
static inline __attribute__((no_instrument_function)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 5 "./arch/x86/include/asm/sections.h" 2


extern char __brk_base[], __brk_limit[];
extern struct exception_table_entry __stop___ex_table[];


extern char __end_rodata_hpage_align[];
# 27 "./arch/x86/include/asm/hw_irq.h" 2


extern void apic_timer_interrupt(void);
extern void x86_platform_ipi(void);
extern void kvm_posted_intr_ipi(void);
extern void kvm_posted_intr_wakeup_ipi(void);
extern void error_interrupt(void);
extern void irq_work_interrupt(void);

extern void spurious_interrupt(void);
extern void thermal_interrupt(void);
extern void reschedule_interrupt(void);

extern void irq_move_cleanup_interrupt(void);
extern void reboot_interrupt(void);
extern void threshold_interrupt(void);
extern void deferred_error_interrupt(void);

extern void call_function_interrupt(void);
extern void call_function_single_interrupt(void);



extern void trace_apic_timer_interrupt(void);
extern void trace_x86_platform_ipi(void);
extern void trace_error_interrupt(void);
extern void trace_irq_work_interrupt(void);
extern void trace_spurious_interrupt(void);
extern void trace_thermal_interrupt(void);
extern void trace_reschedule_interrupt(void);
extern void trace_threshold_interrupt(void);
extern void trace_deferred_error_interrupt(void);
extern void trace_call_function_interrupt(void);
extern void trace_call_function_single_interrupt(void);







struct irq_data;
struct pci_dev;
struct msi_desc;

enum irq_alloc_type {
 X86_IRQ_ALLOC_TYPE_IOAPIC = 1,
 X86_IRQ_ALLOC_TYPE_HPET,
 X86_IRQ_ALLOC_TYPE_MSI,
 X86_IRQ_ALLOC_TYPE_MSIX,
 X86_IRQ_ALLOC_TYPE_DMAR,
 X86_IRQ_ALLOC_TYPE_UV,
};

struct irq_alloc_info {
 enum irq_alloc_type type;
 u32 flags;
 const struct cpumask *mask;
 union {
  int unused;

  struct {
   int hpet_id;
   int hpet_index;
   void *hpet_data;
  };


  struct {
   struct pci_dev *msi_dev;
   irq_hw_number_t msi_hwirq;
  };


  struct {
   int ioapic_id;
   int ioapic_pin;
   int ioapic_node;
   u32 ioapic_trigger : 1;
   u32 ioapic_polarity : 1;
   u32 ioapic_valid : 1;
   struct IO_APIC_route_entry *ioapic_entry;
  };


  struct {
   int dmar_id;
   void *dmar_data;
  };


  struct {
   int ht_pos;
   int ht_idx;
   struct pci_dev *ht_dev;
   void *ht_update;
  };
# 138 "./arch/x86/include/asm/hw_irq.h"
 };
};

struct irq_cfg {
 unsigned int dest_apicid;
 u8 vector;
 u8 old_vector;
};

extern struct irq_cfg *irq_cfg(unsigned int irq);
extern struct irq_cfg *irqd_cfg(struct irq_data *irq_data);
extern void lock_vector_lock(void);
extern void unlock_vector_lock(void);
extern void setup_vector_irq(int cpu);

extern void send_cleanup_vector(struct irq_cfg *);
extern void irq_complete_move(struct irq_cfg *cfg);





extern void apic_ack_edge(struct irq_data *data);






extern atomic_t irq_err_count;
extern atomic_t irq_mis_count;

extern void elcr_set_level_irq(unsigned int irq);

extern char irq_entries_start[];







typedef struct irq_desc* vector_irq_t[256];
extern __attribute__((section(".data..percpu" ""))) __typeof__(vector_irq_t) vector_irq;
# 432 "include/linux/irq.h" 2
# 443 "include/linux/irq.h"
struct irqaction;
extern int setup_irq(unsigned int irq, struct irqaction *new);
extern void remove_irq(unsigned int irq, struct irqaction *act);
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);

extern void irq_cpu_online(void);
extern void irq_cpu_offline(void);
extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);

extern void irq_migrate_all_off_this_cpu(void);


void irq_move_irq(struct irq_data *data);
void irq_move_masked_irq(struct irq_data *data);





extern int no_irq_affinity;




static inline __attribute__((no_instrument_function)) int irq_set_parent(int irq, int parent_irq)
{
 return 0;
}






extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);

extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline __attribute__((no_instrument_function)) void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, ((void *)0));
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline __attribute__((no_instrument_function)) void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, ((void *)0));
}






static inline __attribute__((no_instrument_function)) void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, ((void *)0));
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline __attribute__((no_instrument_function)) void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline __attribute__((no_instrument_function)) void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline __attribute__((no_instrument_function)) void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline __attribute__((no_instrument_function)) void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline __attribute__((no_instrument_function)) void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline __attribute__((no_instrument_function)) void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline __attribute__((no_instrument_function)) void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline __attribute__((no_instrument_function)) void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline __attribute__((no_instrument_function)) struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline __attribute__((no_instrument_function)) void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : ((void *)0);
}

static inline __attribute__((no_instrument_function)) void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline __attribute__((no_instrument_function)) void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : ((void *)0);
}

static inline __attribute__((no_instrument_function)) void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline __attribute__((no_instrument_function)) struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline __attribute__((no_instrument_function)) u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline __attribute__((no_instrument_function)) int irq_common_data_get_node(struct irq_common_data *d)
{

 return d->node;



}

static inline __attribute__((no_instrument_function)) int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline __attribute__((no_instrument_function)) struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
  struct module *owner);
# 722 "include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline __attribute__((no_instrument_function)) void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 757 "include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 780 "include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 822 "include/linux/irq.h"
struct irq_chip_generic {
 raw_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[0];
};
# 855 "include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 872 "include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[0];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_reg_and_ack(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);
int irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
       int num_ct, const char *name,
       irq_flow_handler_t handler,
       unsigned int clr, unsigned int set,
       enum irq_gc_flags flags);


static inline __attribute__((no_instrument_function)) struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ const typeof( ((struct irq_chip_type *)0)->chip ) *__mptr = (d->chip); (struct irq_chip_type *)( (char *)__mptr - __builtin_offsetof(struct irq_chip_type, chip) );});
}




static inline __attribute__((no_instrument_function)) void irq_gc_lock(struct irq_chip_generic *gc)
{
 _raw_spin_lock(&gc->lock);
}

static inline __attribute__((no_instrument_function)) void irq_gc_unlock(struct irq_chip_generic *gc)
{
 __raw_spin_unlock(&gc->lock);
}





static inline __attribute__((no_instrument_function)) void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  writel(val, gc->reg_base + reg_offset);
}

static inline __attribute__((no_instrument_function)) u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return readl(gc->reg_base + reg_offset);
}



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 6 "./arch/x86/include/asm/hardirq.h" 2

typedef struct {
 unsigned int __softirq_pending;
 unsigned int __nmi_count;

 unsigned int apic_timer_irqs;
 unsigned int irq_spurious_count;
 unsigned int icr_read_retry_count;


 unsigned int kvm_posted_intr_ipis;
 unsigned int kvm_posted_intr_wakeup_ipis;

 unsigned int x86_platform_ipis;
 unsigned int apic_perf_irqs;
 unsigned int apic_irq_work_irqs;

 unsigned int irq_resched_count;
 unsigned int irq_call_count;




 unsigned int irq_tlb_count;


 unsigned int irq_thermal_count;


 unsigned int irq_threshold_count;


 unsigned int irq_deferred_error_count;




} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << (6)))));
# 59 "./arch/x86/include/asm/hardirq.h"
extern void ack_bad_irq(unsigned int irq);

extern u64 arch_irq_stat_cpu(unsigned int cpu);


extern u64 arch_irq_stat(void);
# 9 "include/linux/hardirq.h" 2


extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);
# 25 "include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 45 "include/linux/hardirq.h"
extern void irq_enter(void);
# 60 "include/linux/hardirq.h"
extern void irq_exit(void);
# 13 "include/linux/interrupt.h" 2
# 87 "include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 110 "include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} __attribute__((__aligned__(1 << (6))));

extern irqreturn_t no_action(int cpl, void *dev_id);
# 138 "include/linux/interrupt.h"
extern int __attribute__((warn_unused_result))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((warn_unused_result))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((warn_unused_result))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id);

extern void free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

struct device;

extern int __attribute__((warn_unused_result))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((warn_unused_result))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 202 "include/linux/interrupt.h"
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
# 227 "include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};



extern cpumask_var_t irq_default_affinity;


extern int __irq_set_affinity(unsigned int irq, const struct cpumask *cpumask,
         bool force);
# 250 "include/linux/interrupt.h"
static inline __attribute__((no_instrument_function)) int
irq_set_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, false);
}
# 267 "include/linux/interrupt.h"
static inline __attribute__((no_instrument_function)) int
irq_force_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, true);
}

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
# 324 "include/linux/interrupt.h"
static inline __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((no_instrument_function)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline __attribute__((no_instrument_function)) void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline __attribute__((no_instrument_function)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((no_instrument_function)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((no_instrument_function)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);


extern bool force_irqthreads;
# 419 "include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,

 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

 void do_softirq(void);
 void __do_softirq(void);


void do_softirq_own_stack(void);







extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((no_instrument_function)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) pfo_ret__; switch (sizeof(ksoftirqd)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (ksoftirqd)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) pfo_ret__; switch (sizeof(ksoftirqd)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (ksoftirqd)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) pfo_ret__; switch (sizeof(ksoftirqd)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (ksoftirqd)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) pfo_ret__; switch (sizeof(ksoftirqd)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (ksoftirqd)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (ksoftirqd)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 498 "include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 void (*func)(unsigned long);
 unsigned long data;
};
# 514 "include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline __attribute__((no_instrument_function)) int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline __attribute__((no_instrument_function)) void tasklet_unlock(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline __attribute__((no_instrument_function)) void tasklet_unlock_wait(struct tasklet_struct *t)
{
 while ((__builtin_constant_p((TASKLET_STATE_RUN)) ? constant_test_bit((TASKLET_STATE_RUN), (&(t)->state)) : variable_test_bit((TASKLET_STATE_RUN), (&(t)->state)))) { __asm__ __volatile__("": : :"memory"); }
}






extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((no_instrument_function)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((no_instrument_function)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

extern void __tasklet_hi_schedule_first(struct tasklet_struct *t);







static inline __attribute__((no_instrument_function)) void tasklet_hi_schedule_first(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule_first(t);
}


static inline __attribute__((no_instrument_function)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((no_instrument_function)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 asm volatile("mfence":::"memory");
}

static inline __attribute__((no_instrument_function)) void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);

struct tasklet_hrtimer {
 struct hrtimer timer;
 struct tasklet_struct tasklet;
 enum hrtimer_restart (*function)(struct hrtimer *);
};

extern void
tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,
       enum hrtimer_restart (*function)(struct hrtimer *),
       clockid_t which_clock, enum hrtimer_mode mode);

static inline __attribute__((no_instrument_function))
void tasklet_hrtimer_start(struct tasklet_hrtimer *ttimer, ktime_t time,
      const enum hrtimer_mode mode)
{
 hrtimer_start(&ttimer->timer, time, mode);
}

static inline __attribute__((no_instrument_function))
void tasklet_hrtimer_cancel(struct tasklet_hrtimer *ttimer)
{
 hrtimer_cancel(&ttimer->timer);
 tasklet_kill(&ttimer->tasklet);
}
# 664 "include/linux/interrupt.h"
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);






struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 23 "drivers/net/wireless/ath/ath10k/htt.h" 2

# 1 "include/linux/hashtable.h" 1
# 12 "include/linux/hashtable.h"
# 1 "include/linux/hash.h" 1
# 60 "include/linux/hash.h"
static inline __attribute__((no_instrument_function)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((no_instrument_function)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((no_instrument_function)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((no_instrument_function)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 13 "include/linux/hashtable.h" 2
# 33 "include/linux/hashtable.h"
static inline __attribute__((no_instrument_function)) void __hash_init(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  ((&ht[i])->first = ((void *)0));
}
# 75 "include/linux/hashtable.h"
static inline __attribute__((no_instrument_function)) bool hash_hashed(struct hlist_node *node)
{
 return !hlist_unhashed(node);
}

static inline __attribute__((no_instrument_function)) bool __hash_empty(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  if (!hlist_empty(&ht[i]))
   return false;

 return true;
}
# 104 "include/linux/hashtable.h"
static inline __attribute__((no_instrument_function)) void hash_del(struct hlist_node *node)
{
 hlist_del_init(node);
}





static inline __attribute__((no_instrument_function)) void hash_del_rcu(struct hlist_node *node)
{
 hlist_del_init_rcu(node);
}
# 25 "drivers/net/wireless/ath/ath10k/htt.h" 2
# 1 "include/linux/kfifo.h" 1
# 58 "include/linux/kfifo.h"
struct __kfifo {
 unsigned int in;
 unsigned int out;
 unsigned int mask;
 unsigned int esize;
 void *data;
};
# 97 "include/linux/kfifo.h"
struct kfifo { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[0]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
# 108 "include/linux/kfifo.h"
struct kfifo_rec_ptr_1 { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[1]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
struct kfifo_rec_ptr_2 { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[2]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
# 175 "include/linux/kfifo.h"
static inline __attribute__((no_instrument_function)) unsigned int __attribute__((warn_unused_result))
__kfifo_uint_must_check_helper(unsigned int val)
{
 return val;
}

static inline __attribute__((no_instrument_function)) int __attribute__((warn_unused_result))
__kfifo_int_must_check_helper(int val)
{
 return val;
}
# 771 "include/linux/kfifo.h"
extern int __kfifo_alloc(struct __kfifo *fifo, unsigned int size,
 size_t esize, gfp_t gfp_mask);

extern void __kfifo_free(struct __kfifo *fifo);

extern int __kfifo_init(struct __kfifo *fifo, void *buffer,
 unsigned int size, size_t esize);

extern unsigned int __kfifo_in(struct __kfifo *fifo,
 const void *buf, unsigned int len);

extern unsigned int __kfifo_out(struct __kfifo *fifo,
 void *buf, unsigned int len);

extern int __kfifo_from_user(struct __kfifo *fifo,
 const void *from, unsigned long len, unsigned int *copied);

extern int __kfifo_to_user(struct __kfifo *fifo,
 void *to, unsigned long len, unsigned int *copied);

extern unsigned int __kfifo_dma_in_prepare(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len);

extern unsigned int __kfifo_dma_out_prepare(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len);

extern unsigned int __kfifo_out_peek(struct __kfifo *fifo,
 void *buf, unsigned int len);

extern unsigned int __kfifo_in_r(struct __kfifo *fifo,
 const void *buf, unsigned int len, size_t recsize);

extern unsigned int __kfifo_out_r(struct __kfifo *fifo,
 void *buf, unsigned int len, size_t recsize);

extern int __kfifo_from_user_r(struct __kfifo *fifo,
 const void *from, unsigned long len, unsigned int *copied,
 size_t recsize);

extern int __kfifo_to_user_r(struct __kfifo *fifo, void *to,
 unsigned long len, unsigned int *copied, size_t recsize);

extern unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

extern void __kfifo_dma_in_finish_r(struct __kfifo *fifo,
 unsigned int len, size_t recsize);

extern unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

extern void __kfifo_dma_out_finish_r(struct __kfifo *fifo, size_t recsize);

extern unsigned int __kfifo_len_r(struct __kfifo *fifo, size_t recsize);

extern void __kfifo_skip_r(struct __kfifo *fifo, size_t recsize);

extern unsigned int __kfifo_out_peek_r(struct __kfifo *fifo,
 void *buf, unsigned int len, size_t recsize);

extern unsigned int __kfifo_max_r(unsigned int len, size_t recsize);
# 26 "drivers/net/wireless/ath/ath10k/htt.h" 2
# 1 "include/net/mac80211.h" 1
# 22 "include/net/mac80211.h"
# 1 "include/linux/ieee80211.h" 1
# 23 "include/linux/ieee80211.h"
# 1 "./arch/x86/include/asm/unaligned.h" 1







# 1 "include/linux/unaligned/access_ok.h" 1






static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u16 get_unaligned_le16(const void *p)
{
 return __le16_to_cpup((__le16 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 get_unaligned_le32(const void *p)
{
 return __le32_to_cpup((__le32 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u64 get_unaligned_le64(const void *p)
{
 return __le64_to_cpup((__le64 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u16 get_unaligned_be16(const void *p)
{
 return __be16_to_cpup((__be16 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 get_unaligned_be32(const void *p)
{
 return __be32_to_cpup((__be32 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) u64 get_unaligned_be64(const void *p)
{
 return __be64_to_cpup((__be64 *)p);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le16(u16 val, void *p)
{
 *((__le16 *)p) = (( __le16)(__u16)(val));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le32(u32 val, void *p)
{
 *((__le32 *)p) = (( __le32)(__u32)(val));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le64(u64 val, void *p)
{
 *((__le64 *)p) = (( __le64)(__u64)(val));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be16(u16 val, void *p)
{
 *((__be16 *)p) = (( __be16)(__builtin_constant_p((__u16)((val))) ? ((__u16)( (((__u16)((val)) & (__u16)0x00ffU) << 8) | (((__u16)((val)) & (__u16)0xff00U) >> 8))) : __fswab16((val))));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be32(u32 val, void *p)
{
 *((__be32 *)p) = (( __be32)(__u32)__builtin_bswap32((__u32)((val))));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be64(u64 val, void *p)
{
 *((__be64 *)p) = (( __be64)(__u64)__builtin_bswap64((__u64)((val))));
}
# 9 "./arch/x86/include/asm/unaligned.h" 2
# 1 "include/linux/unaligned/generic.h" 1







extern void __bad_unaligned_access_size(void);
# 10 "./arch/x86/include/asm/unaligned.h" 2
# 24 "include/linux/ieee80211.h" 2
# 125 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) bool ieee80211_sn_less(u16 sn1, u16 sn2)
{
 return ((sn1 - sn2) & ((0xFFF0) >> 4)) > ((((0xFFF0) >> 4) + 1) >> 1);
}

static inline __attribute__((no_instrument_function)) u16 ieee80211_sn_add(u16 sn1, u16 sn2)
{
 return (sn1 + sn2) & ((0xFFF0) >> 4);
}

static inline __attribute__((no_instrument_function)) u16 ieee80211_sn_inc(u16 sn)
{
 return ieee80211_sn_add(sn, 1);
}

static inline __attribute__((no_instrument_function)) u16 ieee80211_sn_sub(u16 sn1, u16 sn2)
{
 return (sn1 - sn2) & ((0xFFF0) >> 4);
}
# 232 "include/linux/ieee80211.h"
struct ieee80211_hdr {
 __le16 frame_control;
 __le16 duration_id;
 u8 addr1[6];
 u8 addr2[6];
 u8 addr3[6];
 __le16 seq_ctrl;
 u8 addr4[6];
} __attribute__((packed)) __attribute__((aligned(2)));

struct ieee80211_hdr_3addr {
 __le16 frame_control;
 __le16 duration_id;
 u8 addr1[6];
 u8 addr2[6];
 u8 addr3[6];
 __le16 seq_ctrl;
} __attribute__((packed)) __attribute__((aligned(2)));

struct ieee80211_qos_hdr {
 __le16 frame_control;
 __le16 duration_id;
 u8 addr1[6];
 u8 addr2[6];
 u8 addr3[6];
 __le16 seq_ctrl;
 __le16 qos_ctrl;
} __attribute__((packed)) __attribute__((aligned(2)));





static inline __attribute__((no_instrument_function)) bool ieee80211_has_tods(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x0100))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_fromds(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x0200))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_a4(__le16 fc)
{
 __le16 tmp = (( __le16)(__u16)(0x0100 | 0x0200));
 return (fc & tmp) == tmp;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_morefrags(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x0400))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_retry(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x0800))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_pm(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x1000))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_moredata(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x2000))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_protected(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x4000))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_has_order(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x8000))) != 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_mgmt(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c))) ==
        (( __le16)(__u16)(0x0000));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_ctl(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c))) ==
        (( __le16)(__u16)(0x0004));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_data(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c))) ==
        (( __le16)(__u16)(0x0008));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_data_qos(__le16 fc)
{




 return (fc & (( __le16)(__u16)(0x000c | 0x0080))) ==
        (( __le16)(__u16)(0x0008 | 0x0080));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_data_present(__le16 fc)
{




 return (fc & (( __le16)(__u16)(0x000c | 0x40))) ==
        (( __le16)(__u16)(0x0008));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_assoc_req(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0000));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_assoc_resp(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0010));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_reassoc_req(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0020));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_reassoc_resp(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0030));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_probe_req(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0040));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_probe_resp(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0050));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_beacon(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0080));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_atim(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x0090));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_disassoc(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x00A0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_auth(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x00B0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_deauth(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x00C0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_action(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0000 | 0x00D0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_back_req(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x0080));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_back(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x0090));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_pspoll(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00A0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_rts(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00B0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_cts(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00C0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_ack(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00D0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_cfend(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00E0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_cfendack(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0004 | 0x00F0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_nullfunc(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0008 | 0x0040));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_qos_nullfunc(__le16 fc)
{
 return (fc & (( __le16)(__u16)(0x000c | 0x00f0))) ==
        (( __le16)(__u16)(0x0008 | 0x00C0));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_bufferable_mmpdu(__le16 fc)
{


 return ieee80211_is_mgmt(fc) &&
        (ieee80211_is_action(fc) ||
  ieee80211_is_disassoc(fc) ||
  ieee80211_is_deauth(fc));
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_first_frag(__le16 seq_ctrl)
{
 return (seq_ctrl & (( __le16)(__u16)(0x000F))) == 0;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_frag(struct ieee80211_hdr *hdr)
{
 return ieee80211_has_morefrags(hdr->frame_control) ||
        hdr->seq_ctrl & (( __le16)(__u16)(0x000F));
}

struct ieee80211s_hdr {
 u8 flags;
 u8 ttl;
 __le32 seqnum;
 u8 eaddr1[6];
 u8 eaddr2[6];
} __attribute__((packed)) __attribute__((aligned(2)));
# 673 "include/linux/ieee80211.h"
enum ieee80211_preq_flags {
 IEEE80211_PREQ_PROACTIVE_PREP_FLAG = 1<<2,
};







enum ieee80211_preq_target_flags {
 IEEE80211_PREQ_TO_FLAG = 1<<0,
 IEEE80211_PREQ_USN_FLAG = 1<<2,
};






struct ieee80211_quiet_ie {
 u8 count;
 u8 period;
 __le16 duration;
 __le16 offset;
} __attribute__((packed));






struct ieee80211_msrment_ie {
 u8 token;
 u8 mode;
 u8 type;
 u8 request[0];
} __attribute__((packed));






struct ieee80211_channel_sw_ie {
 u8 mode;
 u8 new_ch_num;
 u8 count;
} __attribute__((packed));






struct ieee80211_ext_chansw_ie {
 u8 mode;
 u8 new_operating_class;
 u8 new_ch_num;
 u8 count;
} __attribute__((packed));







struct ieee80211_sec_chan_offs_ie {
 u8 sec_chan_offs;
} __attribute__((packed));






struct ieee80211_mesh_chansw_params_ie {
 u8 mesh_ttl;
 u8 mesh_flags;
 __le16 mesh_reason;
 __le16 mesh_pre_value;
} __attribute__((packed));




struct ieee80211_wide_bw_chansw_ie {
 u8 new_channel_width;
 u8 new_center_freq_seg0, new_center_freq_seg1;
} __attribute__((packed));






struct ieee80211_tim_ie {
 u8 dtim_count;
 u8 dtim_period;
 u8 bitmap_ctrl;

 u8 virtual_map[1];
} __attribute__((packed));






struct ieee80211_meshconf_ie {
 u8 meshconf_psel;
 u8 meshconf_pmetric;
 u8 meshconf_congest;
 u8 meshconf_synch;
 u8 meshconf_auth;
 u8 meshconf_form;
 u8 meshconf_cap;
} __attribute__((packed));
# 804 "include/linux/ieee80211.h"
enum mesh_config_capab_flags {
 IEEE80211_MESHCONF_CAPAB_ACCEPT_PLINKS = 0x01,
 IEEE80211_MESHCONF_CAPAB_FORWARDING = 0x08,
 IEEE80211_MESHCONF_CAPAB_TBTT_ADJUSTING = 0x20,
 IEEE80211_MESHCONF_CAPAB_POWER_SAVE_LEVEL = 0x40,
};
# 824 "include/linux/ieee80211.h"
struct ieee80211_rann_ie {
 u8 rann_flags;
 u8 rann_hopcount;
 u8 rann_ttl;
 u8 rann_addr[6];
 __le32 rann_seq;
 __le32 rann_interval;
 __le32 rann_metric;
} __attribute__((packed));

enum ieee80211_rann_flags {
 RANN_FLAG_IS_GATE = 1 << 0,
};

enum ieee80211_ht_chanwidth_values {
 IEEE80211_HT_CHANWIDTH_20MHZ = 0,
 IEEE80211_HT_CHANWIDTH_ANY = 1,
};
# 856 "include/linux/ieee80211.h"
enum ieee80211_vht_opmode_bits {
 IEEE80211_OPMODE_NOTIF_CHANWIDTH_MASK = 3,
 IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ = 0,
 IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ = 1,
 IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ = 2,
 IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ = 3,
 IEEE80211_OPMODE_NOTIF_RX_NSS_MASK = 0x70,
 IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT = 4,
 IEEE80211_OPMODE_NOTIF_RX_NSS_TYPE_BF = 0x80,
};
# 876 "include/linux/ieee80211.h"
struct ieee80211_tpc_report_ie {
 u8 tx_power;
 u8 link_margin;
} __attribute__((packed));

struct ieee80211_mgmt {
 __le16 frame_control;
 __le16 duration;
 u8 da[6];
 u8 sa[6];
 u8 bssid[6];
 __le16 seq_ctrl;
 union {
  struct {
   __le16 auth_alg;
   __le16 auth_transaction;
   __le16 status_code;

   u8 variable[0];
  } __attribute__((packed)) auth;
  struct {
   __le16 reason_code;
  } __attribute__((packed)) deauth;
  struct {
   __le16 capab_info;
   __le16 listen_interval;

   u8 variable[0];
  } __attribute__((packed)) assoc_req;
  struct {
   __le16 capab_info;
   __le16 status_code;
   __le16 aid;

   u8 variable[0];
  } __attribute__((packed)) assoc_resp, reassoc_resp;
  struct {
   __le16 capab_info;
   __le16 listen_interval;
   u8 current_ap[6];

   u8 variable[0];
  } __attribute__((packed)) reassoc_req;
  struct {
   __le16 reason_code;
  } __attribute__((packed)) disassoc;
  struct {
   __le64 timestamp;
   __le16 beacon_int;
   __le16 capab_info;


   u8 variable[0];
  } __attribute__((packed)) beacon;
  struct {

   u8 variable[0];
  } __attribute__((packed)) probe_req;
  struct {
   __le64 timestamp;
   __le16 beacon_int;
   __le16 capab_info;


   u8 variable[0];
  } __attribute__((packed)) probe_resp;
  struct {
   u8 category;
   union {
    struct {
     u8 action_code;
     u8 dialog_token;
     u8 status_code;
     u8 variable[0];
    } __attribute__((packed)) wme_action;
    struct{
     u8 action_code;
     u8 variable[0];
    } __attribute__((packed)) chan_switch;
    struct{
     u8 action_code;
     struct ieee80211_ext_chansw_ie data;
     u8 variable[0];
    } __attribute__((packed)) ext_chan_switch;
    struct{
     u8 action_code;
     u8 dialog_token;
     u8 element_id;
     u8 length;
     struct ieee80211_msrment_ie msr_elem;
    } __attribute__((packed)) measurement;
    struct{
     u8 action_code;
     u8 dialog_token;
     __le16 capab;
     __le16 timeout;
     __le16 start_seq_num;
    } __attribute__((packed)) addba_req;
    struct{
     u8 action_code;
     u8 dialog_token;
     __le16 status;
     __le16 capab;
     __le16 timeout;
    } __attribute__((packed)) addba_resp;
    struct{
     u8 action_code;
     __le16 params;
     __le16 reason_code;
    } __attribute__((packed)) delba;
    struct {
     u8 action_code;
     u8 variable[0];
    } __attribute__((packed)) self_prot;
    struct{
     u8 action_code;
     u8 variable[0];
    } __attribute__((packed)) mesh_action;
    struct {
     u8 action;
     u8 trans_id[2];
    } __attribute__((packed)) sa_query;
    struct {
     u8 action;
     u8 smps_control;
    } __attribute__((packed)) ht_smps;
    struct {
     u8 action_code;
     u8 chanwidth;
    } __attribute__((packed)) ht_notify_cw;
    struct {
     u8 action_code;
     u8 dialog_token;
     __le16 capability;
     u8 variable[0];
    } __attribute__((packed)) tdls_discover_resp;
    struct {
     u8 action_code;
     u8 operating_mode;
    } __attribute__((packed)) vht_opmode_notif;
    struct {
     u8 action_code;
     u8 membership[8];
     u8 position[16];
    } __attribute__((packed)) vht_group_notif;
    struct {
     u8 action_code;
     u8 dialog_token;
     u8 tpc_elem_id;
     u8 tpc_elem_length;
     struct ieee80211_tpc_report_ie tpc;
    } __attribute__((packed)) tpc_report;
    struct {
     u8 action_code;
     u8 dialog_token;
     u8 follow_up;
     u8 tod[6];
     u8 toa[6];
     __le16 tod_error;
     __le16 toa_error;
     u8 variable[0];
    } __attribute__((packed)) ftm;
   } u;
  } __attribute__((packed)) action;
 } u;
} __attribute__((packed)) __attribute__((aligned(2)));
# 1051 "include/linux/ieee80211.h"
struct ieee80211_mmie {
 u8 element_id;
 u8 length;
 __le16 key_id;
 u8 sequence_number[6];
 u8 mic[8];
} __attribute__((packed));


struct ieee80211_mmie_16 {
 u8 element_id;
 u8 length;
 __le16 key_id;
 u8 sequence_number[6];
 u8 mic[16];
} __attribute__((packed));

struct ieee80211_vendor_ie {
 u8 element_id;
 u8 len;
 u8 oui[3];
 u8 oui_type;
} __attribute__((packed));

struct ieee80211_wmm_ac_param {
 u8 aci_aifsn;
 u8 cw;
 __le16 txop_limit;
} __attribute__((packed));

struct ieee80211_wmm_param_ie {
 u8 element_id;
 u8 len;

 u8 oui[3];
 u8 oui_type;
 u8 oui_subtype;
 u8 version;
 u8 qos_info;
 u8 reserved;

 struct ieee80211_wmm_ac_param ac[4];
} __attribute__((packed));


struct ieee80211_rts {
 __le16 frame_control;
 __le16 duration;
 u8 ra[6];
 u8 ta[6];
} __attribute__((packed)) __attribute__((aligned(2)));

struct ieee80211_cts {
 __le16 frame_control;
 __le16 duration;
 u8 ra[6];
} __attribute__((packed)) __attribute__((aligned(2)));

struct ieee80211_pspoll {
 __le16 frame_control;
 __le16 aid;
 u8 bssid[6];
 u8 ta[6];
} __attribute__((packed)) __attribute__((aligned(2)));




struct ieee80211_ch_switch_timing {
 __le16 switch_time;
 __le16 switch_timeout;
} __attribute__((packed));


struct ieee80211_tdls_lnkie {
 u8 ie_type;
 u8 ie_len;
 u8 bssid[6];
 u8 init_sta[6];
 u8 resp_sta[6];
} __attribute__((packed));

struct ieee80211_tdls_data {
 u8 da[6];
 u8 sa[6];
 __be16 ether_type;
 u8 payload_type;
 u8 category;
 u8 action_code;
 union {
  struct {
   u8 dialog_token;
   __le16 capability;
   u8 variable[0];
  } __attribute__((packed)) setup_req;
  struct {
   __le16 status_code;
   u8 dialog_token;
   __le16 capability;
   u8 variable[0];
  } __attribute__((packed)) setup_resp;
  struct {
   __le16 status_code;
   u8 dialog_token;
   u8 variable[0];
  } __attribute__((packed)) setup_cfm;
  struct {
   __le16 reason_code;
   u8 variable[0];
  } __attribute__((packed)) teardown;
  struct {
   u8 dialog_token;
   u8 variable[0];
  } __attribute__((packed)) discover_req;
  struct {
   u8 target_channel;
   u8 oper_class;
   u8 variable[0];
  } __attribute__((packed)) chan_switch_req;
  struct {
   __le16 status_code;
   u8 variable[0];
  } __attribute__((packed)) chan_switch_resp;
 } u;
} __attribute__((packed));







enum ieee80211_p2p_attr_id {
 IEEE80211_P2P_ATTR_STATUS = 0,
 IEEE80211_P2P_ATTR_MINOR_REASON,
 IEEE80211_P2P_ATTR_CAPABILITY,
 IEEE80211_P2P_ATTR_DEVICE_ID,
 IEEE80211_P2P_ATTR_GO_INTENT,
 IEEE80211_P2P_ATTR_GO_CONFIG_TIMEOUT,
 IEEE80211_P2P_ATTR_LISTEN_CHANNEL,
 IEEE80211_P2P_ATTR_GROUP_BSSID,
 IEEE80211_P2P_ATTR_EXT_LISTEN_TIMING,
 IEEE80211_P2P_ATTR_INTENDED_IFACE_ADDR,
 IEEE80211_P2P_ATTR_MANAGABILITY,
 IEEE80211_P2P_ATTR_CHANNEL_LIST,
 IEEE80211_P2P_ATTR_ABSENCE_NOTICE,
 IEEE80211_P2P_ATTR_DEVICE_INFO,
 IEEE80211_P2P_ATTR_GROUP_INFO,
 IEEE80211_P2P_ATTR_GROUP_ID,
 IEEE80211_P2P_ATTR_INTERFACE,
 IEEE80211_P2P_ATTR_OPER_CHANNEL,
 IEEE80211_P2P_ATTR_INVITE_FLAGS,

 IEEE80211_P2P_ATTR_VENDOR_SPECIFIC = 221,

 IEEE80211_P2P_ATTR_MAX
};





struct ieee80211_p2p_noa_desc {
 u8 count;
 __le32 duration;
 __le32 interval;
 __le32 start_time;
} __attribute__((packed));

struct ieee80211_p2p_noa_attr {
 u8 index;
 u8 oppps_ctwindow;
 struct ieee80211_p2p_noa_desc desc[4];
} __attribute__((packed));
# 1235 "include/linux/ieee80211.h"
struct ieee80211_bar {
 __le16 frame_control;
 __le16 duration;
 __u8 ra[6];
 __u8 ta[6];
 __le16 control;
 __le16 start_seq_num;
} __attribute__((packed));
# 1262 "include/linux/ieee80211.h"
struct ieee80211_mcs_info {
 u8 rx_mask[10];
 __le16 rx_highest;
 u8 tx_params;
 u8 reserved[3];
} __attribute__((packed));
# 1296 "include/linux/ieee80211.h"
struct ieee80211_ht_cap {
 __le16 cap_info;
 u8 ampdu_params_info;


 struct ieee80211_mcs_info mcs;

 __le16 extended_ht_cap_info;
 __le32 tx_BF_cap_info;
 u8 antenna_selection_info;
} __attribute__((packed));
# 1344 "include/linux/ieee80211.h"
enum ieee80211_max_ampdu_length_exp {
 IEEE80211_HT_MAX_AMPDU_8K = 0,
 IEEE80211_HT_MAX_AMPDU_16K = 1,
 IEEE80211_HT_MAX_AMPDU_32K = 2,
 IEEE80211_HT_MAX_AMPDU_64K = 3
};





enum ieee80211_vht_max_ampdu_length_exp {
 IEEE80211_VHT_MAX_AMPDU_8K = 0,
 IEEE80211_VHT_MAX_AMPDU_16K = 1,
 IEEE80211_VHT_MAX_AMPDU_32K = 2,
 IEEE80211_VHT_MAX_AMPDU_64K = 3,
 IEEE80211_VHT_MAX_AMPDU_128K = 4,
 IEEE80211_VHT_MAX_AMPDU_256K = 5,
 IEEE80211_VHT_MAX_AMPDU_512K = 6,
 IEEE80211_VHT_MAX_AMPDU_1024K = 7
};




enum ieee80211_min_mpdu_spacing {
 IEEE80211_HT_MPDU_DENSITY_NONE = 0,
 IEEE80211_HT_MPDU_DENSITY_0_25 = 1,
 IEEE80211_HT_MPDU_DENSITY_0_5 = 2,
 IEEE80211_HT_MPDU_DENSITY_1 = 3,
 IEEE80211_HT_MPDU_DENSITY_2 = 4,
 IEEE80211_HT_MPDU_DENSITY_4 = 5,
 IEEE80211_HT_MPDU_DENSITY_8 = 6,
 IEEE80211_HT_MPDU_DENSITY_16 = 7
};







struct ieee80211_ht_operation {
 u8 primary_chan;
 u8 ht_param;
 __le16 operation_mode;
 __le16 stbc_param;
 u8 basic_set[16];
} __attribute__((packed));
# 1462 "include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
 __le16 rx_mcs_map;
 __le16 rx_highest;
 __le16 tx_mcs_map;
 __le16 tx_highest;
} __attribute__((packed));
# 1483 "include/linux/ieee80211.h"
enum ieee80211_vht_mcs_support {
 IEEE80211_VHT_MCS_SUPPORT_0_7 = 0,
 IEEE80211_VHT_MCS_SUPPORT_0_8 = 1,
 IEEE80211_VHT_MCS_SUPPORT_0_9 = 2,
 IEEE80211_VHT_MCS_NOT_SUPPORTED = 3,
};
# 1498 "include/linux/ieee80211.h"
struct ieee80211_vht_cap {
 __le32 vht_cap_info;
 struct ieee80211_vht_mcs_info supp_mcs;
} __attribute__((packed));
# 1511 "include/linux/ieee80211.h"
enum ieee80211_vht_chanwidth {
 IEEE80211_VHT_CHANWIDTH_USE_HT = 0,
 IEEE80211_VHT_CHANWIDTH_80MHZ = 1,
 IEEE80211_VHT_CHANWIDTH_160MHZ = 2,
 IEEE80211_VHT_CHANWIDTH_80P80MHZ = 3,
};
# 1528 "include/linux/ieee80211.h"
struct ieee80211_vht_operation {
 u8 chan_width;
 u8 center_freq_seg1_idx;
 u8 center_freq_seg2_idx;
 __le16 basic_mcs_set;
} __attribute__((packed));
# 1640 "include/linux/ieee80211.h"
enum {
 WLAN_ERP_PREAMBLE_SHORT = 0,
 WLAN_ERP_PREAMBLE_LONG = 1,
};


enum {
 IEEE80211_BANDID_TV_WS = 0,
 IEEE80211_BANDID_SUB1 = 1,
 IEEE80211_BANDID_2G = 2,
 IEEE80211_BANDID_3G = 3,
 IEEE80211_BANDID_5G = 4,
 IEEE80211_BANDID_60G = 5,
};


enum ieee80211_statuscode {
 WLAN_STATUS_SUCCESS = 0,
 WLAN_STATUS_UNSPECIFIED_FAILURE = 1,
 WLAN_STATUS_CAPS_UNSUPPORTED = 10,
 WLAN_STATUS_REASSOC_NO_ASSOC = 11,
 WLAN_STATUS_ASSOC_DENIED_UNSPEC = 12,
 WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG = 13,
 WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION = 14,
 WLAN_STATUS_CHALLENGE_FAIL = 15,
 WLAN_STATUS_AUTH_TIMEOUT = 16,
 WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA = 17,
 WLAN_STATUS_ASSOC_DENIED_RATES = 18,

 WLAN_STATUS_ASSOC_DENIED_NOSHORTPREAMBLE = 19,
 WLAN_STATUS_ASSOC_DENIED_NOPBCC = 20,
 WLAN_STATUS_ASSOC_DENIED_NOAGILITY = 21,

 WLAN_STATUS_ASSOC_DENIED_NOSPECTRUM = 22,
 WLAN_STATUS_ASSOC_REJECTED_BAD_POWER = 23,
 WLAN_STATUS_ASSOC_REJECTED_BAD_SUPP_CHAN = 24,

 WLAN_STATUS_ASSOC_DENIED_NOSHORTTIME = 25,
 WLAN_STATUS_ASSOC_DENIED_NODSSSOFDM = 26,

 WLAN_STATUS_ASSOC_REJECTED_TEMPORARILY = 30,
 WLAN_STATUS_ROBUST_MGMT_FRAME_POLICY_VIOLATION = 31,

 WLAN_STATUS_INVALID_IE = 40,
 WLAN_STATUS_INVALID_GROUP_CIPHER = 41,
 WLAN_STATUS_INVALID_PAIRWISE_CIPHER = 42,
 WLAN_STATUS_INVALID_AKMP = 43,
 WLAN_STATUS_UNSUPP_RSN_VERSION = 44,
 WLAN_STATUS_INVALID_RSN_IE_CAP = 45,
 WLAN_STATUS_CIPHER_SUITE_REJECTED = 46,

 WLAN_STATUS_UNSPECIFIED_QOS = 32,
 WLAN_STATUS_ASSOC_DENIED_NOBANDWIDTH = 33,
 WLAN_STATUS_ASSOC_DENIED_LOWACK = 34,
 WLAN_STATUS_ASSOC_DENIED_UNSUPP_QOS = 35,
 WLAN_STATUS_REQUEST_DECLINED = 37,
 WLAN_STATUS_INVALID_QOS_PARAM = 38,
 WLAN_STATUS_CHANGE_TSPEC = 39,
 WLAN_STATUS_WAIT_TS_DELAY = 47,
 WLAN_STATUS_NO_DIRECT_LINK = 48,
 WLAN_STATUS_STA_NOT_PRESENT = 49,
 WLAN_STATUS_STA_NOT_QSTA = 50,

 WLAN_STATUS_ANTI_CLOG_REQUIRED = 76,
 WLAN_STATUS_FCG_NOT_SUPP = 78,
 WLAN_STATUS_STA_NO_TBTT = 78,

 WLAN_STATUS_REJECTED_WITH_SUGGESTED_CHANGES = 39,
 WLAN_STATUS_REJECTED_FOR_DELAY_PERIOD = 47,
 WLAN_STATUS_REJECT_WITH_SCHEDULE = 83,
 WLAN_STATUS_PENDING_ADMITTING_FST_SESSION = 86,
 WLAN_STATUS_PERFORMING_FST_NOW = 87,
 WLAN_STATUS_PENDING_GAP_IN_BA_WINDOW = 88,
 WLAN_STATUS_REJECT_U_PID_SETTING = 89,
 WLAN_STATUS_REJECT_DSE_BAND = 96,
 WLAN_STATUS_DENIED_WITH_SUGGESTED_BAND_AND_CHANNEL = 99,
 WLAN_STATUS_DENIED_DUE_TO_SPECTRUM_MANAGEMENT = 103,
};



enum ieee80211_reasoncode {
 WLAN_REASON_UNSPECIFIED = 1,
 WLAN_REASON_PREV_AUTH_NOT_VALID = 2,
 WLAN_REASON_DEAUTH_LEAVING = 3,
 WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY = 4,
 WLAN_REASON_DISASSOC_AP_BUSY = 5,
 WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA = 6,
 WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA = 7,
 WLAN_REASON_DISASSOC_STA_HAS_LEFT = 8,
 WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH = 9,

 WLAN_REASON_DISASSOC_BAD_POWER = 10,
 WLAN_REASON_DISASSOC_BAD_SUPP_CHAN = 11,

 WLAN_REASON_INVALID_IE = 13,
 WLAN_REASON_MIC_FAILURE = 14,
 WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT = 15,
 WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT = 16,
 WLAN_REASON_IE_DIFFERENT = 17,
 WLAN_REASON_INVALID_GROUP_CIPHER = 18,
 WLAN_REASON_INVALID_PAIRWISE_CIPHER = 19,
 WLAN_REASON_INVALID_AKMP = 20,
 WLAN_REASON_UNSUPP_RSN_VERSION = 21,
 WLAN_REASON_INVALID_RSN_IE_CAP = 22,
 WLAN_REASON_IEEE8021X_FAILED = 23,
 WLAN_REASON_CIPHER_SUITE_REJECTED = 24,

 WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE = 25,
 WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED = 26,

 WLAN_REASON_DISASSOC_UNSPECIFIED_QOS = 32,
 WLAN_REASON_DISASSOC_QAP_NO_BANDWIDTH = 33,
 WLAN_REASON_DISASSOC_LOW_ACK = 34,
 WLAN_REASON_DISASSOC_QAP_EXCEED_TXOP = 35,
 WLAN_REASON_QSTA_LEAVE_QBSS = 36,
 WLAN_REASON_QSTA_NOT_USE = 37,
 WLAN_REASON_QSTA_REQUIRE_SETUP = 38,
 WLAN_REASON_QSTA_TIMEOUT = 39,
 WLAN_REASON_QSTA_CIPHER_NOT_SUPP = 45,

 WLAN_REASON_MESH_PEER_CANCELED = 52,
 WLAN_REASON_MESH_MAX_PEERS = 53,
 WLAN_REASON_MESH_CONFIG = 54,
 WLAN_REASON_MESH_CLOSE = 55,
 WLAN_REASON_MESH_MAX_RETRIES = 56,
 WLAN_REASON_MESH_CONFIRM_TIMEOUT = 57,
 WLAN_REASON_MESH_INVALID_GTK = 58,
 WLAN_REASON_MESH_INCONSISTENT_PARAM = 59,
 WLAN_REASON_MESH_INVALID_SECURITY = 60,
 WLAN_REASON_MESH_PATH_ERROR = 61,
 WLAN_REASON_MESH_PATH_NOFORWARD = 62,
 WLAN_REASON_MESH_PATH_DEST_UNREACHABLE = 63,
 WLAN_REASON_MAC_EXISTS_IN_MBSS = 64,
 WLAN_REASON_MESH_CHAN_REGULATORY = 65,
 WLAN_REASON_MESH_CHAN = 66,
};



enum ieee80211_eid {
 WLAN_EID_SSID = 0,
 WLAN_EID_SUPP_RATES = 1,
 WLAN_EID_FH_PARAMS = 2,
 WLAN_EID_DS_PARAMS = 3,
 WLAN_EID_CF_PARAMS = 4,
 WLAN_EID_TIM = 5,
 WLAN_EID_IBSS_PARAMS = 6,
 WLAN_EID_COUNTRY = 7,

 WLAN_EID_REQUEST = 10,
 WLAN_EID_QBSS_LOAD = 11,
 WLAN_EID_EDCA_PARAM_SET = 12,
 WLAN_EID_TSPEC = 13,
 WLAN_EID_TCLAS = 14,
 WLAN_EID_SCHEDULE = 15,
 WLAN_EID_CHALLENGE = 16,

 WLAN_EID_PWR_CONSTRAINT = 32,
 WLAN_EID_PWR_CAPABILITY = 33,
 WLAN_EID_TPC_REQUEST = 34,
 WLAN_EID_TPC_REPORT = 35,
 WLAN_EID_SUPPORTED_CHANNELS = 36,
 WLAN_EID_CHANNEL_SWITCH = 37,
 WLAN_EID_MEASURE_REQUEST = 38,
 WLAN_EID_MEASURE_REPORT = 39,
 WLAN_EID_QUIET = 40,
 WLAN_EID_IBSS_DFS = 41,
 WLAN_EID_ERP_INFO = 42,
 WLAN_EID_TS_DELAY = 43,
 WLAN_EID_TCLAS_PROCESSING = 44,
 WLAN_EID_HT_CAPABILITY = 45,
 WLAN_EID_QOS_CAPA = 46,

 WLAN_EID_RSN = 48,
 WLAN_EID_802_15_COEX = 49,
 WLAN_EID_EXT_SUPP_RATES = 50,
 WLAN_EID_AP_CHAN_REPORT = 51,
 WLAN_EID_NEIGHBOR_REPORT = 52,
 WLAN_EID_RCPI = 53,
 WLAN_EID_MOBILITY_DOMAIN = 54,
 WLAN_EID_FAST_BSS_TRANSITION = 55,
 WLAN_EID_TIMEOUT_INTERVAL = 56,
 WLAN_EID_RIC_DATA = 57,
 WLAN_EID_DSE_REGISTERED_LOCATION = 58,
 WLAN_EID_SUPPORTED_REGULATORY_CLASSES = 59,
 WLAN_EID_EXT_CHANSWITCH_ANN = 60,
 WLAN_EID_HT_OPERATION = 61,
 WLAN_EID_SECONDARY_CHANNEL_OFFSET = 62,
 WLAN_EID_BSS_AVG_ACCESS_DELAY = 63,
 WLAN_EID_ANTENNA_INFO = 64,
 WLAN_EID_RSNI = 65,
 WLAN_EID_MEASUREMENT_PILOT_TX_INFO = 66,
 WLAN_EID_BSS_AVAILABLE_CAPACITY = 67,
 WLAN_EID_BSS_AC_ACCESS_DELAY = 68,
 WLAN_EID_TIME_ADVERTISEMENT = 69,
 WLAN_EID_RRM_ENABLED_CAPABILITIES = 70,
 WLAN_EID_MULTIPLE_BSSID = 71,
 WLAN_EID_BSS_COEX_2040 = 72,
 WLAN_EID_BSS_INTOLERANT_CHL_REPORT = 73,
 WLAN_EID_OVERLAP_BSS_SCAN_PARAM = 74,
 WLAN_EID_RIC_DESCRIPTOR = 75,
 WLAN_EID_MMIE = 76,
 WLAN_EID_ASSOC_COMEBACK_TIME = 77,
 WLAN_EID_EVENT_REQUEST = 78,
 WLAN_EID_EVENT_REPORT = 79,
 WLAN_EID_DIAGNOSTIC_REQUEST = 80,
 WLAN_EID_DIAGNOSTIC_REPORT = 81,
 WLAN_EID_LOCATION_PARAMS = 82,
 WLAN_EID_NON_TX_BSSID_CAP = 83,
 WLAN_EID_SSID_LIST = 84,
 WLAN_EID_MULTI_BSSID_IDX = 85,
 WLAN_EID_FMS_DESCRIPTOR = 86,
 WLAN_EID_FMS_REQUEST = 87,
 WLAN_EID_FMS_RESPONSE = 88,
 WLAN_EID_QOS_TRAFFIC_CAPA = 89,
 WLAN_EID_BSS_MAX_IDLE_PERIOD = 90,
 WLAN_EID_TSF_REQUEST = 91,
 WLAN_EID_TSF_RESPOSNE = 92,
 WLAN_EID_WNM_SLEEP_MODE = 93,
 WLAN_EID_TIM_BCAST_REQ = 94,
 WLAN_EID_TIM_BCAST_RESP = 95,
 WLAN_EID_COLL_IF_REPORT = 96,
 WLAN_EID_CHANNEL_USAGE = 97,
 WLAN_EID_TIME_ZONE = 98,
 WLAN_EID_DMS_REQUEST = 99,
 WLAN_EID_DMS_RESPONSE = 100,
 WLAN_EID_LINK_ID = 101,
 WLAN_EID_WAKEUP_SCHEDUL = 102,

 WLAN_EID_CHAN_SWITCH_TIMING = 104,
 WLAN_EID_PTI_CONTROL = 105,
 WLAN_EID_PU_BUFFER_STATUS = 106,
 WLAN_EID_INTERWORKING = 107,
 WLAN_EID_ADVERTISEMENT_PROTOCOL = 108,
 WLAN_EID_EXPEDITED_BW_REQ = 109,
 WLAN_EID_QOS_MAP_SET = 110,
 WLAN_EID_ROAMING_CONSORTIUM = 111,
 WLAN_EID_EMERGENCY_ALERT = 112,
 WLAN_EID_MESH_CONFIG = 113,
 WLAN_EID_MESH_ID = 114,
 WLAN_EID_LINK_METRIC_REPORT = 115,
 WLAN_EID_CONGESTION_NOTIFICATION = 116,
 WLAN_EID_PEER_MGMT = 117,
 WLAN_EID_CHAN_SWITCH_PARAM = 118,
 WLAN_EID_MESH_AWAKE_WINDOW = 119,
 WLAN_EID_BEACON_TIMING = 120,
 WLAN_EID_MCCAOP_SETUP_REQ = 121,
 WLAN_EID_MCCAOP_SETUP_RESP = 122,
 WLAN_EID_MCCAOP_ADVERT = 123,
 WLAN_EID_MCCAOP_TEARDOWN = 124,
 WLAN_EID_GANN = 125,
 WLAN_EID_RANN = 126,
 WLAN_EID_EXT_CAPABILITY = 127,

 WLAN_EID_PREQ = 130,
 WLAN_EID_PREP = 131,
 WLAN_EID_PERR = 132,

 WLAN_EID_PXU = 137,
 WLAN_EID_PXUC = 138,
 WLAN_EID_AUTH_MESH_PEER_EXCH = 139,
 WLAN_EID_MIC = 140,
 WLAN_EID_DESTINATION_URI = 141,
 WLAN_EID_UAPSD_COEX = 142,
 WLAN_EID_WAKEUP_SCHEDULE = 143,
 WLAN_EID_EXT_SCHEDULE = 144,
 WLAN_EID_STA_AVAILABILITY = 145,
 WLAN_EID_DMG_TSPEC = 146,
 WLAN_EID_DMG_AT = 147,
 WLAN_EID_DMG_CAP = 148,

 WLAN_EID_CISCO_VENDOR_SPECIFIC = 150,
 WLAN_EID_DMG_OPERATION = 151,
 WLAN_EID_DMG_BSS_PARAM_CHANGE = 152,
 WLAN_EID_DMG_BEAM_REFINEMENT = 153,
 WLAN_EID_CHANNEL_MEASURE_FEEDBACK = 154,

 WLAN_EID_AWAKE_WINDOW = 157,
 WLAN_EID_MULTI_BAND = 158,
 WLAN_EID_ADDBA_EXT = 159,
 WLAN_EID_NEXT_PCP_LIST = 160,
 WLAN_EID_PCP_HANDOVER = 161,
 WLAN_EID_DMG_LINK_MARGIN = 162,
 WLAN_EID_SWITCHING_STREAM = 163,
 WLAN_EID_SESSION_TRANSITION = 164,
 WLAN_EID_DYN_TONE_PAIRING_REPORT = 165,
 WLAN_EID_CLUSTER_REPORT = 166,
 WLAN_EID_RELAY_CAP = 167,
 WLAN_EID_RELAY_XFER_PARAM_SET = 168,
 WLAN_EID_BEAM_LINK_MAINT = 169,
 WLAN_EID_MULTIPLE_MAC_ADDR = 170,
 WLAN_EID_U_PID = 171,
 WLAN_EID_DMG_LINK_ADAPT_ACK = 172,

 WLAN_EID_MCCAOP_ADV_OVERVIEW = 174,
 WLAN_EID_QUIET_PERIOD_REQ = 175,

 WLAN_EID_QUIET_PERIOD_RESP = 177,


 WLAN_EID_EPAC_POLICY = 182,
 WLAN_EID_CLISTER_TIME_OFF = 183,
 WLAN_EID_INTER_AC_PRIO = 184,
 WLAN_EID_SCS_DESCRIPTOR = 185,
 WLAN_EID_QLOAD_REPORT = 186,
 WLAN_EID_HCCA_TXOP_UPDATE_COUNT = 187,
 WLAN_EID_HL_STREAM_ID = 188,
 WLAN_EID_GCR_GROUP_ADDR = 189,
 WLAN_EID_ANTENNA_SECTOR_ID_PATTERN = 190,
 WLAN_EID_VHT_CAPABILITY = 191,
 WLAN_EID_VHT_OPERATION = 192,
 WLAN_EID_EXTENDED_BSS_LOAD = 193,
 WLAN_EID_WIDE_BW_CHANNEL_SWITCH = 194,
 WLAN_EID_VHT_TX_POWER_ENVELOPE = 195,
 WLAN_EID_CHANNEL_SWITCH_WRAPPER = 196,
 WLAN_EID_AID = 197,
 WLAN_EID_QUIET_CHANNEL = 198,
 WLAN_EID_OPMODE_NOTIF = 199,

 WLAN_EID_VENDOR_SPECIFIC = 221,
 WLAN_EID_QOS_PARAMETER = 222,
};


enum ieee80211_category {
 WLAN_CATEGORY_SPECTRUM_MGMT = 0,
 WLAN_CATEGORY_QOS = 1,
 WLAN_CATEGORY_DLS = 2,
 WLAN_CATEGORY_BACK = 3,
 WLAN_CATEGORY_PUBLIC = 4,
 WLAN_CATEGORY_RADIO_MEASUREMENT = 5,
 WLAN_CATEGORY_HT = 7,
 WLAN_CATEGORY_SA_QUERY = 8,
 WLAN_CATEGORY_PROTECTED_DUAL_OF_ACTION = 9,
 WLAN_CATEGORY_WNM = 10,
 WLAN_CATEGORY_WNM_UNPROTECTED = 11,
 WLAN_CATEGORY_TDLS = 12,
 WLAN_CATEGORY_MESH_ACTION = 13,
 WLAN_CATEGORY_MULTIHOP_ACTION = 14,
 WLAN_CATEGORY_SELF_PROTECTED = 15,
 WLAN_CATEGORY_DMG = 16,
 WLAN_CATEGORY_WMM = 17,
 WLAN_CATEGORY_FST = 18,
 WLAN_CATEGORY_UNPROT_DMG = 20,
 WLAN_CATEGORY_VHT = 21,
 WLAN_CATEGORY_VENDOR_SPECIFIC_PROTECTED = 126,
 WLAN_CATEGORY_VENDOR_SPECIFIC = 127,
};


enum ieee80211_spectrum_mgmt_actioncode {
 WLAN_ACTION_SPCT_MSR_REQ = 0,
 WLAN_ACTION_SPCT_MSR_RPRT = 1,
 WLAN_ACTION_SPCT_TPC_REQ = 2,
 WLAN_ACTION_SPCT_TPC_RPRT = 3,
 WLAN_ACTION_SPCT_CHL_SWITCH = 4,
};


enum ieee80211_ht_actioncode {
 WLAN_HT_ACTION_NOTIFY_CHANWIDTH = 0,
 WLAN_HT_ACTION_SMPS = 1,
 WLAN_HT_ACTION_PSMP = 2,
 WLAN_HT_ACTION_PCO_PHASE = 3,
 WLAN_HT_ACTION_CSI = 4,
 WLAN_HT_ACTION_NONCOMPRESSED_BF = 5,
 WLAN_HT_ACTION_COMPRESSED_BF = 6,
 WLAN_HT_ACTION_ASEL_IDX_FEEDBACK = 7,
};


enum ieee80211_vht_actioncode {
 WLAN_VHT_ACTION_COMPRESSED_BF = 0,
 WLAN_VHT_ACTION_GROUPID_MGMT = 1,
 WLAN_VHT_ACTION_OPMODE_NOTIF = 2,
};


enum ieee80211_self_protected_actioncode {
 WLAN_SP_RESERVED = 0,
 WLAN_SP_MESH_PEERING_OPEN = 1,
 WLAN_SP_MESH_PEERING_CONFIRM = 2,
 WLAN_SP_MESH_PEERING_CLOSE = 3,
 WLAN_SP_MGK_INFORM = 4,
 WLAN_SP_MGK_ACK = 5,
};


enum ieee80211_mesh_actioncode {
 WLAN_MESH_ACTION_LINK_METRIC_REPORT,
 WLAN_MESH_ACTION_HWMP_PATH_SELECTION,
 WLAN_MESH_ACTION_GATE_ANNOUNCEMENT,
 WLAN_MESH_ACTION_CONGESTION_CONTROL_NOTIFICATION,
 WLAN_MESH_ACTION_MCCA_SETUP_REQUEST,
 WLAN_MESH_ACTION_MCCA_SETUP_REPLY,
 WLAN_MESH_ACTION_MCCA_ADVERTISEMENT_REQUEST,
 WLAN_MESH_ACTION_MCCA_ADVERTISEMENT,
 WLAN_MESH_ACTION_MCCA_TEARDOWN,
 WLAN_MESH_ACTION_TBTT_ADJUSTMENT_REQUEST,
 WLAN_MESH_ACTION_TBTT_ADJUSTMENT_RESPONSE,
};


enum ieee80211_key_len {
 WLAN_KEY_LEN_WEP40 = 5,
 WLAN_KEY_LEN_WEP104 = 13,
 WLAN_KEY_LEN_CCMP = 16,
 WLAN_KEY_LEN_CCMP_256 = 32,
 WLAN_KEY_LEN_TKIP = 32,
 WLAN_KEY_LEN_AES_CMAC = 16,
 WLAN_KEY_LEN_SMS4 = 32,
 WLAN_KEY_LEN_GCMP = 16,
 WLAN_KEY_LEN_GCMP_256 = 32,
 WLAN_KEY_LEN_BIP_CMAC_256 = 32,
 WLAN_KEY_LEN_BIP_GMAC_128 = 16,
 WLAN_KEY_LEN_BIP_GMAC_256 = 32,
};
# 2076 "include/linux/ieee80211.h"
enum ieee80211_pub_actioncode {
 WLAN_PUB_ACTION_EXT_CHANSW_ANN = 4,
 WLAN_PUB_ACTION_TDLS_DISCOVER_RES = 14,
};


enum ieee80211_tdls_actioncode {
 WLAN_TDLS_SETUP_REQUEST = 0,
 WLAN_TDLS_SETUP_RESPONSE = 1,
 WLAN_TDLS_SETUP_CONFIRM = 2,
 WLAN_TDLS_TEARDOWN = 3,
 WLAN_TDLS_PEER_TRAFFIC_INDICATION = 4,
 WLAN_TDLS_CHANNEL_SWITCH_REQUEST = 5,
 WLAN_TDLS_CHANNEL_SWITCH_RESPONSE = 6,
 WLAN_TDLS_PEER_PSM_REQUEST = 7,
 WLAN_TDLS_PEER_PSM_RESPONSE = 8,
 WLAN_TDLS_PEER_TRAFFIC_RESPONSE = 9,
 WLAN_TDLS_DISCOVERY_REQUEST = 10,
};
# 2145 "include/linux/ieee80211.h"
enum {
 IEEE80211_SYNC_METHOD_NEIGHBOR_OFFSET = 1,
 IEEE80211_SYNC_METHOD_VENDOR = 255,
};
# 2157 "include/linux/ieee80211.h"
enum {
 IEEE80211_PATH_PROTOCOL_HWMP = 1,
 IEEE80211_PATH_PROTOCOL_VENDOR = 255,
};
# 2169 "include/linux/ieee80211.h"
enum {
 IEEE80211_PATH_METRIC_AIRTIME = 1,
 IEEE80211_PATH_METRIC_VENDOR = 255,
};
# 2189 "include/linux/ieee80211.h"
enum ieee80211_root_mode_identifier {
 IEEE80211_ROOTMODE_NO_ROOT = 0,
 IEEE80211_ROOTMODE_ROOT = 1,
 IEEE80211_PROACTIVE_PREQ_NO_PREP = 2,
 IEEE80211_PROACTIVE_PREQ_WITH_PREP = 3,
 IEEE80211_PROACTIVE_RANN = 4,
};
# 2247 "include/linux/ieee80211.h"
struct ieee80211_country_ie_triplet {
 union {
  struct {
   u8 first_channel;
   u8 num_channels;
   s8 max_power;
  } __attribute__((packed)) chans;
  struct {
   u8 reg_extension_id;
   u8 reg_class;
   u8 coverage_class;
  } __attribute__((packed)) ext;
 };
} __attribute__((packed));

enum ieee80211_timeout_interval_type {
 WLAN_TIMEOUT_REASSOC_DEADLINE = 1 ,
 WLAN_TIMEOUT_KEY_LIFETIME = 2 ,
 WLAN_TIMEOUT_ASSOC_COMEBACK = 3 ,
};






struct ieee80211_timeout_interval_ie {
 u8 type;
 __le32 value;
} __attribute__((packed));


enum ieee80211_back_actioncode {
 WLAN_ACTION_ADDBA_REQ = 0,
 WLAN_ACTION_ADDBA_RESP = 1,
 WLAN_ACTION_DELBA = 2,
};


enum ieee80211_back_parties {
 WLAN_BACK_RECIPIENT = 0,
 WLAN_BACK_INITIATOR = 1,
};


enum ieee80211_sa_query_action {
 WLAN_ACTION_SA_QUERY_REQUEST = 0,
 WLAN_ACTION_SA_QUERY_RESPONSE = 1,
};
# 2341 "include/linux/ieee80211.h"
enum ieee80211_tspec_status_code {
 IEEE80211_TSPEC_STATUS_ADMISS_ACCEPTED = 0,
 IEEE80211_TSPEC_STATUS_ADDTS_INVAL_PARAMS = 0x1,
};

struct ieee80211_tspec_ie {
 u8 element_id;
 u8 len;
 u8 oui[3];
 u8 oui_type;
 u8 oui_subtype;
 u8 version;
 __le16 tsinfo;
 u8 tsinfo_resvd;
 __le16 nominal_msdu;
 __le16 max_msdu;
 __le32 min_service_int;
 __le32 max_service_int;
 __le32 inactivity_int;
 __le32 suspension_int;
 __le32 service_start_time;
 __le32 min_data_rate;
 __le32 mean_data_rate;
 __le32 peak_data_rate;
 __le32 max_burst_size;
 __le32 delay_bound;
 __le32 min_phy_rate;
 __le16 sba;
 __le16 medium_time;
} __attribute__((packed));
# 2381 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) u8 *ieee80211_get_qos_ctl(struct ieee80211_hdr *hdr)
{
 if (ieee80211_has_a4(hdr->frame_control))
  return (u8 *)hdr + 30;
 else
  return (u8 *)hdr + 24;
}
# 2399 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) u8 *ieee80211_get_SA(struct ieee80211_hdr *hdr)
{
 if (ieee80211_has_a4(hdr->frame_control))
  return hdr->addr4;
 if (ieee80211_has_fromds(hdr->frame_control))
  return hdr->addr3;
 return hdr->addr2;
}
# 2418 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) u8 *ieee80211_get_DA(struct ieee80211_hdr *hdr)
{
 if (ieee80211_has_tods(hdr->frame_control))
  return hdr->addr3;
 else
  return hdr->addr1;
}





static inline __attribute__((no_instrument_function)) bool _ieee80211_is_robust_mgmt_frame(struct ieee80211_hdr *hdr)
{
 if (ieee80211_is_disassoc(hdr->frame_control) ||
     ieee80211_is_deauth(hdr->frame_control))
  return true;

 if (ieee80211_is_action(hdr->frame_control)) {
  u8 *category;
# 2446 "include/linux/ieee80211.h"
  if (ieee80211_has_protected(hdr->frame_control))
   return true;
  category = ((u8 *) hdr) + 24;
  return *category != WLAN_CATEGORY_PUBLIC &&
   *category != WLAN_CATEGORY_HT &&
   *category != WLAN_CATEGORY_WNM_UNPROTECTED &&
   *category != WLAN_CATEGORY_SELF_PROTECTED &&
   *category != WLAN_CATEGORY_UNPROT_DMG &&
   *category != WLAN_CATEGORY_VHT &&
   *category != WLAN_CATEGORY_VENDOR_SPECIFIC;
 }

 return false;
}





static inline __attribute__((no_instrument_function)) bool ieee80211_is_robust_mgmt_frame(struct sk_buff *skb)
{
 if (skb->len < 25)
  return false;
 return _ieee80211_is_robust_mgmt_frame((void *)skb->data);
}






static inline __attribute__((no_instrument_function)) bool ieee80211_is_public_action(struct ieee80211_hdr *hdr,
           size_t len)
{
 struct ieee80211_mgmt *mgmt = (void *)hdr;

 if (len < __builtin_offsetof(struct ieee80211_mgmt, u.action.u))
  return false;
 if (!ieee80211_is_action(hdr->frame_control))
  return false;
 return mgmt->u.action.category == WLAN_CATEGORY_PUBLIC;
}





static inline __attribute__((no_instrument_function)) unsigned long ieee80211_tu_to_usec(unsigned long tu)
{
 return 1024 * tu;
}







static inline __attribute__((no_instrument_function)) bool ieee80211_check_tim(const struct ieee80211_tim_ie *tim,
           u8 tim_len, u16 aid)
{
 u8 mask;
 u8 index, indexn1, indexn2;

 if (__builtin_expect(!!(!tim || tim_len < sizeof(*tim)), 0))
  return false;

 aid &= 0x3fff;
 index = aid / 8;
 mask = 1 << (aid & 7);

 indexn1 = tim->bitmap_ctrl & 0xfe;
 indexn2 = tim_len + indexn1 - 4;

 if (index < indexn1 || index > indexn2)
  return false;

 index -= indexn1;

 return !!(tim->virtual_map[index] & mask);
}
# 2536 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) int ieee80211_get_tdls_action(struct sk_buff *skb, u32 hdr_size)
{
 if (!skb_is_nonlinear(skb) &&
     skb->len > (skb_network_offset(skb) + 2)) {

  const u8 *tdls_data = skb_network_header(skb) - 2;

  if (get_unaligned_be16(tdls_data) == 0x890D &&
      tdls_data[2] == 0x2 &&
      tdls_data[3] == WLAN_CATEGORY_TDLS)
   return tdls_data[4];
 }

 return -1;
}
# 2564 "include/linux/ieee80211.h"
static inline __attribute__((no_instrument_function)) bool ieee80211_action_contains_tpc(struct sk_buff *skb)
{
 struct ieee80211_mgmt *mgmt = (void *)skb->data;

 if (!ieee80211_is_action(mgmt->frame_control))
  return false;

 if (skb->len < __builtin_offsetof(struct ieee80211_mgmt, u.action.u) +
         sizeof(mgmt->u.action.u.tpc_report))
  return false;
# 2586 "include/linux/ieee80211.h"
 if (mgmt->u.action.category != WLAN_CATEGORY_SPECTRUM_MGMT &&
     mgmt->u.action.category != WLAN_CATEGORY_RADIO_MEASUREMENT)
  return false;


 if (mgmt->u.action.u.tpc_report.action_code !=
     WLAN_ACTION_SPCT_TPC_RPRT)
  return false;

 if (mgmt->u.action.u.tpc_report.tpc_elem_id != WLAN_EID_TPC_REPORT ||
     mgmt->u.action.u.tpc_report.tpc_elem_length !=
     sizeof(struct ieee80211_tpc_report_ie))
  return false;

 return true;
}
# 23 "include/net/mac80211.h" 2
# 1 "include/net/cfg80211.h" 1
# 15 "include/net/cfg80211.h"
# 1 "include/linux/netdevice.h" 1
# 30 "include/linux/netdevice.h"
# 1 "include/linux/delay.h" 1
# 12 "include/linux/delay.h"
extern unsigned long loops_per_jiffy;

# 1 "./arch/x86/include/asm/delay.h" 1



# 1 "include/asm-generic/delay.h" 1




extern void __bad_udelay(void);
extern void __bad_ndelay(void);

extern void __udelay(unsigned long usecs);
extern void __ndelay(unsigned long nsecs);
extern void __const_udelay(unsigned long xloops);
extern void __delay(unsigned long loops);
# 5 "./arch/x86/include/asm/delay.h" 2

void use_tsc_delay(void);
void use_mwaitx_delay(void);
# 15 "include/linux/delay.h" 2
# 44 "include/linux/delay.h"
extern unsigned long lpj_fine;
void calibrate_delay(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((no_instrument_function)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}
# 31 "include/linux/netdevice.h" 2

# 1 "include/linux/prefetch.h" 1
# 53 "include/linux/prefetch.h"
static inline __attribute__((no_instrument_function)) void prefetch_range(void *addr, size_t len)
{







}
# 33 "include/linux/netdevice.h" 2





# 1 "include/linux/dmaengine.h" 1
# 34 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;


static inline __attribute__((no_instrument_function)) int dma_submit_error(dma_cookie_t cookie)
{
 return cookie < 0 ? cookie : 0;
}
# 49 "include/linux/dmaengine.h"
enum dma_status {
 DMA_COMPLETE,
 DMA_IN_PROGRESS,
 DMA_PAUSED,
 DMA_ERROR,
};







enum dma_transaction_type {
 DMA_MEMCPY,
 DMA_XOR,
 DMA_PQ,
 DMA_XOR_VAL,
 DMA_PQ_VAL,
 DMA_MEMSET,
 DMA_MEMSET_SG,
 DMA_INTERRUPT,
 DMA_SG,
 DMA_PRIVATE,
 DMA_ASYNC_TX,
 DMA_SLAVE,
 DMA_CYCLIC,
 DMA_INTERLEAVE,

 DMA_TX_TYPE_END,
};
# 88 "include/linux/dmaengine.h"
enum dma_transfer_direction {
 DMA_MEM_TO_MEM,
 DMA_MEM_TO_DEV,
 DMA_DEV_TO_MEM,
 DMA_DEV_TO_DEV,
 DMA_TRANS_NONE,
};
# 134 "include/linux/dmaengine.h"
struct data_chunk {
 size_t size;
 size_t icg;
 size_t dst_icg;
 size_t src_icg;
};
# 159 "include/linux/dmaengine.h"
struct dma_interleaved_template {
 dma_addr_t src_start;
 dma_addr_t dst_start;
 enum dma_transfer_direction dir;
 bool src_inc;
 bool dst_inc;
 bool src_sgl;
 bool dst_sgl;
 size_t numf;
 size_t frame_size;
 struct data_chunk sgl[0];
};
# 190 "include/linux/dmaengine.h"
enum dma_ctrl_flags {
 DMA_PREP_INTERRUPT = (1 << 0),
 DMA_CTRL_ACK = (1 << 1),
 DMA_PREP_PQ_DISABLE_P = (1 << 2),
 DMA_PREP_PQ_DISABLE_Q = (1 << 3),
 DMA_PREP_CONTINUE = (1 << 4),
 DMA_PREP_FENCE = (1 << 5),
 DMA_CTRL_REUSE = (1 << 6),
};




enum sum_check_bits {
 SUM_CHECK_P = 0,
 SUM_CHECK_Q = 1,
};






enum sum_check_flags {
 SUM_CHECK_P_RESULT = (1 << SUM_CHECK_P),
 SUM_CHECK_Q_RESULT = (1 << SUM_CHECK_Q),
};






typedef struct { unsigned long bits[(((DMA_TX_TYPE_END) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; } dma_cap_mask_t;







struct dma_chan_percpu {

 unsigned long memcpy_count;
 unsigned long bytes_transferred;
};






struct dma_router {
 struct device *dev;
 void (*route_free)(struct device *dev, void *route_data);
};
# 262 "include/linux/dmaengine.h"
struct dma_chan {
 struct dma_device *device;
 dma_cookie_t cookie;
 dma_cookie_t completed_cookie;


 int chan_id;
 struct dma_chan_dev *dev;

 struct list_head device_node;
 struct dma_chan_percpu *local;
 int client_count;
 int table_count;


 struct dma_router *router;
 void *route_data;

 void *private;
};
# 290 "include/linux/dmaengine.h"
struct dma_chan_dev {
 struct dma_chan *chan;
 struct device device;
 int dev_id;
 atomic_t *idr_ref;
};





enum dma_slave_buswidth {
 DMA_SLAVE_BUSWIDTH_UNDEFINED = 0,
 DMA_SLAVE_BUSWIDTH_1_BYTE = 1,
 DMA_SLAVE_BUSWIDTH_2_BYTES = 2,
 DMA_SLAVE_BUSWIDTH_3_BYTES = 3,
 DMA_SLAVE_BUSWIDTH_4_BYTES = 4,
 DMA_SLAVE_BUSWIDTH_8_BYTES = 8,
 DMA_SLAVE_BUSWIDTH_16_BYTES = 16,
 DMA_SLAVE_BUSWIDTH_32_BYTES = 32,
 DMA_SLAVE_BUSWIDTH_64_BYTES = 64,
};
# 358 "include/linux/dmaengine.h"
struct dma_slave_config {
 enum dma_transfer_direction direction;
 phys_addr_t src_addr;
 phys_addr_t dst_addr;
 enum dma_slave_buswidth src_addr_width;
 enum dma_slave_buswidth dst_addr_width;
 u32 src_maxburst;
 u32 dst_maxburst;
 bool device_fc;
 unsigned int slave_id;
};
# 390 "include/linux/dmaengine.h"
enum dma_residue_granularity {
 DMA_RESIDUE_GRANULARITY_DESCRIPTOR = 0,
 DMA_RESIDUE_GRANULARITY_SEGMENT = 1,
 DMA_RESIDUE_GRANULARITY_BURST = 2,
};
# 411 "include/linux/dmaengine.h"
struct dma_slave_caps {
 u32 src_addr_widths;
 u32 dst_addr_widths;
 u32 directions;
 u32 max_burst;
 bool cmd_pause;
 bool cmd_terminate;
 enum dma_residue_granularity residue_granularity;
 bool descriptor_reuse;
};

static inline __attribute__((no_instrument_function)) const char *dma_chan_name(struct dma_chan *chan)
{
 return dev_name(&chan->dev->device);
}

void dma_chan_cleanup(struct kref *kref);
# 440 "include/linux/dmaengine.h"
typedef bool (*dma_filter_fn)(struct dma_chan *chan, void *filter_param);

typedef void (*dma_async_tx_callback)(void *dma_async_param);

struct dmaengine_unmap_data {
 u8 map_cnt;
 u8 to_cnt;
 u8 from_cnt;
 u8 bidi_cnt;
 struct device *dev;
 struct kref kref;
 size_t len;
 dma_addr_t addr[0];
};
# 473 "include/linux/dmaengine.h"
struct dma_async_tx_descriptor {
 dma_cookie_t cookie;
 enum dma_ctrl_flags flags;
 dma_addr_t phys;
 struct dma_chan *chan;
 dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor *tx);
 int (*desc_free)(struct dma_async_tx_descriptor *tx);
 dma_async_tx_callback callback;
 void *callback_param;
 struct dmaengine_unmap_data *unmap;





};


static inline __attribute__((no_instrument_function)) void dma_set_unmap(struct dma_async_tx_descriptor *tx,
     struct dmaengine_unmap_data *unmap)
{
 kref_get(&unmap->kref);
 tx->unmap = unmap;
}

struct dmaengine_unmap_data *
dmaengine_get_unmap_data(struct device *dev, int nr, gfp_t flags);
void dmaengine_unmap_put(struct dmaengine_unmap_data *unmap);
# 516 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) void dma_descriptor_unmap(struct dma_async_tx_descriptor *tx)
{
 if (tx->unmap) {
  dmaengine_unmap_put(tx->unmap);
  tx->unmap = ((void *)0);
 }
}


static inline __attribute__((no_instrument_function)) void txd_lock(struct dma_async_tx_descriptor *txd)
{
}
static inline __attribute__((no_instrument_function)) void txd_unlock(struct dma_async_tx_descriptor *txd)
{
}
static inline __attribute__((no_instrument_function)) void txd_chain(struct dma_async_tx_descriptor *txd, struct dma_async_tx_descriptor *next)
{
 do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dmaengine.h"), "i" (533), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);
}
static inline __attribute__((no_instrument_function)) void txd_clear_parent(struct dma_async_tx_descriptor *txd)
{
}
static inline __attribute__((no_instrument_function)) void txd_clear_next(struct dma_async_tx_descriptor *txd)
{
}
static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *txd_next(struct dma_async_tx_descriptor *txd)
{
 return ((void *)0);
}
static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *txd_parent(struct dma_async_tx_descriptor *txd)
{
 return ((void *)0);
}
# 591 "include/linux/dmaengine.h"
struct dma_tx_state {
 dma_cookie_t last;
 dma_cookie_t used;
 u32 residue;
};





enum dmaengine_alignment {
 DMAENGINE_ALIGN_1_BYTE = 0,
 DMAENGINE_ALIGN_2_BYTES = 1,
 DMAENGINE_ALIGN_4_BYTES = 2,
 DMAENGINE_ALIGN_8_BYTES = 3,
 DMAENGINE_ALIGN_16_BYTES = 4,
 DMAENGINE_ALIGN_32_BYTES = 5,
 DMAENGINE_ALIGN_64_BYTES = 6,
};
# 618 "include/linux/dmaengine.h"
struct dma_slave_map {
 const char *devname;
 const char *slave;
 void *param;
};
# 631 "include/linux/dmaengine.h"
struct dma_filter {
 dma_filter_fn fn;
 int mapcnt;
 const struct dma_slave_map *map;
};
# 696 "include/linux/dmaengine.h"
struct dma_device {

 unsigned int chancnt;
 unsigned int privatecnt;
 struct list_head channels;
 struct list_head global_node;
 struct dma_filter filter;
 dma_cap_mask_t cap_mask;
 unsigned short max_xor;
 unsigned short max_pq;
 enum dmaengine_alignment copy_align;
 enum dmaengine_alignment xor_align;
 enum dmaengine_alignment pq_align;
 enum dmaengine_alignment fill_align;


 int dev_id;
 struct device *dev;

 u32 src_addr_widths;
 u32 dst_addr_widths;
 u32 directions;
 u32 max_burst;
 bool descriptor_reuse;
 enum dma_residue_granularity residue_granularity;

 int (*device_alloc_chan_resources)(struct dma_chan *chan);
 void (*device_free_chan_resources)(struct dma_chan *chan);

 struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(
  struct dma_chan *chan, dma_addr_t dst, dma_addr_t src,
  size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_xor)(
  struct dma_chan *chan, dma_addr_t dst, dma_addr_t *src,
  unsigned int src_cnt, size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_xor_val)(
  struct dma_chan *chan, dma_addr_t *src, unsigned int src_cnt,
  size_t len, enum sum_check_flags *result, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_pq)(
  struct dma_chan *chan, dma_addr_t *dst, dma_addr_t *src,
  unsigned int src_cnt, const unsigned char *scf,
  size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_pq_val)(
  struct dma_chan *chan, dma_addr_t *pq, dma_addr_t *src,
  unsigned int src_cnt, const unsigned char *scf, size_t len,
  enum sum_check_flags *pqres, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_memset)(
  struct dma_chan *chan, dma_addr_t dest, int value, size_t len,
  unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_memset_sg)(
  struct dma_chan *chan, struct scatterlist *sg,
  unsigned int nents, int value, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(
  struct dma_chan *chan, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_sg)(
  struct dma_chan *chan,
  struct scatterlist *dst_sg, unsigned int dst_nents,
  struct scatterlist *src_sg, unsigned int src_nents,
  unsigned long flags);

 struct dma_async_tx_descriptor *(*device_prep_slave_sg)(
  struct dma_chan *chan, struct scatterlist *sgl,
  unsigned int sg_len, enum dma_transfer_direction direction,
  unsigned long flags, void *context);
 struct dma_async_tx_descriptor *(*device_prep_dma_cyclic)(
  struct dma_chan *chan, dma_addr_t buf_addr, size_t buf_len,
  size_t period_len, enum dma_transfer_direction direction,
  unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_interleaved_dma)(
  struct dma_chan *chan, struct dma_interleaved_template *xt,
  unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_imm_data)(
  struct dma_chan *chan, dma_addr_t dst, u64 data,
  unsigned long flags);

 int (*device_config)(struct dma_chan *chan,
        struct dma_slave_config *config);
 int (*device_pause)(struct dma_chan *chan);
 int (*device_resume)(struct dma_chan *chan);
 int (*device_terminate_all)(struct dma_chan *chan);
 void (*device_synchronize)(struct dma_chan *chan);

 enum dma_status (*device_tx_status)(struct dma_chan *chan,
         dma_cookie_t cookie,
         struct dma_tx_state *txstate);
 void (*device_issue_pending)(struct dma_chan *chan);
};

static inline __attribute__((no_instrument_function)) int dmaengine_slave_config(struct dma_chan *chan,
       struct dma_slave_config *config)
{
 if (chan->device->device_config)
  return chan->device->device_config(chan, config);

 return -38;
}

static inline __attribute__((no_instrument_function)) bool is_slave_direction(enum dma_transfer_direction direction)
{
 return (direction == DMA_MEM_TO_DEV) || (direction == DMA_DEV_TO_MEM);
}

static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_slave_single(
 struct dma_chan *chan, dma_addr_t buf, size_t len,
 enum dma_transfer_direction dir, unsigned long flags)
{
 struct scatterlist sg;
 sg_init_table(&sg, 1);
 ((&sg)->dma_address) = buf;
 ((&sg)->dma_length) = len;

 if (!chan || !chan->device || !chan->device->device_prep_slave_sg)
  return ((void *)0);

 return chan->device->device_prep_slave_sg(chan, &sg, 1,
        dir, flags, ((void *)0));
}

static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_slave_sg(
 struct dma_chan *chan, struct scatterlist *sgl, unsigned int sg_len,
 enum dma_transfer_direction dir, unsigned long flags)
{
 if (!chan || !chan->device || !chan->device->device_prep_slave_sg)
  return ((void *)0);

 return chan->device->device_prep_slave_sg(chan, sgl, sg_len,
        dir, flags, ((void *)0));
}
# 840 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_dma_cyclic(
  struct dma_chan *chan, dma_addr_t buf_addr, size_t buf_len,
  size_t period_len, enum dma_transfer_direction dir,
  unsigned long flags)
{
 if (!chan || !chan->device || !chan->device->device_prep_dma_cyclic)
  return ((void *)0);

 return chan->device->device_prep_dma_cyclic(chan, buf_addr, buf_len,
      period_len, dir, flags);
}

static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_interleaved_dma(
  struct dma_chan *chan, struct dma_interleaved_template *xt,
  unsigned long flags)
{
 if (!chan || !chan->device || !chan->device->device_prep_interleaved_dma)
  return ((void *)0);

 return chan->device->device_prep_interleaved_dma(chan, xt, flags);
}

static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_dma_memset(
  struct dma_chan *chan, dma_addr_t dest, int value, size_t len,
  unsigned long flags)
{
 if (!chan || !chan->device || !chan->device->device_prep_dma_memset)
  return ((void *)0);

 return chan->device->device_prep_dma_memset(chan, dest, value,
          len, flags);
}

static inline __attribute__((no_instrument_function)) struct dma_async_tx_descriptor *dmaengine_prep_dma_sg(
  struct dma_chan *chan,
  struct scatterlist *dst_sg, unsigned int dst_nents,
  struct scatterlist *src_sg, unsigned int src_nents,
  unsigned long flags)
{
 if (!chan || !chan->device || !chan->device->device_prep_dma_sg)
  return ((void *)0);

 return chan->device->device_prep_dma_sg(chan, dst_sg, dst_nents,
   src_sg, src_nents, flags);
}
# 893 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) int dmaengine_terminate_all(struct dma_chan *chan)
{
 if (chan->device->device_terminate_all)
  return chan->device->device_terminate_all(chan);

 return -38;
}
# 922 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) int dmaengine_terminate_async(struct dma_chan *chan)
{
 if (chan->device->device_terminate_all)
  return chan->device->device_terminate_all(chan);

 return -22;
}
# 948 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) void dmaengine_synchronize(struct dma_chan *chan)
{
 do { _cond_resched(); } while (0);

 if (chan->device->device_synchronize)
  chan->device->device_synchronize(chan);
}
# 970 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) int dmaengine_terminate_sync(struct dma_chan *chan)
{
 int ret;

 ret = dmaengine_terminate_async(chan);
 if (ret)
  return ret;

 dmaengine_synchronize(chan);

 return 0;
}

static inline __attribute__((no_instrument_function)) int dmaengine_pause(struct dma_chan *chan)
{
 if (chan->device->device_pause)
  return chan->device->device_pause(chan);

 return -38;
}

static inline __attribute__((no_instrument_function)) int dmaengine_resume(struct dma_chan *chan)
{
 if (chan->device->device_resume)
  return chan->device->device_resume(chan);

 return -38;
}

static inline __attribute__((no_instrument_function)) enum dma_status dmaengine_tx_status(struct dma_chan *chan,
 dma_cookie_t cookie, struct dma_tx_state *state)
{
 return chan->device->device_tx_status(chan, cookie, state);
}

static inline __attribute__((no_instrument_function)) dma_cookie_t dmaengine_submit(struct dma_async_tx_descriptor *desc)
{
 return desc->tx_submit(desc);
}

static inline __attribute__((no_instrument_function)) bool dmaengine_check_align(enum dmaengine_alignment align,
      size_t off1, size_t off2, size_t len)
{
 size_t mask;

 if (!align)
  return true;
 mask = (1 << align) - 1;
 if (mask & (off1 | off2 | len))
  return false;
 return true;
}

static inline __attribute__((no_instrument_function)) bool is_dma_copy_aligned(struct dma_device *dev, size_t off1,
           size_t off2, size_t len)
{
 return dmaengine_check_align(dev->copy_align, off1, off2, len);
}

static inline __attribute__((no_instrument_function)) bool is_dma_xor_aligned(struct dma_device *dev, size_t off1,
          size_t off2, size_t len)
{
 return dmaengine_check_align(dev->xor_align, off1, off2, len);
}

static inline __attribute__((no_instrument_function)) bool is_dma_pq_aligned(struct dma_device *dev, size_t off1,
         size_t off2, size_t len)
{
 return dmaengine_check_align(dev->pq_align, off1, off2, len);
}

static inline __attribute__((no_instrument_function)) bool is_dma_fill_aligned(struct dma_device *dev, size_t off1,
           size_t off2, size_t len)
{
 return dmaengine_check_align(dev->fill_align, off1, off2, len);
}

static inline __attribute__((no_instrument_function)) void
dma_set_maxpq(struct dma_device *dma, int maxpq, int has_pq_continue)
{
 dma->max_pq = maxpq;
 if (has_pq_continue)
  dma->max_pq |= (1 << 15);
}

static inline __attribute__((no_instrument_function)) bool dmaf_continue(enum dma_ctrl_flags flags)
{
 return (flags & DMA_PREP_CONTINUE) == DMA_PREP_CONTINUE;
}

static inline __attribute__((no_instrument_function)) bool dmaf_p_disabled_continue(enum dma_ctrl_flags flags)
{
 enum dma_ctrl_flags mask = DMA_PREP_CONTINUE | DMA_PREP_PQ_DISABLE_P;

 return (flags & mask) == mask;
}

static inline __attribute__((no_instrument_function)) bool dma_dev_has_pq_continue(struct dma_device *dma)
{
 return (dma->max_pq & (1 << 15)) == (1 << 15);
}

static inline __attribute__((no_instrument_function)) unsigned short dma_dev_to_maxpq(struct dma_device *dma)
{
 return dma->max_pq & ~(1 << 15);
}
# 1090 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) int dma_maxpq(struct dma_device *dma, enum dma_ctrl_flags flags)
{
 if (dma_dev_has_pq_continue(dma) || !dmaf_continue(flags))
  return dma_dev_to_maxpq(dma);
 else if (dmaf_p_disabled_continue(flags))
  return dma_dev_to_maxpq(dma) - 1;
 else if (dmaf_continue(flags))
  return dma_dev_to_maxpq(dma) - 3;
 do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dmaengine.h"), "i" (1098), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);
}

static inline __attribute__((no_instrument_function)) size_t dmaengine_get_icg(bool inc, bool sgl, size_t icg,
          size_t dir_icg)
{
 if (inc) {
  if (dir_icg)
   return dir_icg;
  else if (sgl)
   return icg;
 }

 return 0;
}

static inline __attribute__((no_instrument_function)) size_t dmaengine_get_dst_icg(struct dma_interleaved_template *xt,
        struct data_chunk *chunk)
{
 return dmaengine_get_icg(xt->dst_inc, xt->dst_sgl,
     chunk->icg, chunk->dst_icg);
}

static inline __attribute__((no_instrument_function)) size_t dmaengine_get_src_icg(struct dma_interleaved_template *xt,
        struct data_chunk *chunk)
{
 return dmaengine_get_icg(xt->src_inc, xt->src_sgl,
     chunk->icg, chunk->src_icg);
}




void dmaengine_get(void);
void dmaengine_put(void);
# 1151 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) void async_dmaengine_get(void)
{
}
static inline __attribute__((no_instrument_function)) void async_dmaengine_put(void)
{
}
static inline __attribute__((no_instrument_function)) struct dma_chan *
async_dma_find_channel(enum dma_transaction_type type)
{
 return ((void *)0);
}

void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
      struct dma_chan *chan);

static inline __attribute__((no_instrument_function)) void async_tx_ack(struct dma_async_tx_descriptor *tx)
{
 tx->flags |= DMA_CTRL_ACK;
}

static inline __attribute__((no_instrument_function)) void async_tx_clear_ack(struct dma_async_tx_descriptor *tx)
{
 tx->flags &= ~DMA_CTRL_ACK;
}

static inline __attribute__((no_instrument_function)) bool async_tx_test_ack(struct dma_async_tx_descriptor *tx)
{
 return (tx->flags & DMA_CTRL_ACK) == DMA_CTRL_ACK;
}


static inline __attribute__((no_instrument_function)) void
__dma_cap_set(enum dma_transaction_type tx_type, dma_cap_mask_t *dstp)
{
 set_bit(tx_type, dstp->bits);
}


static inline __attribute__((no_instrument_function)) void
__dma_cap_clear(enum dma_transaction_type tx_type, dma_cap_mask_t *dstp)
{
 clear_bit(tx_type, dstp->bits);
}


static inline __attribute__((no_instrument_function)) void __dma_cap_zero(dma_cap_mask_t *dstp)
{
 bitmap_zero(dstp->bits, DMA_TX_TYPE_END);
}


static inline __attribute__((no_instrument_function)) int
__dma_has_cap(enum dma_transaction_type tx_type, dma_cap_mask_t *srcp)
{
 return (__builtin_constant_p((tx_type)) ? constant_test_bit((tx_type), (srcp->bits)) : variable_test_bit((tx_type), (srcp->bits)));
}
# 1218 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) void dma_async_issue_pending(struct dma_chan *chan)
{
 chan->device->device_issue_pending(chan);
}
# 1234 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)
{
 struct dma_tx_state state;
 enum dma_status status;

 status = chan->device->device_tx_status(chan, cookie, &state);
 if (last)
  *last = state.last;
 if (used)
  *used = state.used;
 return status;
}
# 1257 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) enum dma_status dma_async_is_complete(dma_cookie_t cookie,
   dma_cookie_t last_complete, dma_cookie_t last_used)
{
 if (last_complete <= last_used) {
  if ((cookie <= last_complete) || (cookie > last_used))
   return DMA_COMPLETE;
 } else {
  if ((cookie <= last_complete) && (cookie > last_used))
   return DMA_COMPLETE;
 }
 return DMA_IN_PROGRESS;
}

static inline __attribute__((no_instrument_function)) void
dma_set_tx_state(struct dma_tx_state *st, dma_cookie_t last, dma_cookie_t used, u32 residue)
{
 if (st) {
  st->last = last;
  st->used = used;
  st->residue = residue;
 }
}


struct dma_chan *dma_find_channel(enum dma_transaction_type tx_type);
enum dma_status dma_sync_wait(struct dma_chan *chan, dma_cookie_t cookie);
enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *tx);
void dma_issue_pending_all(void);
struct dma_chan *__dma_request_channel(const dma_cap_mask_t *mask,
     dma_filter_fn fn, void *fn_param);
struct dma_chan *dma_request_slave_channel(struct device *dev, const char *name);

struct dma_chan *dma_request_chan(struct device *dev, const char *name);
struct dma_chan *dma_request_chan_by_mask(const dma_cap_mask_t *mask);

void dma_release_channel(struct dma_chan *chan);
int dma_get_slave_caps(struct dma_chan *chan, struct dma_slave_caps *caps);
# 1342 "include/linux/dmaengine.h"
static inline __attribute__((no_instrument_function)) int dmaengine_desc_set_reuse(struct dma_async_tx_descriptor *tx)
{
 struct dma_slave_caps caps;

 dma_get_slave_caps(tx->chan, &caps);

 if (caps.descriptor_reuse) {
  tx->flags |= DMA_CTRL_REUSE;
  return 0;
 } else {
  return -1;
 }
}

static inline __attribute__((no_instrument_function)) void dmaengine_desc_clear_reuse(struct dma_async_tx_descriptor *tx)
{
 tx->flags &= ~DMA_CTRL_REUSE;
}

static inline __attribute__((no_instrument_function)) bool dmaengine_desc_test_reuse(struct dma_async_tx_descriptor *tx)
{
 return (tx->flags & DMA_CTRL_REUSE) == DMA_CTRL_REUSE;
}

static inline __attribute__((no_instrument_function)) int dmaengine_desc_free(struct dma_async_tx_descriptor *desc)
{

 if (dmaengine_desc_test_reuse(desc))
  return desc->desc_free(desc);
 else
  return -1;
}



int dma_async_device_register(struct dma_device *device);
void dma_async_device_unregister(struct dma_device *device);
void dma_run_dependencies(struct dma_async_tx_descriptor *tx);
struct dma_chan *dma_get_slave_channel(struct dma_chan *chan);
struct dma_chan *dma_get_any_slave_channel(struct dma_device *device);




static inline __attribute__((no_instrument_function)) struct dma_chan
*__dma_request_slave_channel_compat(const dma_cap_mask_t *mask,
      dma_filter_fn fn, void *fn_param,
      struct device *dev, const char *name)
{
 struct dma_chan *chan;

 chan = dma_request_slave_channel(dev, name);
 if (chan)
  return chan;

 if (!fn || !fn_param)
  return ((void *)0);

 return __dma_request_channel(mask, fn, fn_param);
}
# 39 "include/linux/netdevice.h" 2

# 1 "include/linux/dynamic_queue_limits.h" 1
# 40 "include/linux/dynamic_queue_limits.h"
struct dql {

 unsigned int num_queued;
 unsigned int adj_limit;
 unsigned int last_obj_cnt;



 unsigned int limit __attribute__((__aligned__((1 << (6)))));
 unsigned int num_completed;

 unsigned int prev_ovlimit;
 unsigned int prev_num_queued;
 unsigned int prev_last_obj_cnt;

 unsigned int lowest_slack;
 unsigned long slack_start_time;


 unsigned int max_limit;
 unsigned int min_limit;
 unsigned int slack_hold_time;
};
# 72 "include/linux/dynamic_queue_limits.h"
static inline __attribute__((no_instrument_function)) void dql_queued(struct dql *dql, unsigned int count)
{
 do { if (__builtin_expect(!!(count > ((~0U) / 16)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/dynamic_queue_limits.h"), "i" (74), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);

 dql->last_obj_cnt = count;






 __asm__ __volatile__("": : :"memory");

 dql->num_queued += count;
}


static inline __attribute__((no_instrument_function)) int dql_avail(const struct dql *dql)
{
 return (*({ __attribute__((unused)) typeof(dql->adj_limit) __var = ( typeof(dql->adj_limit)) 0; (volatile typeof(dql->adj_limit) *)&(dql->adj_limit); })) - (*({ __attribute__((unused)) typeof(dql->num_queued) __var = ( typeof(dql->num_queued)) 0; (volatile typeof(dql->num_queued) *)&(dql->num_queued); }));
}


void dql_completed(struct dql *dql, unsigned int count);


void dql_reset(struct dql *dql);


int dql_init(struct dql *dql, unsigned hold_time);
# 41 "include/linux/netdevice.h" 2

# 1 "include/linux/ethtool.h" 1
# 16 "include/linux/ethtool.h"
# 1 "include/linux/compat.h" 1
# 16 "include/linux/compat.h"
# 1 "./include/uapi/linux/if.h" 1
# 31 "./include/uapi/linux/if.h"
# 1 "./include/uapi/linux/hdlc/ioctl.h" 1
# 39 "./include/uapi/linux/hdlc/ioctl.h"
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;
} fr_proto;

typedef struct {
 unsigned int dlci;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;
# 32 "./include/uapi/linux/if.h" 2
# 76 "./include/uapi/linux/if.h"
enum net_device_flags {


 IFF_UP = 1<<0,
 IFF_BROADCAST = 1<<1,
 IFF_DEBUG = 1<<2,
 IFF_LOOPBACK = 1<<3,
 IFF_POINTOPOINT = 1<<4,
 IFF_NOTRAILERS = 1<<5,
 IFF_RUNNING = 1<<6,
 IFF_NOARP = 1<<7,
 IFF_PROMISC = 1<<8,
 IFF_ALLMULTI = 1<<9,
 IFF_MASTER = 1<<10,
 IFF_SLAVE = 1<<11,
 IFF_MULTICAST = 1<<12,
 IFF_PORTSEL = 1<<13,
 IFF_AUTOMEDIA = 1<<14,
 IFF_DYNAMIC = 1<<15,


 IFF_LOWER_UP = 1<<16,
 IFF_DORMANT = 1<<17,
 IFF_ECHO = 1<<18,

};
# 161 "./include/uapi/linux/if.h"
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
};
# 189 "./include/uapi/linux/if.h"
struct ifmap {
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

};


struct if_settings {
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;
};
# 226 "./include/uapi/linux/if.h"
struct ifreq {

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;
};
# 278 "./include/uapi/linux/if.h"
struct ifconf {
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;
};
# 17 "include/linux/compat.h" 2
# 1 "include/linux/fs.h" 1





# 1 "include/linux/kdev_t.h" 1



# 1 "include/uapi/linux/kdev_t.h" 1
# 5 "include/linux/kdev_t.h" 2
# 23 "include/linux/kdev_t.h"
static inline __attribute__((no_instrument_function)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((no_instrument_function)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((no_instrument_function)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((no_instrument_function)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((no_instrument_function)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((no_instrument_function)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((no_instrument_function)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((no_instrument_function)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((no_instrument_function)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((no_instrument_function)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((no_instrument_function)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 7 "include/linux/fs.h" 2
# 1 "include/linux/dcache.h" 1






# 1 "include/linux/rculist_bl.h" 1






# 1 "include/linux/list_bl.h" 1
# 33 "include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((no_instrument_function)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((no_instrument_function)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((no_instrument_function)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((no_instrument_function)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); __u.__val; }) & ~1UL);
}

static inline __attribute__((no_instrument_function)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((no_instrument_function)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 ;


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; })


                                                ;
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((no_instrument_function)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((no_instrument_function)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((no_instrument_function)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((no_instrument_function)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((no_instrument_function)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 8 "include/linux/rculist_bl.h" 2


static inline __attribute__((no_instrument_function)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 do { do { bool __cond = !((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long))); extern void
 __compiletime_assert_17
# 16 "include/linux/rculist_bl.h"
 (void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond)
 __compiletime_assert_17
# 16 "include/linux/rculist_bl.h"
 (); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&h->first) __val; char __c[1]; } __u = { .__val = ( typeof(*&h->first)) ((typeof(*((struct hlist_bl_node *)((unsigned long)n | 1UL))) *)((struct hlist_bl_node *)((unsigned long)n | 1UL))) }; __write_once_size(&(*&h->first), __u.__c, sizeof(*&h->first)); __u.__val; }); } while (0)
                                                                ;
}

static inline __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ typeof((h->first)) _________p1 = ({ union { typeof((h->first)) __val; char __c[1]; } __u; if (1) __read_once_size(&((h->first)), __u.__c, sizeof((h->first))); else __read_once_size_nocheck(&((h->first)), __u.__c, sizeof((h->first))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "include/linux/rculist_bl.h"
static inline __attribute__((no_instrument_function)) void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = ((void *)0);
 }
}
# 73 "include/linux/rculist_bl.h"
static inline __attribute__((no_instrument_function)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 98 "include/linux/rculist_bl.h"
static inline __attribute__((no_instrument_function)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 8 "include/linux/dcache.h" 2




# 1 "include/linux/lockref.h" 1
# 24 "include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((no_instrument_function)) int __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 13 "include/linux/dcache.h" 2
# 1 "include/linux/stringhash.h" 1
# 40 "include/linux/stringhash.h"
static inline __attribute__((no_instrument_function)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}





static inline __attribute__((no_instrument_function)) unsigned long end_name_hash(unsigned long hash)
{
 return (unsigned int)hash;
}
# 63 "include/linux/stringhash.h"
extern unsigned int __attribute__((pure)) full_name_hash(const char *, unsigned int);
# 74 "include/linux/stringhash.h"
extern u64 __attribute__((pure)) hashlen_string(const char *name);
# 14 "include/linux/dcache.h" 2

struct path;
struct vfsmount;
# 45 "include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long dummy[2];
};
extern struct dentry_stat_t dentry_stat;
# 83 "include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
};







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *, const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(struct dentry *, bool);
 struct inode *(*d_select_inode)(struct dentry *, unsigned);
 struct dentry *(*d_real)(struct dentry *, struct inode *);
} __attribute__((__aligned__((1 << (6)))));
# 216 "include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern int d_instantiate_no_diralias(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_pseudo(struct super_block *, const struct qstr *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int have_submounts(struct dentry *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);

extern void dentry_update_name_case(struct dentry *, struct qstr *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((no_instrument_function)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((format(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);
extern char *simple_dname(struct dentry *, char *, int);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
# 308 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((no_instrument_function)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 331 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((no_instrument_function)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((no_instrument_function)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((no_instrument_function)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((no_instrument_function)) int d_in_lookup(struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((no_instrument_function)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((no_instrument_function)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((no_instrument_function)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((no_instrument_function)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((no_instrument_function)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((no_instrument_function)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((no_instrument_function)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((no_instrument_function)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((no_instrument_function)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((no_instrument_function)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((no_instrument_function)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((no_instrument_function)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((no_instrument_function)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((no_instrument_function)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((no_instrument_function)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 460 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 478 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((no_instrument_function)) int simple_positive(struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((no_instrument_function)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((no_instrument_function)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 510 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 522 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return (*({ __attribute__((unused)) typeof(dentry->d_inode) __var = ( typeof(dentry->d_inode)) 0; (volatile typeof(dentry->d_inode) *)&(dentry->d_inode); }));
}
# 537 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 554 "include/linux/dcache.h"
static inline __attribute__((no_instrument_function)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}

static inline __attribute__((no_instrument_function)) struct dentry *d_real(struct dentry *dentry)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x08000000), 0))
  return dentry->d_op->d_real(dentry, ((void *)0));
 else
  return dentry;
}

static inline __attribute__((no_instrument_function)) struct inode *vfs_select_inode(struct dentry *dentry,
          unsigned open_flags)
{
 struct inode *inode = d_inode(dentry);

 if (inode && __builtin_expect(!!(dentry->d_flags & 0x02000000), 0))
  inode = dentry->d_op->d_select_inode(dentry, open_flags);

 return inode;
}
# 8 "include/linux/fs.h" 2
# 1 "include/linux/path.h" 1



struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
};

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((no_instrument_function)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}
# 9 "include/linux/fs.h" 2



# 1 "include/linux/list_lru.h" 1
# 14 "include/linux/list_lru.h"
struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {

 struct list_lru_one *lru[0];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;




} __attribute__((__aligned__((1 << (6)))));

struct list_lru {
 struct list_lru_node *node;



};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key);





int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, int dst_idx);
# 83 "include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 96 "include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 108 "include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((no_instrument_function)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((no_instrument_function)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY]))))
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 158 "include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((no_instrument_function)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((no_instrument_function)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY])))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 13 "include/linux/fs.h" 2

# 1 "include/linux/radix-tree.h" 1
# 59 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    1UL;
}
# 87 "include/linux/radix-tree.h"
struct radix_tree_node {
 unsigned char shift;
 unsigned char offset;
 unsigned int count;
 union {
  struct {

   struct radix_tree_node *parent;

   void *private_data;
  };

  struct callback_head callback_head;
 };

 struct list_head private_list;
 void *slots[(1UL << (0 ? 4 : 6))];
 unsigned long tags[3][(((1UL << (0 ? 4 : 6)) + 64 - 1) / 64)];
};


struct radix_tree_root {
 gfp_t gfp_mask;
 struct radix_tree_node *rnode;
};
# 127 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) bool radix_tree_empty(struct radix_tree_root *root)
{
 return root->rnode == ((void *)0);
}
# 197 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) void *radix_tree_deref_slot(void **pslot)
{
 return ({ typeof(*(*pslot)) *________p1 = (typeof(*(*pslot)) *)({ typeof((*pslot)) _________p1 = ({ union { typeof((*pslot)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*pslot)), __u.__c, sizeof((*pslot))); else __read_once_size_nocheck(&((*pslot)), __u.__c, sizeof((*pslot))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(*pslot)) *)(________p1)); });
}
# 212 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) void *radix_tree_deref_slot_protected(void **pslot,
       spinlock_t *treelock)
{
 return ({ do { } while (0); ; ((typeof(*(*pslot)) *)((*pslot))); });
}
# 225 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((no_instrument_function)) int radix_tree_exceptional_entry(void *arg)
{

 return (unsigned long)arg & 2;
}






static inline __attribute__((no_instrument_function)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}
# 259 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) void radix_tree_replace_slot(void **pslot, void *item)
{
 do { if (__builtin_expect(!!(radix_tree_is_internal_node(item)), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/radix-tree.h"), "i" (261), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 do { do { bool __cond = !((sizeof(*&*pslot) == sizeof(char) || sizeof(*&*pslot) == sizeof(short) || sizeof(*&*pslot) == sizeof(int) || sizeof(*&*pslot) == sizeof(long))); extern void __compiletime_assert_262(void) __attribute__((error("Need native word sized stores/loads for atomicity."))); if (__cond) __compiletime_assert_262(); do { } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*pslot) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pslot)) ((typeof(*(item)) *)(item)) }; __write_once_size(&(*&*pslot), __u.__c, sizeof(*&*pslot)); __u.__val; }); } while (0);
}

int __radix_tree_create(struct radix_tree_root *root, unsigned long index,
   unsigned order, struct radix_tree_node **nodep,
   void ***slotp);
int __radix_tree_insert(struct radix_tree_root *, unsigned long index,
   unsigned order, void *);
static inline __attribute__((no_instrument_function)) int radix_tree_insert(struct radix_tree_root *root,
   unsigned long index, void *entry)
{
 return __radix_tree_insert(root, index, 0, entry);
}
void *__radix_tree_lookup(struct radix_tree_root *root, unsigned long index,
     struct radix_tree_node **nodep, void ***slotp);
void *radix_tree_lookup(struct radix_tree_root *, unsigned long);
void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long);
bool __radix_tree_delete_node(struct radix_tree_root *root,
         struct radix_tree_node *node);
void *radix_tree_delete_item(struct radix_tree_root *, unsigned long, void *);
void *radix_tree_delete(struct radix_tree_root *, unsigned long);
struct radix_tree_node *radix_tree_replace_clear_tags(
    struct radix_tree_root *root,
    unsigned long index, void *entry);
unsigned int radix_tree_gang_lookup(struct radix_tree_root *root,
   void **results, unsigned long first_index,
   unsigned int max_items);
unsigned int radix_tree_gang_lookup_slot(struct radix_tree_root *root,
   void ***results, unsigned long *indices,
   unsigned long first_index, unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag_slot(struct radix_tree_root *root, void ***results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
unsigned long radix_tree_range_tag_if_tagged(struct radix_tree_root *root,
  unsigned long *first_indexp, unsigned long last_index,
  unsigned long nr_to_tag,
  unsigned int fromtag, unsigned int totag);
int radix_tree_tagged(struct radix_tree_root *root, unsigned int tag);
unsigned long radix_tree_locate_item(struct radix_tree_root *root, void *item);

static inline __attribute__((no_instrument_function)) void radix_tree_preload_end(void)
{
 __asm__ __volatile__("": : :"memory");
}
# 336 "include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;



};

static inline __attribute__((no_instrument_function)) unsigned int iter_shift(struct radix_tree_iter *iter)
{



 return 0;

}
# 365 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 376 "include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 394 "include/linux/radix-tree.h"
void **radix_tree_next_chunk(struct radix_tree_root *root,
        struct radix_tree_iter *iter, unsigned flags);
# 406 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) __attribute__((warn_unused_result))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + (slots << iter_shift(iter));
}
# 427 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) __attribute__((warn_unused_result))
void **radix_tree_iter_next(struct radix_tree_iter *iter)
{
 iter->next_index = __radix_tree_iter_add(iter, 1);
 iter->tags = 0;
 return ((void *)0);
}







static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return (iter->next_index - iter->index) >> iter_shift(iter);
}

static inline __attribute__((no_instrument_function)) struct radix_tree_node *entry_to_node(void *ptr)
{
 return (void *)((unsigned long)ptr & ~1UL);
}
# 463 "include/linux/radix-tree.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void **
radix_tree_next_slot(void **slot, struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & 0x0100) {
  void *canon = slot;

  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  while ((0 || 0) &&
     radix_tree_is_internal_node(slot[1])) {
   if (entry_to_node(slot[1]) == canon) {
    iter->tags >>= 1;
    iter->index = __radix_tree_iter_add(iter, 1);
    slot++;
    continue;
   }
   iter->next_index = __radix_tree_iter_add(iter, 1);
   return ((void *)0);
  }
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   return slot + 1;
  }
  if (!(flags & 0x0200)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset;
   iter->index = __radix_tree_iter_add(iter, offset + 1);
   return slot + offset + 1;
  }
 } else {
  long count = radix_tree_chunk_size(iter);
  void *canon = slot;

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if ((0 || 0) &&
       radix_tree_is_internal_node(*slot)) {
    if (entry_to_node(*slot) == canon)
     continue;
    iter->next_index = iter->index;
    break;
   }

   if (__builtin_expect(!!(*slot), 1))
    return slot;
   if (flags & 0x0200) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);
}
# 15 "include/linux/fs.h" 2







# 1 "include/linux/semaphore.h" 1
# 16 "include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 32 "include/linux/semaphore.h"
static inline __attribute__((no_instrument_function)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { (0) } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_interruptible(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_killable(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_trylock(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 23 "include/linux/fs.h" 2
# 1 "./include/uapi/linux/fiemap.h" 1
# 16 "./include/uapi/linux/fiemap.h"
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 24 "include/linux/fs.h" 2



# 1 "include/linux/migrate_mode.h" 1
# 10 "include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
};
# 28 "include/linux/fs.h" 2



# 1 "include/linux/blk_types.h" 1
# 10 "include/linux/blk_types.h"
struct bio_set;
struct bio;
struct bio_integrity_payload;
struct page;
struct block_device;
struct io_context;
struct cgroup_subsys_state;
typedef void (bio_end_io_t) (struct bio *);
typedef void (bio_destructor_t) (struct bio *);




struct bio_vec {
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;
};



struct bvec_iter {
 sector_t bi_sector;

 unsigned int bi_size;

 unsigned int bi_idx;

 unsigned int bi_bvec_done;

};





struct bio {
 struct bio *bi_next;
 struct block_device *bi_bdev;
 unsigned int bi_flags;
 int bi_error;
 unsigned long bi_rw;



 struct bvec_iter bi_iter;




 unsigned int bi_phys_segments;





 unsigned int bi_seg_front_size;
 unsigned int bi_seg_back_size;

 atomic_t __bi_remaining;

 bio_end_io_t *bi_end_io;

 void *bi_private;
# 82 "include/linux/blk_types.h"
 union {



 };

 unsigned short bi_vcnt;





 unsigned short bi_max_vecs;

 atomic_t __bi_cnt;

 struct bio_vec *bi_io_vec;

 struct bio_set *bi_pool;






 struct bio_vec bi_inline_vecs[0];
};
# 146 "include/linux/blk_types.h"
enum rq_flag_bits {

 __REQ_WRITE,
 __REQ_FAILFAST_DEV,
 __REQ_FAILFAST_TRANSPORT,
 __REQ_FAILFAST_DRIVER,

 __REQ_SYNC,
 __REQ_META,
 __REQ_PRIO,
 __REQ_DISCARD,
 __REQ_SECURE,
 __REQ_WRITE_SAME,

 __REQ_NOIDLE,
 __REQ_INTEGRITY,
 __REQ_FUA,
 __REQ_FLUSH,


 __REQ_RAHEAD,
 __REQ_THROTTLED,



 __REQ_SORTED,
 __REQ_SOFTBARRIER,
 __REQ_NOMERGE,
 __REQ_STARTED,
 __REQ_DONTPREP,
 __REQ_QUEUED,
 __REQ_ELVPRIV,
 __REQ_FAILED,
 __REQ_QUIET,
 __REQ_PREEMPT,


 __REQ_ALLOCED,
 __REQ_COPY_USER,
 __REQ_FLUSH_SEQ,
 __REQ_IO_STAT,
 __REQ_MIXED_MERGE,
 __REQ_PM,
 __REQ_HASHED,
 __REQ_MQ_INFLIGHT,
 __REQ_NR_BITS,
};
# 245 "include/linux/blk_types.h"
typedef unsigned int blk_qc_t;



static inline __attribute__((no_instrument_function)) bool blk_qc_t_valid(blk_qc_t cookie)
{
 return cookie != -1U;
}

static inline __attribute__((no_instrument_function)) blk_qc_t blk_tag_to_qc_t(unsigned int tag, unsigned int queue_num)
{
 return tag | (queue_num << 16);
}

static inline __attribute__((no_instrument_function)) unsigned int blk_qc_t_to_queue_num(blk_qc_t cookie)
{
 return cookie >> 16;
}

static inline __attribute__((no_instrument_function)) unsigned int blk_qc_t_to_tag(blk_qc_t cookie)
{
 return cookie & ((1u << 16) - 1);
}
# 32 "include/linux/fs.h" 2


# 1 "include/linux/delayed_call.h" 1
# 9 "include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((no_instrument_function)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((no_instrument_function)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((no_instrument_function)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 35 "include/linux/fs.h" 2


# 1 "include/uapi/linux/fs.h" 1
# 45 "include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};
# 155 "include/uapi/linux/fs.h"
struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 unsigned char fsx_pad[12];
};
# 254 "include/uapi/linux/fs.h"
struct fscrypt_policy {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 master_key_descriptor[8];
} __attribute__((packed));
# 38 "include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct export_operations;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) inode_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) inode_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) files_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 248 "include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec ia_atime;
 struct timespec ia_mtime;
 struct timespec ia_ctime;






 struct file *ia_file;
};




# 1 "include/linux/quota.h" 1
# 40 "include/linux/quota.h"
# 1 "include/linux/percpu_counter.h" 1
# 19 "include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 40 "include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void __percpu_counter_add(struct percpu_counter *fbc, s64 amount, s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);

static inline __attribute__((no_instrument_function)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((no_instrument_function)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 __percpu_counter_add(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((no_instrument_function)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((no_instrument_function)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((no_instrument_function)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((no_instrument_function)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 s64 ret = fbc->count;

 __asm__ __volatile__("": : :"memory");
 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((no_instrument_function)) int percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 175 "include/linux/percpu_counter.h"
static inline __attribute__((no_instrument_function)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((no_instrument_function)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((no_instrument_function)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "include/linux/quota.h" 2

# 1 "./include/uapi/linux/dqblk_xfs.h" 1
# 52 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 148 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 191 "./include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];
};
# 43 "include/linux/quota.h" 2
# 1 "include/linux/dqblk_v1.h" 1
# 44 "include/linux/quota.h" 2
# 1 "include/linux/dqblk_v2.h" 1







# 1 "include/linux/dqblk_qtree.h" 1
# 17 "include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((no_instrument_function)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 9 "include/linux/dqblk_v2.h" 2
# 45 "include/linux/quota.h" 2



# 1 "include/linux/projid.h" 1
# 16 "include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((no_instrument_function)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((no_instrument_function)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((no_instrument_function)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((no_instrument_function)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}
# 64 "include/linux/projid.h"
static inline __attribute__((no_instrument_function)) kprojid_t make_kprojid(struct user_namespace *from, projid_t projid)
{
 return (kprojid_t){ projid };
}

static inline __attribute__((no_instrument_function)) projid_t from_kprojid(struct user_namespace *to, kprojid_t kprojid)
{
 return __kprojid_val(kprojid);
}

static inline __attribute__((no_instrument_function)) projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t kprojid)
{
 projid_t projid = from_kprojid(to, kprojid);
 if (projid == (projid_t)-1)
  projid = 65534;
 return projid;
}

static inline __attribute__((no_instrument_function)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return true;
}
# 49 "include/linux/quota.h" 2
# 1 "include/uapi/linux/quota.h" 1
# 91 "include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 111 "include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 145 "include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 179 "include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "include/linux/quota.h"
static inline __attribute__((no_instrument_function)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (114), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);
 }
 return kqid;
}







static inline __attribute__((no_instrument_function)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (141), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0);
 }
 return kqid;
}





static inline __attribute__((no_instrument_function)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((no_instrument_function)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((no_instrument_function)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}


extern spinlock_t dq_data_lock;
# 195 "include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time_t dqb_btime;
 time_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((no_instrument_function)) int info_dirty(struct mem_dqinfo *info)
{
 return (__builtin_constant_p((DQF_INFO_DIRTY_B)) ? constant_test_bit((DQF_INFO_DIRTY_B), (&info->dqi_flags)) : variable_test_bit((DQF_INFO_DIRTY_B), (&info->dqi_flags)));
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 int stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats *dqstats_pcpu;
extern struct dqstats dqstats;

static inline __attribute__((no_instrument_function)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((no_instrument_function)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 285 "include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 atomic_t dq_count;
 wait_queue_head_t dq_wait_unused;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 384 "include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;






 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 458 "include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 482 "include/linux/quota.h"
static inline __attribute__((no_instrument_function)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((no_instrument_function)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { bool __cond = !(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0))); extern void __compiletime_assert_495(void) __attribute__((error("BUILD_BUG_ON failed: " "(flag) == 0 || (((flag) & ((flag) - 1)) != 0)"))); if (__cond) __compiletime_assert_495(); do { } while (0); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}


extern void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype);
# 510 "include/linux/quota.h"
struct quota_info {
 unsigned int flags;
 struct mutex dqio_mutex;
 struct mutex dqonoff_mutex;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 270 "include/linux/fs.h" 2
# 303 "include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 317 "include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
# 328 "include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;
 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
};

static inline __attribute__((no_instrument_function)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}

static inline __attribute__((no_instrument_function)) int iocb_flags(struct file *file);

static inline __attribute__((no_instrument_function)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
 };
}
# 360 "include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);

 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);

struct address_space {
 struct inode *host;
 struct radix_tree_root page_tree;
 spinlock_t tree_lock;
 atomic_t i_mmap_writable;
 struct rb_root i_mmap;
 struct rw_semaphore i_mmap_rwsem;

 unsigned long nrpages;

 unsigned long nrexceptional;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long))));





struct request_queue;

struct block_device {
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 struct list_head bd_inodes;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
};
# 501 "include/linux/fs.h"
int mapping_tagged(struct address_space *mapping, int tag);

static inline __attribute__((no_instrument_function)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((no_instrument_function)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((no_instrument_function)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((no_instrument_function)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}




static inline __attribute__((no_instrument_function)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ union { typeof((&mapping->i_mmap)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap)->rb_node), __u.__c, sizeof((&mapping->i_mmap)->rb_node)); else __read_once_size_nocheck(&((&mapping->i_mmap)->rb_node), __u.__c, sizeof((&mapping->i_mmap)->rb_node)); __u.__val; }) == ((void *)0));
}
# 540 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((no_instrument_function)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((no_instrument_function)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((no_instrument_function)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((no_instrument_function)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 578 "include/linux/fs.h"
struct posix_acl;


static inline __attribute__((no_instrument_function)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((no_instrument_function)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}
# 602 "include/linux/fs.h"
struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec i_atime;
 struct timespec i_mtime;
 struct timespec i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 unsigned int i_blkbits;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;
# 666 "include/linux/fs.h"
 struct list_head i_lru;
 struct list_head i_sb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 u64 i_version;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;



 const struct file_operations *i_fop;
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct hlist_head i_fsnotify_marks;






 void *i_private;
};

static inline __attribute__((no_instrument_function)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}
# 726 "include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((no_instrument_function)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((no_instrument_function)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 789 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) loff_t i_size_read(const struct inode *inode)
{
# 808 "include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((no_instrument_function)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 830 "include/linux/fs.h"
 inode->i_size = i_size;

}






static inline __attribute__((no_instrument_function)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(&init_user_ns, inode->i_uid);
}

static inline __attribute__((no_instrument_function)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(&init_user_ns, inode->i_gid);
}

static inline __attribute__((no_instrument_function)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(&init_user_ns, uid);
}

static inline __attribute__((no_instrument_function)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(&init_user_ns, gid);
}

static inline __attribute__((no_instrument_function)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((no_instrument_function)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};




struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((no_instrument_function)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;
} __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];
};

static inline __attribute__((no_instrument_function)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 986 "include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 int (*lm_compare_owner)(struct file_lock *, struct file_lock *);
 unsigned long (*lm_owner_key)(struct file_lock *);
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
int locks_in_grace(struct net *);
int opens_in_grace(struct net *);


# 1 "include/linux/nfs_fs_i.h" 1



struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1024 "include/linux/fs.h" 2
# 1042 "include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_next;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_block;
 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 struct pid *fl_nspid;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
  } afs;
 } fl_u;
};

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1091 "include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);


extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int posix_unblock_lock(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);
struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1268 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((no_instrument_function)) struct dentry *file_dentry(const struct file *file)
{
 struct dentry *dentry = file->f_path.dentry;

 if (__builtin_expect(!!(dentry->d_flags & 0x08000000), 0))
  return dentry->d_op->d_real(dentry, file_inode(file));
 else
  return dentry;
}

static inline __attribute__((no_instrument_function)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 spinlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern void f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);

struct mm_struct;
# 1332 "include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;

 struct hlist_bl_head s_anon;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;

 char s_id[32];
 u8 s_uuid[16];

 void *s_fs_info;
 unsigned int s_max_links;
 fmode_t s_mode;



 u32 s_time_gran;





 struct mutex s_vfs_rename_mutex;





 char *s_subtype;





 char *s_options;
 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;





 struct list_lru s_dentry_lru __attribute__((__aligned__((1 << (6)))));
 struct list_lru s_inode_lru __attribute__((__aligned__((1 << (6)))));
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << (6)))));
 struct list_head s_inodes;
};

extern struct timespec current_fs_time(struct super_block *sb);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
# 1474 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1486 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1498 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1522 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((no_instrument_function)) int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, false);
}
# 1551 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, true);
}
# 1569 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, true);
}


extern bool inode_owner_or_capable(const struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, const char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_whiteout(struct inode *, struct dentry *);




extern void inode_init_owner(struct inode *inode, const struct inode *dir,
   umode_t mode);



struct fiemap_extent_info {
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;

};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);
# 1631 "include/linux/fs.h"
struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 const filldir_t actor;
 loff_t pos;
};

struct block_device_operations;
# 1668 "include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 unsigned int (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*aio_fsync) (struct kiocb *, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,
   u64);
 ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
   u64);
};

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *,const char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *);
 int (*rename2) (struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);
 int (*setxattr) (struct dentry *, struct inode *,
    const char *, const void *, size_t, int);
 ssize_t (*getxattr) (struct dentry *, struct inode *,
        const char *, void *, size_t);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*removexattr) (struct dentry *, const char *);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode, int *opened);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*set_acl)(struct inode *, struct posix_acl *, int);
} __attribute__((__aligned__((1 << (6)))));

ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t __vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t __vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, const struct iovec *,
  unsigned long, loff_t *, int);
extern ssize_t vfs_writev(struct file *, const struct iovec *,
  unsigned long, loff_t *, int);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern int vfs_clone_file_range(struct file *file_in, loff_t pos_in,
  struct file *file_out, loff_t pos_out, u64 len);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);

struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 1945 "include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((no_instrument_function)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, ((1 << 0) | (1 << 1) | (1 << 2)));
}

static inline __attribute__((no_instrument_function)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((no_instrument_function)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((no_instrument_function)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}
# 1981 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void inode_inc_iversion(struct inode *inode)
{
       spin_lock(&inode->i_lock);
       inode->i_version++;
       spin_unlock(&inode->i_lock);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline __attribute__((no_instrument_function)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;







 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_ns(struct file_system_type *fs_type, int flags,
 void *data, int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
extern struct dentry *mount_pseudo(struct file_system_type *, char *,
 const struct super_operations *ops,
 const struct dentry_operations *dops,
 unsigned long);
# 2082 "include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data);

extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int vfs_ustat(dev_t, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline __attribute__((no_instrument_function)) int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (0002000 | 00010)) == 0002000;
}






static inline __attribute__((no_instrument_function)) int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline __attribute__((no_instrument_function)) int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(file_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline __attribute__((no_instrument_function)) int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2199 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) int break_lease(struct inode *inode, unsigned int mode)
{






 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((no_instrument_function)) int break_deleg(struct inode *inode, unsigned int mode)
{






 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((no_instrument_function)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((no_instrument_function)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((no_instrument_function)) int break_layout(struct inode *inode, bool wait)
{
 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2289 "include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 struct audit_names *aname;
 int refcnt;
 const char iname[];
};

extern long vfs_truncate(const struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

enum {
 FILE_CREATED = 1,
 FILE_OPENED = 2
};
extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *),
   int *opened);
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) vfs_caches_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;





extern int register_blkdev(unsigned int, const char *);
extern void unregister_blkdev(unsigned int, const char *);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);

extern struct super_block *blockdev_superblock;

static inline __attribute__((no_instrument_function)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return sb == blockdev_superblock;
}
# 2387 "include/linux/fs.h"
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);
extern int __blkdev_reread_part(struct block_device *bdev);
extern int blkdev_reread_part(struct block_device *bdev);


extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
# 2424 "include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((no_instrument_function)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((no_instrument_function)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern const char *__bdevname(dev_t, char *buffer);
extern const char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev(const char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);
# 2477 "include/linux/fs.h"
extern void check_disk_size_change(struct gendisk *disk,
       struct block_device *bdev);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline __attribute__((no_instrument_function)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait(struct address_space *);
extern void filemap_fdatawait_keep_errors(struct address_space *);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);






static inline __attribute__((no_instrument_function)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & (1 << 4)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & (1 << 5)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int __inode_permission(struct inode *, int);
extern int generic_permission(struct inode *, int);
extern int __check_sticky(struct inode *dir, struct inode *inode);

static inline __attribute__((no_instrument_function)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((no_instrument_function)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((no_instrument_function)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, false);
}

static inline __attribute__((no_instrument_function)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 2586 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((no_instrument_function)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((no_instrument_function)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((no_instrument_function)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((no_instrument_function)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}
# 2620 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void i_readcount_dec(struct inode *inode)
{
 return;
}
static inline __attribute__((no_instrument_function)) void i_readcount_inc(struct inode *inode)
{
 return;
}

extern int do_pipe_flags(int *, int);
# 2643 "include/linux/fs.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "",
};

static inline __attribute__((no_instrument_function)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if (id < 0 || id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

extern int kernel_read(struct file *, loff_t, char *, unsigned long);
extern int kernel_read_file(struct file *, void **, loff_t *, loff_t,
       enum kernel_read_file_id);
extern int kernel_read_file_from_path(char *, void **, loff_t *, loff_t,
          enum kernel_read_file_id);
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t,
        enum kernel_read_file_id);
extern ssize_t kernel_write(struct file *, const char *, size_t, loff_t);
extern ssize_t __kernel_write(struct file *, const char *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(struct path *, struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((no_instrument_function)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((no_instrument_function)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern unsigned int get_next_ino(void);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);
extern int dentry_needs_remove_privs(struct dentry *dentry);
static inline __attribute__((no_instrument_function)) int file_needs_remove_privs(struct file *file)
{
 return dentry_needs_remove_privs(file->f_path.dentry);
}

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((no_instrument_function)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((no_instrument_function)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern blk_qc_t submit_bio(int, struct bio *);
extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t default_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(int rw, struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,


 DIO_ASYNC_EXTEND = 0x04,


 DIO_SKIP_DIO_COUNT = 0x08,
};

void dio_end_io(struct bio *bio, int error);

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((no_instrument_function)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 2849 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 2861 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
extern int generic_readlink(struct dentry *, char *, int);
extern void generic_fillattr(struct inode *, struct kstat *);
int vfs_getattr_nosec(struct path *path, struct kstat *stat);
extern int vfs_getattr(struct path *, struct kstat *);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_stat(const char *, struct kstat *);
extern int vfs_lstat(const char *, struct kstat *);
extern int vfs_fstat(unsigned int, struct kstat *);
extern int vfs_fstatat(int , const char *, struct kstat *, int);

extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern void get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(struct vfsmount *, struct dentry *, struct kstat *);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long, struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);




extern int inode_change_ok(const struct inode *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, const struct iattr *attr);

extern int file_update_time(struct file *file);

extern int generic_show_options(struct seq_file *m, struct dentry *root);
extern void save_mount_options(struct super_block *sb, char *options);
extern void replace_mount_options(struct super_block *sb, char *options);

static inline __attribute__((no_instrument_function)) bool io_is_direct(struct file *filp)
{
 return (filp->f_flags & 00040000) || ((filp->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((no_instrument_function)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= (1 << 1);
 if (io_is_direct(file))
  res |= (1 << 2);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & 1)))
  res |= (1 << 4);
 if (file->f_flags & 04000000)
  res |= (1 << 5);
 return res;
}

static inline __attribute__((no_instrument_function)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[0];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3075 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) get_filesystem_list(char *buf);
# 3106 "include/linux/fs.h"
static inline __attribute__((no_instrument_function)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((no_instrument_function)) int check_sticky(struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(dir, inode);
}

static inline __attribute__((no_instrument_function)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= 4096;
}

static inline __attribute__((no_instrument_function)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((no_instrument_function)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((no_instrument_function)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((no_instrument_function)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((no_instrument_function)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((no_instrument_function)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & 16);
}

static inline __attribute__((no_instrument_function)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & 16);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);
# 18 "include/linux/compat.h" 2
# 1 "./include/uapi/linux/aio_abi.h" 1
# 33 "./include/uapi/linux/aio_abi.h"
typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,




 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
# 58 "./include/uapi/linux/aio_abi.h"
struct io_event {
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;
};
# 79 "./include/uapi/linux/aio_abi.h"
struct iocb {

 __u64 aio_data;
 __u32 aio_key, aio_reserved1;



 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;
};
# 19 "include/linux/compat.h" 2


# 1 "./arch/x86/include/asm/compat.h" 1
# 10 "./arch/x86/include/asm/compat.h"
# 1 "./arch/x86/include/asm/user32.h" 1






struct user_i387_ia32_struct {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;
 u32 st_space[20];
};


struct user32_fxsr_struct {
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;
 unsigned short fop;
 int fip;
 int fcs;
 int foo;
 int fos;
 int mxcsr;
 int reserved;
 int st_space[32];
 int xmm_space[32];
 int padding[56];
};

struct user_regs_struct32 {
 __u32 ebx, ecx, edx, esi, edi, ebp, eax;
 unsigned short ds, __ds, es, __es;
 unsigned short fs, __fs, gs, __gs;
 __u32 orig_eax, eip;
 unsigned short cs, __cs;
 __u32 eflags, esp;
 unsigned short ss, __ss;
};

struct user32 {
  struct user_regs_struct32 regs;
  int u_fpvalid;

  struct user_i387_ia32_struct i387;

  __u32 u_tsize;
  __u32 u_dsize;
  __u32 u_ssize;
  __u32 start_code;
  __u32 start_stack;



  __u32 signal;
  int reserved;
  __u32 u_ar0;

  __u32 u_fpstate;
  __u32 magic;
  char u_comm[32];
  int u_debugreg[8];
};
# 11 "./arch/x86/include/asm/compat.h" 2





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_time_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_ino_t;
typedef u16 compat_dev_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef u16 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef s32 compat_daddr_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;

typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef s64 __attribute__((aligned(4))) compat_s64;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u64 __attribute__((aligned(4))) compat_u64;
typedef u32 compat_uptr_t;

struct compat_timespec {
 compat_time_t tv_sec;
 s32 tv_nsec;
};

struct compat_timeval {
 compat_time_t tv_sec;
 s32 tv_usec;
};

struct compat_stat {
 compat_dev_t st_dev;
 u16 __pad1;
 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_nlink_t st_nlink;
 __compat_uid_t st_uid;
 __compat_gid_t st_gid;
 compat_dev_t st_rdev;
 u16 __pad2;
 u32 st_size;
 u32 st_blksize;
 u32 st_blocks;
 u32 st_atime;
 u32 st_atime_nsec;
 u32 st_mtime;
 u32 st_mtime_nsec;
 u32 st_ctime;
 u32 st_ctime_nsec;
 u32 __unused4;
 u32 __unused5;
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};
# 95 "./arch/x86/include/asm/compat.h"
struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
} __attribute__((packed));

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};




typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;

typedef struct compat_siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[128/sizeof(int) - 3];


  struct {
   unsigned int _pid;
   unsigned int _uid;
  } _kill;


  struct {
   compat_timer_t _tid;
   int _overrun;
   compat_sigval_t _sigval;
   int _sys_private;
   int _overrun_incr;
  } _timer;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   compat_sigval_t _sigval;
  } _rt;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_clock_t _utime;
   compat_clock_t _stime;
  } _sigchld;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_s64 _utime;
   compat_s64 _stime;
  } _sigchld_x32;


  struct {
   unsigned int _addr;
  } _sigfault;


  struct {
   int _band;
   int _fd;
  } _sigpoll;

  struct {
   unsigned int _call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} compat_siginfo_t;




struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_time_t sem_otime;
 compat_ulong_t __unused1;
 compat_time_t sem_ctime;
 compat_ulong_t __unused2;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_time_t msg_stime;
 compat_ulong_t __unused1;
 compat_time_t msg_rtime;
 compat_ulong_t __unused2;
 compat_time_t msg_ctime;
 compat_ulong_t __unused3;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_time_t shm_atime;
 compat_ulong_t __unused1;
 compat_time_t shm_dtime;
 compat_ulong_t __unused2;
 compat_time_t shm_ctime;
 compat_ulong_t __unused3;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};
# 276 "./arch/x86/include/asm/compat.h"
typedef struct user_regs_struct32 compat_elf_gregset_t;
# 286 "./arch/x86/include/asm/compat.h"
static inline __attribute__((no_instrument_function)) void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline __attribute__((no_instrument_function)) compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}

static inline __attribute__((no_instrument_function)) void *arch_compat_alloc_user_space(long len)
{
 compat_uptr_t sp;

 if (test_ti_thread_flag(current_thread_info(), 17)) {
  sp = ((struct pt_regs *)(get_current())->thread.sp0 - 1)->sp;
 } else {

  sp = ((struct pt_regs *)(get_current())->thread.sp0 - 1)->sp - 128;
 }

 return (void *)((sp - len) & ~((__typeof__(sp - len))((16)-1)));
}

static inline __attribute__((no_instrument_function)) bool in_x32_syscall(void)
{




 return false;
}

static inline __attribute__((no_instrument_function)) bool in_compat_syscall(void)
{
 return in_ia32_syscall() || in_x32_syscall();
}
# 22 "include/linux/compat.h" 2
# 64 "include/linux/compat.h"
typedef struct compat_sigaltstack {
 compat_uptr_t ss_sp;
 int ss_flags;
 compat_size_t ss_size;
} compat_stack_t;





typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

typedef compat_ulong_t compat_aio_context_t;

struct compat_sel_arg_struct;
struct rusage;

struct compat_itimerspec {
 struct compat_timespec it_interval;
 struct compat_timespec it_value;
};

struct compat_utimbuf {
 compat_time_t actime;
 compat_time_t modtime;
};

struct compat_itimerval {
 struct compat_timeval it_interval;
 struct compat_timeval it_value;
};

struct compat_tms {
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;
};

struct compat_timex {
 compat_uint_t modes;
 compat_long_t offset;
 compat_long_t freq;
 compat_long_t maxerror;
 compat_long_t esterror;
 compat_int_t status;
 compat_long_t constant;
 compat_long_t precision;
 compat_long_t tolerance;
 struct compat_timeval time;
 compat_long_t tick;
 compat_long_t ppsfreq;
 compat_long_t jitter;
 compat_int_t shift;
 compat_long_t stabil;
 compat_long_t jitcnt;
 compat_long_t calcnt;
 compat_long_t errcnt;
 compat_long_t stbcnt;
 compat_int_t tai;

 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32;
};



typedef struct {
 compat_sigset_word sig[(64 / 32)];
} compat_sigset_t;

struct compat_sigaction {

 compat_uptr_t sa_handler;
 compat_ulong_t sa_flags;





 compat_uptr_t sa_restorer;

 compat_sigset_t sa_mask __attribute__((packed));
};





extern int compat_get_timespec(struct timespec *, const void *);
extern int compat_put_timespec(const struct timespec *, void *);
extern int compat_get_timeval(struct timeval *, const void *);
extern int compat_put_timeval(const struct timeval *, void *);







extern int compat_convert_timespec(struct timespec **,
       const void *);

struct compat_iovec {
 compat_uptr_t iov_base;
 compat_size_t iov_len;
};

struct compat_rlimit {
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;
};

struct compat_rusage {
 struct compat_timeval ru_utime;
 struct compat_timeval ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;
};

extern int put_compat_rusage(const struct rusage *,
        struct compat_rusage *);

struct compat_siginfo;

extern long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);

struct compat_dirent {
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];
};

struct compat_ustat {
 compat_daddr_t f_tfree;
 compat_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};



typedef struct compat_sigevent {
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  } _sigev_thread;
 } _sigev_un;
} compat_sigevent_t;

struct compat_ifmap {
 compat_ulong_t mem_start;
 compat_ulong_t mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;
};

struct compat_if_settings {
 unsigned int type;
 unsigned int size;
 compat_uptr_t ifs_ifsu;
};

struct compat_ifreq {
 union {
  char ifrn_name[16];
 } ifr_ifrn;
 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  compat_int_t ifru_ivalue;
  compat_int_t ifru_mtu;
  struct compat_ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  compat_caddr_t ifru_data;
  struct compat_if_settings ifru_settings;
 } ifr_ifru;
};

struct compat_ifconf {
 compat_int_t ifc_len;
 compat_caddr_t ifcbuf;
};

struct compat_robust_list {
 compat_uptr_t next;
};

struct compat_robust_list_head {
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;
};


struct compat_old_sigaction {
 compat_uptr_t sa_handler;
 compat_old_sigset_t sa_mask;
 compat_ulong_t sa_flags;
 compat_uptr_t sa_restorer;
};


struct compat_statfs;
struct compat_statfs64;
struct compat_old_linux_dirent;
struct compat_linux_dirent;
struct linux_dirent64;
struct compat_msghdr;
struct compat_mmsghdr;
struct compat_sysinfo;
struct compat_sysctl_args;
struct compat_kexec_segment;
struct compat_mq_attr;
struct compat_msgbuf;

extern void compat_exit_robust_list(struct task_struct *curr);

 long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
 long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);

 long compat_sys_ipc(u32, int, int, u32, compat_uptr_t, u32);
 long compat_sys_shmat(int shmid, compat_uptr_t shmaddr, int shmflg);
 long compat_sys_semctl(int semid, int semnum, int cmd, int arg);
 long compat_sys_msgsnd(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, int msgflg);
 long compat_sys_msgrcv(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, compat_long_t msgtyp, int msgflg);
long compat_sys_msgctl(int first, int second, void *uptr);
long compat_sys_shmctl(int first, int second, void *uptr);
long compat_sys_semtimedop(int semid, struct sembuf *tsems,
  unsigned nsems, const struct compat_timespec *timeout);
 long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);
 long compat_sys_ustat(unsigned dev, struct compat_ustat *u32);

 ssize_t compat_sys_readv(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
 ssize_t compat_sys_writev(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
 ssize_t compat_sys_preadv(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
 ssize_t compat_sys_pwritev(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
 ssize_t compat_sys_preadv2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, int flags);
 ssize_t compat_sys_pwritev2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, int flags);


 long compat_sys_preadv64(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos);



 long compat_sys_pwritev64(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos);


 long compat_sys_lseek(unsigned int, compat_off_t, unsigned int);

 long compat_sys_execve(const char *filename, const compat_uptr_t *argv,
       const compat_uptr_t *envp);
 long compat_sys_execveat(int dfd, const char *filename,
       const compat_uptr_t *argv,
       const compat_uptr_t *envp, int flags);

 long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct compat_timeval *tvp);

 long compat_sys_old_select(struct compat_sel_arg_struct *arg);

 long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);






long compat_get_bitmap(unsigned long *mask, const compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
int copy_siginfo_from_user32(siginfo_t *to, struct compat_siginfo *from);
int copy_siginfo_to_user32(struct compat_siginfo *to, const siginfo_t *from);
int get_compat_sigevent(struct sigevent *event,
  const struct compat_sigevent *u_event);
long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid, compat_pid_t pid, int sig,
      struct compat_siginfo *uinfo);

 long compat_sys_sigaction(int sig,
                                   const struct compat_old_sigaction *act,
                                   struct compat_old_sigaction *oact);


static inline __attribute__((no_instrument_function)) int compat_timeval_compare(struct compat_timeval *lhs,
     struct compat_timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

static inline __attribute__((no_instrument_function)) int compat_timespec_compare(struct compat_timespec *lhs,
     struct compat_timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern int get_compat_itimerspec(struct itimerspec *dst,
     const struct compat_itimerspec *src);
extern int put_compat_itimerspec(struct compat_itimerspec *dst,
     const struct itimerspec *src);

 long compat_sys_gettimeofday(struct compat_timeval *tv,
  struct timezone *tz);
 long compat_sys_settimeofday(struct compat_timeval *tv,
  struct timezone *tz);

 long compat_sys_adjtimex(struct compat_timex *utp);

extern __attribute__((format(printf, 1, 2))) int compat_printk(const char *fmt, ...);
extern void sigset_from_compat(sigset_t *set, const compat_sigset_t *compat);
extern void sigset_to_compat(compat_sigset_t *compat, const sigset_t *set);

 long compat_sys_migrate_pages(compat_pid_t pid,
  compat_ulong_t maxnode, const compat_ulong_t *old_nodes,
  const compat_ulong_t *new_nodes);

extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);

extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);
 long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);

 long compat_sys_lookup_dcookie(u32, u32, char *, compat_size_t);



struct epoll_event;
 long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   const compat_sigset_t *sigmask,
   compat_size_t sigsetsize);

 long compat_sys_utime(const char *filename,
     struct compat_utimbuf *t);
 long compat_sys_utimensat(unsigned int dfd,
         const char *filename,
         struct compat_timespec *t,
         int flags);

 long compat_sys_time(compat_time_t *tloc);
 long compat_sys_stime(compat_time_t *tptr);
 long compat_sys_signalfd(int ufd,
        const compat_sigset_t *sigmask,
        compat_size_t sigsetsize);
 long compat_sys_timerfd_settime(int ufd, int flags,
       const struct compat_itimerspec *utmr,
       struct compat_itimerspec *otmr);
 long compat_sys_timerfd_gettime(int ufd,
       struct compat_itimerspec *otmr);

 long compat_sys_move_pages(pid_t pid, compat_ulong_t nr_pages,
          __u32 *pages,
          const int *nodes,
          int *status,
          int flags);
 long compat_sys_futimesat(unsigned int dfd,
         const char *filename,
         struct compat_timeval *t);
 long compat_sys_utimes(const char *filename,
      struct compat_timeval *t);
 long compat_sys_newstat(const char *filename,
       struct compat_stat *statbuf);
 long compat_sys_newlstat(const char *filename,
        struct compat_stat *statbuf);
 long compat_sys_newfstatat(unsigned int dfd,
          const char *filename,
          struct compat_stat *statbuf,
          int flag);
 long compat_sys_newfstat(unsigned int fd,
        struct compat_stat *statbuf);
 long compat_sys_statfs(const char *pathname,
      struct compat_statfs *buf);
 long compat_sys_fstatfs(unsigned int fd,
       struct compat_statfs *buf);
 long compat_sys_statfs64(const char *pathname,
        compat_size_t sz,
        struct compat_statfs64 *buf);
 long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
         struct compat_statfs64 *buf);
 long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
       compat_ulong_t arg);
 long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
 long compat_sys_io_setup(unsigned nr_reqs, u32 *ctx32p);
 long compat_sys_io_getevents(compat_aio_context_t ctx_id,
     compat_long_t min_nr,
     compat_long_t nr,
     struct io_event *events,
     struct compat_timespec *timeout);
 long compat_sys_io_submit(compat_aio_context_t ctx_id, int nr,
         u32 *iocb);
 long compat_sys_mount(const char *dev_name,
     const char *dir_name,
     const char *type, compat_ulong_t flags,
     const void *data);
 long compat_sys_old_readdir(unsigned int fd,
           struct compat_old_linux_dirent *,
           unsigned int count);
 long compat_sys_getdents(unsigned int fd,
        struct compat_linux_dirent *dirent,
        unsigned int count);

 long compat_sys_getdents64(unsigned int fd,
          struct linux_dirent64 *dirent,
          unsigned int count);

 long compat_sys_vmsplice(int fd, const struct compat_iovec *,
        unsigned int nr_segs, unsigned int flags);
 long compat_sys_open(const char *filename, int flags,
    umode_t mode);
 long compat_sys_openat(int dfd, const char *filename,
      int flags, umode_t mode);
 long compat_sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
 long compat_sys_truncate(const char *, compat_off_t);
 long compat_sys_ftruncate(unsigned int, compat_ulong_t);
 long compat_sys_pselect6(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct compat_timespec *tsp,
        void *sig);
 long compat_sys_ppoll(struct pollfd *ufds,
     unsigned int nfds,
     struct compat_timespec *tsp,
     const compat_sigset_t *sigmask,
     compat_size_t sigsetsize);
 long compat_sys_signalfd4(int ufd,
         const compat_sigset_t *sigmask,
         compat_size_t sigsetsize, int flags);
 long compat_sys_get_mempolicy(int *policy,
      compat_ulong_t *nmask,
      compat_ulong_t maxnode,
      compat_ulong_t addr,
      compat_ulong_t flags);
 long compat_sys_set_mempolicy(int mode, compat_ulong_t *nmask,
      compat_ulong_t maxnode);
 long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,
     compat_ulong_t mode,
     compat_ulong_t *nmask,
     compat_ulong_t maxnode, compat_ulong_t flags);

 long compat_sys_setsockopt(int fd, int level, int optname,
          char *optval, unsigned int optlen);
 long compat_sys_sendmsg(int fd, struct compat_msghdr *msg,
       unsigned flags);
 long compat_sys_sendmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags);
 long compat_sys_recvmsg(int fd, struct compat_msghdr *msg,
       unsigned int flags);
 long compat_sys_recv(int fd, void *buf, compat_size_t len,
    unsigned flags);
 long compat_sys_recvfrom(int fd, void *buf, compat_size_t len,
       unsigned flags, struct sockaddr *addr,
       int *addrlen);
 long compat_sys_recvmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct compat_timespec *timeout);
 long compat_sys_nanosleep(struct compat_timespec *rqtp,
         struct compat_timespec *rmtp);
 long compat_sys_getitimer(int which,
         struct compat_itimerval *it);
 long compat_sys_setitimer(int which,
         struct compat_itimerval *in,
         struct compat_itimerval *out);
 long compat_sys_times(struct compat_tms *tbuf);
 long compat_sys_setrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
 long compat_sys_getrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
 long compat_sys_getrusage(int who, struct compat_rusage *ru);
 long compat_sys_sched_setaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
 long compat_sys_sched_getaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
 long compat_sys_timer_create(clockid_t which_clock,
   struct compat_sigevent *timer_event_spec,
   timer_t *created_timer_id);
 long compat_sys_timer_settime(timer_t timer_id, int flags,
      struct compat_itimerspec *new,
      struct compat_itimerspec *old);
 long compat_sys_timer_gettime(timer_t timer_id,
     struct compat_itimerspec *setting);
 long compat_sys_clock_settime(clockid_t which_clock,
      struct compat_timespec *tp);
 long compat_sys_clock_gettime(clockid_t which_clock,
      struct compat_timespec *tp);
 long compat_sys_clock_adjtime(clockid_t which_clock,
      struct compat_timex *tp);
 long compat_sys_clock_getres(clockid_t which_clock,
     struct compat_timespec *tp);
 long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,
        struct compat_timespec *rqtp,
        struct compat_timespec *rmtp);
 long compat_sys_rt_sigtimedwait(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct compat_timespec *uts, compat_size_t sigsetsize);
 long compat_sys_rt_sigsuspend(compat_sigset_t *unewset,
      compat_size_t sigsetsize);
 long compat_sys_rt_sigprocmask(int how, compat_sigset_t *set,
       compat_sigset_t *oset,
       compat_size_t sigsetsize);
 long compat_sys_rt_sigpending(compat_sigset_t *uset,
      compat_size_t sigsetsize);

 long compat_sys_rt_sigaction(int,
     const struct compat_sigaction *,
     struct compat_sigaction *,
     compat_size_t);

 long compat_sys_rt_sigqueueinfo(compat_pid_t pid, int sig,
    struct compat_siginfo *uinfo);
 long compat_sys_sysinfo(struct compat_sysinfo *info);
 long compat_sys_ioctl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
 long compat_sys_futex(u32 *uaddr, int op, u32 val,
  struct compat_timespec *utime, u32 *uaddr2,
  u32 val3);
 long compat_sys_getsockopt(int fd, int level, int optname,
          char *optval, int *optlen);
 long compat_sys_kexec_load(compat_ulong_t entry,
          compat_ulong_t nr_segments,
          struct compat_kexec_segment *,
          compat_ulong_t flags);
 long compat_sys_mq_getsetattr(mqd_t mqdes,
   const struct compat_mq_attr *u_mqstat,
   struct compat_mq_attr *u_omqstat);
 long compat_sys_mq_notify(mqd_t mqdes,
   const struct compat_sigevent *u_notification);
 long compat_sys_mq_open(const char *u_name,
   int oflag, compat_mode_t mode,
   struct compat_mq_attr *u_attr);
 long compat_sys_mq_timedsend(mqd_t mqdes,
   const char *u_msg_ptr,
   compat_size_t msg_len, unsigned int msg_prio,
   const struct compat_timespec *u_abs_timeout);
 ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,
   char *u_msg_ptr,
   compat_size_t msg_len, unsigned int *u_msg_prio,
   const struct compat_timespec *u_abs_timeout);
 long compat_sys_socketcall(int call, u32 *args);
 long compat_sys_sysctl(struct compat_sysctl_args *args);

extern ssize_t compat_rw_copy_check_uvector(int type,
  const struct compat_iovec *uvector,
  unsigned long nr_segs,
  unsigned long fast_segs, struct iovec *fast_pointer,
  struct iovec **ret_pointer);

extern void *compat_alloc_user_space(unsigned long len);

 ssize_t compat_sys_process_vm_readv(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);
 ssize_t compat_sys_process_vm_writev(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);

 long compat_sys_sendfile(int out_fd, int in_fd,
        compat_off_t *offset, compat_size_t count);
 long compat_sys_sendfile64(int out_fd, int in_fd,
        compat_loff_t *offset, compat_size_t count);
 long compat_sys_sigaltstack(const compat_stack_t *uss_ptr,
           compat_stack_t *uoss_ptr);


 long compat_sys_sigpending(compat_old_sigset_t *set);



 long compat_sys_sigprocmask(int how, compat_old_sigset_t *nset,
           compat_old_sigset_t *oset);


int compat_restore_altstack(const compat_stack_t *uss);
int __compat_save_altstack(compat_stack_t *, unsigned long);
# 719 "include/linux/compat.h"
 long compat_sys_sched_rr_get_interval(compat_pid_t pid,
       struct compat_timespec *interval);

 long compat_sys_fanotify_mark(int, unsigned int, __u32, __u32,
         int, const char *);
# 17 "include/linux/ethtool.h" 2
# 1 "include/uapi/linux/ethtool.h" 1
# 99 "include/uapi/linux/ethtool.h"
struct ethtool_cmd {
 __u32 cmd;
 __u32 supported;
 __u32 advertising;
 __u16 speed;
 __u8 duplex;
 __u8 port;
 __u8 phy_address;
 __u8 transceiver;
 __u8 autoneg;
 __u8 mdio_support;
 __u32 maxtxpkt;
 __u32 maxrxpkt;
 __u16 speed_hi;
 __u8 eth_tp_mdix;
 __u8 eth_tp_mdix_ctrl;
 __u32 lp_advertising;
 __u32 reserved[2];
};

static inline __attribute__((no_instrument_function)) void ethtool_cmd_speed_set(struct ethtool_cmd *ep,
      __u32 speed)
{

 ep->speed = (__u16)speed;
 ep->speed_hi = (__u16)(speed >> 16);
}

static inline __attribute__((no_instrument_function)) __u32 ethtool_cmd_speed(const struct ethtool_cmd *ep)
{
 return (ep->speed_hi << 16) | ep->speed;
}
# 181 "include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
 __u32 cmd;
 char driver[32];
 char version[32];
 char fw_version[32];
 char bus_info[32];
 char erom_version[32];
 char reserved2[12];
 __u32 n_priv_flags;
 __u32 n_stats;
 __u32 testinfo_len;
 __u32 eedump_len;
 __u32 regdump_len;
};
# 207 "include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
 __u32 cmd;
 __u32 supported;
 __u32 wolopts;
 __u8 sopass[6];
};


struct ethtool_value {
 __u32 cmd;
 __u32 data;
};

enum tunable_id {
 ETHTOOL_ID_UNSPEC,
 ETHTOOL_RX_COPYBREAK,
 ETHTOOL_TX_COPYBREAK,




 __ETHTOOL_TUNABLE_COUNT,
};

enum tunable_type_id {
 ETHTOOL_TUNABLE_UNSPEC,
 ETHTOOL_TUNABLE_U8,
 ETHTOOL_TUNABLE_U16,
 ETHTOOL_TUNABLE_U32,
 ETHTOOL_TUNABLE_U64,
 ETHTOOL_TUNABLE_STRING,
 ETHTOOL_TUNABLE_S8,
 ETHTOOL_TUNABLE_S16,
 ETHTOOL_TUNABLE_S32,
 ETHTOOL_TUNABLE_S64,
};

struct ethtool_tunable {
 __u32 cmd;
 __u32 id;
 __u32 type_id;
 __u32 len;
 void *data[0];
};
# 267 "include/uapi/linux/ethtool.h"
struct ethtool_regs {
 __u32 cmd;
 __u32 version;
 __u32 len;
 __u8 data[0];
};
# 292 "include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
 __u32 cmd;
 __u32 magic;
 __u32 offset;
 __u32 len;
 __u8 data[0];
};
# 317 "include/uapi/linux/ethtool.h"
struct ethtool_eee {
 __u32 cmd;
 __u32 supported;
 __u32 advertised;
 __u32 lp_advertised;
 __u32 eee_active;
 __u32 eee_enabled;
 __u32 tx_lpi_enabled;
 __u32 tx_lpi_timer;
 __u32 reserved[2];
};
# 339 "include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
 __u32 cmd;
 __u32 type;
 __u32 eeprom_len;
 __u32 reserved[8];
};
# 419 "include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
 __u32 cmd;
 __u32 rx_coalesce_usecs;
 __u32 rx_max_coalesced_frames;
 __u32 rx_coalesce_usecs_irq;
 __u32 rx_max_coalesced_frames_irq;
 __u32 tx_coalesce_usecs;
 __u32 tx_max_coalesced_frames;
 __u32 tx_coalesce_usecs_irq;
 __u32 tx_max_coalesced_frames_irq;
 __u32 stats_block_coalesce_usecs;
 __u32 use_adaptive_rx_coalesce;
 __u32 use_adaptive_tx_coalesce;
 __u32 pkt_rate_low;
 __u32 rx_coalesce_usecs_low;
 __u32 rx_max_coalesced_frames_low;
 __u32 tx_coalesce_usecs_low;
 __u32 tx_max_coalesced_frames_low;
 __u32 pkt_rate_high;
 __u32 rx_coalesce_usecs_high;
 __u32 rx_max_coalesced_frames_high;
 __u32 tx_coalesce_usecs_high;
 __u32 tx_max_coalesced_frames_high;
 __u32 rate_sample_interval;
};
# 470 "include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
 __u32 cmd;
 __u32 rx_max_pending;
 __u32 rx_mini_max_pending;
 __u32 rx_jumbo_max_pending;
 __u32 tx_max_pending;
 __u32 rx_pending;
 __u32 rx_mini_pending;
 __u32 rx_jumbo_pending;
 __u32 tx_pending;
};
# 498 "include/uapi/linux/ethtool.h"
struct ethtool_channels {
 __u32 cmd;
 __u32 max_rx;
 __u32 max_tx;
 __u32 max_other;
 __u32 max_combined;
 __u32 rx_count;
 __u32 tx_count;
 __u32 other_count;
 __u32 combined_count;
};
# 532 "include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
 __u32 cmd;
 __u32 autoneg;
 __u32 rx_pause;
 __u32 tx_pause;
};
# 553 "include/uapi/linux/ethtool.h"
enum ethtool_stringset {
 ETH_SS_TEST = 0,
 ETH_SS_STATS,
 ETH_SS_PRIV_FLAGS,
 ETH_SS_NTUPLE_FILTERS,
 ETH_SS_FEATURES,
 ETH_SS_RSS_HASH_FUNCS,
 ETH_SS_TUNABLES,
 ETH_SS_PHY_STATS,
};
# 576 "include/uapi/linux/ethtool.h"
struct ethtool_gstrings {
 __u32 cmd;
 __u32 string_set;
 __u32 len;
 __u8 data[0];
};
# 600 "include/uapi/linux/ethtool.h"
struct ethtool_sset_info {
 __u32 cmd;
 __u32 reserved;
 __u64 sset_mask;
 __u32 data[0];
};
# 617 "include/uapi/linux/ethtool.h"
enum ethtool_test_flags {
 ETH_TEST_FL_OFFLINE = (1 << 0),
 ETH_TEST_FL_FAILED = (1 << 1),
 ETH_TEST_FL_EXTERNAL_LB = (1 << 2),
 ETH_TEST_FL_EXTERNAL_LB_DONE = (1 << 3),
};
# 638 "include/uapi/linux/ethtool.h"
struct ethtool_test {
 __u32 cmd;
 __u32 flags;
 __u32 reserved;
 __u32 len;
 __u64 data[0];
};
# 657 "include/uapi/linux/ethtool.h"
struct ethtool_stats {
 __u32 cmd;
 __u32 n_stats;
 __u64 data[0];
};
# 674 "include/uapi/linux/ethtool.h"
struct ethtool_perm_addr {
 __u32 cmd;
 __u32 size;
 __u8 data[0];
};
# 689 "include/uapi/linux/ethtool.h"
enum ethtool_flags {
 ETH_FLAG_TXVLAN = (1 << 7),
 ETH_FLAG_RXVLAN = (1 << 8),
 ETH_FLAG_LRO = (1 << 15),
 ETH_FLAG_NTUPLE = (1 << 27),
 ETH_FLAG_RXHASH = (1 << 28),
};
# 713 "include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be16 psrc;
 __be16 pdst;
 __u8 tos;
};
# 730 "include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be32 spi;
 __u8 tos;
};
# 748 "include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be32 l4_4_bytes;
 __u8 tos;
 __u8 ip_ver;
 __u8 proto;
};
# 767 "include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be16 psrc;
 __be16 pdst;
 __u8 tclass;
};
# 784 "include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be32 spi;
 __u8 tclass;
};
# 799 "include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be32 l4_4_bytes;
 __u8 tclass;
 __u8 l4_proto;
};

union ethtool_flow_union {
 struct ethtool_tcpip4_spec tcp_ip4_spec;
 struct ethtool_tcpip4_spec udp_ip4_spec;
 struct ethtool_tcpip4_spec sctp_ip4_spec;
 struct ethtool_ah_espip4_spec ah_ip4_spec;
 struct ethtool_ah_espip4_spec esp_ip4_spec;
 struct ethtool_usrip4_spec usr_ip4_spec;
 struct ethtool_tcpip6_spec tcp_ip6_spec;
 struct ethtool_tcpip6_spec udp_ip6_spec;
 struct ethtool_tcpip6_spec sctp_ip6_spec;
 struct ethtool_ah_espip6_spec ah_ip6_spec;
 struct ethtool_ah_espip6_spec esp_ip6_spec;
 struct ethtool_usrip6_spec usr_ip6_spec;
 struct ethhdr ether_spec;
 __u8 hdata[52];
};
# 835 "include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
 __u8 padding[2];
 unsigned char h_dest[6];
 __be16 vlan_etype;
 __be16 vlan_tci;
 __be32 data[2];
};
# 859 "include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
 __u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 __u64 ring_cookie;
 __u32 location;
};
# 883 "include/uapi/linux/ethtool.h"
static inline __attribute__((no_instrument_function)) __u64 ethtool_get_flow_spec_ring(__u64 ring_cookie)
{
 return 0x00000000FFFFFFFFLL & ring_cookie;
};

static inline __attribute__((no_instrument_function)) __u64 ethtool_get_flow_spec_ring_vf(__u64 ring_cookie)
{
 return (0x000000FF00000000LL & ring_cookie) >>
    32;
};
# 946 "include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
 __u32 cmd;
 __u32 flow_type;
 __u64 data;
 struct ethtool_rx_flow_spec fs;
 __u32 rule_cnt;
 __u32 rule_locs[0];
};
# 969 "include/uapi/linux/ethtool.h"
struct ethtool_rxfh_indir {
 __u32 cmd;
 __u32 size;
 __u32 ring_index[0];
};
# 999 "include/uapi/linux/ethtool.h"
struct ethtool_rxfh {
 __u32 cmd;
 __u32 rss_context;
 __u32 indir_size;
 __u32 key_size;
 __u8 hfunc;
 __u8 rsvd8[3];
 __u32 rsvd32;
 __u32 rss_config[0];
};
# 1027 "include/uapi/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
 __u32 flow_type;
 union {
  struct ethtool_tcpip4_spec tcp_ip4_spec;
  struct ethtool_tcpip4_spec udp_ip4_spec;
  struct ethtool_tcpip4_spec sctp_ip4_spec;
  struct ethtool_ah_espip4_spec ah_ip4_spec;
  struct ethtool_ah_espip4_spec esp_ip4_spec;
  struct ethtool_usrip4_spec usr_ip4_spec;
  struct ethhdr ether_spec;
  __u8 hdata[72];
 } h_u, m_u;

 __u16 vlan_tag;
 __u16 vlan_tag_mask;
 __u64 data;
 __u64 data_mask;

 __s32 action;


};






struct ethtool_rx_ntuple {
 __u32 cmd;
 struct ethtool_rx_ntuple_flow_spec fs;
};


enum ethtool_flash_op_type {
 ETHTOOL_FLASH_ALL_REGIONS = 0,
};


struct ethtool_flash {
 __u32 cmd;
 __u32 region;
 char data[128];
};
# 1086 "include/uapi/linux/ethtool.h"
struct ethtool_dump {
 __u32 cmd;
 __u32 version;
 __u32 flag;
 __u32 len;
 __u8 data[0];
};
# 1105 "include/uapi/linux/ethtool.h"
struct ethtool_get_features_block {
 __u32 available;
 __u32 requested;
 __u32 active;
 __u32 never_changed;
};
# 1120 "include/uapi/linux/ethtool.h"
struct ethtool_gfeatures {
 __u32 cmd;
 __u32 size;
 struct ethtool_get_features_block features[0];
};






struct ethtool_set_features_block {
 __u32 valid;
 __u32 requested;
};







struct ethtool_sfeatures {
 __u32 cmd;
 __u32 size;
 struct ethtool_set_features_block features[0];
};
# 1166 "include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
 __u32 cmd;
 __u32 so_timestamping;
 __s32 phc_index;
 __u32 tx_types;
 __u32 tx_reserved[3];
 __u32 rx_filters;
 __u32 rx_reserved[3];
};
# 1201 "include/uapi/linux/ethtool.h"
enum ethtool_sfeatures_retval_bits {
 ETHTOOL_F_UNSUPPORTED__BIT,
 ETHTOOL_F_WISH__BIT,
 ETHTOOL_F_COMPAT__BIT,
};
# 1220 "include/uapi/linux/ethtool.h"
struct ethtool_per_queue_op {
 __u32 cmd;
 __u32 sub_command;
 __u32 queue_mask[(((4096) + (32) - 1) / (32))];
 char data[];
};
# 1324 "include/uapi/linux/ethtool.h"
enum ethtool_link_mode_bit_indices {
 ETHTOOL_LINK_MODE_10baseT_Half_BIT = 0,
 ETHTOOL_LINK_MODE_10baseT_Full_BIT = 1,
 ETHTOOL_LINK_MODE_100baseT_Half_BIT = 2,
 ETHTOOL_LINK_MODE_100baseT_Full_BIT = 3,
 ETHTOOL_LINK_MODE_1000baseT_Half_BIT = 4,
 ETHTOOL_LINK_MODE_1000baseT_Full_BIT = 5,
 ETHTOOL_LINK_MODE_Autoneg_BIT = 6,
 ETHTOOL_LINK_MODE_TP_BIT = 7,
 ETHTOOL_LINK_MODE_AUI_BIT = 8,
 ETHTOOL_LINK_MODE_MII_BIT = 9,
 ETHTOOL_LINK_MODE_FIBRE_BIT = 10,
 ETHTOOL_LINK_MODE_BNC_BIT = 11,
 ETHTOOL_LINK_MODE_10000baseT_Full_BIT = 12,
 ETHTOOL_LINK_MODE_Pause_BIT = 13,
 ETHTOOL_LINK_MODE_Asym_Pause_BIT = 14,
 ETHTOOL_LINK_MODE_2500baseX_Full_BIT = 15,
 ETHTOOL_LINK_MODE_Backplane_BIT = 16,
 ETHTOOL_LINK_MODE_1000baseKX_Full_BIT = 17,
 ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT = 18,
 ETHTOOL_LINK_MODE_10000baseKR_Full_BIT = 19,
 ETHTOOL_LINK_MODE_10000baseR_FEC_BIT = 20,
 ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT = 21,
 ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT = 22,
 ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT = 23,
 ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT = 24,
 ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT = 25,
 ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT = 26,
 ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT = 27,
 ETHTOOL_LINK_MODE_56000baseCR4_Full_BIT = 28,
 ETHTOOL_LINK_MODE_56000baseSR4_Full_BIT = 29,
 ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT = 30,







 __ETHTOOL_LINK_MODE_LAST
   = ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT,
};
# 1471 "include/uapi/linux/ethtool.h"
static inline __attribute__((no_instrument_function)) int ethtool_validate_speed(__u32 speed)
{
 return speed <= ((int)(~0U>>1)) || speed == -1;
}






static inline __attribute__((no_instrument_function)) int ethtool_validate_duplex(__u8 duplex)
{
 switch (duplex) {
 case 0x00:
 case 0x01:
 case 0xff:
  return 1;
 }

 return 0;
}
# 1589 "include/uapi/linux/ethtool.h"
enum ethtool_reset_flags {





 ETH_RESET_MGMT = 1 << 0,
 ETH_RESET_IRQ = 1 << 1,
 ETH_RESET_DMA = 1 << 2,
 ETH_RESET_FILTER = 1 << 3,
 ETH_RESET_OFFLOAD = 1 << 4,
 ETH_RESET_MAC = 1 << 5,
 ETH_RESET_PHY = 1 << 6,
 ETH_RESET_RAM = 1 << 7,


 ETH_RESET_DEDICATED = 0x0000ffff,

 ETH_RESET_ALL = 0xffffffff,

};
# 1712 "include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
 __u32 cmd;
 __u32 speed;
 __u8 duplex;
 __u8 port;
 __u8 phy_address;
 __u8 autoneg;
 __u8 mdio_support;
 __u8 eth_tp_mdix;
 __u8 eth_tp_mdix_ctrl;
 __s8 link_mode_masks_nwords;
 __u32 reserved[8];
 __u32 link_mode_masks[0];





};
# 18 "include/linux/ethtool.h" 2



struct compat_ethtool_rx_flow_spec {
 u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 compat_u64 ring_cookie;
 u32 location;
};

struct compat_ethtool_rxnfc {
 u32 cmd;
 u32 flow_type;
 compat_u64 data;
 struct compat_ethtool_rx_flow_spec fs;
 u32 rule_cnt;
 u32 rule_locs[0];
};
# 53 "include/linux/ethtool.h"
enum ethtool_phys_id_state {
 ETHTOOL_ID_INACTIVE,
 ETHTOOL_ID_ACTIVE,
 ETHTOOL_ID_ON,
 ETHTOOL_ID_OFF
};

enum {
 ETH_RSS_HASH_TOP_BIT,
 ETH_RSS_HASH_XOR_BIT,





 ETH_RSS_HASH_FUNCS_COUNT
};
# 80 "include/linux/ethtool.h"
struct net_device;


u32 ethtool_op_get_link(struct net_device *dev);
int ethtool_op_get_ts_info(struct net_device *dev, struct ethtool_ts_info *eti);
# 93 "include/linux/ethtool.h"
static inline __attribute__((no_instrument_function)) u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
 return index % n_rx_rings;
}
# 109 "include/linux/ethtool.h"
struct ethtool_link_ksettings {
 struct ethtool_link_settings base;
 struct {
  unsigned long supported[((((__ETHTOOL_LINK_MODE_LAST + 1)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
  unsigned long advertising[((((__ETHTOOL_LINK_MODE_LAST + 1)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
  unsigned long lp_advertising[((((__ETHTOOL_LINK_MODE_LAST + 1)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 } link_modes;
};
# 149 "include/linux/ethtool.h"
extern int
__ethtool_get_link_ksettings(struct net_device *dev,
        struct ethtool_link_ksettings *link_ksettings);

void ethtool_convert_legacy_u32_to_link_mode(unsigned long *dst,
          u32 legacy_u32);


bool ethtool_convert_link_mode_to_legacy_u32(u32 *legacy_u32,
         const unsigned long *src);
# 302 "include/linux/ethtool.h"
struct ethtool_ops {
 int (*get_settings)(struct net_device *, struct ethtool_cmd *);
 int (*set_settings)(struct net_device *, struct ethtool_cmd *);
 void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *);
 int (*get_regs_len)(struct net_device *);
 void (*get_regs)(struct net_device *, struct ethtool_regs *, void *);
 void (*get_wol)(struct net_device *, struct ethtool_wolinfo *);
 int (*set_wol)(struct net_device *, struct ethtool_wolinfo *);
 u32 (*get_msglevel)(struct net_device *);
 void (*set_msglevel)(struct net_device *, u32);
 int (*nway_reset)(struct net_device *);
 u32 (*get_link)(struct net_device *);
 int (*get_eeprom_len)(struct net_device *);
 int (*get_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*set_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *);
 int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *);
 void (*get_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 int (*set_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 void (*get_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 int (*set_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 void (*self_test)(struct net_device *, struct ethtool_test *, u64 *);
 void (*get_strings)(struct net_device *, u32 stringset, u8 *);
 int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state);
 void (*get_ethtool_stats)(struct net_device *,
         struct ethtool_stats *, u64 *);
 int (*begin)(struct net_device *);
 void (*complete)(struct net_device *);
 u32 (*get_priv_flags)(struct net_device *);
 int (*set_priv_flags)(struct net_device *, u32);
 int (*get_sset_count)(struct net_device *, int);
 int (*get_rxnfc)(struct net_device *,
        struct ethtool_rxnfc *, u32 *rule_locs);
 int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *);
 int (*flash_device)(struct net_device *, struct ethtool_flash *);
 int (*reset)(struct net_device *, u32 *);
 u32 (*get_rxfh_key_size)(struct net_device *);
 u32 (*get_rxfh_indir_size)(struct net_device *);
 int (*get_rxfh)(struct net_device *, u32 *indir, u8 *key,
       u8 *hfunc);
 int (*set_rxfh)(struct net_device *, const u32 *indir,
       const u8 *key, const u8 hfunc);
 void (*get_channels)(struct net_device *, struct ethtool_channels *);
 int (*set_channels)(struct net_device *, struct ethtool_channels *);
 int (*get_dump_flag)(struct net_device *, struct ethtool_dump *);
 int (*get_dump_data)(struct net_device *,
     struct ethtool_dump *, void *);
 int (*set_dump)(struct net_device *, struct ethtool_dump *);
 int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *);
 int (*get_module_info)(struct net_device *,
       struct ethtool_modinfo *);
 int (*get_module_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_eee)(struct net_device *, struct ethtool_eee *);
 int (*set_eee)(struct net_device *, struct ethtool_eee *);
 int (*get_tunable)(struct net_device *,
          const struct ethtool_tunable *, void *);
 int (*set_tunable)(struct net_device *,
          const struct ethtool_tunable *, const void *);
 int (*get_per_queue_coalesce)(struct net_device *, u32,
       struct ethtool_coalesce *);
 int (*set_per_queue_coalesce)(struct net_device *, u32,
       struct ethtool_coalesce *);
 int (*get_link_ksettings)(struct net_device *,
          struct ethtool_link_ksettings *);
 int (*set_link_ksettings)(struct net_device *,
          const struct ethtool_link_ksettings *);
};
# 43 "include/linux/netdevice.h" 2
# 1 "include/net/net_namespace.h" 1
# 13 "include/net/net_namespace.h"
# 1 "include/net/netns/core.h" 1



struct ctl_table_header;
struct prot_inuse;

struct netns_core {

 struct ctl_table_header *sysctl_hdr;

 int sysctl_somaxconn;

 struct prot_inuse *inuse;
};
# 14 "include/net/net_namespace.h" 2
# 1 "include/net/netns/mib.h" 1



# 1 "include/net/snmp.h" 1
# 23 "include/net/snmp.h"
# 1 "./include/uapi/linux/snmp.h" 1
# 18 "./include/uapi/linux/snmp.h"
enum
{
 IPSTATS_MIB_NUM = 0,

 IPSTATS_MIB_INPKTS,
 IPSTATS_MIB_INOCTETS,
 IPSTATS_MIB_INDELIVERS,
 IPSTATS_MIB_OUTFORWDATAGRAMS,
 IPSTATS_MIB_OUTPKTS,
 IPSTATS_MIB_OUTOCTETS,

 IPSTATS_MIB_INHDRERRORS,
 IPSTATS_MIB_INTOOBIGERRORS,
 IPSTATS_MIB_INNOROUTES,
 IPSTATS_MIB_INADDRERRORS,
 IPSTATS_MIB_INUNKNOWNPROTOS,
 IPSTATS_MIB_INTRUNCATEDPKTS,
 IPSTATS_MIB_INDISCARDS,
 IPSTATS_MIB_OUTDISCARDS,
 IPSTATS_MIB_OUTNOROUTES,
 IPSTATS_MIB_REASMTIMEOUT,
 IPSTATS_MIB_REASMREQDS,
 IPSTATS_MIB_REASMOKS,
 IPSTATS_MIB_REASMFAILS,
 IPSTATS_MIB_FRAGOKS,
 IPSTATS_MIB_FRAGFAILS,
 IPSTATS_MIB_FRAGCREATES,
 IPSTATS_MIB_INMCASTPKTS,
 IPSTATS_MIB_OUTMCASTPKTS,
 IPSTATS_MIB_INBCASTPKTS,
 IPSTATS_MIB_OUTBCASTPKTS,
 IPSTATS_MIB_INMCASTOCTETS,
 IPSTATS_MIB_OUTMCASTOCTETS,
 IPSTATS_MIB_INBCASTOCTETS,
 IPSTATS_MIB_OUTBCASTOCTETS,
 IPSTATS_MIB_CSUMERRORS,
 IPSTATS_MIB_NOECTPKTS,
 IPSTATS_MIB_ECT1PKTS,
 IPSTATS_MIB_ECT0PKTS,
 IPSTATS_MIB_CEPKTS,
 __IPSTATS_MIB_MAX
};






enum
{
 ICMP_MIB_NUM = 0,
 ICMP_MIB_INMSGS,
 ICMP_MIB_INERRORS,
 ICMP_MIB_INDESTUNREACHS,
 ICMP_MIB_INTIMEEXCDS,
 ICMP_MIB_INPARMPROBS,
 ICMP_MIB_INSRCQUENCHS,
 ICMP_MIB_INREDIRECTS,
 ICMP_MIB_INECHOS,
 ICMP_MIB_INECHOREPS,
 ICMP_MIB_INTIMESTAMPS,
 ICMP_MIB_INTIMESTAMPREPS,
 ICMP_MIB_INADDRMASKS,
 ICMP_MIB_INADDRMASKREPS,
 ICMP_MIB_OUTMSGS,
 ICMP_MIB_OUTERRORS,
 ICMP_MIB_OUTDESTUNREACHS,
 ICMP_MIB_OUTTIMEEXCDS,
 ICMP_MIB_OUTPARMPROBS,
 ICMP_MIB_OUTSRCQUENCHS,
 ICMP_MIB_OUTREDIRECTS,
 ICMP_MIB_OUTECHOS,
 ICMP_MIB_OUTECHOREPS,
 ICMP_MIB_OUTTIMESTAMPS,
 ICMP_MIB_OUTTIMESTAMPREPS,
 ICMP_MIB_OUTADDRMASKS,
 ICMP_MIB_OUTADDRMASKREPS,
 ICMP_MIB_CSUMERRORS,
 __ICMP_MIB_MAX
};







enum
{
 ICMP6_MIB_NUM = 0,
 ICMP6_MIB_INMSGS,
 ICMP6_MIB_INERRORS,
 ICMP6_MIB_OUTMSGS,
 ICMP6_MIB_OUTERRORS,
 ICMP6_MIB_CSUMERRORS,
 __ICMP6_MIB_MAX
};
# 123 "./include/uapi/linux/snmp.h"
enum
{
 TCP_MIB_NUM = 0,
 TCP_MIB_RTOALGORITHM,
 TCP_MIB_RTOMIN,
 TCP_MIB_RTOMAX,
 TCP_MIB_MAXCONN,
 TCP_MIB_ACTIVEOPENS,
 TCP_MIB_PASSIVEOPENS,
 TCP_MIB_ATTEMPTFAILS,
 TCP_MIB_ESTABRESETS,
 TCP_MIB_CURRESTAB,
 TCP_MIB_INSEGS,
 TCP_MIB_OUTSEGS,
 TCP_MIB_RETRANSSEGS,
 TCP_MIB_INERRS,
 TCP_MIB_OUTRSTS,
 TCP_MIB_CSUMERRORS,
 __TCP_MIB_MAX
};






enum
{
 UDP_MIB_NUM = 0,
 UDP_MIB_INDATAGRAMS,
 UDP_MIB_NOPORTS,
 UDP_MIB_INERRORS,
 UDP_MIB_OUTDATAGRAMS,
 UDP_MIB_RCVBUFERRORS,
 UDP_MIB_SNDBUFERRORS,
 UDP_MIB_CSUMERRORS,
 UDP_MIB_IGNOREDMULTI,
 __UDP_MIB_MAX
};


enum
{
 LINUX_MIB_NUM = 0,
 LINUX_MIB_SYNCOOKIESSENT,
 LINUX_MIB_SYNCOOKIESRECV,
 LINUX_MIB_SYNCOOKIESFAILED,
 LINUX_MIB_EMBRYONICRSTS,
 LINUX_MIB_PRUNECALLED,
 LINUX_MIB_RCVPRUNED,
 LINUX_MIB_OFOPRUNED,
 LINUX_MIB_OUTOFWINDOWICMPS,
 LINUX_MIB_LOCKDROPPEDICMPS,
 LINUX_MIB_ARPFILTER,
 LINUX_MIB_TIMEWAITED,
 LINUX_MIB_TIMEWAITRECYCLED,
 LINUX_MIB_TIMEWAITKILLED,
 LINUX_MIB_PAWSPASSIVEREJECTED,
 LINUX_MIB_PAWSACTIVEREJECTED,
 LINUX_MIB_PAWSESTABREJECTED,
 LINUX_MIB_DELAYEDACKS,
 LINUX_MIB_DELAYEDACKLOCKED,
 LINUX_MIB_DELAYEDACKLOST,
 LINUX_MIB_LISTENOVERFLOWS,
 LINUX_MIB_LISTENDROPS,
 LINUX_MIB_TCPPREQUEUED,
 LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG,
 LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE,
 LINUX_MIB_TCPPREQUEUEDROPPED,
 LINUX_MIB_TCPHPHITS,
 LINUX_MIB_TCPHPHITSTOUSER,
 LINUX_MIB_TCPPUREACKS,
 LINUX_MIB_TCPHPACKS,
 LINUX_MIB_TCPRENORECOVERY,
 LINUX_MIB_TCPSACKRECOVERY,
 LINUX_MIB_TCPSACKRENEGING,
 LINUX_MIB_TCPFACKREORDER,
 LINUX_MIB_TCPSACKREORDER,
 LINUX_MIB_TCPRENOREORDER,
 LINUX_MIB_TCPTSREORDER,
 LINUX_MIB_TCPFULLUNDO,
 LINUX_MIB_TCPPARTIALUNDO,
 LINUX_MIB_TCPDSACKUNDO,
 LINUX_MIB_TCPLOSSUNDO,
 LINUX_MIB_TCPLOSTRETRANSMIT,
 LINUX_MIB_TCPRENOFAILURES,
 LINUX_MIB_TCPSACKFAILURES,
 LINUX_MIB_TCPLOSSFAILURES,
 LINUX_MIB_TCPFASTRETRANS,
 LINUX_MIB_TCPFORWARDRETRANS,
 LINUX_MIB_TCPSLOWSTARTRETRANS,
 LINUX_MIB_TCPTIMEOUTS,
 LINUX_MIB_TCPLOSSPROBES,
 LINUX_MIB_TCPLOSSPROBERECOVERY,
 LINUX_MIB_TCPRENORECOVERYFAIL,
 LINUX_MIB_TCPSACKRECOVERYFAIL,
 LINUX_MIB_TCPSCHEDULERFAILED,
 LINUX_MIB_TCPRCVCOLLAPSED,
 LINUX_MIB_TCPDSACKOLDSENT,
 LINUX_MIB_TCPDSACKOFOSENT,
 LINUX_MIB_TCPDSACKRECV,
 LINUX_MIB_TCPDSACKOFORECV,
 LINUX_MIB_TCPABORTONDATA,
 LINUX_MIB_TCPABORTONCLOSE,
 LINUX_MIB_TCPABORTONMEMORY,
 LINUX_MIB_TCPABORTONTIMEOUT,
 LINUX_MIB_TCPABORTONLINGER,
 LINUX_MIB_TCPABORTFAILED,
 LINUX_MIB_TCPMEMORYPRESSURES,
 LINUX_MIB_TCPSACKDISCARD,
 LINUX_MIB_TCPDSACKIGNOREDOLD,
 LINUX_MIB_TCPDSACKIGNOREDNOUNDO,
 LINUX_MIB_TCPSPURIOUSRTOS,
 LINUX_MIB_TCPMD5NOTFOUND,
 LINUX_MIB_TCPMD5UNEXPECTED,
 LINUX_MIB_SACKSHIFTED,
 LINUX_MIB_SACKMERGED,
 LINUX_MIB_SACKSHIFTFALLBACK,
 LINUX_MIB_TCPBACKLOGDROP,
 LINUX_MIB_TCPMINTTLDROP,
 LINUX_MIB_TCPDEFERACCEPTDROP,
 LINUX_MIB_IPRPFILTER,
 LINUX_MIB_TCPTIMEWAITOVERFLOW,
 LINUX_MIB_TCPREQQFULLDOCOOKIES,
 LINUX_MIB_TCPREQQFULLDROP,
 LINUX_MIB_TCPRETRANSFAIL,
 LINUX_MIB_TCPRCVCOALESCE,
 LINUX_MIB_TCPOFOQUEUE,
 LINUX_MIB_TCPOFODROP,
 LINUX_MIB_TCPOFOMERGE,
 LINUX_MIB_TCPCHALLENGEACK,
 LINUX_MIB_TCPSYNCHALLENGE,
 LINUX_MIB_TCPFASTOPENACTIVE,
 LINUX_MIB_TCPFASTOPENACTIVEFAIL,
 LINUX_MIB_TCPFASTOPENPASSIVE,
 LINUX_MIB_TCPFASTOPENPASSIVEFAIL,
 LINUX_MIB_TCPFASTOPENLISTENOVERFLOW,
 LINUX_MIB_TCPFASTOPENCOOKIEREQD,
 LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES,
 LINUX_MIB_BUSYPOLLRXPACKETS,
 LINUX_MIB_TCPAUTOCORKING,
 LINUX_MIB_TCPFROMZEROWINDOWADV,
 LINUX_MIB_TCPTOZEROWINDOWADV,
 LINUX_MIB_TCPWANTZEROWINDOWADV,
 LINUX_MIB_TCPSYNRETRANS,
 LINUX_MIB_TCPORIGDATASENT,
 LINUX_MIB_TCPHYSTARTTRAINDETECT,
 LINUX_MIB_TCPHYSTARTTRAINCWND,
 LINUX_MIB_TCPHYSTARTDELAYDETECT,
 LINUX_MIB_TCPHYSTARTDELAYCWND,
 LINUX_MIB_TCPACKSKIPPEDSYNRECV,
 LINUX_MIB_TCPACKSKIPPEDPAWS,
 LINUX_MIB_TCPACKSKIPPEDSEQ,
 LINUX_MIB_TCPACKSKIPPEDFINWAIT2,
 LINUX_MIB_TCPACKSKIPPEDTIMEWAIT,
 LINUX_MIB_TCPACKSKIPPEDCHALLENGE,
 LINUX_MIB_TCPWINPROBE,
 LINUX_MIB_TCPKEEPALIVE,
 LINUX_MIB_TCPMTUPFAIL,
 LINUX_MIB_TCPMTUPSUCCESS,
 __LINUX_MIB_MAX
};


enum
{
 LINUX_MIB_XFRMNUM = 0,
 LINUX_MIB_XFRMINERROR,
 LINUX_MIB_XFRMINBUFFERERROR,
 LINUX_MIB_XFRMINHDRERROR,
 LINUX_MIB_XFRMINNOSTATES,
 LINUX_MIB_XFRMINSTATEPROTOERROR,
 LINUX_MIB_XFRMINSTATEMODEERROR,
 LINUX_MIB_XFRMINSTATESEQERROR,
 LINUX_MIB_XFRMINSTATEEXPIRED,
 LINUX_MIB_XFRMINSTATEMISMATCH,
 LINUX_MIB_XFRMINSTATEINVALID,
 LINUX_MIB_XFRMINTMPLMISMATCH,
 LINUX_MIB_XFRMINNOPOLS,
 LINUX_MIB_XFRMINPOLBLOCK,
 LINUX_MIB_XFRMINPOLERROR,
 LINUX_MIB_XFRMOUTERROR,
 LINUX_MIB_XFRMOUTBUNDLEGENERROR,
 LINUX_MIB_XFRMOUTBUNDLECHECKERROR,
 LINUX_MIB_XFRMOUTNOSTATES,
 LINUX_MIB_XFRMOUTSTATEPROTOERROR,
 LINUX_MIB_XFRMOUTSTATEMODEERROR,
 LINUX_MIB_XFRMOUTSTATESEQERROR,
 LINUX_MIB_XFRMOUTSTATEEXPIRED,
 LINUX_MIB_XFRMOUTPOLBLOCK,
 LINUX_MIB_XFRMOUTPOLDEAD,
 LINUX_MIB_XFRMOUTPOLERROR,
 LINUX_MIB_XFRMFWDHDRERROR,
 LINUX_MIB_XFRMOUTSTATEINVALID,
 LINUX_MIB_XFRMACQUIREERROR,
 __LINUX_MIB_XFRMMAX
};
# 24 "include/net/snmp.h" 2
# 34 "include/net/snmp.h"
struct snmp_mib {
 const char *name;
 int entry;
};
# 52 "include/net/snmp.h"
# 1 "include/linux/u64_stats_sync.h" 1
# 64 "include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


static inline __attribute__((no_instrument_function)) void u64_stats_init(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((no_instrument_function)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((no_instrument_function)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((no_instrument_function)) void u64_stats_update_begin_raw(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((no_instrument_function)) void u64_stats_update_end_raw(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{






 return 0;

}

static inline __attribute__((no_instrument_function)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{






 return false;

}







static inline __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{






 return 0;

}

static inline __attribute__((no_instrument_function)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
      unsigned int start)
{






 return false;

}
# 53 "include/net/snmp.h" 2



struct ipstats_mib {

 u64 mibs[__IPSTATS_MIB_MAX];
 struct u64_stats_sync syncp;
};



struct icmp_mib {
 unsigned long mibs[__ICMP_MIB_MAX];
};


struct icmpmsg_mib {
 atomic_long_t mibs[512];
};




struct icmpv6_mib {
 unsigned long mibs[__ICMP6_MIB_MAX];
};

struct icmpv6_mib_device {
 atomic_long_t mibs[__ICMP6_MIB_MAX];
};



struct icmpv6msg_mib {
 atomic_long_t mibs[512];
};

struct icmpv6msg_mib_device {
 atomic_long_t mibs[512];
};




struct tcp_mib {
 unsigned long mibs[__TCP_MIB_MAX];
};



struct udp_mib {
 unsigned long mibs[__UDP_MIB_MAX];
};



struct linux_mib {
 unsigned long mibs[__LINUX_MIB_MAX];
};



struct linux_xfrm_mib {
 unsigned long mibs[__LINUX_MIB_XFRMMAX];
};
# 5 "include/net/netns/mib.h" 2

struct netns_mib {
 __typeof__(struct tcp_mib) *tcp_statistics;
 __typeof__(struct ipstats_mib) *ip_statistics;
 __typeof__(struct linux_mib) *net_statistics;
 __typeof__(struct udp_mib) *udp_statistics;
 __typeof__(struct udp_mib) *udplite_statistics;
 __typeof__(struct icmp_mib) *icmp_statistics;
 __typeof__(struct icmpmsg_mib) *icmpmsg_statistics;


 struct proc_dir_entry *proc_net_devsnmp6;
 __typeof__(struct udp_mib) *udp_stats_in6;
 __typeof__(struct udp_mib) *udplite_stats_in6;
 __typeof__(struct ipstats_mib) *ipv6_statistics;
 __typeof__(struct icmpv6_mib) *icmpv6_statistics;
 __typeof__(struct icmpv6msg_mib) *icmpv6msg_statistics;




};
# 15 "include/net/net_namespace.h" 2
# 1 "include/net/netns/unix.h" 1






struct ctl_table_header;
struct netns_unix {
 int sysctl_max_dgram_qlen;
 struct ctl_table_header *ctl;
};
# 16 "include/net/net_namespace.h" 2
# 1 "include/net/netns/packet.h" 1
# 10 "include/net/netns/packet.h"
struct netns_packet {
 struct mutex sklist_lock;
 struct hlist_head sklist;
};
# 17 "include/net/net_namespace.h" 2
# 1 "include/net/netns/ipv4.h" 1
# 9 "include/net/netns/ipv4.h"
# 1 "include/net/inet_frag.h" 1





struct netns_frags {



 struct percpu_counter mem __attribute__((__aligned__((1 << (6)))));


 int timeout;
 int high_thresh;
 int low_thresh;
 int max_dist;
};
# 26 "include/net/inet_frag.h"
enum {
 INET_FRAG_FIRST_IN = (1UL << (0)),
 INET_FRAG_LAST_IN = (1UL << (1)),
 INET_FRAG_COMPLETE = (1UL << (2)),
};
# 49 "include/net/inet_frag.h"
struct inet_frag_queue {
 spinlock_t lock;
 struct timer_list timer;
 struct hlist_node list;
 atomic_t refcnt;
 struct sk_buff *fragments;
 struct sk_buff *fragments_tail;
 ktime_t stamp;
 int len;
 int meat;
 __u8 flags;
 u16 max_size;
 struct netns_frags *net;
 struct hlist_node list_evictor;
};
# 74 "include/net/inet_frag.h"
struct inet_frag_bucket {
 struct hlist_head chain;
 spinlock_t chain_lock;
};

struct inet_frags {
 struct inet_frag_bucket hash[1024];

 struct work_struct frags_work;
 unsigned int next_bucket;
 unsigned long last_rebuild_jiffies;
 bool rebuild;







 u32 rnd;
 seqlock_t rnd_seqlock;
 int qsize;

 unsigned int (*hashfn)(const struct inet_frag_queue *);
 bool (*match)(const struct inet_frag_queue *q,
      const void *arg);
 void (*constructor)(struct inet_frag_queue *q,
            const void *arg);
 void (*destructor)(struct inet_frag_queue *);
 void (*frag_expire)(unsigned long data);
 struct kmem_cache *frags_cachep;
 const char *frags_cache_name;
};

int inet_frags_init(struct inet_frags *);
void inet_frags_fini(struct inet_frags *);

static inline __attribute__((no_instrument_function)) int inet_frags_init_net(struct netns_frags *nf)
{
 return ({ static struct lock_class_key __key; __percpu_counter_init(&nf->mem, 0, ((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), &__key); });
}
static inline __attribute__((no_instrument_function)) void inet_frags_uninit_net(struct netns_frags *nf)
{
 percpu_counter_destroy(&nf->mem);
}

void inet_frags_exit_net(struct netns_frags *nf, struct inet_frags *f);

void inet_frag_kill(struct inet_frag_queue *q, struct inet_frags *f);
void inet_frag_destroy(struct inet_frag_queue *q, struct inet_frags *f);
struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
  struct inet_frags *f, void *key, unsigned int hash);

void inet_frag_maybe_warn_overflow(struct inet_frag_queue *q,
       const char *prefix);

static inline __attribute__((no_instrument_function)) void inet_frag_put(struct inet_frag_queue *q, struct inet_frags *f)
{
 if (atomic_dec_and_test(&q->refcnt))
  inet_frag_destroy(q, f);
}

static inline __attribute__((no_instrument_function)) bool inet_frag_evicting(struct inet_frag_queue *q)
{
 return !hlist_unhashed(&q->list_evictor);
}
# 148 "include/net/inet_frag.h"
static unsigned int frag_percpu_counter_batch = 130000;

static inline __attribute__((no_instrument_function)) int frag_mem_limit(struct netns_frags *nf)
{
 return percpu_counter_read(&nf->mem);
}

static inline __attribute__((no_instrument_function)) void sub_frag_mem_limit(struct netns_frags *nf, int i)
{
 __percpu_counter_add(&nf->mem, -i, frag_percpu_counter_batch);
}

static inline __attribute__((no_instrument_function)) void add_frag_mem_limit(struct netns_frags *nf, int i)
{
 __percpu_counter_add(&nf->mem, i, frag_percpu_counter_batch);
}

static inline __attribute__((no_instrument_function)) unsigned int sum_frag_mem_limit(struct netns_frags *nf)
{
 unsigned int res;

 local_bh_disable();
 res = percpu_counter_sum_positive(&nf->mem);
 local_bh_enable();

 return res;
}
# 185 "include/net/inet_frag.h"
extern const u8 ip_frag_ecn_table[16];
# 10 "include/net/netns/ipv4.h" 2


struct tcpm_hash_bucket;
struct ctl_table_header;
struct ipv4_devconf;
struct fib_rules_ops;
struct hlist_head;
struct fib_table;
struct sock;
struct local_ports {
 seqlock_t lock;
 int range[2];
 bool warned;
};

struct ping_group_range {
 seqlock_t lock;
 kgid_t range[2];
};

struct netns_ipv4 {

 struct ctl_table_header *forw_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *ipv4_hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *xfrm4_hdr;

 struct ipv4_devconf *devconf_all;
 struct ipv4_devconf *devconf_dflt;

 struct fib_rules_ops *rules_ops;
 bool fib_has_custom_rules;
 struct fib_table *fib_local;
 struct fib_table *fib_main;
 struct fib_table *fib_default;




 struct hlist_head *fib_table_hash;
 bool fib_offload_disabled;
 struct sock *fibnl;

 struct sock * *icmp_sk;
 struct sock *mc_autojoin_sk;

 struct inet_peer_base *peers;
 struct sock * *tcp_sk;
 struct netns_frags frags;

 struct xt_table *iptable_filter;
 struct xt_table *iptable_mangle;
 struct xt_table *iptable_raw;
 struct xt_table *arptable_filter;

 struct xt_table *iptable_security;

 struct xt_table *nat_table;


 int sysctl_icmp_echo_ignore_all;
 int sysctl_icmp_echo_ignore_broadcasts;
 int sysctl_icmp_ignore_bogus_error_responses;
 int sysctl_icmp_ratelimit;
 int sysctl_icmp_ratemask;
 int sysctl_icmp_errors_use_inbound_ifaddr;

 struct local_ports ip_local_ports;

 int sysctl_tcp_ecn;
 int sysctl_tcp_ecn_fallback;

 int sysctl_ip_default_ttl;
 int sysctl_ip_no_pmtu_disc;
 int sysctl_ip_fwd_use_pmtu;
 int sysctl_ip_nonlocal_bind;

 int sysctl_ip_dynaddr;
 int sysctl_ip_early_demux;

 int sysctl_fwmark_reflect;
 int sysctl_tcp_fwmark_accept;



 int sysctl_tcp_mtu_probing;
 int sysctl_tcp_base_mss;
 int sysctl_tcp_probe_threshold;
 u32 sysctl_tcp_probe_interval;

 int sysctl_tcp_keepalive_time;
 int sysctl_tcp_keepalive_probes;
 int sysctl_tcp_keepalive_intvl;

 int sysctl_tcp_syn_retries;
 int sysctl_tcp_synack_retries;
 int sysctl_tcp_syncookies;
 int sysctl_tcp_reordering;
 int sysctl_tcp_retries1;
 int sysctl_tcp_retries2;
 int sysctl_tcp_orphan_retries;
 int sysctl_tcp_fin_timeout;
 unsigned int sysctl_tcp_notsent_lowat;

 int sysctl_igmp_max_memberships;
 int sysctl_igmp_max_msf;
 int sysctl_igmp_llm_reports;
 int sysctl_igmp_qrv;

 struct ping_group_range ping_group_range;

 atomic_t dev_addr_genid;


 unsigned long *sysctl_local_reserved_ports;




 struct mr_table *mrt;






 int sysctl_fib_multipath_use_neigh;

 atomic_t rt_genid;
};
# 18 "include/net/net_namespace.h" 2
# 1 "include/net/netns/ipv6.h" 1
# 9 "include/net/netns/ipv6.h"
# 1 "include/net/dst_ops.h" 1






struct dst_entry;
struct kmem_cachep;
struct net_device;
struct sk_buff;
struct sock;
struct net;

struct dst_ops {
 unsigned short family;
 unsigned int gc_thresh;

 int (*gc)(struct dst_ops *ops);
 struct dst_entry * (*check)(struct dst_entry *, __u32 cookie);
 unsigned int (*default_advmss)(const struct dst_entry *);
 unsigned int (*mtu)(const struct dst_entry *);
 u32 * (*cow_metrics)(struct dst_entry *, unsigned long);
 void (*destroy)(struct dst_entry *);
 void (*ifdown)(struct dst_entry *,
       struct net_device *dev, int how);
 struct dst_entry * (*negative_advice)(struct dst_entry *);
 void (*link_failure)(struct sk_buff *);
 void (*update_pmtu)(struct dst_entry *dst, struct sock *sk,
            struct sk_buff *skb, u32 mtu);
 void (*redirect)(struct dst_entry *dst, struct sock *sk,
         struct sk_buff *skb);
 int (*local_out)(struct net *net, struct sock *sk, struct sk_buff *skb);
 struct neighbour * (*neigh_lookup)(const struct dst_entry *dst,
      struct sk_buff *skb,
      const void *daddr);

 struct kmem_cache *kmem_cachep;

 struct percpu_counter pcpuc_entries __attribute__((__aligned__((1 << (6)))));
};

static inline __attribute__((no_instrument_function)) int dst_entries_get_fast(struct dst_ops *dst)
{
 return percpu_counter_read_positive(&dst->pcpuc_entries);
}

static inline __attribute__((no_instrument_function)) int dst_entries_get_slow(struct dst_ops *dst)
{
 int res;

 local_bh_disable();
 res = percpu_counter_sum_positive(&dst->pcpuc_entries);
 local_bh_enable();
 return res;
}

static inline __attribute__((no_instrument_function)) void dst_entries_add(struct dst_ops *dst, int val)
{
 local_bh_disable();
 percpu_counter_add(&dst->pcpuc_entries, val);
 local_bh_enable();
}

static inline __attribute__((no_instrument_function)) int dst_entries_init(struct dst_ops *dst)
{
 return ({ static struct lock_class_key __key; __percpu_counter_init(&dst->pcpuc_entries, 0, ((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), &__key); });
}

static inline __attribute__((no_instrument_function)) void dst_entries_destroy(struct dst_ops *dst)
{
 percpu_counter_destroy(&dst->pcpuc_entries);
}
# 10 "include/net/netns/ipv6.h" 2

struct ctl_table_header;

struct netns_sysctl_ipv6 {

 struct ctl_table_header *hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *icmp_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *xfrm6_hdr;

 int bindv6only;
 int flush_delay;
 int ip6_rt_max_size;
 int ip6_rt_gc_min_interval;
 int ip6_rt_gc_timeout;
 int ip6_rt_gc_interval;
 int ip6_rt_gc_elasticity;
 int ip6_rt_mtu_expires;
 int ip6_rt_min_advmss;
 int flowlabel_consistency;
 int auto_flowlabels;
 int icmpv6_time;
 int anycast_src_echo_reply;
 int ip_nonlocal_bind;
 int fwmark_reflect;
 int idgen_retries;
 int idgen_delay;
 int flowlabel_state_ranges;
};

struct netns_ipv6 {
 struct netns_sysctl_ipv6 sysctl;
 struct ipv6_devconf *devconf_all;
 struct ipv6_devconf *devconf_dflt;
 struct inet_peer_base *peers;
 struct netns_frags frags;

 struct xt_table *ip6table_filter;
 struct xt_table *ip6table_mangle;
 struct xt_table *ip6table_raw;

 struct xt_table *ip6table_security;

 struct xt_table *ip6table_nat;

 struct rt6_info *ip6_null_entry;
 struct rt6_statistics *rt6_stats;
 struct timer_list ip6_fib_timer;
 struct hlist_head *fib_table_hash;
 struct fib6_table *fib6_main_tbl;
 struct list_head fib6_walkers;
 struct dst_ops ip6_dst_ops;
 rwlock_t fib6_walker_lock;
 spinlock_t fib6_gc_lock;
 unsigned int ip6_rt_gc_expire;
 unsigned long ip6_rt_last_gc;






 struct sock **icmp_sk;
 struct sock *ndisc_sk;
 struct sock *tcp_sk;
 struct sock *igmp_sk;
 struct sock *mc_autojoin_sk;
# 86 "include/net/netns/ipv6.h"
 atomic_t dev_addr_genid;
 atomic_t fib6_sernum;
};


struct netns_nf_frag {
 struct netns_sysctl_ipv6 sysctl;
 struct netns_frags frags;
};
# 19 "include/net/net_namespace.h" 2
# 1 "include/net/netns/ieee802154_6lowpan.h" 1
# 10 "include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {

 struct ctl_table_header *frags_hdr;

};

struct netns_ieee802154_lowpan {
 struct netns_sysctl_lowpan sysctl;
 struct netns_frags frags;
};
# 20 "include/net/net_namespace.h" 2
# 1 "include/net/netns/sctp.h" 1



struct sock;
struct proc_dir_entry;
struct sctp_mib;
struct ctl_table_header;

struct netns_sctp {
 __typeof__(struct sctp_mib) *sctp_statistics;


 struct proc_dir_entry *proc_net_sctp;


 struct ctl_table_header *sysctl_header;





 struct sock *ctl_sock;







 struct list_head local_addr_list;
 struct list_head addr_waitq;
 struct timer_list addr_wq_timer;
 struct list_head auto_asconf_splist;

 spinlock_t addr_wq_lock;


 spinlock_t local_addr_lock;
# 50 "include/net/netns/sctp.h"
 unsigned int rto_initial;
 unsigned int rto_min;
 unsigned int rto_max;




 int rto_alpha;
 int rto_beta;


 int max_burst;


 int cookie_preserve_enable;


 char *sctp_hmac_alg;


 unsigned int valid_cookie_life;


 unsigned int sack_timeout;


 unsigned int hb_interval;





 int max_retrans_association;
 int max_retrans_path;
 int max_retrans_init;




 int pf_retrans;






 int pf_enable;






 int sndbuf_policy;






 int rcvbuf_policy;

 int default_auto_asconf;


 int addip_enable;
 int addip_noauth;


 int prsctp_enable;


 int auth_enable;
# 131 "include/net/netns/sctp.h"
 int scope_policy;




 int rwnd_upd_shift;


 unsigned long max_autoclose;
};
# 21 "include/net/net_namespace.h" 2
# 1 "include/net/netns/dccp.h" 1



struct sock;

struct netns_dccp {
 struct sock *v4_ctl_sk;
 struct sock *v6_ctl_sk;
};
# 22 "include/net/net_namespace.h" 2
# 1 "include/net/netns/netfilter.h" 1



# 1 "include/linux/netfilter_defs.h" 1



# 1 "include/uapi/linux/netfilter.h" 1






# 1 "include/linux/in.h" 1
# 23 "include/linux/in.h"
# 1 "include/uapi/linux/in.h" 1
# 27 "include/uapi/linux/in.h"
enum {
  IPPROTO_IP = 0,

  IPPROTO_ICMP = 1,

  IPPROTO_IGMP = 2,

  IPPROTO_IPIP = 4,

  IPPROTO_TCP = 6,

  IPPROTO_EGP = 8,

  IPPROTO_PUP = 12,

  IPPROTO_UDP = 17,

  IPPROTO_IDP = 22,

  IPPROTO_TP = 29,

  IPPROTO_DCCP = 33,

  IPPROTO_IPV6 = 41,

  IPPROTO_RSVP = 46,

  IPPROTO_GRE = 47,

  IPPROTO_ESP = 50,

  IPPROTO_AH = 51,

  IPPROTO_MTP = 92,

  IPPROTO_BEETPH = 94,

  IPPROTO_ENCAP = 98,

  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,

  IPPROTO_SCTP = 132,

  IPPROTO_UDPLITE = 136,

  IPPROTO_MPLS = 137,

  IPPROTO_RAW = 255,

  IPPROTO_MAX
};




struct in_addr {
 __be32 s_addr;
};
# 166 "include/uapi/linux/in.h"
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};

struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

struct ip_mreq_source {
 __be32 imr_multiaddr;
 __be32 imr_interface;
 __be32 imr_sourceaddr;
};

struct ip_msfilter {
 __be32 imsf_multiaddr;
 __be32 imsf_interface;
 __u32 imsf_fmode;
 __u32 imsf_numsrc;
 __be32 imsf_slist[1];
};





struct group_req {
 __u32 gr_interface;
 struct __kernel_sockaddr_storage gr_group;
};

struct group_source_req {
 __u32 gsr_interface;
 struct __kernel_sockaddr_storage gsr_group;
 struct __kernel_sockaddr_storage gsr_source;
};

struct group_filter {
 __u32 gf_interface;
 struct __kernel_sockaddr_storage gf_group;
 __u32 gf_fmode;
 __u32 gf_numsrc;
 struct __kernel_sockaddr_storage gf_slist[1];
};







struct in_pktinfo {
 int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};





struct sockaddr_in {
  __kernel_sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;


  unsigned char __pad[16 - sizeof(short int) -
   sizeof(unsigned short int) - sizeof(struct in_addr)];
};
# 24 "include/linux/in.h" 2

static inline __attribute__((no_instrument_function)) int proto_ports_offset(int proto)
{
 switch (proto) {
 case IPPROTO_TCP:
 case IPPROTO_UDP:
 case IPPROTO_DCCP:
 case IPPROTO_ESP:
 case IPPROTO_SCTP:
 case IPPROTO_UDPLITE:
  return 0;
 case IPPROTO_AH:
  return 4;
 default:
  return -22;
 }
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_loopback(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xff000000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0x7f000000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_multicast(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xf0000000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xe0000000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_local_multicast(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xffffff00))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xe0000000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_lbcast(__be32 addr)
{

 return addr == (( __be32)(__u32)__builtin_bswap32((__u32)((((unsigned long int) 0xffffffff)))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_zeronet(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xff000000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0x00000000))));
}



static inline __attribute__((no_instrument_function)) bool ipv4_is_private_10(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xff000000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0x0a000000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_private_172(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xfff00000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xac100000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_private_192(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xffff0000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xc0a80000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_linklocal_169(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xffff0000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xa9fe0000))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_anycast_6to4(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xffffff00))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xc0586300))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_test_192(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xffffff00))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xc0000200))));
}

static inline __attribute__((no_instrument_function)) bool ipv4_is_test_198(__be32 addr)
{
 return (addr & (( __be32)(__u32)__builtin_bswap32((__u32)((0xfffe0000))))) == (( __be32)(__u32)__builtin_bswap32((__u32)((0xc6120000))));
}
# 8 "include/uapi/linux/netfilter.h" 2
# 46 "include/uapi/linux/netfilter.h"
enum nf_inet_hooks {
 NF_INET_PRE_ROUTING,
 NF_INET_LOCAL_IN,
 NF_INET_FORWARD,
 NF_INET_LOCAL_OUT,
 NF_INET_POST_ROUTING,
 NF_INET_NUMHOOKS
};

enum nf_dev_hooks {
 NF_NETDEV_INGRESS,
 NF_NETDEV_NUMHOOKS
};

enum {
 NFPROTO_UNSPEC = 0,
 NFPROTO_INET = 1,
 NFPROTO_IPV4 = 2,
 NFPROTO_ARP = 3,
 NFPROTO_NETDEV = 5,
 NFPROTO_BRIDGE = 7,
 NFPROTO_IPV6 = 10,
 NFPROTO_DECNET = 12,
 NFPROTO_NUMPROTO,
};

union nf_inet_addr {
 __u32 all[4];
 __be32 ip;
 __be32 ip6[4];
 struct in_addr in;
 struct in6_addr in6;
};
# 5 "include/linux/netfilter_defs.h" 2
# 5 "include/net/netns/netfilter.h" 2

struct proc_dir_entry;
struct nf_logger;

struct netns_nf {

 struct proc_dir_entry *proc_netfilter;

 const struct nf_logger *nf_loggers[NFPROTO_NUMPROTO];

 struct ctl_table_header *nf_log_dir_header;

 struct list_head hooks[NFPROTO_NUMPROTO][8];
};
# 23 "include/net/net_namespace.h" 2
# 1 "include/net/netns/x_tables.h" 1






struct ebt_table;

struct netns_xt {
 struct list_head tables[NFPROTO_NUMPROTO];
 bool notrack_deprecated_warning;
 bool clusterip_deprecated_warning;






};
# 24 "include/net/net_namespace.h" 2

# 1 "include/net/netns/conntrack.h" 1




# 1 "include/linux/list_nulls.h" 1
# 20 "include/linux/list_nulls.h"
struct hlist_nulls_head {
 struct hlist_nulls_node *first;
};

struct hlist_nulls_node {
 struct hlist_nulls_node *next, **pprev;
};
# 37 "include/linux/list_nulls.h"
static inline __attribute__((no_instrument_function)) int is_a_nulls(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr & 1);
}







static inline __attribute__((no_instrument_function)) unsigned long get_nulls_value(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr) >> 1;
}

static inline __attribute__((no_instrument_function)) int hlist_nulls_unhashed(const struct hlist_nulls_node *h)
{
 return !h->pprev;
}

static inline __attribute__((no_instrument_function)) int hlist_nulls_empty(const struct hlist_nulls_head *h)
{
 return is_a_nulls(({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); __u.__val; }));
}

static inline __attribute__((no_instrument_function)) void hlist_nulls_add_head(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 h->first = n;
 if (!is_a_nulls(first))
  first->pprev = &n->next;
}

static inline __attribute__((no_instrument_function)) void __hlist_nulls_del(struct hlist_nulls_node *n)
{
 struct hlist_nulls_node *next = n->next;
 struct hlist_nulls_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (!is_a_nulls(next))
  next->pprev = pprev;
}

static inline __attribute__((no_instrument_function)) void hlist_nulls_del(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 6 "include/net/netns/conntrack.h" 2


# 1 "include/linux/netfilter/nf_conntrack_tcp.h" 1



# 1 "include/uapi/linux/netfilter/nf_conntrack_tcp.h" 1







enum tcp_conntrack {
 TCP_CONNTRACK_NONE,
 TCP_CONNTRACK_SYN_SENT,
 TCP_CONNTRACK_SYN_RECV,
 TCP_CONNTRACK_ESTABLISHED,
 TCP_CONNTRACK_FIN_WAIT,
 TCP_CONNTRACK_CLOSE_WAIT,
 TCP_CONNTRACK_LAST_ACK,
 TCP_CONNTRACK_TIME_WAIT,
 TCP_CONNTRACK_CLOSE,
 TCP_CONNTRACK_LISTEN,

 TCP_CONNTRACK_MAX,
 TCP_CONNTRACK_IGNORE,
 TCP_CONNTRACK_RETRANS,
 TCP_CONNTRACK_UNACK,
 TCP_CONNTRACK_TIMEOUT_MAX
};
# 48 "include/uapi/linux/netfilter/nf_conntrack_tcp.h"
struct nf_ct_tcp_flags {
 __u8 flags;
 __u8 mask;
};
# 5 "include/linux/netfilter/nf_conntrack_tcp.h" 2


struct ip_ct_tcp_state {
 u_int32_t td_end;
 u_int32_t td_maxend;
 u_int32_t td_maxwin;
 u_int32_t td_maxack;
 u_int8_t td_scale;
 u_int8_t flags;
};

struct ip_ct_tcp {
 struct ip_ct_tcp_state seen[2];
 u_int8_t state;

 u_int8_t last_dir;
 u_int8_t retrans;
 u_int8_t last_index;
 u_int32_t last_seq;
 u_int32_t last_ack;
 u_int32_t last_end;
 u_int16_t last_win;

 u_int8_t last_wscale;
 u_int8_t last_flags;
};
# 9 "include/net/netns/conntrack.h" 2


struct ctl_table_header;
struct nf_conntrack_ecache;

struct nf_proto_net {

 struct ctl_table_header *ctl_table_header;
 struct ctl_table *ctl_table;

 struct ctl_table_header *ctl_compat_header;
 struct ctl_table *ctl_compat_table;


 unsigned int users;
};

struct nf_generic_net {
 struct nf_proto_net pn;
 unsigned int timeout;
};

struct nf_tcp_net {
 struct nf_proto_net pn;
 unsigned int timeouts[TCP_CONNTRACK_TIMEOUT_MAX];
 unsigned int tcp_loose;
 unsigned int tcp_be_liberal;
 unsigned int tcp_max_retrans;
};

enum udp_conntrack {
 UDP_CT_UNREPLIED,
 UDP_CT_REPLIED,
 UDP_CT_MAX
};

struct nf_udp_net {
 struct nf_proto_net pn;
 unsigned int timeouts[UDP_CT_MAX];
};

struct nf_icmp_net {
 struct nf_proto_net pn;
 unsigned int timeout;
};

struct nf_ip_net {
 struct nf_generic_net generic;
 struct nf_tcp_net tcp;
 struct nf_udp_net udp;
 struct nf_icmp_net icmp;
 struct nf_icmp_net icmpv6;

 struct ctl_table_header *ctl_table_header;
 struct ctl_table *ctl_table;

};

struct ct_pcpu {
 spinlock_t lock;
 struct hlist_nulls_head unconfirmed;
 struct hlist_nulls_head dying;
};

struct netns_ct {
 atomic_t count;
 unsigned int expect_count;





 struct ctl_table_header *sysctl_header;
 struct ctl_table_header *acct_sysctl_header;
 struct ctl_table_header *tstamp_sysctl_header;
 struct ctl_table_header *event_sysctl_header;
 struct ctl_table_header *helper_sysctl_header;

 unsigned int sysctl_log_invalid;
 int sysctl_events;
 int sysctl_acct;
 int sysctl_auto_assign_helper;
 bool auto_assign_helper_warned;
 int sysctl_tstamp;
 int sysctl_checksum;

 struct ct_pcpu *pcpu_lists;
 struct ip_conntrack_stat *stat;
 struct nf_ct_event_notifier *nf_conntrack_event_cb;
 struct nf_exp_event_notifier *nf_expect_event_cb;
 struct nf_ip_net nf_ct_proto;




};
# 26 "include/net/net_namespace.h" 2

# 1 "include/net/netns/nftables.h" 1





struct nft_af_info;

struct netns_nftables {
 struct list_head af_info;
 struct list_head commit_list;
 struct nft_af_info *ipv4;
 struct nft_af_info *ipv6;
 struct nft_af_info *inet;
 struct nft_af_info *arp;
 struct nft_af_info *bridge;
 struct nft_af_info *netdev;
 unsigned int base_seq;
 u8 gencursor;
};
# 28 "include/net/net_namespace.h" 2
# 1 "include/net/netns/xfrm.h" 1






# 1 "./include/uapi/linux/xfrm.h" 1
# 14 "./include/uapi/linux/xfrm.h"
typedef union {
 __be32 a4;
 __be32 a6[4];
 struct in6_addr in6;
} xfrm_address_t;





struct xfrm_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u8 proto;
};

struct xfrm_sec_ctx {
 __u8 ctx_doi;
 __u8 ctx_alg;
 __u16 ctx_len;
 __u32 ctx_sid;
 char ctx_str[0];
};
# 48 "./include/uapi/linux/xfrm.h"
struct xfrm_selector {
 xfrm_address_t daddr;
 xfrm_address_t saddr;
 __be16 dport;
 __be16 dport_mask;
 __be16 sport;
 __be16 sport_mask;
 __u16 family;
 __u8 prefixlen_d;
 __u8 prefixlen_s;
 __u8 proto;
 int ifindex;
 __kernel_uid32_t user;
};



struct xfrm_lifetime_cfg {
 __u64 soft_byte_limit;
 __u64 hard_byte_limit;
 __u64 soft_packet_limit;
 __u64 hard_packet_limit;
 __u64 soft_add_expires_seconds;
 __u64 hard_add_expires_seconds;
 __u64 soft_use_expires_seconds;
 __u64 hard_use_expires_seconds;
};

struct xfrm_lifetime_cur {
 __u64 bytes;
 __u64 packets;
 __u64 add_time;
 __u64 use_time;
};

struct xfrm_replay_state {
 __u32 oseq;
 __u32 seq;
 __u32 bitmap;
};



struct xfrm_replay_state_esn {
 unsigned int bmp_len;
 __u32 oseq;
 __u32 seq;
 __u32 oseq_hi;
 __u32 seq_hi;
 __u32 replay_window;
 __u32 bmp[0];
};

struct xfrm_algo {
 char alg_name[64];
 unsigned int alg_key_len;
 char alg_key[0];
};

struct xfrm_algo_auth {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_trunc_len;
 char alg_key[0];
};

struct xfrm_algo_aead {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_icv_len;
 char alg_key[0];
};

struct xfrm_stats {
 __u32 replay_window;
 __u32 replay;
 __u32 integrity_failed;
};

enum {
 XFRM_POLICY_TYPE_MAIN = 0,
 XFRM_POLICY_TYPE_SUB = 1,
 XFRM_POLICY_TYPE_MAX = 2,
 XFRM_POLICY_TYPE_ANY = 255
};

enum {
 XFRM_POLICY_IN = 0,
 XFRM_POLICY_OUT = 1,
 XFRM_POLICY_FWD = 2,
 XFRM_POLICY_MASK = 3,
 XFRM_POLICY_MAX = 3
};

enum {
 XFRM_SHARE_ANY,
 XFRM_SHARE_SESSION,
 XFRM_SHARE_USER,
 XFRM_SHARE_UNIQUE
};
# 157 "./include/uapi/linux/xfrm.h"
enum {
 XFRM_MSG_BASE = 0x10,

 XFRM_MSG_NEWSA = 0x10,

 XFRM_MSG_DELSA,

 XFRM_MSG_GETSA,


 XFRM_MSG_NEWPOLICY,

 XFRM_MSG_DELPOLICY,

 XFRM_MSG_GETPOLICY,


 XFRM_MSG_ALLOCSPI,

 XFRM_MSG_ACQUIRE,

 XFRM_MSG_EXPIRE,


 XFRM_MSG_UPDPOLICY,

 XFRM_MSG_UPDSA,


 XFRM_MSG_POLEXPIRE,


 XFRM_MSG_FLUSHSA,

 XFRM_MSG_FLUSHPOLICY,


 XFRM_MSG_NEWAE,

 XFRM_MSG_GETAE,


 XFRM_MSG_REPORT,


 XFRM_MSG_MIGRATE,


 XFRM_MSG_NEWSADINFO,

 XFRM_MSG_GETSADINFO,


 XFRM_MSG_NEWSPDINFO,

 XFRM_MSG_GETSPDINFO,


 XFRM_MSG_MAPPING,

 __XFRM_MSG_MAX
};
# 227 "./include/uapi/linux/xfrm.h"
struct xfrm_user_sec_ctx {
 __u16 len;
 __u16 exttype;
 __u8 ctx_alg;
 __u8 ctx_doi;
 __u16 ctx_len;
};

struct xfrm_user_tmpl {
 struct xfrm_id id;
 __u16 family;
 xfrm_address_t saddr;
 __u32 reqid;
 __u8 mode;
 __u8 share;
 __u8 optional;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
};

struct xfrm_encap_tmpl {
 __u16 encap_type;
 __be16 encap_sport;
 __be16 encap_dport;
 xfrm_address_t encap_oa;
};


enum xfrm_ae_ftype_t {
 XFRM_AE_UNSPEC,
 XFRM_AE_RTHR=1,
 XFRM_AE_RVAL=2,
 XFRM_AE_LVAL=4,
 XFRM_AE_ETHR=8,
 XFRM_AE_CR=16,
 XFRM_AE_CE=32,
 XFRM_AE_CU=64,
 __XFRM_AE_MAX


};

struct xfrm_userpolicy_type {
 __u8 type;
 __u16 reserved1;
 __u8 reserved2;
};


enum xfrm_attr_type_t {
 XFRMA_UNSPEC,
 XFRMA_ALG_AUTH,
 XFRMA_ALG_CRYPT,
 XFRMA_ALG_COMP,
 XFRMA_ENCAP,
 XFRMA_TMPL,
 XFRMA_SA,
 XFRMA_POLICY,
 XFRMA_SEC_CTX,
 XFRMA_LTIME_VAL,
 XFRMA_REPLAY_VAL,
 XFRMA_REPLAY_THRESH,
 XFRMA_ETIMER_THRESH,
 XFRMA_SRCADDR,
 XFRMA_COADDR,
 XFRMA_LASTUSED,
 XFRMA_POLICY_TYPE,
 XFRMA_MIGRATE,
 XFRMA_ALG_AEAD,
 XFRMA_KMADDRESS,
 XFRMA_ALG_AUTH_TRUNC,
 XFRMA_MARK,
 XFRMA_TFCPAD,
 XFRMA_REPLAY_ESN_VAL,
 XFRMA_SA_EXTRA_FLAGS,
 XFRMA_PROTO,
 XFRMA_ADDRESS_FILTER,
 XFRMA_PAD,
 __XFRMA_MAX


};

struct xfrm_mark {
 __u32 v;
 __u32 m;
};

enum xfrm_sadattr_type_t {
 XFRMA_SAD_UNSPEC,
 XFRMA_SAD_CNT,
 XFRMA_SAD_HINFO,
 __XFRMA_SAD_MAX


};

struct xfrmu_sadhinfo {
 __u32 sadhcnt;
 __u32 sadhmcnt;
};

enum xfrm_spdattr_type_t {
 XFRMA_SPD_UNSPEC,
 XFRMA_SPD_INFO,
 XFRMA_SPD_HINFO,
 XFRMA_SPD_IPV4_HTHRESH,
 XFRMA_SPD_IPV6_HTHRESH,
 __XFRMA_SPD_MAX


};

struct xfrmu_spdinfo {
 __u32 incnt;
 __u32 outcnt;
 __u32 fwdcnt;
 __u32 inscnt;
 __u32 outscnt;
 __u32 fwdscnt;
};

struct xfrmu_spdhinfo {
 __u32 spdhcnt;
 __u32 spdhmcnt;
};

struct xfrmu_spdhthresh {
 __u8 lbits;
 __u8 rbits;
};

struct xfrm_usersa_info {
 struct xfrm_selector sel;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 struct xfrm_stats stats;
 __u32 seq;
 __u32 reqid;
 __u16 family;
 __u8 mode;
 __u8 replay_window;
 __u8 flags;
# 381 "./include/uapi/linux/xfrm.h"
};



struct xfrm_usersa_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u16 family;
 __u8 proto;
};

struct xfrm_aevent_id {
 struct xfrm_usersa_id sa_id;
 xfrm_address_t saddr;
 __u32 flags;
 __u32 reqid;
};

struct xfrm_userspi_info {
 struct xfrm_usersa_info info;
 __u32 min;
 __u32 max;
};

struct xfrm_userpolicy_info {
 struct xfrm_selector sel;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 __u32 priority;
 __u32 index;
 __u8 dir;
 __u8 action;


 __u8 flags;



 __u8 share;
};

struct xfrm_userpolicy_id {
 struct xfrm_selector sel;
 __u32 index;
 __u8 dir;
};

struct xfrm_user_acquire {
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_selector sel;
 struct xfrm_userpolicy_info policy;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
 __u32 seq;
};

struct xfrm_user_expire {
 struct xfrm_usersa_info state;
 __u8 hard;
};

struct xfrm_user_polexpire {
 struct xfrm_userpolicy_info pol;
 __u8 hard;
};

struct xfrm_usersa_flush {
 __u8 proto;
};

struct xfrm_user_report {
 __u8 proto;
 struct xfrm_selector sel;
};



struct xfrm_user_kmaddress {
 xfrm_address_t local;
 xfrm_address_t remote;
 __u32 reserved;
 __u16 family;
};

struct xfrm_user_migrate {
 xfrm_address_t old_daddr;
 xfrm_address_t old_saddr;
 xfrm_address_t new_daddr;
 xfrm_address_t new_saddr;
 __u8 proto;
 __u8 mode;
 __u16 reserved;
 __u32 reqid;
 __u16 old_family;
 __u16 new_family;
};

struct xfrm_user_mapping {
 struct xfrm_usersa_id id;
 __u32 reqid;
 xfrm_address_t old_saddr;
 xfrm_address_t new_saddr;
 __be16 old_sport;
 __be16 new_sport;
};

struct xfrm_address_filter {
 xfrm_address_t saddr;
 xfrm_address_t daddr;
 __u16 family;
 __u8 splen;
 __u8 dplen;
};
# 506 "./include/uapi/linux/xfrm.h"
enum xfrm_nlgroups {
 XFRMNLGRP_NONE,

 XFRMNLGRP_ACQUIRE,

 XFRMNLGRP_EXPIRE,

 XFRMNLGRP_SA,

 XFRMNLGRP_POLICY,

 XFRMNLGRP_AEVENTS,

 XFRMNLGRP_REPORT,

 XFRMNLGRP_MIGRATE,

 XFRMNLGRP_MAPPING,

 __XFRMNLGRP_MAX
};
# 8 "include/net/netns/xfrm.h" 2

# 1 "include/net/flowcache.h" 1
# 9 "include/net/flowcache.h"
struct flow_cache_percpu {
 struct hlist_head *hash_table;
 int hash_count;
 u32 hash_rnd;
 int hash_rnd_recalc;
 struct tasklet_struct flush_tasklet;
};

struct flow_cache {
 u32 hash_shift;
 struct flow_cache_percpu *percpu;
 struct notifier_block hotcpu_notifier;
 int low_watermark;
 int high_watermark;
 struct timer_list rnd_timer;
};
# 10 "include/net/netns/xfrm.h" 2

struct ctl_table_header;

struct xfrm_policy_hash {
 struct hlist_head *table;
 unsigned int hmask;
 u8 dbits4;
 u8 sbits4;
 u8 dbits6;
 u8 sbits6;
};

struct xfrm_policy_hthresh {
 struct work_struct work;
 seqlock_t lock;
 u8 lbits4;
 u8 rbits4;
 u8 lbits6;
 u8 rbits6;
};

struct netns_xfrm {
 struct list_head state_all;
# 41 "include/net/netns/xfrm.h"
 struct hlist_head *state_bydst;
 struct hlist_head *state_bysrc;
 struct hlist_head *state_byspi;
 unsigned int state_hmask;
 unsigned int state_num;
 struct work_struct state_hash_work;
 struct hlist_head state_gc_list;
 struct work_struct state_gc_work;

 struct list_head policy_all;
 struct hlist_head *policy_byidx;
 unsigned int policy_idx_hmask;
 struct hlist_head policy_inexact[XFRM_POLICY_MAX];
 struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX];
 unsigned int policy_count[XFRM_POLICY_MAX * 2];
 struct work_struct policy_hash_work;
 struct xfrm_policy_hthresh policy_hthresh;


 struct sock *nlsk;
 struct sock *nlsk_stash;

 u32 sysctl_aevent_etime;
 u32 sysctl_aevent_rseqth;
 int sysctl_larval_drop;
 u32 sysctl_acq_expires;

 struct ctl_table_header *sysctl_hdr;


 struct dst_ops xfrm4_dst_ops;

 struct dst_ops xfrm6_dst_ops;

 spinlock_t xfrm_state_lock;
 rwlock_t xfrm_policy_lock;
 struct mutex xfrm_cfg_mutex;


 struct flow_cache flow_cache_global;
 atomic_t flow_cache_genid;
 struct list_head flow_cache_gc_list;
 atomic_t flow_cache_gc_count;
 spinlock_t flow_cache_gc_lock;
 struct work_struct flow_cache_gc_work;
 struct work_struct flow_cache_flush_work;
 struct mutex flow_flush_sem;
};
# 29 "include/net/net_namespace.h" 2
# 1 "include/net/netns/mpls.h" 1







struct mpls_route;
struct ctl_table_header;

struct netns_mpls {
 size_t platform_labels;
 struct mpls_route * *platform_label;
 struct ctl_table_header *ctl;
};
# 30 "include/net/net_namespace.h" 2
# 1 "include/linux/ns_common.h" 1



struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
};
# 31 "include/net/net_namespace.h" 2



struct user_namespace;
struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;
struct sock;
struct netns_ipvs;





struct net {
 atomic_t passive;


 atomic_t count;


 spinlock_t rules_mod_lock;

 atomic64_t cookie_gen;

 struct list_head list;
 struct list_head cleanup_list;
 struct list_head exit_list;

 struct user_namespace *user_ns;
 spinlock_t nsid_lock;
 struct idr netns_ids;

 struct ns_common ns;

 struct proc_dir_entry *proc_net;
 struct proc_dir_entry *proc_net_stat;


 struct ctl_table_set sysctls;


 struct sock *rtnl;
 struct sock *genl_sock;

 struct list_head dev_base_head;
 struct hlist_head *dev_name_head;
 struct hlist_head *dev_index_head;
 unsigned int dev_base_seq;
 int ifindex;
 unsigned int dev_unreg_count;


 struct list_head rules_ops;


 struct net_device *loopback_dev;
 struct netns_core core;
 struct netns_mib mib;
 struct netns_packet packet;
 struct netns_unix unx;
 struct netns_ipv4 ipv4;

 struct netns_ipv6 ipv6;
# 108 "include/net/net_namespace.h"
 struct netns_nf nf;
 struct netns_xt xt;

 struct netns_ct ct;





 struct netns_nf_frag nf_frag;

 struct sock *nfnl;
 struct sock *nfnl_stash;
# 131 "include/net/net_namespace.h"
 struct net_generic *gen;



 struct netns_xfrm xfrm;







 struct sock *diag_nlsk;
 atomic_t fnhe_genid;
};

# 1 "include/linux/seq_file_net.h" 1



# 1 "include/linux/seq_file.h" 1
# 13 "include/linux/seq_file.h"
struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 50 "include/linux/seq_file.h"
static inline __attribute__((no_instrument_function)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 63 "include/linux/seq_file.h"
static inline __attribute__((no_instrument_function)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/seq_file.h"), "i" (65), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 83 "include/linux/seq_file.h"
static inline __attribute__((no_instrument_function)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/seq_file.h"), "i" (88), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
  m->count += num;
 }
}
# 101 "include/linux/seq_file.h"
static inline __attribute__((no_instrument_function)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((format(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((format(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull(struct seq_file *m, char delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, char delimiter, long long num);
void seq_escape(struct seq_file *m, const char *s, const char *esc);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);

static inline __attribute__((no_instrument_function)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{



 extern struct user_namespace init_user_ns;
 return &init_user_ns;

}







static inline __attribute__((no_instrument_function)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 192 "include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);
# 5 "include/linux/seq_file_net.h" 2

struct net;
extern struct net init_net;

struct seq_net_private {

 struct net *net;

};

int seq_open_net(struct inode *, struct file *,
   const struct seq_operations *, int);
int single_open_net(struct inode *, struct file *file,
  int (*show)(struct seq_file *, void *));
int seq_release_net(struct inode *, struct file *);
int single_release_net(struct inode *, struct file *);
static inline __attribute__((no_instrument_function)) struct net *seq_file_net(struct seq_file *seq)
{

 return ((struct seq_net_private *)seq->private)->net;



}
# 148 "include/net/net_namespace.h" 2


extern struct net init_net;


struct net *copy_net_ns(unsigned long flags, struct user_namespace *user_ns,
   struct net *old_net);
# 169 "include/net/net_namespace.h"
extern struct list_head net_namespace_list;

struct net *get_net_ns_by_pid(pid_t pid);
struct net *get_net_ns_by_fd(int pid);


void ipx_register_sysctl(void);
void ipx_unregister_sysctl(void);






void __put_net(struct net *net);

static inline __attribute__((no_instrument_function)) struct net *get_net(struct net *net)
{
 atomic_inc(&net->count);
 return net;
}

static inline __attribute__((no_instrument_function)) struct net *maybe_get_net(struct net *net)
{





 if (!atomic_add_unless((&net->count), 1, 0))
  net = ((void *)0);
 return net;
}

static inline __attribute__((no_instrument_function)) void put_net(struct net *net)
{
 if (atomic_dec_and_test(&net->count))
  __put_net(net);
}

static inline __attribute__((no_instrument_function))
int net_eq(const struct net *net1, const struct net *net2)
{
 return net1 == net2;
}

void net_drop_ns(void *);
# 243 "include/net/net_namespace.h"
typedef struct {

 struct net *net;

} possible_net_t;

static inline __attribute__((no_instrument_function)) void write_pnet(possible_net_t *pnet, struct net *net)
{

 pnet->net = net;

}

static inline __attribute__((no_instrument_function)) struct net *read_pnet(const possible_net_t *pnet)
{

 return pnet->net;



}
# 283 "include/net/net_namespace.h"
int peernet2id_alloc(struct net *net, struct net *peer);
int peernet2id(struct net *net, struct net *peer);
bool peernet_has_id(struct net *net, struct net *peer);
struct net *get_net_ns_by_id(struct net *net, int id);

struct pernet_operations {
 struct list_head list;
 int (*init)(struct net *net);
 void (*exit)(struct net *net);
 void (*exit_batch)(struct list_head *net_exit_list);
 int *id;
 size_t size;
};
# 316 "include/net/net_namespace.h"
int register_pernet_subsys(struct pernet_operations *);
void unregister_pernet_subsys(struct pernet_operations *);
int register_pernet_device(struct pernet_operations *);
void unregister_pernet_device(struct pernet_operations *);

struct ctl_table;
struct ctl_table_header;


int net_sysctl_init(void);
struct ctl_table_header *register_net_sysctl(struct net *net, const char *path,
          struct ctl_table *table);
void unregister_net_sysctl_table(struct ctl_table_header *header);
# 341 "include/net/net_namespace.h"
static inline __attribute__((no_instrument_function)) int rt_genid_ipv4(struct net *net)
{
 return atomic_read(&net->ipv4.rt_genid);
}

static inline __attribute__((no_instrument_function)) void rt_genid_bump_ipv4(struct net *net)
{
 atomic_inc(&net->ipv4.rt_genid);
}

extern void (*__fib6_flush_trees)(struct net *net);
static inline __attribute__((no_instrument_function)) void rt_genid_bump_ipv6(struct net *net)
{
 if (__fib6_flush_trees)
  __fib6_flush_trees(net);
}
# 367 "include/net/net_namespace.h"
static inline __attribute__((no_instrument_function)) void rt_genid_bump_all(struct net *net)
{
 rt_genid_bump_ipv4(net);
 rt_genid_bump_ipv6(net);
}

static inline __attribute__((no_instrument_function)) int fnhe_genid(struct net *net)
{
 return atomic_read(&net->fnhe_genid);
}

static inline __attribute__((no_instrument_function)) void fnhe_genid_bump(struct net *net)
{
 atomic_inc(&net->fnhe_genid);
}
# 44 "include/linux/netdevice.h" 2
# 1 "include/net/dsa.h" 1
# 18 "include/net/dsa.h"
# 1 "include/linux/of.h" 1
# 26 "include/linux/of.h"
# 1 "include/linux/property.h" 1
# 16 "include/linux/property.h"
# 1 "include/linux/fwnode.h" 1
# 15 "include/linux/fwnode.h"
enum fwnode_type {
 FWNODE_INVALID = 0,
 FWNODE_OF,
 FWNODE_ACPI,
 FWNODE_ACPI_DATA,
 FWNODE_PDATA,
 FWNODE_IRQCHIP,
};

struct fwnode_handle {
 enum fwnode_type type;
 struct fwnode_handle *secondary;
};
# 17 "include/linux/property.h" 2


struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_MAX,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_property_present(struct fwnode_handle *fwnode, const char *propname);
int fwnode_property_read_u8_array(struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(struct fwnode_handle *fwnode,
     const char *propname, const char *string);

struct fwnode_handle *device_get_next_child_node(struct device *dev,
       struct fwnode_handle *child);





void fwnode_handle_put(struct fwnode_handle *fwnode);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((no_instrument_function)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((no_instrument_function)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) bool fwnode_property_read_bool(struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((no_instrument_function)) int fwnode_property_read_u8(struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int fwnode_property_read_u16(struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int fwnode_property_read_u32(struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((no_instrument_function)) int fwnode_property_read_u64(struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}
# 153 "include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_array;
 bool is_string;
 union {
  union {
   void *raw_data;
   u8 *u8_data;
   u16 *u16_data;
   u32 *u32_data;
   u64 *u64_data;
   const char **str;
  } pointer;
  union {
   unsigned long long raw_data;
   u8 u8_data;
   u16 u16_data;
   u32 u32_data;
   u64 u64_data;
   const char *str;
  } value;
 };
};
# 241 "include/linux/property.h"
int device_add_properties(struct device *dev,
     struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);
# 27 "include/linux/of.h" 2



# 1 "./arch/x86/include/uapi/asm/errno.h" 1
# 31 "include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;
 unsigned long _flags;
 unsigned int unique_id;
 struct bin_attribute attr;
};





struct device_node {
 const char *name;
 const char *type;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;
 struct kobject kobj;
 unsigned long _flags;
 void *data;





};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
static inline __attribute__((no_instrument_function)) void of_node_init(struct device_node *node)
{
 kobject_init(&node->kobj, &of_node_ktype);
 node->fwnode.type = FWNODE_OF;
}


static inline __attribute__((no_instrument_function)) int of_node_is_initialized(struct device_node *node)
{
 return node && node->kobj.state_initialized;
}


static inline __attribute__((no_instrument_function)) int of_node_is_attached(struct device_node *node)
{
 return node && node->kobj.state_in_sysfs;
}






static inline __attribute__((no_instrument_function)) struct device_node *of_node_get(struct device_node *node)
{
 return node;
}
static inline __attribute__((no_instrument_function)) void of_node_put(struct device_node *node) { }



extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 411 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) void of_core_init(void)
{
}

static inline __attribute__((no_instrument_function)) bool is_of_node(struct fwnode_handle *fwnode)
{
 return false;
}

static inline __attribute__((no_instrument_function)) struct device_node *to_of_node(struct fwnode_handle *fwnode)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) const char* of_node_full_name(const struct device_node *np)
{
 return "<no-node>";
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_by_path(const char *path)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_by_phandle(phandle handle)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_get_parent(const struct device_node *node)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_get_next_child(
 const struct device_node *node, struct device_node *prev)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) bool of_have_populated_dt(void)
{
 return false;
}

static inline __attribute__((no_instrument_function)) struct device_node *of_get_child_by_name(
     const struct device_node *node,
     const char *name)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int of_device_is_compatible(const struct device_node *device,
       const char *name)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) bool of_device_is_available(const struct device_node *device)
{
 return false;
}

static inline __attribute__((no_instrument_function)) bool of_device_is_big_endian(const struct device_node *device)
{
 return false;
}

static inline __attribute__((no_instrument_function)) struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_find_compatible_node(
      struct device_node *from,
      const char *type,
      const char *compat)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int of_property_count_elems_of_size(const struct device_node *np,
   const char *propname, int elem_size)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u32_index(const struct device_node *np,
   const char *propname, u32 index, u32 *out_value)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u8_array(const struct device_node *np,
   const char *propname, u8 *out_values, size_t sz)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u16_array(const struct device_node *np,
   const char *propname, u16 *out_values, size_t sz)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_read_string_helper(const struct device_node *np,
       const char *propname,
       const char **out_strs, size_t sz, int index)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) struct device_node *of_get_cpu_node(int cpu,
     unsigned int *thread)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int of_property_read_u64(const struct device_node *np,
           const char *propname, u64 *out_value)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int of_parse_phandle_with_args(struct device_node *np,
          const char *list_name,
          const char *cells_name,
          int index,
          struct of_phandle_args *out_args)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_count_phandle_with_args(struct device_node *np,
          const char *list_name,
          const char *cells_name)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_phandle_iterator_next(struct of_phandle_iterator *it)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int of_alias_get_id(struct device_node *np, const char *stem)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_alias_get_highest_id(const char *stem)
{
 return -38;
}

static inline __attribute__((no_instrument_function)) int of_machine_is_compatible(const char *compat)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) bool of_console_check(const struct device_node *dn, const char *name, int index)
{
 return false;
}

static inline __attribute__((no_instrument_function)) const __be32 *of_prop_next_u32(struct property *prop,
  const __be32 *cur, u32 *pu)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) const char *of_prop_next_string(struct property *prop,
  const char *cur)
{
 return ((void *)0);
}

static inline __attribute__((no_instrument_function)) int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
}

static inline __attribute__((no_instrument_function)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
}

static inline __attribute__((no_instrument_function)) int of_property_check_flag(struct property *p, unsigned long flag)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void of_property_set_flag(struct property *p, unsigned long flag)
{
}

static inline __attribute__((no_instrument_function)) void of_property_clear_flag(struct property *p, unsigned long flag)
{
}
# 732 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_node_to_nid(struct device_node *device)
{
 return (-1);
}





static inline __attribute__((no_instrument_function)) int of_numa_init(void)
{
 return -38;
}


static inline __attribute__((no_instrument_function)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}
# 765 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 782 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 799 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 816 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 835 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 854 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 878 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 894 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((no_instrument_function)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((no_instrument_function)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((no_instrument_function)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((no_instrument_function)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 975 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((no_instrument_function)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1011 "include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1033 "include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1051 "include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};
# 1106 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_reconfig_notifier_register(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((no_instrument_function)) int of_reconfig_notifier_unregister(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((no_instrument_function)) int of_reconfig_notify(unsigned long action,
         struct of_reconfig_data *arg)
{
 return -22;
}
static inline __attribute__((no_instrument_function)) int of_reconfig_get_state_change(unsigned long action,
      struct of_reconfig_data *arg)
{
 return -22;
}



extern int of_resolve_phandles(struct device_node *tree);







static inline __attribute__((no_instrument_function)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}
# 1153 "include/linux/of.h"
static inline __attribute__((no_instrument_function)) int of_overlay_create(struct device_node *tree)
{
 return -524;
}

static inline __attribute__((no_instrument_function)) int of_overlay_destroy(int id)
{
 return -524;
}

static inline __attribute__((no_instrument_function)) int of_overlay_destroy_all(void)
{
 return -524;
}
# 19 "include/net/dsa.h" 2
# 1 "include/linux/phy.h" 1
# 22 "include/linux/phy.h"
# 1 "include/linux/mdio.h" 1
# 12 "include/linux/mdio.h"
# 1 "include/uapi/linux/mdio.h" 1
# 14 "include/uapi/linux/mdio.h"
# 1 "include/linux/mii.h" 1
# 12 "include/linux/mii.h"
# 1 "include/uapi/linux/mii.h" 1
# 154 "include/uapi/linux/mii.h"
struct mii_ioctl_data {
 __u16 phy_id;
 __u16 reg_num;
 __u16 val_in;
 __u16 val_out;
};
# 13 "include/linux/mii.h" 2

struct ethtool_cmd;

struct mii_if_info {
 int phy_id;
 int advertising;
 int phy_id_mask;
 int reg_num_mask;

 unsigned int full_duplex : 1;
 unsigned int force_media : 1;
 unsigned int supports_gmii : 1;

 struct net_device *dev;
 int (*mdio_read) (struct net_device *dev, int phy_id, int location);
 void (*mdio_write) (struct net_device *dev, int phy_id, int location, int val);
};

extern int mii_link_ok (struct mii_if_info *mii);
extern int mii_nway_restart (struct mii_if_info *mii);
extern int mii_ethtool_gset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
extern int mii_ethtool_sset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
extern int mii_check_gmii_support(struct mii_if_info *mii);
extern void mii_check_link (struct mii_if_info *mii);
extern unsigned int mii_check_media (struct mii_if_info *mii,
         unsigned int ok_to_print,
         unsigned int init_media);
extern int generic_mii_ioctl(struct mii_if_info *mii_if,
        struct mii_ioctl_data *mii_data, int cmd,
        unsigned int *duplex_changed);


static inline __attribute__((no_instrument_function)) struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
 return (struct mii_ioctl_data *) &rq->ifr_ifru;
}
# 64 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) unsigned int mii_nway_result (unsigned int negotiated)
{
 unsigned int ret;

 if (negotiated & 0x0100)
  ret = 0x0100;
 else if (negotiated & 0x0200)
  ret = 0x0200;
 else if (negotiated & 0x0080)
  ret = 0x0080;
 else if (negotiated & 0x0040)
  ret = 0x0040;
 else
  ret = 0x0020;

 return ret;
}
# 91 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) unsigned int mii_duplex (unsigned int duplex_lock,
           unsigned int negotiated)
{
 if (duplex_lock)
  return 1;
 if (mii_nway_result(negotiated) & (0x0040 | 0x0100))
  return 1;
 return 0;
}
# 109 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_adv_t(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_10baseT_Half_BIT)))
  result |= 0x0020;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_10baseT_Full_BIT)))
  result |= 0x0040;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Half_BIT)))
  result |= 0x0080;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT)))
  result |= 0x0100;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Pause_BIT)))
  result |= 0x0400;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT)))
  result |= 0x0800;

 return result;
}
# 136 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_adv_to_ethtool_adv_t(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0020)
  result |= (1UL << (ETHTOOL_LINK_MODE_10baseT_Half_BIT));
 if (adv & 0x0040)
  result |= (1UL << (ETHTOOL_LINK_MODE_10baseT_Full_BIT));
 if (adv & 0x0080)
  result |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Half_BIT));
 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (adv & 0x0400)
  result |= (1UL << (ETHTOOL_LINK_MODE_Pause_BIT));
 if (adv & 0x0800)
  result |= (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT));

 return result;
}
# 164 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_ctrl1000_t(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT)))
  result |= 0x0100;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  result |= 0x0200;

 return result;
}
# 184 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (adv & 0x0200)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));

 return result;
}
# 204 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_lpa_to_ethtool_lpa_t(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x4000)
  result |= (1UL << (ETHTOOL_LINK_MODE_Autoneg_BIT));

 return result | mii_adv_to_ethtool_adv_t(lpa);
}
# 222 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_stat1000_to_ethtool_lpa_t(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x0400)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (lpa & 0x0800)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));

 return result;
}
# 242 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_adv_x(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT)))
  result |= 0x0040;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  result |= 0x0020;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Pause_BIT)))
  result |= 0x0080;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT)))
  result |= 0x0100;

 return result;
}
# 266 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_adv_to_ethtool_adv_x(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0040)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (adv & 0x0020)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (adv & 0x0080)
  result |= (1UL << (ETHTOOL_LINK_MODE_Pause_BIT));
 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT));

 return result;
}
# 290 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u32 mii_lpa_to_ethtool_lpa_x(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x4000)
  result |= (1UL << (ETHTOOL_LINK_MODE_Autoneg_BIT));

 return result | mii_adv_to_ethtool_adv_x(lpa);
}





static inline __attribute__((no_instrument_function)) u16 mii_advertise_flowctrl(int cap)
{
 u16 adv = 0;

 if (cap & 0x02)
  adv = 0x0400 | 0x0800;
 if (cap & 0x01)
  adv ^= 0x0800;

 return adv;
}
# 323 "include/linux/mii.h"
static inline __attribute__((no_instrument_function)) u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
 u8 cap = 0;

 if (lcladv & rmtadv & 0x0400) {
  cap = 0x01 | 0x02;
 } else if (lcladv & rmtadv & 0x0800) {
  if (lcladv & 0x0400)
   cap = 0x02;
  else if (rmtadv & 0x0400)
   cap = 0x01;
 }

 return cap;
}
# 15 "include/uapi/linux/mdio.h" 2
# 292 "include/uapi/linux/mdio.h"
static inline __attribute__((no_instrument_function)) __u16 mdio_phy_id_c45(int prtad, int devad)
{
 return 0x8000 | (prtad << 5) | devad;
}
# 13 "include/linux/mdio.h" 2

struct mii_bus;






enum mdio_mutex_lock_class {
 MDIO_MUTEX_NORMAL,
 MDIO_MUTEX_MUX,
 MDIO_MUTEX_NESTED,
};

struct mdio_device {
 struct device dev;

 const struct dev_pm_ops *pm_ops;
 struct mii_bus *bus;

 int (*bus_match)(struct device *dev, struct device_driver *drv);
 void (*device_free)(struct mdio_device *mdiodev);
 void (*device_remove)(struct mdio_device *mdiodev);


 int addr;
 int flags;
};



struct mdio_driver_common {
 struct device_driver driver;
 int flags;
};





struct mdio_driver {
 struct mdio_driver_common mdiodrv;





 int (*probe)(struct mdio_device *mdiodev);


 void (*remove)(struct mdio_device *mdiodev);
};



void mdio_device_free(struct mdio_device *mdiodev);
struct mdio_device *mdio_device_create(struct mii_bus *bus, int addr);
int mdio_device_register(struct mdio_device *mdiodev);
void mdio_device_remove(struct mdio_device *mdiodev);
int mdio_driver_register(struct mdio_driver *drv);
void mdio_driver_unregister(struct mdio_driver *drv);

static inline __attribute__((no_instrument_function)) bool mdio_phy_id_is_c45(int phy_id)
{
 return (phy_id & 0x8000) && !(phy_id & ~(0x8000 | 0x03e0 | 0x001f));
}

static inline __attribute__((no_instrument_function)) __u16 mdio_phy_id_prtad(int phy_id)
{
 return (phy_id & 0x03e0) >> 5;
}

static inline __attribute__((no_instrument_function)) __u16 mdio_phy_id_devad(int phy_id)
{
 return phy_id & 0x001f;
}
# 104 "include/linux/mdio.h"
struct mdio_if_info {
 int prtad;
 u32 mmds;
 unsigned mode_support;

 struct net_device *dev;
 int (*mdio_read)(struct net_device *dev, int prtad, int devad,
    u16 addr);
 int (*mdio_write)(struct net_device *dev, int prtad, int devad,
     u16 addr, u16 val);
};







struct ethtool_cmd;
struct ethtool_pauseparam;
extern int mdio45_probe(struct mdio_if_info *mdio, int prtad);
extern int mdio_set_flag(const struct mdio_if_info *mdio,
    int prtad, int devad, u16 addr, int mask,
    bool sense);
extern int mdio45_links_ok(const struct mdio_if_info *mdio, u32 mmds);
extern int mdio45_nway_restart(const struct mdio_if_info *mdio);
extern void mdio45_ethtool_gset_npage(const struct mdio_if_info *mdio,
          struct ethtool_cmd *ecmd,
          u32 npage_adv, u32 npage_lpa);
# 144 "include/linux/mdio.h"
static inline __attribute__((no_instrument_function)) void mdio45_ethtool_gset(const struct mdio_if_info *mdio,
           struct ethtool_cmd *ecmd)
{
 mdio45_ethtool_gset_npage(mdio, ecmd, 0, 0);
}

extern int mdio_mii_ioctl(const struct mdio_if_info *mdio,
     struct mii_ioctl_data *mii_data, int cmd);
# 160 "include/linux/mdio.h"
static inline __attribute__((no_instrument_function)) u32 mmd_eee_cap_to_ethtool_sup_t(u16 eee_cap)
{
 u32 supported = 0;

 if (eee_cap & 0x0002)
  supported |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (eee_cap & 0x0004)
  supported |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (eee_cap & 0x0008)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT));
 if (eee_cap & 0x0010)
  supported |= (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT));
 if (eee_cap & 0x0020)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT));
 if (eee_cap & 0x0040)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT));

 return supported;
}
# 188 "include/linux/mdio.h"
static inline __attribute__((no_instrument_function)) u32 mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
{
 u32 adv = 0;

 if (eee_adv & 0x0002)
  adv |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (eee_adv & 0x0004)
  adv |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (eee_adv & 0x0008)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT));
 if (eee_adv & 0x0010)
  adv |= (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT));
 if (eee_adv & 0x0020)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT));
 if (eee_adv & 0x0040)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT));

 return adv;
}
# 216 "include/linux/mdio.h"
static inline __attribute__((no_instrument_function)) u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
 u16 reg = 0;

 if (adv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT)))
  reg |= 0x0002;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  reg |= 0x0004;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT)))
  reg |= 0x0008;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT)))
  reg |= 0x0010;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT)))
  reg |= 0x0020;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT)))
  reg |= 0x0040;

 return reg;
}

int mdiobus_read(struct mii_bus *bus, int addr, u32 regnum);
int mdiobus_read_nested(struct mii_bus *bus, int addr, u32 regnum);
int mdiobus_write(struct mii_bus *bus, int addr, u32 regnum, u16 val);
int mdiobus_write_nested(struct mii_bus *bus, int addr, u32 regnum, u16 val);

int mdiobus_register_device(struct mdio_device *mdiodev);
int mdiobus_unregister_device(struct mdio_device *mdiodev);
bool mdiobus_is_registered_device(struct mii_bus *bus, int addr);
struct phy_device *mdiobus_get_phy(struct mii_bus *bus, int addr);
# 23 "include/linux/phy.h" 2

# 1 "include/linux/module.h" 1
# 13 "include/linux/module.h"
# 1 "include/linux/kmod.h" 1
# 32 "include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((format(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 48 "include/linux/kmod.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
};

extern int
call_usermodehelper(char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(char *path, char **argv, char **envp, gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((no_instrument_function)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((no_instrument_function)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 14 "include/linux/module.h" 2

# 1 "include/linux/elf.h" 1



# 1 "./arch/x86/include/asm/elf.h" 1
# 10 "./arch/x86/include/asm/elf.h"
# 1 "./arch/x86/include/asm/user.h" 1






# 1 "./arch/x86/include/asm/user_64.h" 1
# 50 "./arch/x86/include/asm/user_64.h"
struct user_i387_struct {
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;

 unsigned short fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 padding[24];
};




struct user_regs_struct {
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;
 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;
 unsigned long fs_base;
 unsigned long gs_base;
 unsigned long ds;
 unsigned long es;
 unsigned long fs;
 unsigned long gs;
};





struct user {


  struct user_regs_struct regs;

  int u_fpvalid;

  int pad0;
  struct user_i387_struct i387;

  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;



  long int signal;
  int reserved;
  int pad1;
  unsigned long u_ar0;

  struct user_i387_struct *u_fpstate;
  unsigned long magic;
  char u_comm[32];
  unsigned long u_debugreg[8];
  unsigned long error_code;
  unsigned long fault_address;
};
# 8 "./arch/x86/include/asm/user.h" 2




struct user_ymmh_regs {

 __u32 ymmh_space[64];
};

struct user_xstate_header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};
# 53 "./arch/x86/include/asm/user.h"
struct user_xstateregs {
 struct {
  __u64 fpx_space[58];
  __u64 xstate_fx_sw[6];
 } i387;
 struct user_xstate_header header;
 struct user_ymmh_regs ymmh;

};
# 11 "./arch/x86/include/asm/elf.h" 2


typedef unsigned long elf_greg_t;


typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];

typedef struct user_i387_struct elf_fpregset_t;
# 76 "./arch/x86/include/asm/elf.h"
# 1 "./arch/x86/include/asm/vdso.h" 1
# 12 "./arch/x86/include/asm/vdso.h"
struct vdso_image {
 void *data;
 unsigned long size;

 unsigned long alt, alt_len;

 long sym_vvar_start;

 long sym_vvar_page;
 long sym_hpet_page;
 long sym_pvclock_page;
 long sym_VDSO32_NOTE_MASK;
 long sym___kernel_sigreturn;
 long sym___kernel_rt_sigreturn;
 long sym___kernel_vsyscall;
 long sym_int80_landing_pad;
};


extern const struct vdso_image vdso_image_64;







extern const struct vdso_image vdso_image_32;


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) init_vdso_image(const struct vdso_image *image);
# 77 "./arch/x86/include/asm/elf.h" 2


extern unsigned int vdso64_enabled;


extern unsigned int vdso32_enabled;
# 171 "./arch/x86/include/asm/elf.h"
static inline __attribute__((no_instrument_function)) void elf_common_init(struct thread_struct *t,
       struct pt_regs *regs, const u16 ds)
{

                 regs->bx = regs->cx = regs->dx = 0;
 regs->si = regs->di = regs->bp = 0;
 regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
 regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
 t->fsbase = t->gsbase = 0;
 t->fsindex = t->gsindex = 0;
 t->ds = t->es = ds;
}







void compat_start_thread(struct pt_regs *regs, u32 new_ip, u32 new_sp);


void set_personality_ia32(bool);
# 239 "./arch/x86/include/asm/elf.h"
extern void set_personality_64bit(void);
extern unsigned int sysctl_vsyscall32;
extern int force_personality32;
# 277 "./arch/x86/include/asm/elf.h"
struct task_struct;
# 333 "./arch/x86/include/asm/elf.h"
struct linux_binprm;


extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
extern int compat_arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);





static inline __attribute__((no_instrument_function)) int mmap_is_ia32(void)
{
 return 0 ||
        (1 &&
  test_ti_thread_flag(current_thread_info(), 29));
}


enum align_flags {
 ALIGN_VA_32 = (1UL << (0)),
 ALIGN_VA_64 = (1UL << (1)),
};

struct va_alignment {
 int flags;
 unsigned long mask;
 unsigned long bits;
} __attribute__((__aligned__((1 << (6)))));

extern struct va_alignment va_align;
extern unsigned long align_vdso_addr(unsigned long);
# 5 "include/linux/elf.h" 2
# 1 "include/uapi/linux/elf.h" 1




# 1 "./include/uapi/linux/elf-em.h" 1
# 6 "include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 137 "include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 160 "include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 301 "include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 409 "include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 6 "include/linux/elf.h" 2
# 35 "include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 46 "include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((no_instrument_function)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((no_instrument_function)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 16 "include/linux/module.h" 2


# 1 "include/linux/moduleparam.h" 1
# 37 "include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};






enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0)
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 236 "include/linux/moduleparam.h"
static inline __attribute__((no_instrument_function)) int
__check_old_set_param(int (*oldset)(const char *, struct kernel_param *))
{
 return 0;
}


extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 307 "include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 317 "include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 346 "include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 454 "include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 19 "include/linux/module.h" 2


# 1 "include/linux/rbtree_latch.h" 1
# 38 "include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_t seq;
 struct rb_root tree[2];
};
# 62 "include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ const typeof( ((struct latch_tree_node *)0)->node[idx] ) *__mptr = (node); (struct latch_tree_node *)( (char *)__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]) );});
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(*(ltr->tree[idx].rb_node)) *________p1 = (typeof(*(ltr->tree[idx].rb_node)) *)({ typeof((ltr->tree[idx].rb_node)) _________p1 = ({ union { typeof((ltr->tree[idx].rb_node)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ltr->tree[idx].rb_node)), __u.__c, sizeof((ltr->tree[idx].rb_node))); else __read_once_size_nocheck(&((ltr->tree[idx].rb_node)), __u.__c, sizeof((ltr->tree[idx].rb_node))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(ltr->tree[idx].rb_node)) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(*(node->rb_left)) *________p1 = (typeof(*(node->rb_left)) *)({ typeof((node->rb_left)) _________p1 = ({ union { typeof((node->rb_left)) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->rb_left)), __u.__c, sizeof((node->rb_left))); else __read_once_size_nocheck(&((node->rb_left)), __u.__c, sizeof((node->rb_left))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(node->rb_left)) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(*(node->rb_right)) *________p1 = (typeof(*(node->rb_right)) *)({ typeof((node->rb_right)) _________p1 = ({ union { typeof((node->rb_right)) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->rb_right)), __u.__c, sizeof((node->rb_right))); else __read_once_size_nocheck(&((node->rb_right)), __u.__c, sizeof((node->rb_right))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(node->rb_right)) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 141 "include/linux/rbtree_latch.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 168 "include/linux/rbtree_latch.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 197 "include/linux/rbtree_latch.h"
static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_retry(&root->seq, seq));

 return node;
}
# 22 "include/linux/module.h" 2


# 1 "./arch/x86/include/asm/module.h" 1



# 1 "include/asm-generic/module.h" 1
# 9 "include/asm-generic/module.h"
struct mod_arch_specific
{
};
# 5 "./arch/x86/include/asm/module.h" 2
# 25 "include/linux/module.h" 2
# 34 "include/linux/module.h"
struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
};

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
} __attribute__ ((__aligned__(sizeof(void *))));

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 159 "include/linux/module.h"
struct exception_table_entry;

const struct exception_table_entry *
search_extable(const struct exception_table_entry *first,
        const struct exception_table_entry *last,
        unsigned long value);
void sort_extable(struct exception_table_entry *start,
    struct exception_table_entry *finish);
void sort_main_extable(void);
void trim_init_extable(struct module *m);
# 272 "include/linux/module.h"
const struct exception_table_entry *search_exception_tables(unsigned long add);

struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct module;

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;


 struct mod_tree_node mtn;

};
# 327 "include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
};
# 342 "include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const unsigned long *crcs;
 unsigned int num_syms;



 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const unsigned long *gpl_crcs;
# 392 "include/linux/module.h"
 bool async_probe_requested;


 const struct kernel_symbol *gpl_future_syms;
 const unsigned long *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned int taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;



 unsigned int num_tracepoints;
 struct tracepoint * const *tracepoints_ptrs;


 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;


 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_enum_map **trace_enums;
 unsigned int num_trace_enums;
# 477 "include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;







} __attribute__((__aligned__((1 << (6)))));




extern struct mutex module_mutex;




static inline __attribute__((no_instrument_function)) int module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((no_instrument_function)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((no_instrument_function)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((no_instrument_function)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);

struct symsearch {
 const struct kernel_symbol *start, *stop;
 const unsigned long *crcs;
 enum {
  NOT_GPL_ONLY,
  GPL_ONLY,
  WILL_BE_GPL_ONLY,
 } licence;
 bool unused;
};






const struct kernel_symbol *find_symbol(const char *name,
     struct module **owner,
     const unsigned long **crc,
     bool gplok,
     bool warn);






bool each_symbol_section(bool (*fn)(const struct symsearch *arr,
        struct module *owner,
        void *data), void *data);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);

extern void __module_put_and_exit(struct module *mod, long code)
 __attribute__((noreturn));



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 613 "include/linux/module.h"
int ref_module(struct module *a, struct module *b);
# 625 "include/linux/module.h"
const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


const struct exception_table_entry *search_module_extables(unsigned long addr);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((no_instrument_function)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((no_instrument_function)) bool is_livepatch_module(struct module *mod)
{
 return false;
}
# 777 "include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 794 "include/linux/module.h"
static inline __attribute__((no_instrument_function)) void set_all_modules_text_rw(void) { }
static inline __attribute__((no_instrument_function)) void set_all_modules_text_ro(void) { }
static inline __attribute__((no_instrument_function)) void module_enable_ro(const struct module *mod) { }
static inline __attribute__((no_instrument_function)) void module_disable_ro(const struct module *mod) { }



void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 821 "include/linux/module.h"
static inline __attribute__((no_instrument_function)) bool module_sig_ok(struct module *module)
{
 return true;
}
# 25 "include/linux/phy.h" 2
# 66 "include/linux/phy.h"
typedef enum {
 PHY_INTERFACE_MODE_NA,
 PHY_INTERFACE_MODE_MII,
 PHY_INTERFACE_MODE_GMII,
 PHY_INTERFACE_MODE_SGMII,
 PHY_INTERFACE_MODE_TBI,
 PHY_INTERFACE_MODE_REVMII,
 PHY_INTERFACE_MODE_RMII,
 PHY_INTERFACE_MODE_RGMII,
 PHY_INTERFACE_MODE_RGMII_ID,
 PHY_INTERFACE_MODE_RGMII_RXID,
 PHY_INTERFACE_MODE_RGMII_TXID,
 PHY_INTERFACE_MODE_RTBI,
 PHY_INTERFACE_MODE_SMII,
 PHY_INTERFACE_MODE_XGMII,
 PHY_INTERFACE_MODE_MOCA,
 PHY_INTERFACE_MODE_QSGMII,
 PHY_INTERFACE_MODE_MAX,
} phy_interface_t;






static inline __attribute__((no_instrument_function)) const char *phy_modes(phy_interface_t interface)
{
 switch (interface) {
 case PHY_INTERFACE_MODE_NA:
  return "";
 case PHY_INTERFACE_MODE_MII:
  return "mii";
 case PHY_INTERFACE_MODE_GMII:
  return "gmii";
 case PHY_INTERFACE_MODE_SGMII:
  return "sgmii";
 case PHY_INTERFACE_MODE_TBI:
  return "tbi";
 case PHY_INTERFACE_MODE_REVMII:
  return "rev-mii";
 case PHY_INTERFACE_MODE_RMII:
  return "rmii";
 case PHY_INTERFACE_MODE_RGMII:
  return "rgmii";
 case PHY_INTERFACE_MODE_RGMII_ID:
  return "rgmii-id";
 case PHY_INTERFACE_MODE_RGMII_RXID:
  return "rgmii-rxid";
 case PHY_INTERFACE_MODE_RGMII_TXID:
  return "rgmii-txid";
 case PHY_INTERFACE_MODE_RTBI:
  return "rtbi";
 case PHY_INTERFACE_MODE_SMII:
  return "smii";
 case PHY_INTERFACE_MODE_XGMII:
  return "xgmii";
 case PHY_INTERFACE_MODE_MOCA:
  return "moca";
 case PHY_INTERFACE_MODE_QSGMII:
  return "qsgmii";
 default:
  return "unknown";
 }
}
# 152 "include/linux/phy.h"
struct device;
struct sk_buff;





struct mii_bus {
 struct module *owner;
 const char *name;
 char id[(20 - 3)];
 void *priv;
 int (*read)(struct mii_bus *bus, int addr, int regnum);
 int (*write)(struct mii_bus *bus, int addr, int regnum, u16 val);
 int (*reset)(struct mii_bus *bus);





 struct mutex mdio_lock;

 struct device *parent;
 enum {
  MDIOBUS_ALLOCATED = 1,
  MDIOBUS_REGISTERED,
  MDIOBUS_UNREGISTERED,
  MDIOBUS_RELEASED,
 } state;
 struct device dev;


 struct mdio_device *mdio_map[32];


 u32 phy_mask;


 u32 phy_ignore_ta_mask;





 int irq[32];
};


struct mii_bus *mdiobus_alloc_size(size_t);
static inline __attribute__((no_instrument_function)) struct mii_bus *mdiobus_alloc(void)
{
 return mdiobus_alloc_size(0);
}

int __mdiobus_register(struct mii_bus *bus, struct module *owner);

void mdiobus_unregister(struct mii_bus *bus);
void mdiobus_free(struct mii_bus *bus);
struct mii_bus *devm_mdiobus_alloc_size(struct device *dev, int sizeof_priv);
static inline __attribute__((no_instrument_function)) struct mii_bus *devm_mdiobus_alloc(struct device *dev)
{
 return devm_mdiobus_alloc_size(dev, 0);
}

void devm_mdiobus_free(struct device *dev, struct mii_bus *bus);
struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr);
# 302 "include/linux/phy.h"
enum phy_state {
 PHY_DOWN = 0,
 PHY_STARTING,
 PHY_READY,
 PHY_PENDING,
 PHY_UP,
 PHY_AN,
 PHY_RUNNING,
 PHY_NOLINK,
 PHY_FORCING,
 PHY_CHANGELINK,
 PHY_HALTED,
 PHY_RESUMING
};






struct phy_c45_device_ids {
 u32 devices_in_package;
 u32 device_ids[8];
};
# 358 "include/linux/phy.h"
struct phy_device {
 struct mdio_device mdio;



 struct phy_driver *drv;

 u32 phy_id;

 struct phy_c45_device_ids c45_ids;
 bool is_c45;
 bool is_internal;
 bool is_pseudo_fixed_link;
 bool has_fixups;
 bool suspended;

 enum phy_state state;

 u32 dev_flags;

 phy_interface_t interface;





 int speed;
 int duplex;
 int pause;
 int asym_pause;


 int link;


 u32 interrupts;



 u32 supported;
 u32 advertising;
 u32 lp_advertising;

 int autoneg;

 int link_timeout;





 int irq;



 void *priv;


 struct work_struct phy_queue;
 struct delayed_work state_queue;
 atomic_t irq_disable;

 struct mutex lock;

 struct net_device *attached_dev;

 u8 mdix;

 void (*adjust_link)(struct net_device *dev);
};
# 452 "include/linux/phy.h"
struct phy_driver {
 struct mdio_driver_common mdiodrv;
 u32 phy_id;
 char *name;
 unsigned int phy_id_mask;
 u32 features;
 u32 flags;
 const void *driver_data;




 int (*soft_reset)(struct phy_device *phydev);





 int (*config_init)(struct phy_device *phydev);





 int (*probe)(struct phy_device *phydev);


 int (*suspend)(struct phy_device *phydev);
 int (*resume)(struct phy_device *phydev);







 int (*config_aneg)(struct phy_device *phydev);


 int (*aneg_done)(struct phy_device *phydev);


 int (*read_status)(struct phy_device *phydev);


 int (*ack_interrupt)(struct phy_device *phydev);


 int (*config_intr)(struct phy_device *phydev);





 int (*did_interrupt)(struct phy_device *phydev);


 void (*remove)(struct phy_device *phydev);





 int (*match_phy_device)(struct phy_device *phydev);


 int (*ts_info)(struct phy_device *phydev, struct ethtool_ts_info *ti);


 int (*hwtstamp)(struct phy_device *phydev, struct ifreq *ifr);
# 530 "include/linux/phy.h"
 bool (*rxtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);







 void (*txtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);




 int (*set_wol)(struct phy_device *dev, struct ethtool_wolinfo *wol);


 void (*get_wol)(struct phy_device *dev, struct ethtool_wolinfo *wol);
# 555 "include/linux/phy.h"
 void (*link_change_notify)(struct phy_device *dev);







 int (*read_mmd_indirect)(struct phy_device *dev, int ptrad,
     int devnum, int regnum);







 void (*write_mmd_indirect)(struct phy_device *dev, int ptrad,
       int devnum, int regnum, u32 val);



 int (*module_info)(struct phy_device *dev,
      struct ethtool_modinfo *modinfo);


 int (*module_eeprom)(struct phy_device *dev,
        struct ethtool_eeprom *ee, u8 *data);


 int (*get_sset_count)(struct phy_device *dev);
 void (*get_strings)(struct phy_device *dev, u8 *data);
 void (*get_stats)(struct phy_device *dev,
     struct ethtool_stats *stats, u64 *data);
};







struct phy_fixup {
 struct list_head list;
 char bus_id[20];
 u32 phy_uid;
 u32 phy_uid_mask;
 int (*run)(struct phy_device *phydev);
};
# 614 "include/linux/phy.h"
static inline __attribute__((no_instrument_function)) int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum)
{
 if (!phydev->is_c45)
  return -95;

 return mdiobus_read(phydev->mdio.bus, phydev->mdio.addr,
       (1<<30) | (devad << 16) | (regnum & 0xffff));
}
# 632 "include/linux/phy.h"
int phy_read_mmd_indirect(struct phy_device *phydev, int prtad, int devad);
# 643 "include/linux/phy.h"
static inline __attribute__((no_instrument_function)) int phy_read(struct phy_device *phydev, u32 regnum)
{
 return mdiobus_read(phydev->mdio.bus, phydev->mdio.addr, regnum);
}
# 658 "include/linux/phy.h"
static inline __attribute__((no_instrument_function)) int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
 return mdiobus_write(phydev->mdio.bus, phydev->mdio.addr, regnum, val);
}
# 670 "include/linux/phy.h"
static inline __attribute__((no_instrument_function)) bool phy_interrupt_is_valid(struct phy_device *phydev)
{
 return phydev->irq != -1 && phydev->irq != -2;
}





static inline __attribute__((no_instrument_function)) bool phy_is_internal(struct phy_device *phydev)
{
 return phydev->is_internal;
}






static inline __attribute__((no_instrument_function)) bool phy_interface_is_rgmii(struct phy_device *phydev)
{
 return phydev->interface >= PHY_INTERFACE_MODE_RGMII &&
  phydev->interface <= PHY_INTERFACE_MODE_RGMII_TXID;
};






static inline __attribute__((no_instrument_function)) bool phy_is_pseudo_fixed_link(struct phy_device *phydev)
{
 return phydev->is_pseudo_fixed_link;
}
# 715 "include/linux/phy.h"
static inline __attribute__((no_instrument_function)) int phy_write_mmd(struct phy_device *phydev, int devad,
    u32 regnum, u16 val)
{
 if (!phydev->is_c45)
  return -95;

 regnum = (1<<30) | ((devad & 0x1f) << 16) | (regnum & 0xffff);

 return mdiobus_write(phydev->mdio.bus, phydev->mdio.addr, regnum, val);
}
# 736 "include/linux/phy.h"
void phy_write_mmd_indirect(struct phy_device *phydev, int prtad,
       int devad, u32 data);

struct phy_device *phy_device_create(struct mii_bus *bus, int addr, int phy_id,
         bool is_c45,
         struct phy_c45_device_ids *c45_ids);
struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45);
int phy_device_register(struct phy_device *phy);
void phy_device_remove(struct phy_device *phydev);
int phy_init_hw(struct phy_device *phydev);
int phy_suspend(struct phy_device *phydev);
int phy_resume(struct phy_device *phydev);
struct phy_device *phy_attach(struct net_device *dev, const char *bus_id,
         phy_interface_t interface);
struct phy_device *phy_find_first(struct mii_bus *bus);
int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
        u32 flags, phy_interface_t interface);
int phy_connect_direct(struct net_device *dev, struct phy_device *phydev,
         void (*handler)(struct net_device *),
         phy_interface_t interface);
struct phy_device *phy_connect(struct net_device *dev, const char *bus_id,
          void (*handler)(struct net_device *),
          phy_interface_t interface);
void phy_disconnect(struct phy_device *phydev);
void phy_detach(struct phy_device *phydev);
void phy_start(struct phy_device *phydev);
void phy_stop(struct phy_device *phydev);
int phy_start_aneg(struct phy_device *phydev);

int phy_stop_interrupts(struct phy_device *phydev);

static inline __attribute__((no_instrument_function)) int phy_read_status(struct phy_device *phydev)
{
 return phydev->drv->read_status(phydev);
}







static inline __attribute__((no_instrument_function)) const char *phydev_name(const struct phy_device *phydev)
{
 return dev_name(&phydev->mdio.dev);
}

void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 __attribute__((format(printf, 2, 3)));
void phy_attached_info(struct phy_device *phydev);
int genphy_config_init(struct phy_device *phydev);
int genphy_setup_forced(struct phy_device *phydev);
int genphy_restart_aneg(struct phy_device *phydev);
int genphy_config_aneg(struct phy_device *phydev);
int genphy_aneg_done(struct phy_device *phydev);
int genphy_update_link(struct phy_device *phydev);
int genphy_read_status(struct phy_device *phydev);
int genphy_suspend(struct phy_device *phydev);
int genphy_resume(struct phy_device *phydev);
int genphy_soft_reset(struct phy_device *phydev);
void phy_driver_unregister(struct phy_driver *drv);
void phy_drivers_unregister(struct phy_driver *drv, int n);
int phy_driver_register(struct phy_driver *new_driver, struct module *owner);
int phy_drivers_register(struct phy_driver *new_driver, int n,
    struct module *owner);
void phy_state_machine(struct work_struct *work);
void phy_change(struct work_struct *work);
void phy_mac_interrupt(struct phy_device *phydev, int new_link);
void phy_start_machine(struct phy_device *phydev);
void phy_stop_machine(struct phy_device *phydev);
int phy_ethtool_sset(struct phy_device *phydev, struct ethtool_cmd *cmd);
int phy_ethtool_gset(struct phy_device *phydev, struct ethtool_cmd *cmd);
int phy_ethtool_ksettings_get(struct phy_device *phydev,
         struct ethtool_link_ksettings *cmd);
int phy_ethtool_ksettings_set(struct phy_device *phydev,
         const struct ethtool_link_ksettings *cmd);
int phy_mii_ioctl(struct phy_device *phydev, struct ifreq *ifr, int cmd);
int phy_start_interrupts(struct phy_device *phydev);
void phy_print_status(struct phy_device *phydev);
void phy_device_free(struct phy_device *phydev);
int phy_set_max_speed(struct phy_device *phydev, u32 max_speed);

int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
         int (*run)(struct phy_device *));
int phy_register_fixup_for_id(const char *bus_id,
         int (*run)(struct phy_device *));
int phy_register_fixup_for_uid(u32 phy_uid, u32 phy_uid_mask,
          int (*run)(struct phy_device *));

int phy_init_eee(struct phy_device *phydev, bool clk_stop_enable);
int phy_get_eee_err(struct phy_device *phydev);
int phy_ethtool_set_eee(struct phy_device *phydev, struct ethtool_eee *data);
int phy_ethtool_get_eee(struct phy_device *phydev, struct ethtool_eee *data);
int phy_ethtool_set_wol(struct phy_device *phydev, struct ethtool_wolinfo *wol);
void phy_ethtool_get_wol(struct phy_device *phydev,
    struct ethtool_wolinfo *wol);
int phy_ethtool_get_link_ksettings(struct net_device *ndev,
       struct ethtool_link_ksettings *cmd);
int phy_ethtool_set_link_ksettings(struct net_device *ndev,
       const struct ethtool_link_ksettings *cmd);

int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) mdio_bus_init(void);
void mdio_bus_exit(void);

extern struct bus_type mdio_bus_type;
# 20 "include/net/dsa.h" 2
# 1 "include/linux/phy_fixed.h" 1



struct fixed_phy_status {
 int link;
 int speed;
 int duplex;
 int pause;
 int asym_pause;
};

struct device_node;
# 30 "include/linux/phy_fixed.h"
static inline __attribute__((no_instrument_function)) int fixed_phy_add(unsigned int irq, int phy_id,
    struct fixed_phy_status *status,
    int link_gpio)
{
 return -19;
}
static inline __attribute__((no_instrument_function)) struct phy_device *fixed_phy_register(unsigned int irq,
      struct fixed_phy_status *status,
      int gpio_link,
      struct device_node *np)
{
 return ERR_PTR(-19);
}
static inline __attribute__((no_instrument_function)) void fixed_phy_unregister(struct phy_device *phydev)
{
}
static inline __attribute__((no_instrument_function)) int fixed_phy_set_link_update(struct phy_device *phydev,
   int (*link_update)(struct net_device *,
        struct fixed_phy_status *))
{
 return -19;
}
static inline __attribute__((no_instrument_function)) int fixed_phy_update_state(struct phy_device *phydev,
      const struct fixed_phy_status *status,
      const struct fixed_phy_status *changed)
{
 return -19;
}
# 21 "include/net/dsa.h" 2


enum dsa_tag_protocol {
 DSA_TAG_PROTO_NONE = 0,
 DSA_TAG_PROTO_DSA,
 DSA_TAG_PROTO_TRAILER,
 DSA_TAG_PROTO_EDSA,
 DSA_TAG_PROTO_BRCM,
};




struct dsa_chip_data {



 struct device *host_dev;
 int sw_addr;


 int eeprom_len;





 struct device_node *of_node;
# 57 "include/net/dsa.h"
 char *port_names[12];
 struct device_node *port_dn[12];







 s8 *rtable;
};

struct dsa_platform_data {




 struct device *netdev;
 struct net_device *of_netdev;





 int nr_chips;
 struct dsa_chip_data *chip;
};

struct packet_type;

struct dsa_switch_tree {




 struct dsa_platform_data *pd;





 struct net_device *master_netdev;
 int (*rcv)(struct sk_buff *skb,
           struct net_device *dev,
           struct packet_type *pt,
           struct net_device *orig_dev);
 enum dsa_tag_protocol tag_protocol;




 struct ethtool_ops master_ethtool_ops;




 s8 cpu_switch;
 s8 cpu_port;




 struct dsa_switch *ds[4];
};

struct dsa_switch {
 struct device *dev;




 struct dsa_switch_tree *dst;
 int index;





 void *priv;




 struct dsa_chip_data *cd;




 struct dsa_switch_driver *drv;
# 158 "include/net/dsa.h"
 u32 dsa_port_mask;
 u32 enabled_port_mask;
 u32 phys_mii_mask;
 struct mii_bus *slave_mii_bus;
 struct net_device *ports[12];
};

static inline __attribute__((no_instrument_function)) bool dsa_is_cpu_port(struct dsa_switch *ds, int p)
{
 return !!(ds->index == ds->dst->cpu_switch && p == ds->dst->cpu_port);
}

static inline __attribute__((no_instrument_function)) bool dsa_is_dsa_port(struct dsa_switch *ds, int p)
{
 return !!((ds->dsa_port_mask) & (1 << p));
}

static inline __attribute__((no_instrument_function)) bool dsa_is_port_initialized(struct dsa_switch *ds, int p)
{
 return ds->enabled_port_mask & (1 << p) && ds->ports[p];
}

static inline __attribute__((no_instrument_function)) u8 dsa_upstream_port(struct dsa_switch *ds)
{
 struct dsa_switch_tree *dst = ds->dst;







 if (dst->cpu_switch == ds->index)
  return dst->cpu_port;
 else
  return ds->cd->rtable[dst->cpu_switch];
}

struct switchdev_trans;
struct switchdev_obj;
struct switchdev_obj_port_fdb;
struct switchdev_obj_port_vlan;

struct dsa_switch_driver {
 struct list_head list;

 enum dsa_tag_protocol tag_protocol;




 const char *(*probe)(struct device *dsa_dev,
      struct device *host_dev, int sw_addr,
      void **priv);
 int (*setup)(struct dsa_switch *ds);
 int (*set_addr)(struct dsa_switch *ds, u8 *addr);
 u32 (*get_phy_flags)(struct dsa_switch *ds, int port);




 int (*phy_read)(struct dsa_switch *ds, int port, int regnum);
 int (*phy_write)(struct dsa_switch *ds, int port,
        int regnum, u16 val);




 void (*adjust_link)(struct dsa_switch *ds, int port,
    struct phy_device *phydev);
 void (*fixed_link_update)(struct dsa_switch *ds, int port,
    struct fixed_phy_status *st);




 void (*get_strings)(struct dsa_switch *ds, int port, uint8_t *data);
 void (*get_ethtool_stats)(struct dsa_switch *ds,
         int port, uint64_t *data);
 int (*get_sset_count)(struct dsa_switch *ds);




 void (*get_wol)(struct dsa_switch *ds, int port,
      struct ethtool_wolinfo *w);
 int (*set_wol)(struct dsa_switch *ds, int port,
      struct ethtool_wolinfo *w);




 int (*suspend)(struct dsa_switch *ds);
 int (*resume)(struct dsa_switch *ds);




 int (*port_enable)(struct dsa_switch *ds, int port,
          struct phy_device *phy);
 void (*port_disable)(struct dsa_switch *ds, int port,
    struct phy_device *phy);




 int (*set_eee)(struct dsa_switch *ds, int port,
      struct phy_device *phydev,
      struct ethtool_eee *e);
 int (*get_eee)(struct dsa_switch *ds, int port,
      struct ethtool_eee *e);
# 279 "include/net/dsa.h"
 int (*get_eeprom_len)(struct dsa_switch *ds);
 int (*get_eeprom)(struct dsa_switch *ds,
         struct ethtool_eeprom *eeprom, u8 *data);
 int (*set_eeprom)(struct dsa_switch *ds,
         struct ethtool_eeprom *eeprom, u8 *data);




 int (*get_regs_len)(struct dsa_switch *ds, int port);
 void (*get_regs)(struct dsa_switch *ds, int port,
       struct ethtool_regs *regs, void *p);




 int (*port_bridge_join)(struct dsa_switch *ds, int port,
        struct net_device *bridge);
 void (*port_bridge_leave)(struct dsa_switch *ds, int port);
 void (*port_stp_state_set)(struct dsa_switch *ds, int port,
          u8 state);




 int (*port_vlan_filtering)(struct dsa_switch *ds, int port,
           bool vlan_filtering);
 int (*port_vlan_prepare)(struct dsa_switch *ds, int port,
         const struct switchdev_obj_port_vlan *vlan,
         struct switchdev_trans *trans);
 void (*port_vlan_add)(struct dsa_switch *ds, int port,
     const struct switchdev_obj_port_vlan *vlan,
     struct switchdev_trans *trans);
 int (*port_vlan_del)(struct dsa_switch *ds, int port,
     const struct switchdev_obj_port_vlan *vlan);
 int (*port_vlan_dump)(struct dsa_switch *ds, int port,
      struct switchdev_obj_port_vlan *vlan,
      int (*cb)(struct switchdev_obj *obj));




 int (*port_fdb_prepare)(struct dsa_switch *ds, int port,
        const struct switchdev_obj_port_fdb *fdb,
        struct switchdev_trans *trans);
 void (*port_fdb_add)(struct dsa_switch *ds, int port,
    const struct switchdev_obj_port_fdb *fdb,
    struct switchdev_trans *trans);
 int (*port_fdb_del)(struct dsa_switch *ds, int port,
    const struct switchdev_obj_port_fdb *fdb);
 int (*port_fdb_dump)(struct dsa_switch *ds, int port,
     struct switchdev_obj_port_fdb *fdb,
     int (*cb)(struct switchdev_obj *obj));
};

void register_switch_driver(struct dsa_switch_driver *type);
void unregister_switch_driver(struct dsa_switch_driver *type);
struct mii_bus *dsa_host_dev_to_mii_bus(struct device *dev);

static inline __attribute__((no_instrument_function)) void *ds_to_priv(struct dsa_switch *ds)
{
 return ds->priv;
}

static inline __attribute__((no_instrument_function)) bool dsa_uses_tagged_protocol(struct dsa_switch_tree *dst)
{
 return dst->rcv != ((void *)0);
}
# 45 "include/linux/netdevice.h" 2



# 1 "include/net/netprio_cgroup.h" 1
# 17 "include/net/netprio_cgroup.h"
# 1 "include/linux/cgroup.h" 1
# 15 "include/linux/cgroup.h"
# 1 "./include/uapi/linux/cgroupstats.h" 1
# 19 "./include/uapi/linux/cgroupstats.h"
# 1 "./include/uapi/linux/taskstats.h" 1
# 40 "./include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 71 "./include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;
 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 130 "./include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;
};
# 175 "./include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 20 "./include/uapi/linux/cgroupstats.h" 2
# 31 "./include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 16 "include/linux/cgroup.h" 2




# 1 "include/linux/nsproxy.h" 1






struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 30 "include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 67 "include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) nsproxy_cache_init(void);

static inline __attribute__((no_instrument_function)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((no_instrument_function)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 21 "include/linux/cgroup.h" 2



# 1 "include/linux/user_namespace.h" 1
# 12 "include/linux/user_namespace.h"
struct uid_gid_map {
 u32 nr_extents;
 struct uid_gid_extent {
  u32 first;
  u32 lower_first;
  u32 count;
 } extent[5];
};





struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 atomic_t count;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;






};

extern struct user_namespace init_user_ns;
# 77 "include/linux/user_namespace.h"
static inline __attribute__((no_instrument_function)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 return &init_user_ns;
}

static inline __attribute__((no_instrument_function)) int create_user_ns(struct cred *new)
{
 return -22;
}

static inline __attribute__((no_instrument_function)) int unshare_userns(unsigned long unshare_flags,
     struct cred **new_cred)
{
 if (unshare_flags & 0x10000000)
  return -22;
 return 0;
}

static inline __attribute__((no_instrument_function)) void put_user_ns(struct user_namespace *ns)
{
}

static inline __attribute__((no_instrument_function)) bool userns_may_setgroups(const struct user_namespace *ns)
{
 return true;
}
# 25 "include/linux/cgroup.h" 2
# 40 "include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *task_pos;
 struct list_head *tasks_head;
 struct list_head *mg_tasks_head;

 struct css_set *cur_cset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "include/linux/cgroup_subsys.h" 1
# 12 "include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuset_cgrp_subsys;



extern struct cgroup_subsys cpu_cgrp_subsys;



extern struct cgroup_subsys cpuacct_cgrp_subsys;
# 36 "include/linux/cgroup_subsys.h"
extern struct cgroup_subsys freezer_cgrp_subsys;
# 60 "include/linux/cgroup.h" 2





# 1 "include/linux/cgroup_subsys.h" 1
# 12 "include/linux/cgroup_subsys.h"
extern struct static_key_true cpuset_cgrp_subsys_enabled_key; extern struct static_key_true cpuset_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;
# 36 "include/linux/cgroup_subsys.h"
extern struct static_key_true freezer_cgrp_subsys_enabled_key; extern struct static_key_true freezer_cgrp_subsys_on_dfl_key;
# 66 "include/linux/cgroup.h" 2
# 82 "include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

char *task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p);
extern void cgroup_cancel_fork(struct task_struct *p);
extern void cgroup_post_fork(struct task_struct *p);
void cgroup_exit(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 291 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 304 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 321 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 338 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}







static inline __attribute__((no_instrument_function)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 364 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((no_instrument_function)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 419 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ typeof(((task)->cgroups)) _________p1 = ({ union { typeof(((task)->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); else __read_once_size_nocheck(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 431 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ typeof((((task))->cgroups)) _________p1 = ({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 446 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);
  if (__builtin_expect(!!(css_tryget_online(css)), 1))
   break;
  cpu_relax();
 }
 rcu_read_unlock();
 return css;
}
# 470 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ typeof((((task))->cgroups)) _________p1 = ({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((no_instrument_function)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}
# 491 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == ancestor->id;
}


static inline __attribute__((no_instrument_function)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->populated_cnt;
}


static inline __attribute__((no_instrument_function)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return cgrp->kn->ino;
}


static inline __attribute__((no_instrument_function)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((no_instrument_function)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((no_instrument_function)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((no_instrument_function)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((no_instrument_function)) char * __attribute__((warn_unused_result)) cgroup_path(struct cgroup *cgrp, char *buf,
           size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((no_instrument_function)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((no_instrument_function)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}
# 614 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) void cgroup_sk_alloc(struct sock_cgroup_data *skcd) {}
static inline __attribute__((no_instrument_function)) void cgroup_sk_free(struct sock_cgroup_data *skcd) {}



struct cgroup_namespace {
 atomic_t count;
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

char *cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
       struct cgroup_namespace *ns);
# 651 "include/linux/cgroup.h"
static inline __attribute__((no_instrument_function)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  atomic_inc(&ns->count);
}

static inline __attribute__((no_instrument_function)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && atomic_dec_and_test(&ns->count))
  free_cgroup_ns(ns);
}
# 18 "include/net/netprio_cgroup.h" 2
# 50 "include/net/netprio_cgroup.h"
static inline __attribute__((no_instrument_function)) u32 task_netprioidx(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void sock_update_netprioidx(struct sock_cgroup_data *skcd)
{
}
# 49 "include/linux/netdevice.h" 2


# 1 "./include/uapi/linux/neighbour.h" 1




# 1 "include/linux/netlink.h" 1







# 1 "include/net/scm.h" 1





# 1 "include/linux/security.h" 1
# 34 "include/linux/security.h"
struct linux_binprm;
struct cred;
struct rlimit;
struct siginfo;
struct sem_array;
struct sembuf;
struct kern_ipc_perm;
struct audit_context;
struct super_block;
struct inode;
struct dentry;
struct file;
struct vfsmount;
struct path;
struct qstr;
struct iattr;
struct fown_struct;
struct file_operations;
struct shmid_kernel;
struct msg_msg;
struct msg_queue;
struct xattr;
struct xfrm_sec_ctx;
struct mm_struct;
# 66 "include/linux/security.h"
struct ctl_table;
struct audit_krule;
struct user_namespace;
struct timezone;


extern int cap_capable(const struct cred *cred, struct user_namespace *ns,
         int cap, int audit);
extern int cap_settime(const struct timespec *ts, const struct timezone *tz);
extern int cap_ptrace_access_check(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset(struct cred *new, const struct cred *old,
        const kernel_cap_t *effective,
        const kernel_cap_t *inheritable,
        const kernel_cap_t *permitted);
extern int cap_bprm_set_creds(struct linux_binprm *bprm);
extern int cap_bprm_secureexec(struct linux_binprm *bprm);
extern int cap_inode_setxattr(struct dentry *dentry, const char *name,
         const void *value, size_t size, int flags);
extern int cap_inode_removexattr(struct dentry *dentry, const char *name);
extern int cap_inode_need_killpriv(struct dentry *dentry);
extern int cap_inode_killpriv(struct dentry *dentry);
extern int cap_mmap_addr(unsigned long addr);
extern int cap_mmap_file(struct file *file, unsigned long reqprot,
    unsigned long prot, unsigned long flags);
extern int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5);
extern int cap_task_setscheduler(struct task_struct *p);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;


extern unsigned long mmap_min_addr;
extern unsigned long dac_mmap_min_addr;
# 137 "include/linux/security.h"
struct sched_param;
struct request_sock;
# 147 "include/linux/security.h"
extern int mmap_min_addr_handler(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);



typedef int (*initxattrs) (struct inode *inode,
      const struct xattr *xattr_array, void *fs_data);



struct security_mnt_opts {
 char **mnt_opts;
 int *mnt_opts_flags;
 int num_mnt_opts;
};

static inline __attribute__((no_instrument_function)) void security_init_mnt_opts(struct security_mnt_opts *opts)
{
 opts->mnt_opts = ((void *)0);
 opts->mnt_opts_flags = ((void *)0);
 opts->num_mnt_opts = 0;
}

static inline __attribute__((no_instrument_function)) void security_free_mnt_opts(struct security_mnt_opts *opts)
{
 int i;
 if (opts->mnt_opts)
  for (i = 0; i < opts->num_mnt_opts; i++)
   kfree(opts->mnt_opts[i]);
 kfree(opts->mnt_opts);
 opts->mnt_opts = ((void *)0);
 kfree(opts->mnt_opts_flags);
 opts->mnt_opts_flags = ((void *)0);
 opts->num_mnt_opts = 0;
}


extern int security_init(void);


int security_binder_set_context_mgr(struct task_struct *mgr);
int security_binder_transaction(struct task_struct *from,
    struct task_struct *to);
int security_binder_transfer_binder(struct task_struct *from,
        struct task_struct *to);
int security_binder_transfer_file(struct task_struct *from,
      struct task_struct *to, struct file *file);
int security_ptrace_access_check(struct task_struct *child, unsigned int mode);
int security_ptrace_traceme(struct task_struct *parent);
int security_capget(struct task_struct *target,
      kernel_cap_t *effective,
      kernel_cap_t *inheritable,
      kernel_cap_t *permitted);
int security_capset(struct cred *new, const struct cred *old,
      const kernel_cap_t *effective,
      const kernel_cap_t *inheritable,
      const kernel_cap_t *permitted);
int security_capable(const struct cred *cred, struct user_namespace *ns,
   int cap);
int security_capable_noaudit(const struct cred *cred, struct user_namespace *ns,
        int cap);
int security_quotactl(int cmds, int type, int id, struct super_block *sb);
int security_quota_on(struct dentry *dentry);
int security_syslog(int type);
int security_settime64(const struct timespec *ts, const struct timezone *tz);
static inline __attribute__((no_instrument_function)) int security_settime(const struct timespec *ts, const struct timezone *tz)
{
 struct timespec ts64 = timespec_to_timespec64(*ts);

 return security_settime64(&ts64, tz);
}
int security_vm_enough_memory_mm(struct mm_struct *mm, long pages);
int security_bprm_set_creds(struct linux_binprm *bprm);
int security_bprm_check(struct linux_binprm *bprm);
void security_bprm_committing_creds(struct linux_binprm *bprm);
void security_bprm_committed_creds(struct linux_binprm *bprm);
int security_bprm_secureexec(struct linux_binprm *bprm);
int security_sb_alloc(struct super_block *sb);
void security_sb_free(struct super_block *sb);
int security_sb_copy_data(char *orig, char *copy);
int security_sb_remount(struct super_block *sb, void *data);
int security_sb_kern_mount(struct super_block *sb, int flags, void *data);
int security_sb_show_options(struct seq_file *m, struct super_block *sb);
int security_sb_statfs(struct dentry *dentry);
int security_sb_mount(const char *dev_name, const struct path *path,
        const char *type, unsigned long flags, void *data);
int security_sb_umount(struct vfsmount *mnt, int flags);
int security_sb_pivotroot(const struct path *old_path, const struct path *new_path);
int security_sb_set_mnt_opts(struct super_block *sb,
    struct security_mnt_opts *opts,
    unsigned long kern_flags,
    unsigned long *set_kern_flags);
int security_sb_clone_mnt_opts(const struct super_block *oldsb,
    struct super_block *newsb);
int security_sb_parse_opts_str(char *options, struct security_mnt_opts *opts);
int security_dentry_init_security(struct dentry *dentry, int mode,
     struct qstr *name, void **ctx,
     u32 *ctxlen);

int security_inode_alloc(struct inode *inode);
void security_inode_free(struct inode *inode);
int security_inode_init_security(struct inode *inode, struct inode *dir,
     const struct qstr *qstr,
     initxattrs initxattrs, void *fs_data);
int security_old_inode_init_security(struct inode *inode, struct inode *dir,
         const struct qstr *qstr, const char **name,
         void **value, size_t *len);
int security_inode_create(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_link(struct dentry *old_dentry, struct inode *dir,
    struct dentry *new_dentry);
int security_inode_unlink(struct inode *dir, struct dentry *dentry);
int security_inode_symlink(struct inode *dir, struct dentry *dentry,
      const char *old_name);
int security_inode_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_rmdir(struct inode *dir, struct dentry *dentry);
int security_inode_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev);
int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
     struct inode *new_dir, struct dentry *new_dentry,
     unsigned int flags);
int security_inode_readlink(struct dentry *dentry);
int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
          bool rcu);
int security_inode_permission(struct inode *inode, int mask);
int security_inode_setattr(struct dentry *dentry, struct iattr *attr);
int security_inode_getattr(const struct path *path);
int security_inode_setxattr(struct dentry *dentry, const char *name,
       const void *value, size_t size, int flags);
void security_inode_post_setxattr(struct dentry *dentry, const char *name,
      const void *value, size_t size, int flags);
int security_inode_getxattr(struct dentry *dentry, const char *name);
int security_inode_listxattr(struct dentry *dentry);
int security_inode_removexattr(struct dentry *dentry, const char *name);
int security_inode_need_killpriv(struct dentry *dentry);
int security_inode_killpriv(struct dentry *dentry);
int security_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc);
int security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags);
int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size);
void security_inode_getsecid(struct inode *inode, u32 *secid);
int security_file_permission(struct file *file, int mask);
int security_file_alloc(struct file *file);
void security_file_free(struct file *file);
int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
int security_mmap_file(struct file *file, unsigned long prot,
   unsigned long flags);
int security_mmap_addr(unsigned long addr);
int security_file_mprotect(struct vm_area_struct *vma, unsigned long reqprot,
      unsigned long prot);
int security_file_lock(struct file *file, unsigned int cmd);
int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg);
void security_file_set_fowner(struct file *file);
int security_file_send_sigiotask(struct task_struct *tsk,
     struct fown_struct *fown, int sig);
int security_file_receive(struct file *file);
int security_file_open(struct file *file, const struct cred *cred);
int security_task_create(unsigned long clone_flags);
void security_task_free(struct task_struct *task);
int security_cred_alloc_blank(struct cred *cred, gfp_t gfp);
void security_cred_free(struct cred *cred);
int security_prepare_creds(struct cred *new, const struct cred *old, gfp_t gfp);
void security_transfer_creds(struct cred *new, const struct cred *old);
int security_kernel_act_as(struct cred *new, u32 secid);
int security_kernel_create_files_as(struct cred *new, struct inode *inode);
int security_kernel_module_request(char *kmod_name);
int security_kernel_module_from_file(struct file *file);
int security_kernel_read_file(struct file *file, enum kernel_read_file_id id);
int security_kernel_post_read_file(struct file *file, char *buf, loff_t size,
       enum kernel_read_file_id id);
int security_task_fix_setuid(struct cred *new, const struct cred *old,
        int flags);
int security_task_setpgid(struct task_struct *p, pid_t pgid);
int security_task_getpgid(struct task_struct *p);
int security_task_getsid(struct task_struct *p);
void security_task_getsecid(struct task_struct *p, u32 *secid);
int security_task_setnice(struct task_struct *p, int nice);
int security_task_setioprio(struct task_struct *p, int ioprio);
int security_task_getioprio(struct task_struct *p);
int security_task_setrlimit(struct task_struct *p, unsigned int resource,
  struct rlimit *new_rlim);
int security_task_setscheduler(struct task_struct *p);
int security_task_getscheduler(struct task_struct *p);
int security_task_movememory(struct task_struct *p);
int security_task_kill(struct task_struct *p, struct siginfo *info,
   int sig, u32 secid);
int security_task_wait(struct task_struct *p);
int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
   unsigned long arg4, unsigned long arg5);
void security_task_to_inode(struct task_struct *p, struct inode *inode);
int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag);
void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid);
int security_msg_msg_alloc(struct msg_msg *msg);
void security_msg_msg_free(struct msg_msg *msg);
int security_msg_queue_alloc(struct msg_queue *msq);
void security_msg_queue_free(struct msg_queue *msq);
int security_msg_queue_associate(struct msg_queue *msq, int msqflg);
int security_msg_queue_msgctl(struct msg_queue *msq, int cmd);
int security_msg_queue_msgsnd(struct msg_queue *msq,
         struct msg_msg *msg, int msqflg);
int security_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
         struct task_struct *target, long type, int mode);
int security_shm_alloc(struct shmid_kernel *shp);
void security_shm_free(struct shmid_kernel *shp);
int security_shm_associate(struct shmid_kernel *shp, int shmflg);
int security_shm_shmctl(struct shmid_kernel *shp, int cmd);
int security_shm_shmat(struct shmid_kernel *shp, char *shmaddr, int shmflg);
int security_sem_alloc(struct sem_array *sma);
void security_sem_free(struct sem_array *sma);
int security_sem_associate(struct sem_array *sma, int semflg);
int security_sem_semctl(struct sem_array *sma, int cmd);
int security_sem_semop(struct sem_array *sma, struct sembuf *sops,
   unsigned nsops, int alter);
void security_d_instantiate(struct dentry *dentry, struct inode *inode);
int security_getprocattr(struct task_struct *p, char *name, char **value);
int security_setprocattr(struct task_struct *p, char *name, void *value, size_t size);
int security_netlink_send(struct sock *sk, struct sk_buff *skb);
int security_ismaclabel(const char *name);
int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen);
int security_secctx_to_secid(const char *secdata, u32 seclen, u32 *secid);
void security_release_secctx(char *secdata, u32 seclen);

void security_inode_invalidate_secctx(struct inode *inode);
int security_inode_notifysecctx(struct inode *inode, void *ctx, u32 ctxlen);
int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen);
int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen);
# 1137 "include/linux/security.h"
int security_unix_stream_connect(struct sock *sock, struct sock *other, struct sock *newsk);
int security_unix_may_send(struct socket *sock, struct socket *other);
int security_socket_create(int family, int type, int protocol, int kern);
int security_socket_post_create(struct socket *sock, int family,
    int type, int protocol, int kern);
int security_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_listen(struct socket *sock, int backlog);
int security_socket_accept(struct socket *sock, struct socket *newsock);
int security_socket_sendmsg(struct socket *sock, struct msghdr *msg, int size);
int security_socket_recvmsg(struct socket *sock, struct msghdr *msg,
       int size, int flags);
int security_socket_getsockname(struct socket *sock);
int security_socket_getpeername(struct socket *sock);
int security_socket_getsockopt(struct socket *sock, int level, int optname);
int security_socket_setsockopt(struct socket *sock, int level, int optname);
int security_socket_shutdown(struct socket *sock, int how);
int security_sock_rcv_skb(struct sock *sk, struct sk_buff *skb);
int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len);
int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid);
int security_sk_alloc(struct sock *sk, int family, gfp_t priority);
void security_sk_free(struct sock *sk);
void security_sk_clone(const struct sock *sk, struct sock *newsk);
void security_sk_classify_flow(struct sock *sk, struct flowi *fl);
void security_req_classify_flow(const struct request_sock *req, struct flowi *fl);
void security_sock_graft(struct sock*sk, struct socket *parent);
int security_inet_conn_request(struct sock *sk,
   struct sk_buff *skb, struct request_sock *req);
void security_inet_csk_clone(struct sock *newsk,
   const struct request_sock *req);
void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb);
int security_secmark_relabel_packet(u32 secid);
void security_secmark_refcount_inc(void);
void security_secmark_refcount_dec(void);
int security_tun_dev_alloc_security(void **security);
void security_tun_dev_free_security(void *security);
int security_tun_dev_create(void);
int security_tun_dev_attach_queue(void *security);
int security_tun_dev_attach(struct sock *sk, void *security);
int security_tun_dev_open(void *security);
# 1394 "include/linux/security.h"
static inline __attribute__((no_instrument_function)) int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp,
          struct xfrm_user_sec_ctx *sec_ctx,
          gfp_t gfp)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_policy_clone(struct xfrm_sec_ctx *old, struct xfrm_sec_ctx **new_ctxp)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx)
{
}

static inline __attribute__((no_instrument_function)) int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_state_alloc(struct xfrm_state *x,
     struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
     struct xfrm_sec_ctx *polsec, u32 secid)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void security_xfrm_state_free(struct xfrm_state *x)
{
}

static inline __attribute__((no_instrument_function)) int security_xfrm_state_delete(struct xfrm_state *x)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid, u8 dir)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
   struct xfrm_policy *xp, const struct flowi *fl)
{
 return 1;
}

static inline __attribute__((no_instrument_function)) int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void security_skb_classify_flow(struct sk_buff *skb, struct flowi *fl)
{
}
# 1476 "include/linux/security.h"
static inline __attribute__((no_instrument_function)) int security_path_unlink(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_mkdir(const struct path *dir, struct dentry *dentry,
          umode_t mode)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_rmdir(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_mknod(const struct path *dir, struct dentry *dentry,
          umode_t mode, unsigned int dev)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_truncate(const struct path *path)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_symlink(const struct path *dir, struct dentry *dentry,
     const char *old_name)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_link(struct dentry *old_dentry,
         const struct path *new_dir,
         struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_rename(const struct path *old_dir,
           struct dentry *old_dentry,
           const struct path *new_dir,
           struct dentry *new_dentry,
           unsigned int flags)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_chmod(const struct path *path, umode_t mode)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int security_path_chroot(const struct path *path)
{
 return 0;
}





int security_key_alloc(struct key *key, const struct cred *cred, unsigned long flags);
void security_key_free(struct key *key);
int security_key_permission(key_ref_t key_ref,
       const struct cred *cred, unsigned perm);
int security_key_getsecurity(struct key *key, char **_buffer);
# 1581 "include/linux/security.h"
int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule);
int security_audit_rule_known(struct audit_krule *krule);
int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule,
         struct audit_context *actx);
void security_audit_rule_free(void *lsmrule);
# 1622 "include/linux/security.h"
static inline __attribute__((no_instrument_function)) struct dentry *securityfs_create_dir(const char *name,
         struct dentry *parent)
{
 return ERR_PTR(-19);
}

static inline __attribute__((no_instrument_function)) struct dentry *securityfs_create_file(const char *name,
          umode_t mode,
          struct dentry *parent,
          void *data,
          const struct file_operations *fops)
{
 return ERR_PTR(-19);
}

static inline __attribute__((no_instrument_function)) void securityfs_remove(struct dentry *dentry)
{}





static inline __attribute__((no_instrument_function)) char *alloc_secdata(void)
{
 return (char *)get_zeroed_page(((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((no_instrument_function)) void free_secdata(void *secdata)
{
 free_pages(((unsigned long)secdata), 0);
}
# 7 "include/net/scm.h" 2
# 15 "include/net/scm.h"
struct scm_creds {
 u32 pid;
 kuid_t uid;
 kgid_t gid;
};

struct scm_fp_list {
 short count;
 short max;
 struct user_struct *user;
 struct file *fp[253];
};

struct scm_cookie {
 struct pid *pid;
 struct scm_fp_list *fp;
 struct scm_creds creds;

 u32 secid;

};

void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm);
void scm_detach_fds_compat(struct msghdr *msg, struct scm_cookie *scm);
int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm);
void __scm_destroy(struct scm_cookie *scm);
struct scm_fp_list *scm_fp_dup(struct scm_fp_list *fpl);


static __inline__ __attribute__((no_instrument_function)) void unix_get_peersec_dgram(struct socket *sock, struct scm_cookie *scm)
{
 security_socket_getpeersec_dgram(sock, ((void *)0), &scm->secid);
}





static __inline__ __attribute__((no_instrument_function)) void scm_set_cred(struct scm_cookie *scm,
        struct pid *pid, kuid_t uid, kgid_t gid)
{
 scm->pid = get_pid(pid);
 scm->creds.pid = pid_vnr(pid);
 scm->creds.uid = uid;
 scm->creds.gid = gid;
}

static __inline__ __attribute__((no_instrument_function)) void scm_destroy_cred(struct scm_cookie *scm)
{
 put_pid(scm->pid);
 scm->pid = ((void *)0);
}

static __inline__ __attribute__((no_instrument_function)) void scm_destroy(struct scm_cookie *scm)
{
 scm_destroy_cred(scm);
 if (scm->fp)
  __scm_destroy(scm);
}

static __inline__ __attribute__((no_instrument_function)) int scm_send(struct socket *sock, struct msghdr *msg,
          struct scm_cookie *scm, bool forcecreds)
{
 memset(scm, 0, sizeof(*scm));
 scm->creds.uid = (kuid_t){ -1 };
 scm->creds.gid = (kgid_t){ -1 };
 if (forcecreds)
  scm_set_cred(scm, task_tgid(get_current()), (({ ({ do { } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->uid; })), (({ ({ do { } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->gid; })));
 unix_get_peersec_dgram(sock, scm);
 if (msg->msg_controllen <= 0)
  return 0;
 return __scm_send(sock, msg, scm);
}


static inline __attribute__((no_instrument_function)) void scm_passec(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm)
{
 char *secdata;
 u32 seclen;
 int err;

 if ((__builtin_constant_p((4)) ? constant_test_bit((4), (&sock->flags)) : variable_test_bit((4), (&sock->flags)))) {
  err = security_secid_to_secctx(scm->secid, &secdata, &seclen);

  if (!err) {
   put_cmsg(msg, 1, 0x03, seclen, secdata);
   security_release_secctx(secdata, seclen);
  }
 }
}





static __inline__ __attribute__((no_instrument_function)) void scm_recv(struct socket *sock, struct msghdr *msg,
    struct scm_cookie *scm, int flags)
{
 if (!msg->msg_control) {
  if ((__builtin_constant_p((3)) ? constant_test_bit((3), (&sock->flags)) : variable_test_bit((3), (&sock->flags))) || scm->fp)
   msg->msg_flags |= 8;
  scm_destroy(scm);
  return;
 }

 if ((__builtin_constant_p((3)) ? constant_test_bit((3), (&sock->flags)) : variable_test_bit((3), (&sock->flags)))) {
  struct user_namespace *current_ns = current_user_ns();
  struct ucred ucreds = {
   .pid = scm->creds.pid,
   .uid = from_kuid_munged(current_ns, scm->creds.uid),
   .gid = from_kgid_munged(current_ns, scm->creds.gid),
  };
  put_cmsg(msg, 1, 0x02, sizeof(ucreds), &ucreds);
 }

 scm_destroy_cred(scm);

 scm_passec(sock, msg, scm);

 if (!scm->fp)
  return;

 scm_detach_fds(msg, scm);
}
# 9 "include/linux/netlink.h" 2
# 1 "include/uapi/linux/netlink.h" 1
# 35 "include/uapi/linux/netlink.h"
struct sockaddr_nl {
 __kernel_sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;
};

struct nlmsghdr {
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;
};
# 100 "include/uapi/linux/netlink.h"
struct nlmsgerr {
 int error;
 struct nlmsghdr msg;
};
# 118 "include/uapi/linux/netlink.h"
struct nl_pktinfo {
 __u32 group;
};

struct nl_mmap_req {
 unsigned int nm_block_size;
 unsigned int nm_block_nr;
 unsigned int nm_frame_size;
 unsigned int nm_frame_nr;
};

struct nl_mmap_hdr {
 unsigned int nm_status;
 unsigned int nm_len;
 __u32 nm_group;

 __u32 nm_pid;
 __u32 nm_uid;
 __u32 nm_gid;
};
# 155 "include/uapi/linux/netlink.h"
enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
# 169 "include/uapi/linux/netlink.h"
struct nlattr {
 __u16 nla_len;
 __u16 nla_type;
};
# 10 "include/linux/netlink.h" 2

struct net;

static inline __attribute__((no_instrument_function)) struct nlmsghdr *nlmsg_hdr(const struct sk_buff *skb)
{
 return (struct nlmsghdr *)skb->data;
}

enum netlink_skb_flags {
 NETLINK_SKB_MMAPED = 0x1,
 NETLINK_SKB_TX = 0x2,
 NETLINK_SKB_DELIVERED = 0x4,
 NETLINK_SKB_DST = 0x8,
};

struct netlink_skb_parms {
 struct scm_creds creds;
 __u32 portid;
 __u32 dst_group;
 __u32 flags;
 struct sock *sk;
 bool nsid_is_set;
 int nsid;
};





extern void netlink_table_grab(void);
extern void netlink_table_ungrab(void);





struct netlink_kernel_cfg {
 unsigned int groups;
 unsigned int flags;
 void (*input)(struct sk_buff *skb);
 struct mutex *cb_mutex;
 int (*bind)(struct net *net, int group);
 void (*unbind)(struct net *net, int group);
 bool (*compare)(struct net *net, struct sock *sk);
};

extern struct sock *__netlink_kernel_create(struct net *net, int unit,
         struct module *module,
         struct netlink_kernel_cfg *cfg);
static inline __attribute__((no_instrument_function)) struct sock *
netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg)
{
 return __netlink_kernel_create(net, unit, ((struct module *)0), cfg);
}

extern void netlink_kernel_release(struct sock *sk);
extern int __netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern int netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern void __netlink_clear_multicast_users(struct sock *sk, unsigned int group);
extern void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err);
extern int netlink_has_listeners(struct sock *sk, unsigned int group);

extern int netlink_unicast(struct sock *ssk, struct sk_buff *skb, __u32 portid, int nonblock);
extern int netlink_broadcast(struct sock *ssk, struct sk_buff *skb, __u32 portid,
        __u32 group, gfp_t allocation);
extern int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb,
 __u32 portid, __u32 group, gfp_t allocation,
 int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data),
 void *filter_data);
extern int netlink_set_err(struct sock *ssk, __u32 portid, __u32 group, int code);
extern int netlink_register_notifier(struct notifier_block *nb);
extern int netlink_unregister_notifier(struct notifier_block *nb);


struct sock *netlink_getsockbyfilp(struct file *filp);
int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
        long *timeo, struct sock *ssk);
void netlink_detachskb(struct sock *sk, struct sk_buff *skb);
int netlink_sendskb(struct sock *sk, struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) struct sk_buff *
netlink_skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
{
 struct sk_buff *nskb;

 nskb = skb_clone(skb, gfp_mask);
 if (!nskb)
  return ((void *)0);


 if (is_vmalloc_addr(skb->head))
  nskb->destructor = skb->destructor;

 return nskb;
}
# 121 "include/linux/netlink.h"
struct netlink_callback {
 struct sk_buff *skb;
 const struct nlmsghdr *nlh;
 int (*start)(struct netlink_callback *);
 int (*dump)(struct sk_buff * skb,
     struct netlink_callback *cb);
 int (*done)(struct netlink_callback *cb);
 void *data;

 struct module *module;
 u16 family;
 u16 min_dump_alloc;
 unsigned int prev_seq, seq;
 long args[6];
};

struct netlink_notify {
 struct net *net;
 u32 portid;
 int protocol;
};

struct nlmsghdr *
__nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq, int type, int len, int flags);

struct netlink_dump_control {
 int (*start)(struct netlink_callback *);
 int (*dump)(struct sk_buff *skb, struct netlink_callback *);
 int (*done)(struct netlink_callback *);
 void *data;
 struct module *module;
 u16 min_dump_alloc;
};

extern int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
    const struct nlmsghdr *nlh,
    struct netlink_dump_control *control);
static inline __attribute__((no_instrument_function)) int netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
         const struct nlmsghdr *nlh,
         struct netlink_dump_control *control)
{
 if (!control->module)
  control->module = ((struct module *)0);

 return __netlink_dump_start(ssk, skb, nlh, control);
}

struct netlink_tap {
 struct net_device *dev;
 struct module *module;
 struct list_head list;
};

extern int netlink_add_tap(struct netlink_tap *nt);
extern int netlink_remove_tap(struct netlink_tap *nt);

bool __netlink_ns_capable(const struct netlink_skb_parms *nsp,
     struct user_namespace *ns, int cap);
bool netlink_ns_capable(const struct sk_buff *skb,
   struct user_namespace *ns, int cap);
bool netlink_capable(const struct sk_buff *skb, int cap);
bool netlink_net_capable(const struct sk_buff *skb, int cap);
# 6 "./include/uapi/linux/neighbour.h" 2

struct ndmsg {
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;
};

enum {
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 NDA_VLAN,
 NDA_PORT,
 NDA_VNI,
 NDA_IFINDEX,
 NDA_MASTER,
 NDA_LINK_NETNSID,
 __NDA_MAX
};
# 66 "./include/uapi/linux/neighbour.h"
struct nda_cacheinfo {
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;
};
# 98 "./include/uapi/linux/neighbour.h"
struct ndt_stats {
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;
 __u64 ndts_table_fulls;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 NDTPA_QUEUE_LENBYTES,
 NDTPA_MCAST_REPROBES,
 NDTPA_PAD,
 __NDTPA_MAX
};


struct ndtmsg {
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;
};

struct ndt_config {
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 NDTA_PAD,
 __NDTA_MAX
};
# 52 "include/linux/netdevice.h" 2
# 1 "include/uapi/linux/netdevice.h" 1
# 30 "include/uapi/linux/netdevice.h"
# 1 "./include/uapi/linux/if_packet.h" 1





struct sockaddr_pkt {
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;
};

struct sockaddr_ll {
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];
};
# 71 "./include/uapi/linux/if_packet.h"
struct tpacket_stats {
 unsigned int tp_packets;
 unsigned int tp_drops;
};

struct tpacket_stats_v3 {
 unsigned int tp_packets;
 unsigned int tp_drops;
 unsigned int tp_freeze_q_cnt;
};

struct tpacket_rollover_stats {
 __u64 __attribute__((aligned(8))) tp_all;
 __u64 __attribute__((aligned(8))) tp_huge;
 __u64 __attribute__((aligned(8))) tp_failed;
};

union tpacket_stats_u {
 struct tpacket_stats stats1;
 struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
};
# 128 "./include/uapi/linux/if_packet.h"
struct tpacket_hdr {
 unsigned long tp_status;
 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;
};





struct tpacket2_hdr {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u8 tp_padding[4];
};

struct tpacket_hdr_variant1 {
 __u32 tp_rxhash;
 __u32 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u16 tp_padding;
};

struct tpacket3_hdr {
 __u32 tp_next_offset;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u32 tp_snaplen;
 __u32 tp_len;
 __u32 tp_status;
 __u16 tp_mac;
 __u16 tp_net;

 union {
  struct tpacket_hdr_variant1 hv1;
 };
 __u8 tp_padding[8];
};

struct tpacket_bd_ts {
 unsigned int ts_sec;
 union {
  unsigned int ts_usec;
  unsigned int ts_nsec;
 };
};

struct tpacket_hdr_v1 {
 __u32 block_status;
 __u32 num_pkts;
 __u32 offset_to_first_pkt;




 __u32 blk_len;
# 205 "./include/uapi/linux/if_packet.h"
 __u64 __attribute__((aligned(8))) seq_num;
# 232 "./include/uapi/linux/if_packet.h"
 struct tpacket_bd_ts ts_first_pkt, ts_last_pkt;
};

union tpacket_bd_header_u {
 struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
 __u32 version;
 __u32 offset_to_priv;
 union tpacket_bd_header_u hdr;
};




enum tpacket_versions {
 TPACKET_V1,
 TPACKET_V2,
 TPACKET_V3
};
# 267 "./include/uapi/linux/if_packet.h"
struct tpacket_req {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
};

struct tpacket_req3 {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
 unsigned int tp_retire_blk_tov;
 unsigned int tp_sizeof_priv;
 unsigned int tp_feature_req_word;
};

union tpacket_req_u {
 struct tpacket_req req;
 struct tpacket_req3 req3;
};

struct packet_mreq {
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];
};
# 31 "include/uapi/linux/netdevice.h" 2
# 1 "include/linux/if_link.h" 1



# 1 "include/uapi/linux/if_link.h" 1







struct rtnl_link_stats {
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;


 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

 __u32 rx_nohandler;
};


struct rtnl_link_stats64 {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 rx_errors;
 __u64 tx_errors;
 __u64 rx_dropped;
 __u64 tx_dropped;
 __u64 multicast;
 __u64 collisions;


 __u64 rx_length_errors;
 __u64 rx_over_errors;
 __u64 rx_crc_errors;
 __u64 rx_frame_errors;
 __u64 rx_fifo_errors;
 __u64 rx_missed_errors;


 __u64 tx_aborted_errors;
 __u64 tx_carrier_errors;
 __u64 tx_fifo_errors;
 __u64 tx_heartbeat_errors;
 __u64 tx_window_errors;


 __u64 rx_compressed;
 __u64 tx_compressed;

 __u64 rx_nohandler;
};


struct rtnl_link_ifmap {
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;
};
# 105 "include/uapi/linux/if_link.h"
enum {
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 IFLA_IFALIAS,
 IFLA_NUM_VF,
 IFLA_VFINFO_LIST,
 IFLA_STATS64,
 IFLA_VF_PORTS,
 IFLA_PORT_SELF,
 IFLA_AF_SPEC,
 IFLA_GROUP,
 IFLA_NET_NS_FD,
 IFLA_EXT_MASK,
 IFLA_PROMISCUITY,

 IFLA_NUM_TX_QUEUES,
 IFLA_NUM_RX_QUEUES,
 IFLA_CARRIER,
 IFLA_PHYS_PORT_ID,
 IFLA_CARRIER_CHANGES,
 IFLA_PHYS_SWITCH_ID,
 IFLA_LINK_NETNSID,
 IFLA_PHYS_PORT_NAME,
 IFLA_PROTO_DOWN,
 IFLA_GSO_MAX_SEGS,
 IFLA_GSO_MAX_SIZE,
 IFLA_PAD,
 __IFLA_MAX
};
# 171 "include/uapi/linux/if_link.h"
enum {
 IFLA_INET_UNSPEC,
 IFLA_INET_CONF,
 __IFLA_INET_MAX,
};
# 209 "include/uapi/linux/if_link.h"
enum {
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 IFLA_INET6_TOKEN,
 IFLA_INET6_ADDR_GEN_MODE,
 __IFLA_INET6_MAX
};



enum in6_addr_gen_mode {
 IN6_ADDR_GEN_MODE_EUI64,
 IN6_ADDR_GEN_MODE_NONE,
 IN6_ADDR_GEN_MODE_STABLE_PRIVACY,
 IN6_ADDR_GEN_MODE_RANDOM,
};



enum {
 IFLA_BR_UNSPEC,
 IFLA_BR_FORWARD_DELAY,
 IFLA_BR_HELLO_TIME,
 IFLA_BR_MAX_AGE,
 IFLA_BR_AGEING_TIME,
 IFLA_BR_STP_STATE,
 IFLA_BR_PRIORITY,
 IFLA_BR_VLAN_FILTERING,
 IFLA_BR_VLAN_PROTOCOL,
 IFLA_BR_GROUP_FWD_MASK,
 IFLA_BR_ROOT_ID,
 IFLA_BR_BRIDGE_ID,
 IFLA_BR_ROOT_PORT,
 IFLA_BR_ROOT_PATH_COST,
 IFLA_BR_TOPOLOGY_CHANGE,
 IFLA_BR_TOPOLOGY_CHANGE_DETECTED,
 IFLA_BR_HELLO_TIMER,
 IFLA_BR_TCN_TIMER,
 IFLA_BR_TOPOLOGY_CHANGE_TIMER,
 IFLA_BR_GC_TIMER,
 IFLA_BR_GROUP_ADDR,
 IFLA_BR_FDB_FLUSH,
 IFLA_BR_MCAST_ROUTER,
 IFLA_BR_MCAST_SNOOPING,
 IFLA_BR_MCAST_QUERY_USE_IFADDR,
 IFLA_BR_MCAST_QUERIER,
 IFLA_BR_MCAST_HASH_ELASTICITY,
 IFLA_BR_MCAST_HASH_MAX,
 IFLA_BR_MCAST_LAST_MEMBER_CNT,
 IFLA_BR_MCAST_STARTUP_QUERY_CNT,
 IFLA_BR_MCAST_LAST_MEMBER_INTVL,
 IFLA_BR_MCAST_MEMBERSHIP_INTVL,
 IFLA_BR_MCAST_QUERIER_INTVL,
 IFLA_BR_MCAST_QUERY_INTVL,
 IFLA_BR_MCAST_QUERY_RESPONSE_INTVL,
 IFLA_BR_MCAST_STARTUP_QUERY_INTVL,
 IFLA_BR_NF_CALL_IPTABLES,
 IFLA_BR_NF_CALL_IP6TABLES,
 IFLA_BR_NF_CALL_ARPTABLES,
 IFLA_BR_VLAN_DEFAULT_PVID,
 IFLA_BR_PAD,
 IFLA_BR_VLAN_STATS_ENABLED,
 __IFLA_BR_MAX,
};



struct ifla_bridge_id {
 __u8 prio[2];
 __u8 addr[6];
};

enum {
 BRIDGE_MODE_UNSPEC,
 BRIDGE_MODE_HAIRPIN,
};

enum {
 IFLA_BRPORT_UNSPEC,
 IFLA_BRPORT_STATE,
 IFLA_BRPORT_PRIORITY,
 IFLA_BRPORT_COST,
 IFLA_BRPORT_MODE,
 IFLA_BRPORT_GUARD,
 IFLA_BRPORT_PROTECT,
 IFLA_BRPORT_FAST_LEAVE,
 IFLA_BRPORT_LEARNING,
 IFLA_BRPORT_UNICAST_FLOOD,
 IFLA_BRPORT_PROXYARP,
 IFLA_BRPORT_LEARNING_SYNC,
 IFLA_BRPORT_PROXYARP_WIFI,
 IFLA_BRPORT_ROOT_ID,
 IFLA_BRPORT_BRIDGE_ID,
 IFLA_BRPORT_DESIGNATED_PORT,
 IFLA_BRPORT_DESIGNATED_COST,
 IFLA_BRPORT_ID,
 IFLA_BRPORT_NO,
 IFLA_BRPORT_TOPOLOGY_CHANGE_ACK,
 IFLA_BRPORT_CONFIG_PENDING,
 IFLA_BRPORT_MESSAGE_AGE_TIMER,
 IFLA_BRPORT_FORWARD_DELAY_TIMER,
 IFLA_BRPORT_HOLD_TIMER,
 IFLA_BRPORT_FLUSH,
 IFLA_BRPORT_MULTICAST_ROUTER,
 IFLA_BRPORT_PAD,
 __IFLA_BRPORT_MAX
};


struct ifla_cacheinfo {
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;
};

enum {
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 IFLA_INFO_SLAVE_KIND,
 IFLA_INFO_SLAVE_DATA,
 __IFLA_INFO_MAX,
};





enum {
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 IFLA_VLAN_PROTOCOL,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
 __u32 flags;
 __u32 mask;
};

enum {
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping {
 __u32 from;
 __u32 to;
};


enum {
 IFLA_MACVLAN_UNSPEC,
 IFLA_MACVLAN_MODE,
 IFLA_MACVLAN_FLAGS,
 IFLA_MACVLAN_MACADDR_MODE,
 IFLA_MACVLAN_MACADDR,
 IFLA_MACVLAN_MACADDR_DATA,
 IFLA_MACVLAN_MACADDR_COUNT,
 __IFLA_MACVLAN_MAX,
};



enum macvlan_mode {
 MACVLAN_MODE_PRIVATE = 1,
 MACVLAN_MODE_VEPA = 2,
 MACVLAN_MODE_BRIDGE = 4,
 MACVLAN_MODE_PASSTHRU = 8,
 MACVLAN_MODE_SOURCE = 16,
};

enum macvlan_macaddr_mode {
 MACVLAN_MACADDR_ADD,
 MACVLAN_MACADDR_DEL,
 MACVLAN_MACADDR_FLUSH,
 MACVLAN_MACADDR_SET,
};




enum {
 IFLA_VRF_UNSPEC,
 IFLA_VRF_TABLE,
 __IFLA_VRF_MAX
};



enum {
 IFLA_VRF_PORT_UNSPEC,
 IFLA_VRF_PORT_TABLE,
 __IFLA_VRF_PORT_MAX
};




enum {
 IFLA_MACSEC_UNSPEC,
 IFLA_MACSEC_SCI,
 IFLA_MACSEC_PORT,
 IFLA_MACSEC_ICV_LEN,
 IFLA_MACSEC_CIPHER_SUITE,
 IFLA_MACSEC_WINDOW,
 IFLA_MACSEC_ENCODING_SA,
 IFLA_MACSEC_ENCRYPT,
 IFLA_MACSEC_PROTECT,
 IFLA_MACSEC_INC_SCI,
 IFLA_MACSEC_ES,
 IFLA_MACSEC_SCB,
 IFLA_MACSEC_REPLAY_PROTECT,
 IFLA_MACSEC_VALIDATION,
 IFLA_MACSEC_PAD,
 __IFLA_MACSEC_MAX,
};



enum macsec_validation_type {
 MACSEC_VALIDATE_DISABLED = 0,
 MACSEC_VALIDATE_CHECK = 1,
 MACSEC_VALIDATE_STRICT = 2,
 __MACSEC_VALIDATE_END,
 MACSEC_VALIDATE_MAX = __MACSEC_VALIDATE_END - 1,
};


enum {
 IFLA_IPVLAN_UNSPEC,
 IFLA_IPVLAN_MODE,
 __IFLA_IPVLAN_MAX
};



enum ipvlan_mode {
 IPVLAN_MODE_L2 = 0,
 IPVLAN_MODE_L3,
 IPVLAN_MODE_MAX
};


enum {
 IFLA_VXLAN_UNSPEC,
 IFLA_VXLAN_ID,
 IFLA_VXLAN_GROUP,
 IFLA_VXLAN_LINK,
 IFLA_VXLAN_LOCAL,
 IFLA_VXLAN_TTL,
 IFLA_VXLAN_TOS,
 IFLA_VXLAN_LEARNING,
 IFLA_VXLAN_AGEING,
 IFLA_VXLAN_LIMIT,
 IFLA_VXLAN_PORT_RANGE,
 IFLA_VXLAN_PROXY,
 IFLA_VXLAN_RSC,
 IFLA_VXLAN_L2MISS,
 IFLA_VXLAN_L3MISS,
 IFLA_VXLAN_PORT,
 IFLA_VXLAN_GROUP6,
 IFLA_VXLAN_LOCAL6,
 IFLA_VXLAN_UDP_CSUM,
 IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
 IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
 IFLA_VXLAN_REMCSUM_TX,
 IFLA_VXLAN_REMCSUM_RX,
 IFLA_VXLAN_GBP,
 IFLA_VXLAN_REMCSUM_NOPARTIAL,
 IFLA_VXLAN_COLLECT_METADATA,
 IFLA_VXLAN_LABEL,
 IFLA_VXLAN_GPE,
 __IFLA_VXLAN_MAX
};


struct ifla_vxlan_port_range {
 __be16 low;
 __be16 high;
};


enum {
 IFLA_GENEVE_UNSPEC,
 IFLA_GENEVE_ID,
 IFLA_GENEVE_REMOTE,
 IFLA_GENEVE_TTL,
 IFLA_GENEVE_TOS,
 IFLA_GENEVE_PORT,
 IFLA_GENEVE_COLLECT_METADATA,
 IFLA_GENEVE_REMOTE6,
 IFLA_GENEVE_UDP_CSUM,
 IFLA_GENEVE_UDP_ZERO_CSUM6_TX,
 IFLA_GENEVE_UDP_ZERO_CSUM6_RX,
 IFLA_GENEVE_LABEL,
 __IFLA_GENEVE_MAX
};



enum {
 IFLA_PPP_UNSPEC,
 IFLA_PPP_DEV_FD,
 __IFLA_PPP_MAX
};



enum {
 IFLA_GTP_UNSPEC,
 IFLA_GTP_FD0,
 IFLA_GTP_FD1,
 IFLA_GTP_PDP_HASHSIZE,
 __IFLA_GTP_MAX,
};




enum {
 IFLA_BOND_UNSPEC,
 IFLA_BOND_MODE,
 IFLA_BOND_ACTIVE_SLAVE,
 IFLA_BOND_MIIMON,
 IFLA_BOND_UPDELAY,
 IFLA_BOND_DOWNDELAY,
 IFLA_BOND_USE_CARRIER,
 IFLA_BOND_ARP_INTERVAL,
 IFLA_BOND_ARP_IP_TARGET,
 IFLA_BOND_ARP_VALIDATE,
 IFLA_BOND_ARP_ALL_TARGETS,
 IFLA_BOND_PRIMARY,
 IFLA_BOND_PRIMARY_RESELECT,
 IFLA_BOND_FAIL_OVER_MAC,
 IFLA_BOND_XMIT_HASH_POLICY,
 IFLA_BOND_RESEND_IGMP,
 IFLA_BOND_NUM_PEER_NOTIF,
 IFLA_BOND_ALL_SLAVES_ACTIVE,
 IFLA_BOND_MIN_LINKS,
 IFLA_BOND_LP_INTERVAL,
 IFLA_BOND_PACKETS_PER_SLAVE,
 IFLA_BOND_AD_LACP_RATE,
 IFLA_BOND_AD_SELECT,
 IFLA_BOND_AD_INFO,
 IFLA_BOND_AD_ACTOR_SYS_PRIO,
 IFLA_BOND_AD_USER_PORT_KEY,
 IFLA_BOND_AD_ACTOR_SYSTEM,
 IFLA_BOND_TLB_DYNAMIC_LB,
 __IFLA_BOND_MAX,
};



enum {
 IFLA_BOND_AD_INFO_UNSPEC,
 IFLA_BOND_AD_INFO_AGGREGATOR,
 IFLA_BOND_AD_INFO_NUM_PORTS,
 IFLA_BOND_AD_INFO_ACTOR_KEY,
 IFLA_BOND_AD_INFO_PARTNER_KEY,
 IFLA_BOND_AD_INFO_PARTNER_MAC,
 __IFLA_BOND_AD_INFO_MAX,
};



enum {
 IFLA_BOND_SLAVE_UNSPEC,
 IFLA_BOND_SLAVE_STATE,
 IFLA_BOND_SLAVE_MII_STATUS,
 IFLA_BOND_SLAVE_LINK_FAILURE_COUNT,
 IFLA_BOND_SLAVE_PERM_HWADDR,
 IFLA_BOND_SLAVE_QUEUE_ID,
 IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
 IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE,
 IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE,
 __IFLA_BOND_SLAVE_MAX,
};





enum {
 IFLA_VF_INFO_UNSPEC,
 IFLA_VF_INFO,
 __IFLA_VF_INFO_MAX,
};



enum {
 IFLA_VF_UNSPEC,
 IFLA_VF_MAC,
 IFLA_VF_VLAN,
 IFLA_VF_TX_RATE,
 IFLA_VF_SPOOFCHK,
 IFLA_VF_LINK_STATE,
 IFLA_VF_RATE,
 IFLA_VF_RSS_QUERY_EN,


 IFLA_VF_STATS,
 IFLA_VF_TRUST,
 IFLA_VF_IB_NODE_GUID,
 IFLA_VF_IB_PORT_GUID,
 __IFLA_VF_MAX,
};



struct ifla_vf_mac {
 __u32 vf;
 __u8 mac[32];
};

struct ifla_vf_vlan {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
};

struct ifla_vf_tx_rate {
 __u32 vf;
 __u32 rate;
};

struct ifla_vf_rate {
 __u32 vf;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
};

struct ifla_vf_spoofchk {
 __u32 vf;
 __u32 setting;
};

struct ifla_vf_guid {
 __u32 vf;
 __u64 guid;
};

enum {
 IFLA_VF_LINK_STATE_AUTO,
 IFLA_VF_LINK_STATE_ENABLE,
 IFLA_VF_LINK_STATE_DISABLE,
 __IFLA_VF_LINK_STATE_MAX,
};

struct ifla_vf_link_state {
 __u32 vf;
 __u32 link_state;
};

struct ifla_vf_rss_query_en {
 __u32 vf;
 __u32 setting;
};

enum {
 IFLA_VF_STATS_RX_PACKETS,
 IFLA_VF_STATS_TX_PACKETS,
 IFLA_VF_STATS_RX_BYTES,
 IFLA_VF_STATS_TX_BYTES,
 IFLA_VF_STATS_BROADCAST,
 IFLA_VF_STATS_MULTICAST,
 IFLA_VF_STATS_PAD,
 __IFLA_VF_STATS_MAX,
};



struct ifla_vf_trust {
 __u32 vf;
 __u32 setting;
};
# 717 "include/uapi/linux/if_link.h"
enum {
 IFLA_VF_PORT_UNSPEC,
 IFLA_VF_PORT,
 __IFLA_VF_PORT_MAX,
};



enum {
 IFLA_PORT_UNSPEC,
 IFLA_PORT_VF,
 IFLA_PORT_PROFILE,
 IFLA_PORT_VSI_TYPE,
 IFLA_PORT_INSTANCE_UUID,
 IFLA_PORT_HOST_UUID,
 IFLA_PORT_REQUEST,
 IFLA_PORT_RESPONSE,
 __IFLA_PORT_MAX,
};







enum {
 PORT_REQUEST_PREASSOCIATE = 0,
 PORT_REQUEST_PREASSOCIATE_RR,
 PORT_REQUEST_ASSOCIATE,
 PORT_REQUEST_DISASSOCIATE,
};

enum {
 PORT_VDP_RESPONSE_SUCCESS = 0,
 PORT_VDP_RESPONSE_INVALID_FORMAT,
 PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_VDP_RESPONSE_UNUSED_VTID,
 PORT_VDP_RESPONSE_VTID_VIOLATION,
 PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION,
 PORT_VDP_RESPONSE_OUT_OF_SYNC,

 PORT_PROFILE_RESPONSE_SUCCESS = 0x100,
 PORT_PROFILE_RESPONSE_INPROGRESS,
 PORT_PROFILE_RESPONSE_INVALID,
 PORT_PROFILE_RESPONSE_BADSTATE,
 PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_PROFILE_RESPONSE_ERROR,
};

struct ifla_port_vsi {
 __u8 vsi_mgr_id;
 __u8 vsi_type_id[3];
 __u8 vsi_type_version;
 __u8 pad[3];
};




enum {
 IFLA_IPOIB_UNSPEC,
 IFLA_IPOIB_PKEY,
 IFLA_IPOIB_MODE,
 IFLA_IPOIB_UMCAST,
 __IFLA_IPOIB_MAX
};

enum {
 IPOIB_MODE_DATAGRAM = 0,
 IPOIB_MODE_CONNECTED = 1,
};






enum {
 IFLA_HSR_UNSPEC,
 IFLA_HSR_SLAVE1,
 IFLA_HSR_SLAVE2,
 IFLA_HSR_MULTICAST_SPEC,
 IFLA_HSR_SUPERVISION_ADDR,
 IFLA_HSR_SEQ_NR,
 IFLA_HSR_VERSION,
 __IFLA_HSR_MAX,
};





struct if_stats_msg {
 __u8 family;
 __u8 pad1;
 __u16 pad2;
 __u32 ifindex;
 __u32 filter_mask;
};




enum {
 IFLA_STATS_UNSPEC,
 IFLA_STATS_LINK_64,
 IFLA_STATS_LINK_XSTATS,
 __IFLA_STATS_MAX,
};
# 837 "include/uapi/linux/if_link.h"
enum {
 LINK_XSTATS_TYPE_UNSPEC,
 LINK_XSTATS_TYPE_BRIDGE,
 __LINK_XSTATS_TYPE_MAX
};
# 5 "include/linux/if_link.h" 2



struct ifla_vf_stats {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 broadcast;
 __u64 multicast;
};

struct ifla_vf_info {
 __u32 vf;
 __u8 mac[32];
 __u32 vlan;
 __u32 qos;
 __u32 spoofchk;
 __u32 linkstate;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
 __u32 rss_query_en;
 __u32 trusted;
};
# 32 "include/uapi/linux/netdevice.h" 2
# 48 "include/uapi/linux/netdevice.h"
enum {
        IF_PORT_UNKNOWN = 0,
        IF_PORT_10BASE2,
        IF_PORT_10BASET,
        IF_PORT_AUI,
        IF_PORT_100BASET,
        IF_PORT_100BASETX,
        IF_PORT_100BASEFX
};
# 53 "include/linux/netdevice.h" 2
# 1 "include/uapi/linux/if_bonding.h" 1
# 97 "include/uapi/linux/if_bonding.h"
typedef struct ifbond {
 __s32 bond_mode;
 __s32 num_slaves;
 __s32 miimon;
} ifbond;

typedef struct ifslave {
 __s32 slave_id;
 char slave_name[16];
 __s8 link;
 __s8 state;
 __u32 link_failure_count;
} ifslave;

struct ad_info {
 __u16 aggregator_id;
 __u16 ports;
 __u16 actor_key;
 __u16 partner_key;
 __u8 partner_system[6];
};
# 54 "include/linux/netdevice.h" 2
# 1 "include/uapi/linux/pkt_cls.h" 1




# 1 "./include/uapi/linux/pkt_sched.h" 1
# 32 "./include/uapi/linux/pkt_sched.h"
struct tc_stats {
 __u64 bytes;
 __u32 packets;
 __u32 drops;
 __u32 overlimits;

 __u32 bps;
 __u32 pps;
 __u32 qlen;
 __u32 backlog;
};

struct tc_estimator {
 signed char interval;
 unsigned char ewma_log;
};
# 81 "./include/uapi/linux/pkt_sched.h"
enum tc_link_layer {
 TC_LINKLAYER_UNAWARE,
 TC_LINKLAYER_ETHERNET,
 TC_LINKLAYER_ATM,
};


struct tc_ratespec {
 unsigned char cell_log;
 __u8 linklayer;
 unsigned short overhead;
 short cell_align;
 unsigned short mpu;
 __u32 rate;
};



struct tc_sizespec {
 unsigned char cell_log;
 unsigned char size_log;
 short cell_align;
 int overhead;
 unsigned int linklayer;
 unsigned int mpu;
 unsigned int mtu;
 unsigned int tsize;
};

enum {
 TCA_STAB_UNSPEC,
 TCA_STAB_BASE,
 TCA_STAB_DATA,
 __TCA_STAB_MAX
};





struct tc_fifo_qopt {
 __u32 limit;
};






struct tc_prio_qopt {
 int bands;
 __u8 priomap[15 +1];
};



struct tc_multiq_qopt {
 __u16 bands;
 __u16 max_bands;
};
# 149 "./include/uapi/linux/pkt_sched.h"
struct tc_plug_qopt {
# 159 "./include/uapi/linux/pkt_sched.h"
 int action;
 __u32 limit;
};



struct tc_tbf_qopt {
 struct tc_ratespec rate;
 struct tc_ratespec peakrate;
 __u32 limit;
 __u32 buffer;
 __u32 mtu;
};

enum {
 TCA_TBF_UNSPEC,
 TCA_TBF_PARMS,
 TCA_TBF_RTAB,
 TCA_TBF_PTAB,
 TCA_TBF_RATE64,
 TCA_TBF_PRATE64,
 TCA_TBF_BURST,
 TCA_TBF_PBURST,
 TCA_TBF_PAD,
 __TCA_TBF_MAX,
};
# 195 "./include/uapi/linux/pkt_sched.h"
struct tc_sfq_qopt {
 unsigned quantum;
 int perturb_period;
 __u32 limit;
 unsigned divisor;
 unsigned flows;
};

struct tc_sfqred_stats {
 __u32 prob_drop;
 __u32 forced_drop;
 __u32 prob_mark;
 __u32 forced_mark;
 __u32 prob_mark_head;
 __u32 forced_mark_head;
};

struct tc_sfq_qopt_v1 {
 struct tc_sfq_qopt v0;
 unsigned int depth;
 unsigned int headdrop;

 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;
 __u32 max_P;

 struct tc_sfqred_stats stats;
};


struct tc_sfq_xstats {
 __s32 allot;
};



enum {
 TCA_RED_UNSPEC,
 TCA_RED_PARMS,
 TCA_RED_STAB,
 TCA_RED_MAX_P,
 __TCA_RED_MAX,
};



struct tc_red_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;



};

struct tc_red_xstats {
 __u32 early;
 __u32 pdrop;
 __u32 other;
 __u32 marked;
};





enum {
       TCA_GRED_UNSPEC,
       TCA_GRED_PARMS,
       TCA_GRED_STAB,
       TCA_GRED_DPS,
       TCA_GRED_MAX_P,
       TCA_GRED_LIMIT,
       __TCA_GRED_MAX,
};



struct tc_gred_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 __u32 DP;
 __u32 backlog;
 __u32 qave;
 __u32 forced;
 __u32 early;
 __u32 other;
 __u32 pdrop;
 __u8 Wlog;
 __u8 Plog;
 __u8 Scell_log;
 __u8 prio;
 __u32 packets;
 __u32 bytesin;
};


struct tc_gred_sopt {
 __u32 DPs;
 __u32 def_DP;
 __u8 grio;
 __u8 flags;
 __u16 pad1;
};



enum {
 TCA_CHOKE_UNSPEC,
 TCA_CHOKE_PARMS,
 TCA_CHOKE_STAB,
 TCA_CHOKE_MAX_P,
 __TCA_CHOKE_MAX,
};



struct tc_choke_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;
};

struct tc_choke_xstats {
 __u32 early;
 __u32 pdrop;
 __u32 other;
 __u32 marked;
 __u32 matched;
};






struct tc_htb_opt {
 struct tc_ratespec rate;
 struct tc_ratespec ceil;
 __u32 buffer;
 __u32 cbuffer;
 __u32 quantum;
 __u32 level;
 __u32 prio;
};
struct tc_htb_glob {
 __u32 version;
     __u32 rate2quantum;
     __u32 defcls;
 __u32 debug;


 __u32 direct_pkts;
};
enum {
 TCA_HTB_UNSPEC,
 TCA_HTB_PARMS,
 TCA_HTB_INIT,
 TCA_HTB_CTAB,
 TCA_HTB_RTAB,
 TCA_HTB_DIRECT_QLEN,
 TCA_HTB_RATE64,
 TCA_HTB_CEIL64,
 TCA_HTB_PAD,
 __TCA_HTB_MAX,
};



struct tc_htb_xstats {
 __u32 lends;
 __u32 borrows;
 __u32 giants;
 __u32 tokens;
 __u32 ctokens;
};



struct tc_hfsc_qopt {
 __u16 defcls;
};

struct tc_service_curve {
 __u32 m1;
 __u32 d;
 __u32 m2;
};

struct tc_hfsc_stats {
 __u64 work;
 __u64 rtwork;
 __u32 period;
 __u32 level;
};

enum {
 TCA_HFSC_UNSPEC,
 TCA_HFSC_RSC,
 TCA_HFSC_FSC,
 TCA_HFSC_USC,
 __TCA_HFSC_MAX,
};
# 422 "./include/uapi/linux/pkt_sched.h"
struct tc_cbq_lssopt {
 unsigned char change;
 unsigned char flags;


 unsigned char ewma_log;
 unsigned char level;






 __u32 maxidle;
 __u32 minidle;
 __u32 offtime;
 __u32 avpkt;
};

struct tc_cbq_wrropt {
 unsigned char flags;
 unsigned char priority;
 unsigned char cpriority;
 unsigned char __reserved;
 __u32 allot;
 __u32 weight;
};

struct tc_cbq_ovl {
 unsigned char strategy;





 unsigned char priority2;
 __u16 pad;
 __u32 penalty;
};

struct tc_cbq_police {
 unsigned char police;
 unsigned char __res1;
 unsigned short __res2;
};

struct tc_cbq_fopt {
 __u32 split;
 __u32 defmap;
 __u32 defchange;
};

struct tc_cbq_xstats {
 __u32 borrows;
 __u32 overactions;
 __s32 avgidle;
 __s32 undertime;
};

enum {
 TCA_CBQ_UNSPEC,
 TCA_CBQ_LSSOPT,
 TCA_CBQ_WRROPT,
 TCA_CBQ_FOPT,
 TCA_CBQ_OVL_STRATEGY,
 TCA_CBQ_RATE,
 TCA_CBQ_RTAB,
 TCA_CBQ_POLICE,
 __TCA_CBQ_MAX,
};





enum {
 TCA_DSMARK_UNSPEC,
 TCA_DSMARK_INDICES,
 TCA_DSMARK_DEFAULT_INDEX,
 TCA_DSMARK_SET_TC_INDEX,
 TCA_DSMARK_MASK,
 TCA_DSMARK_VALUE,
 __TCA_DSMARK_MAX,
};





enum {
 TCA_ATM_UNSPEC,
 TCA_ATM_FD,
 TCA_ATM_PTR,
 TCA_ATM_HDR,
 TCA_ATM_EXCESS,
 TCA_ATM_ADDR,
 TCA_ATM_STATE,
 __TCA_ATM_MAX,
};





enum {
 TCA_NETEM_UNSPEC,
 TCA_NETEM_CORR,
 TCA_NETEM_DELAY_DIST,
 TCA_NETEM_REORDER,
 TCA_NETEM_CORRUPT,
 TCA_NETEM_LOSS,
 TCA_NETEM_RATE,
 TCA_NETEM_ECN,
 TCA_NETEM_RATE64,
 TCA_NETEM_PAD,
 __TCA_NETEM_MAX,
};



struct tc_netem_qopt {
 __u32 latency;
 __u32 limit;
 __u32 loss;
 __u32 gap;
 __u32 duplicate;
 __u32 jitter;
};

struct tc_netem_corr {
 __u32 delay_corr;
 __u32 loss_corr;
 __u32 dup_corr;
};

struct tc_netem_reorder {
 __u32 probability;
 __u32 correlation;
};

struct tc_netem_corrupt {
 __u32 probability;
 __u32 correlation;
};

struct tc_netem_rate {
 __u32 rate;
 __s32 packet_overhead;
 __u32 cell_size;
 __s32 cell_overhead;
};

enum {
 NETEM_LOSS_UNSPEC,
 NETEM_LOSS_GI,
 NETEM_LOSS_GE,
 __NETEM_LOSS_MAX
};



struct tc_netem_gimodel {
 __u32 p13;
 __u32 p31;
 __u32 p32;
 __u32 p14;
 __u32 p23;
};


struct tc_netem_gemodel {
 __u32 p;
 __u32 r;
 __u32 h;
 __u32 k1;
};






enum {
 TCA_DRR_UNSPEC,
 TCA_DRR_QUANTUM,
 __TCA_DRR_MAX
};



struct tc_drr_stats {
 __u32 deficit;
};





struct tc_mqprio_qopt {
 __u8 num_tc;
 __u8 prio_tc_map[15 + 1];
 __u8 hw;
 __u16 count[16];
 __u16 offset[16];
};



enum {
 TCA_SFB_UNSPEC,
 TCA_SFB_PARMS,
 __TCA_SFB_MAX,
};






struct tc_sfb_qopt {
 __u32 rehash_interval;
 __u32 warmup_time;
 __u32 max;
 __u32 bin_size;
 __u32 increment;
 __u32 decrement;
 __u32 limit;
 __u32 penalty_rate;
 __u32 penalty_burst;
};

struct tc_sfb_xstats {
 __u32 earlydrop;
 __u32 penaltydrop;
 __u32 bucketdrop;
 __u32 queuedrop;
 __u32 childdrop;
 __u32 marked;
 __u32 maxqlen;
 __u32 maxprob;
 __u32 avgprob;
};




enum {
 TCA_QFQ_UNSPEC,
 TCA_QFQ_WEIGHT,
 TCA_QFQ_LMAX,
 __TCA_QFQ_MAX
};



struct tc_qfq_stats {
 __u32 weight;
 __u32 lmax;
};



enum {
 TCA_CODEL_UNSPEC,
 TCA_CODEL_TARGET,
 TCA_CODEL_LIMIT,
 TCA_CODEL_INTERVAL,
 TCA_CODEL_ECN,
 TCA_CODEL_CE_THRESHOLD,
 __TCA_CODEL_MAX
};



struct tc_codel_xstats {
 __u32 maxpacket;
 __u32 count;


 __u32 lastcount;
 __u32 ldelay;
 __s32 drop_next;
 __u32 drop_overlimit;
 __u32 ecn_mark;
 __u32 dropping;
 __u32 ce_mark;
};



enum {
 TCA_FQ_CODEL_UNSPEC,
 TCA_FQ_CODEL_TARGET,
 TCA_FQ_CODEL_LIMIT,
 TCA_FQ_CODEL_INTERVAL,
 TCA_FQ_CODEL_ECN,
 TCA_FQ_CODEL_FLOWS,
 TCA_FQ_CODEL_QUANTUM,
 TCA_FQ_CODEL_CE_THRESHOLD,
 TCA_FQ_CODEL_DROP_BATCH_SIZE,
 TCA_FQ_CODEL_MEMORY_LIMIT,
 __TCA_FQ_CODEL_MAX
};



enum {
 TCA_FQ_CODEL_XSTATS_QDISC,
 TCA_FQ_CODEL_XSTATS_CLASS,
};

struct tc_fq_codel_qd_stats {
 __u32 maxpacket;
 __u32 drop_overlimit;


 __u32 ecn_mark;


 __u32 new_flow_count;


 __u32 new_flows_len;
 __u32 old_flows_len;
 __u32 ce_mark;
 __u32 memory_usage;
 __u32 drop_overmemory;
};

struct tc_fq_codel_cl_stats {
 __s32 deficit;
 __u32 ldelay;


 __u32 count;
 __u32 lastcount;
 __u32 dropping;
 __s32 drop_next;
};

struct tc_fq_codel_xstats {
 __u32 type;
 union {
  struct tc_fq_codel_qd_stats qdisc_stats;
  struct tc_fq_codel_cl_stats class_stats;
 };
};



enum {
 TCA_FQ_UNSPEC,

 TCA_FQ_PLIMIT,

 TCA_FQ_FLOW_PLIMIT,

 TCA_FQ_QUANTUM,

 TCA_FQ_INITIAL_QUANTUM,

 TCA_FQ_RATE_ENABLE,

 TCA_FQ_FLOW_DEFAULT_RATE,

 TCA_FQ_FLOW_MAX_RATE,

 TCA_FQ_BUCKETS_LOG,

 TCA_FQ_FLOW_REFILL_DELAY,

 TCA_FQ_ORPHAN_MASK,

 __TCA_FQ_MAX
};



struct tc_fq_qd_stats {
 __u64 gc_flows;
 __u64 highprio_packets;
 __u64 tcp_retrans;
 __u64 throttled;
 __u64 flows_plimit;
 __u64 pkts_too_long;
 __u64 allocation_errors;
 __s64 time_next_delayed_flow;
 __u32 flows;
 __u32 inactive_flows;
 __u32 throttled_flows;
 __u32 pad;
};



enum {
 TCA_HHF_UNSPEC,
 TCA_HHF_BACKLOG_LIMIT,
 TCA_HHF_QUANTUM,
 TCA_HHF_HH_FLOWS_LIMIT,
 TCA_HHF_RESET_TIMEOUT,
 TCA_HHF_ADMIT_BYTES,
 TCA_HHF_EVICT_TIMEOUT,
 TCA_HHF_NON_HH_WEIGHT,
 __TCA_HHF_MAX
};



struct tc_hhf_xstats {
 __u32 drop_overlimit;


 __u32 hh_overlimit;
 __u32 hh_tot_count;
 __u32 hh_cur_count;
};


enum {
 TCA_PIE_UNSPEC,
 TCA_PIE_TARGET,
 TCA_PIE_LIMIT,
 TCA_PIE_TUPDATE,
 TCA_PIE_ALPHA,
 TCA_PIE_BETA,
 TCA_PIE_ECN,
 TCA_PIE_BYTEMODE,
 __TCA_PIE_MAX
};


struct tc_pie_xstats {
 __u32 prob;
 __u32 delay;
 __u32 avg_dq_rate;
 __u32 packets_in;
 __u32 dropped;
 __u32 overlimit;
 __u32 maxq;
 __u32 ecn_mark;
};
# 6 "include/uapi/linux/pkt_cls.h" 2
# 63 "include/uapi/linux/pkt_cls.h"
enum {
 TCA_ACT_UNSPEC,
 TCA_ACT_KIND,
 TCA_ACT_OPTIONS,
 TCA_ACT_INDEX,
 TCA_ACT_STATS,
 TCA_ACT_PAD,
 __TCA_ACT_MAX
};
# 95 "include/uapi/linux/pkt_cls.h"
enum {
 TCA_ID_UNSPEC=0,
 TCA_ID_POLICE=1,

 __TCA_ID_MAX=255
};



struct tc_police {
 __u32 index;
 int action;






 __u32 limit;
 __u32 burst;
 __u32 mtu;
 struct tc_ratespec rate;
 struct tc_ratespec peakrate;
 int refcnt;
 int bindcnt;
 __u32 capab;
};

struct tcf_t {
 __u64 install;
 __u64 lastuse;
 __u64 expires;
};

struct tc_cnt {
 int refcnt;
 int bindcnt;
};
# 141 "include/uapi/linux/pkt_cls.h"
enum {
 TCA_POLICE_UNSPEC,
 TCA_POLICE_TBF,
 TCA_POLICE_RATE,
 TCA_POLICE_PEAKRATE,
 TCA_POLICE_AVRATE,
 TCA_POLICE_RESULT,
 __TCA_POLICE_MAX

};
# 168 "include/uapi/linux/pkt_cls.h"
enum {
 TCA_U32_UNSPEC,
 TCA_U32_CLASSID,
 TCA_U32_HASH,
 TCA_U32_LINK,
 TCA_U32_DIVISOR,
 TCA_U32_SEL,
 TCA_U32_POLICE,
 TCA_U32_ACT,
 TCA_U32_INDEV,
 TCA_U32_PCNT,
 TCA_U32_MARK,
 TCA_U32_FLAGS,
 TCA_U32_PAD,
 __TCA_U32_MAX
};



struct tc_u32_key {
 __be32 mask;
 __be32 val;
 int off;
 int offmask;
};

struct tc_u32_sel {
 unsigned char flags;
 unsigned char offshift;
 unsigned char nkeys;

 __be16 offmask;
 __u16 off;
 short offoff;

 short hoff;
 __be32 hmask;
 struct tc_u32_key keys[0];
};

struct tc_u32_mark {
 __u32 val;
 __u32 mask;
 __u32 success;
};

struct tc_u32_pcnt {
 __u64 rcnt;
 __u64 rhit;
 __u64 kcnts[0];
};
# 232 "include/uapi/linux/pkt_cls.h"
enum {
 TCA_RSVP_UNSPEC,
 TCA_RSVP_CLASSID,
 TCA_RSVP_DST,
 TCA_RSVP_SRC,
 TCA_RSVP_PINFO,
 TCA_RSVP_POLICE,
 TCA_RSVP_ACT,
 __TCA_RSVP_MAX
};



struct tc_rsvp_gpi {
 __u32 key;
 __u32 mask;
 int offset;
};

struct tc_rsvp_pinfo {
 struct tc_rsvp_gpi dpi;
 struct tc_rsvp_gpi spi;
 __u8 protocol;
 __u8 tunnelid;
 __u8 tunnelhdr;
 __u8 pad;
};



enum {
 TCA_ROUTE4_UNSPEC,
 TCA_ROUTE4_CLASSID,
 TCA_ROUTE4_TO,
 TCA_ROUTE4_FROM,
 TCA_ROUTE4_IIF,
 TCA_ROUTE4_POLICE,
 TCA_ROUTE4_ACT,
 __TCA_ROUTE4_MAX
};






enum {
 TCA_FW_UNSPEC,
 TCA_FW_CLASSID,
 TCA_FW_POLICE,
 TCA_FW_INDEV,
 TCA_FW_ACT,
 TCA_FW_MASK,
 __TCA_FW_MAX
};





enum {
 TCA_TCINDEX_UNSPEC,
 TCA_TCINDEX_HASH,
 TCA_TCINDEX_MASK,
 TCA_TCINDEX_SHIFT,
 TCA_TCINDEX_FALL_THROUGH,
 TCA_TCINDEX_CLASSID,
 TCA_TCINDEX_POLICE,
 TCA_TCINDEX_ACT,
 __TCA_TCINDEX_MAX
};





enum {
 FLOW_KEY_SRC,
 FLOW_KEY_DST,
 FLOW_KEY_PROTO,
 FLOW_KEY_PROTO_SRC,
 FLOW_KEY_PROTO_DST,
 FLOW_KEY_IIF,
 FLOW_KEY_PRIORITY,
 FLOW_KEY_MARK,
 FLOW_KEY_NFCT,
 FLOW_KEY_NFCT_SRC,
 FLOW_KEY_NFCT_DST,
 FLOW_KEY_NFCT_PROTO_SRC,
 FLOW_KEY_NFCT_PROTO_DST,
 FLOW_KEY_RTCLASSID,
 FLOW_KEY_SKUID,
 FLOW_KEY_SKGID,
 FLOW_KEY_VLAN_TAG,
 FLOW_KEY_RXHASH,
 __FLOW_KEY_MAX,
};



enum {
 FLOW_MODE_MAP,
 FLOW_MODE_HASH,
};

enum {
 TCA_FLOW_UNSPEC,
 TCA_FLOW_KEYS,
 TCA_FLOW_MODE,
 TCA_FLOW_BASECLASS,
 TCA_FLOW_RSHIFT,
 TCA_FLOW_ADDEND,
 TCA_FLOW_MASK,
 TCA_FLOW_XOR,
 TCA_FLOW_DIVISOR,
 TCA_FLOW_ACT,
 TCA_FLOW_POLICE,
 TCA_FLOW_EMATCHES,
 TCA_FLOW_PERTURB,
 __TCA_FLOW_MAX
};





enum {
 TCA_BASIC_UNSPEC,
 TCA_BASIC_CLASSID,
 TCA_BASIC_EMATCHES,
 TCA_BASIC_ACT,
 TCA_BASIC_POLICE,
 __TCA_BASIC_MAX
};






enum {
 TCA_CGROUP_UNSPEC,
 TCA_CGROUP_ACT,
 TCA_CGROUP_POLICE,
 TCA_CGROUP_EMATCHES,
 __TCA_CGROUP_MAX,
};







enum {
 TCA_BPF_UNSPEC,
 TCA_BPF_ACT,
 TCA_BPF_POLICE,
 TCA_BPF_CLASSID,
 TCA_BPF_OPS_LEN,
 TCA_BPF_OPS,
 TCA_BPF_FD,
 TCA_BPF_NAME,
 TCA_BPF_FLAGS,
 __TCA_BPF_MAX,
};





enum {
 TCA_FLOWER_UNSPEC,
 TCA_FLOWER_CLASSID,
 TCA_FLOWER_INDEV,
 TCA_FLOWER_ACT,
 TCA_FLOWER_KEY_ETH_DST,
 TCA_FLOWER_KEY_ETH_DST_MASK,
 TCA_FLOWER_KEY_ETH_SRC,
 TCA_FLOWER_KEY_ETH_SRC_MASK,
 TCA_FLOWER_KEY_ETH_TYPE,
 TCA_FLOWER_KEY_IP_PROTO,
 TCA_FLOWER_KEY_IPV4_SRC,
 TCA_FLOWER_KEY_IPV4_SRC_MASK,
 TCA_FLOWER_KEY_IPV4_DST,
 TCA_FLOWER_KEY_IPV4_DST_MASK,
 TCA_FLOWER_KEY_IPV6_SRC,
 TCA_FLOWER_KEY_IPV6_SRC_MASK,
 TCA_FLOWER_KEY_IPV6_DST,
 TCA_FLOWER_KEY_IPV6_DST_MASK,
 TCA_FLOWER_KEY_TCP_SRC,
 TCA_FLOWER_KEY_TCP_DST,
 TCA_FLOWER_KEY_UDP_SRC,
 TCA_FLOWER_KEY_UDP_DST,

 TCA_FLOWER_FLAGS,
 __TCA_FLOWER_MAX,
};





struct tcf_ematch_tree_hdr {
 __u16 nmatches;
 __u16 progid;
};

enum {
 TCA_EMATCH_TREE_UNSPEC,
 TCA_EMATCH_TREE_HDR,
 TCA_EMATCH_TREE_LIST,
 __TCA_EMATCH_TREE_MAX
};


struct tcf_ematch_hdr {
 __u16 matchid;
 __u16 kind;
 __u16 flags;
 __u16 pad;
};
# 478 "include/uapi/linux/pkt_cls.h"
enum {
 TCF_LAYER_LINK,
 TCF_LAYER_NETWORK,
 TCF_LAYER_TRANSPORT,
 __TCF_LAYER_MAX
};
# 501 "include/uapi/linux/pkt_cls.h"
enum {
 TCF_EM_PROG_TC
};

enum {
 TCF_EM_OPND_EQ,
 TCF_EM_OPND_GT,
 TCF_EM_OPND_LT
};
# 55 "include/linux/netdevice.h" 2

struct netpoll_info;
struct device;
struct phy_device;

struct wireless_dev;

struct wpan_dev;
struct mpls_dev;

void netdev_set_default_ethtool_ops(struct net_device *dev,
        const struct ethtool_ops *ops);
# 105 "include/linux/netdevice.h"
enum netdev_tx {
 __NETDEV_TX_MIN = (-((int)(~0U>>1)) - 1),
 NETDEV_TX_OK = 0x00,
 NETDEV_TX_BUSY = 0x10,
};
typedef enum netdev_tx netdev_tx_t;





static inline __attribute__((no_instrument_function)) bool dev_xmit_complete(int rc)
{






 if (__builtin_expect(!!(rc < 0x0f), 1))
  return true;

 return false;
}
# 159 "include/linux/netdevice.h"
struct net_device_stats {
 unsigned long rx_packets;
 unsigned long tx_packets;
 unsigned long rx_bytes;
 unsigned long tx_bytes;
 unsigned long rx_errors;
 unsigned long tx_errors;
 unsigned long rx_dropped;
 unsigned long tx_dropped;
 unsigned long multicast;
 unsigned long collisions;
 unsigned long rx_length_errors;
 unsigned long rx_over_errors;
 unsigned long rx_crc_errors;
 unsigned long rx_frame_errors;
 unsigned long rx_fifo_errors;
 unsigned long rx_missed_errors;
 unsigned long tx_aborted_errors;
 unsigned long tx_carrier_errors;
 unsigned long tx_fifo_errors;
 unsigned long tx_heartbeat_errors;
 unsigned long tx_window_errors;
 unsigned long rx_compressed;
 unsigned long tx_compressed;
};






# 1 "include/linux/static_key.h" 1
# 191 "include/linux/netdevice.h" 2
extern struct static_key rps_needed;


struct neighbour;
struct neigh_parms;
struct sk_buff;

struct netdev_hw_addr {
 struct list_head list;
 unsigned char addr[32];
 unsigned char type;





 bool global_use;
 int sync_cnt;
 int refcount;
 int synced;
 struct callback_head callback_head;
};

struct netdev_hw_addr_list {
 struct list_head list;
 int count;
};
# 234 "include/linux/netdevice.h"
struct hh_cache {
 u16 hh_len;
 u16 __pad;
 seqlock_t hh_lock;







 unsigned long hh_data[(((96)+(16 -1))&~(16 - 1)) / sizeof(long)];
};
# 261 "include/linux/netdevice.h"
struct header_ops {
 int (*create) (struct sk_buff *skb, struct net_device *dev,
      unsigned short type, const void *daddr,
      const void *saddr, unsigned int len);
 int (*parse)(const struct sk_buff *skb, unsigned char *haddr);
 int (*cache)(const struct neighbour *neigh, struct hh_cache *hh, __be16 type);
 void (*cache_update)(struct hh_cache *hh,
    const struct net_device *dev,
    const unsigned char *haddr);
 bool (*validate)(const char *ll_header, unsigned int len);
};






enum netdev_state_t {
 __LINK_STATE_START,
 __LINK_STATE_PRESENT,
 __LINK_STATE_NOCARRIER,
 __LINK_STATE_LINKWATCH_PENDING,
 __LINK_STATE_DORMANT,
};






struct netdev_boot_setup {
 char name[16];
 struct ifmap map;
};


int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) netdev_boot_setup(char *str);




struct napi_struct {






 struct list_head poll_list;

 unsigned long state;
 int weight;
 unsigned int gro_count;
 int (*poll)(struct napi_struct *, int);

 spinlock_t poll_lock;
 int poll_owner;

 struct net_device *dev;
 struct sk_buff *gro_list;
 struct sk_buff *skb;
 struct hrtimer timer;
 struct list_head dev_list;
 struct hlist_node napi_hash_node;
 unsigned int napi_id;
};

enum {
 NAPI_STATE_SCHED,
 NAPI_STATE_DISABLE,
 NAPI_STATE_NPSVC,
 NAPI_STATE_HASHED,
 NAPI_STATE_NO_BUSY_POLL,
};

enum gro_result {
 GRO_MERGED,
 GRO_MERGED_FREE,
 GRO_HELD,
 GRO_NORMAL,
 GRO_DROP,
};
typedef enum gro_result gro_result_t;
# 386 "include/linux/netdevice.h"
enum rx_handler_result {
 RX_HANDLER_CONSUMED,
 RX_HANDLER_ANOTHER,
 RX_HANDLER_EXACT,
 RX_HANDLER_PASS,
};
typedef enum rx_handler_result rx_handler_result_t;
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **pskb);

void __napi_schedule(struct napi_struct *n);
void __napi_schedule_irqoff(struct napi_struct *n);

static inline __attribute__((no_instrument_function)) bool napi_disable_pending(struct napi_struct *n)
{
 return (__builtin_constant_p((NAPI_STATE_DISABLE)) ? constant_test_bit((NAPI_STATE_DISABLE), (&n->state)) : variable_test_bit((NAPI_STATE_DISABLE), (&n->state)));
}
# 412 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) bool napi_schedule_prep(struct napi_struct *n)
{
 return !napi_disable_pending(n) &&
  !test_and_set_bit(NAPI_STATE_SCHED, &n->state);
}
# 425 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void napi_schedule(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule(n);
}







static inline __attribute__((no_instrument_function)) void napi_schedule_irqoff(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule_irqoff(n);
}


static inline __attribute__((no_instrument_function)) bool napi_reschedule(struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __napi_schedule(napi);
  return true;
 }
 return false;
}

void __napi_complete(struct napi_struct *n);
void napi_complete_done(struct napi_struct *n, int work_done);







static inline __attribute__((no_instrument_function)) void napi_complete(struct napi_struct *n)
{
 return napi_complete_done(n, 0);
}
# 476 "include/linux/netdevice.h"
void napi_hash_add(struct napi_struct *napi);
# 490 "include/linux/netdevice.h"
bool napi_hash_del(struct napi_struct *napi);
# 499 "include/linux/netdevice.h"
void napi_disable(struct napi_struct *n);
# 508 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void napi_enable(struct napi_struct *n)
{
 do { if (__builtin_expect(!!(!(__builtin_constant_p((NAPI_STATE_SCHED)) ? constant_test_bit((NAPI_STATE_SCHED), (&n->state)) : variable_test_bit((NAPI_STATE_SCHED), (&n->state)))), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/netdevice.h"), "i" (510), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 clear_bit(NAPI_STATE_SCHED, &n->state);
 clear_bit(NAPI_STATE_NPSVC, &n->state);
}
# 524 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void napi_synchronize(const struct napi_struct *n)
{
 if ((1 || 0))
  while ((__builtin_constant_p((NAPI_STATE_SCHED)) ? constant_test_bit((NAPI_STATE_SCHED), (&n->state)) : variable_test_bit((NAPI_STATE_SCHED), (&n->state))))
   msleep(1);
 else
  __asm__ __volatile__("": : :"memory");
}

enum netdev_queue_state_t {
 __QUEUE_STATE_DRV_XOFF,
 __QUEUE_STATE_STACK_XOFF,
 __QUEUE_STATE_FROZEN,
};
# 559 "include/linux/netdevice.h"
struct netdev_queue {



 struct net_device *dev;
 struct Qdisc *qdisc;
 struct Qdisc *qdisc_sleeping;

 struct kobject kobj;


 int numa_node;

 unsigned long tx_maxrate;




 unsigned long trans_timeout;



 spinlock_t _xmit_lock __attribute__((__aligned__((1 << (6)))));
 int xmit_lock_owner;



 unsigned long trans_start;

 unsigned long state;


 struct dql dql;

} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((no_instrument_function)) int netdev_queue_numa_node_read(const struct netdev_queue *q)
{

 return q->numa_node;



}

static inline __attribute__((no_instrument_function)) void netdev_queue_numa_node_write(struct netdev_queue *q, int node)
{

 q->numa_node = node;

}






struct rps_map {
 unsigned int len;
 struct callback_head rcu;
 u16 cpus[0];
};







struct rps_dev_flow {
 u16 cpu;
 u16 filter;
 unsigned int last_qtail;
};





struct rps_dev_flow_table {
 unsigned int mask;
 struct callback_head rcu;
 struct rps_dev_flow flows[0];
};
# 656 "include/linux/netdevice.h"
struct rps_sock_flow_table {
 u32 mask;

 u32 ents[0] __attribute__((__aligned__((1 << (6)))));
};




extern u32 rps_cpu_mask;
extern struct rps_sock_flow_table *rps_sock_flow_table;

static inline __attribute__((no_instrument_function)) void rps_record_sock_flow(struct rps_sock_flow_table *table,
     u32 hash)
{
 if (table && hash) {
  unsigned int index = hash & table->mask;
  u32 val = hash & ~rps_cpu_mask;


  val |= (({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }));

  if (table->ents[index] != val)
   table->ents[index] = val;
 }
}


bool rps_may_expire_flow(struct net_device *dev, u16 rxq_index, u32 flow_id,
    u16 filter_id);




struct netdev_rx_queue {

 struct rps_map *rps_map;
 struct rps_dev_flow_table *rps_flow_table;

 struct kobject kobj;
 struct net_device *dev;
} __attribute__((__aligned__((1 << (6)))));




struct rx_queue_attribute {
 struct attribute attr;
 ssize_t (*show)(struct netdev_rx_queue *queue,
     struct rx_queue_attribute *attr, char *buf);
 ssize_t (*store)(struct netdev_rx_queue *queue,
     struct rx_queue_attribute *attr, const char *buf, size_t len);
};






struct xps_map {
 unsigned int len;
 unsigned int alloc_len;
 struct callback_head rcu;
 u16 queues[0];
};







struct xps_dev_maps {
 struct callback_head rcu;
 struct xps_map *cpu_map[0];
};







struct netdev_tc_txq {
 u16 count;
 u16 offset;
};
# 766 "include/linux/netdevice.h"
struct netdev_phys_item_id {
 unsigned char id[32];
 unsigned char id_len;
};

static inline __attribute__((no_instrument_function)) bool netdev_phys_item_id_same(struct netdev_phys_item_id *a,
         struct netdev_phys_item_id *b)
{
 return a->id_len == b->id_len &&
        memcmp(a->id, b->id, a->id_len) == 0;
}

typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
           struct sk_buff *skb);




enum {
 TC_SETUP_MQPRIO,
 TC_SETUP_CLSU32,
 TC_SETUP_CLSFLOWER,
};

struct tc_cls_u32_offload;

struct tc_to_netdev {
 unsigned int type;
 union {
  u8 tc;
  struct tc_cls_u32_offload *cls_u32;
  struct tc_cls_flower_offload *cls_flower;
 };
};
# 1104 "include/linux/netdevice.h"
struct net_device_ops {
 int (*ndo_init)(struct net_device *dev);
 void (*ndo_uninit)(struct net_device *dev);
 int (*ndo_open)(struct net_device *dev);
 int (*ndo_stop)(struct net_device *dev);
 netdev_tx_t (*ndo_start_xmit)(struct sk_buff *skb,
        struct net_device *dev);
 netdev_features_t (*ndo_features_check)(struct sk_buff *skb,
            struct net_device *dev,
            netdev_features_t features);
 u16 (*ndo_select_queue)(struct net_device *dev,
          struct sk_buff *skb,
          void *accel_priv,
          select_queue_fallback_t fallback);
 void (*ndo_change_rx_flags)(struct net_device *dev,
             int flags);
 void (*ndo_set_rx_mode)(struct net_device *dev);
 int (*ndo_set_mac_address)(struct net_device *dev,
             void *addr);
 int (*ndo_validate_addr)(struct net_device *dev);
 int (*ndo_do_ioctl)(struct net_device *dev,
             struct ifreq *ifr, int cmd);
 int (*ndo_set_config)(struct net_device *dev,
               struct ifmap *map);
 int (*ndo_change_mtu)(struct net_device *dev,
        int new_mtu);
 int (*ndo_neigh_setup)(struct net_device *dev,
         struct neigh_parms *);
 void (*ndo_tx_timeout) (struct net_device *dev);

 struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,
           struct rtnl_link_stats64 *storage);
 struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);

 int (*ndo_vlan_rx_add_vid)(struct net_device *dev,
             __be16 proto, u16 vid);
 int (*ndo_vlan_rx_kill_vid)(struct net_device *dev,
              __be16 proto, u16 vid);

 void (*ndo_poll_controller)(struct net_device *dev);
 int (*ndo_netpoll_setup)(struct net_device *dev,
           struct netpoll_info *info);
 void (*ndo_netpoll_cleanup)(struct net_device *dev);


 int (*ndo_busy_poll)(struct napi_struct *dev);

 int (*ndo_set_vf_mac)(struct net_device *dev,
        int queue, u8 *mac);
 int (*ndo_set_vf_vlan)(struct net_device *dev,
         int queue, u16 vlan, u8 qos);
 int (*ndo_set_vf_rate)(struct net_device *dev,
         int vf, int min_tx_rate,
         int max_tx_rate);
 int (*ndo_set_vf_spoofchk)(struct net_device *dev,
             int vf, bool setting);
 int (*ndo_set_vf_trust)(struct net_device *dev,
          int vf, bool setting);
 int (*ndo_get_vf_config)(struct net_device *dev,
           int vf,
           struct ifla_vf_info *ivf);
 int (*ndo_set_vf_link_state)(struct net_device *dev,
        int vf, int link_state);
 int (*ndo_get_vf_stats)(struct net_device *dev,
          int vf,
          struct ifla_vf_stats
          *vf_stats);
 int (*ndo_set_vf_port)(struct net_device *dev,
         int vf,
         struct nlattr *port[]);
 int (*ndo_get_vf_port)(struct net_device *dev,
         int vf, struct sk_buff *skb);
 int (*ndo_set_vf_guid)(struct net_device *dev,
         int vf, u64 guid,
         int guid_type);
 int (*ndo_set_vf_rss_query_en)(
         struct net_device *dev,
         int vf, bool setting);
 int (*ndo_setup_tc)(struct net_device *dev,
      u32 handle,
      __be16 protocol,
      struct tc_to_netdev *tc);
# 1211 "include/linux/netdevice.h"
 int (*ndo_rx_flow_steer)(struct net_device *dev,
           const struct sk_buff *skb,
           u16 rxq_index,
           u32 flow_id);

 int (*ndo_add_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 int (*ndo_del_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 netdev_features_t (*ndo_fix_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_set_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_neigh_construct)(struct neighbour *n);
 void (*ndo_neigh_destroy)(struct neighbour *n);

 int (*ndo_fdb_add)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid,
            u16 flags);
 int (*ndo_fdb_del)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid);
 int (*ndo_fdb_dump)(struct sk_buff *skb,
      struct netlink_callback *cb,
      struct net_device *dev,
      struct net_device *filter_dev,
      int idx);

 int (*ndo_bridge_setlink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags);
 int (*ndo_bridge_getlink)(struct sk_buff *skb,
            u32 pid, u32 seq,
            struct net_device *dev,
            u32 filter_mask,
            int nlflags);
 int (*ndo_bridge_dellink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags);
 int (*ndo_change_carrier)(struct net_device *dev,
            bool new_carrier);
 int (*ndo_get_phys_port_id)(struct net_device *dev,
       struct netdev_phys_item_id *ppid);
 int (*ndo_get_phys_port_name)(struct net_device *dev,
         char *name, size_t len);
 void (*ndo_add_vxlan_port)(struct net_device *dev,
            sa_family_t sa_family,
            __be16 port);
 void (*ndo_del_vxlan_port)(struct net_device *dev,
            sa_family_t sa_family,
            __be16 port);
 void (*ndo_add_geneve_port)(struct net_device *dev,
             sa_family_t sa_family,
             __be16 port);
 void (*ndo_del_geneve_port)(struct net_device *dev,
             sa_family_t sa_family,
             __be16 port);
 void* (*ndo_dfwd_add_station)(struct net_device *pdev,
       struct net_device *dev);
 void (*ndo_dfwd_del_station)(struct net_device *pdev,
       void *priv);

 netdev_tx_t (*ndo_dfwd_start_xmit) (struct sk_buff *skb,
       struct net_device *dev,
       void *priv);
 int (*ndo_get_lock_subclass)(struct net_device *dev);
 int (*ndo_set_tx_maxrate)(struct net_device *dev,
            int queue_index,
            u32 maxrate);
 int (*ndo_get_iflink)(const struct net_device *dev);
 int (*ndo_change_proto_down)(struct net_device *dev,
        bool proto_down);
 int (*ndo_fill_metadata_dst)(struct net_device *dev,
             struct sk_buff *skb);
 void (*ndo_set_rx_headroom)(struct net_device *dev,
             int needed_headroom);
};
# 1337 "include/linux/netdevice.h"
enum netdev_priv_flags {
 IFF_802_1Q_VLAN = 1<<0,
 IFF_EBRIDGE = 1<<1,
 IFF_BONDING = 1<<2,
 IFF_ISATAP = 1<<3,
 IFF_WAN_HDLC = 1<<4,
 IFF_XMIT_DST_RELEASE = 1<<5,
 IFF_DONT_BRIDGE = 1<<6,
 IFF_DISABLE_NETPOLL = 1<<7,
 IFF_MACVLAN_PORT = 1<<8,
 IFF_BRIDGE_PORT = 1<<9,
 IFF_OVS_DATAPATH = 1<<10,
 IFF_TX_SKB_SHARING = 1<<11,
 IFF_UNICAST_FLT = 1<<12,
 IFF_TEAM_PORT = 1<<13,
 IFF_SUPP_NOFCS = 1<<14,
 IFF_LIVE_ADDR_CHANGE = 1<<15,
 IFF_MACVLAN = 1<<16,
 IFF_XMIT_DST_RELEASE_PERM = 1<<17,
 IFF_IPVLAN_MASTER = 1<<18,
 IFF_IPVLAN_SLAVE = 1<<19,
 IFF_L3MDEV_MASTER = 1<<20,
 IFF_NO_QUEUE = 1<<21,
 IFF_OPENVSWITCH = 1<<22,
 IFF_L3MDEV_SLAVE = 1<<23,
 IFF_TEAM = 1<<24,
 IFF_RXFH_CONFIGURED = 1<<25,
 IFF_PHONY_HEADROOM = 1<<26,
 IFF_MACSEC = 1<<27,
};
# 1607 "include/linux/netdevice.h"
struct net_device {
 char name[16];
 struct hlist_node name_hlist;
 char *ifalias;




 unsigned long mem_end;
 unsigned long mem_start;
 unsigned long base_addr;
 int irq;

 atomic_t carrier_changes;







 unsigned long state;

 struct list_head dev_list;
 struct list_head napi_list;
 struct list_head unreg_list;
 struct list_head close_list;
 struct list_head ptype_all;
 struct list_head ptype_specific;

 struct {
  struct list_head upper;
  struct list_head lower;
 } adj_list;

 struct {
  struct list_head upper;
  struct list_head lower;
 } all_adj_list;

 netdev_features_t features;
 netdev_features_t hw_features;
 netdev_features_t wanted_features;
 netdev_features_t vlan_features;
 netdev_features_t hw_enc_features;
 netdev_features_t mpls_features;
 netdev_features_t gso_partial_features;

 int ifindex;
 int group;

 struct net_device_stats stats;

 atomic_long_t rx_dropped;
 atomic_long_t tx_dropped;
 atomic_long_t rx_nohandler;





 const struct net_device_ops *netdev_ops;
 const struct ethtool_ops *ethtool_ops;







 const struct header_ops *header_ops;

 unsigned int flags;
 unsigned int priv_flags;

 unsigned short gflags;
 unsigned short padded;

 unsigned char operstate;
 unsigned char link_mode;

 unsigned char if_port;
 unsigned char dma;

 unsigned int mtu;
 unsigned short type;
 unsigned short hard_header_len;

 unsigned short needed_headroom;
 unsigned short needed_tailroom;


 unsigned char perm_addr[32];
 unsigned char addr_assign_type;
 unsigned char addr_len;
 unsigned short neigh_priv_len;
 unsigned short dev_id;
 unsigned short dev_port;
 spinlock_t addr_list_lock;
 unsigned char name_assign_type;
 bool uc_promisc;
 struct netdev_hw_addr_list uc;
 struct netdev_hw_addr_list mc;
 struct netdev_hw_addr_list dev_addrs;


 struct kset *queues_kset;

 unsigned int promiscuity;
 unsigned int allmulti;
# 1730 "include/linux/netdevice.h"
 void *atalk_ptr;
 struct in_device *ip_ptr;
 struct dn_dev *dn_ptr;
 struct inet6_dev *ip6_ptr;
 void *ax25_ptr;
 struct wireless_dev *ieee80211_ptr;
 struct wpan_dev *ieee802154_ptr;







 unsigned long last_rx;


 unsigned char *dev_addr;


 struct netdev_rx_queue *_rx;

 unsigned int num_rx_queues;
 unsigned int real_num_rx_queues;


 unsigned long gro_flush_timeout;
 rx_handler_func_t *rx_handler;
 void *rx_handler_data;


 struct tcf_proto *ingress_cl_list;

 struct netdev_queue *ingress_queue;

 struct list_head nf_hooks_ingress;


 unsigned char broadcast[32];

 struct cpu_rmap *rx_cpu_rmap;

 struct hlist_node index_hlist;




 struct netdev_queue *_tx __attribute__((__aligned__((1 << (6)))));
 unsigned int num_tx_queues;
 unsigned int real_num_tx_queues;
 struct Qdisc *qdisc;
 unsigned long tx_queue_len;
 spinlock_t tx_global_lock;
 int watchdog_timeo;


 struct xps_dev_maps *xps_maps;


 struct tcf_proto *egress_cl_list;






 struct timer_list watchdog_timer;

 int *pcpu_refcnt;
 struct list_head todo_list;

 struct list_head link_watch_list;

 enum { NETREG_UNINITIALIZED=0,
        NETREG_REGISTERED,
        NETREG_UNREGISTERING,
        NETREG_UNREGISTERED,
        NETREG_RELEASED,
        NETREG_DUMMY,
 } reg_state:8;

 bool dismantle;

 enum {
  RTNL_LINK_INITIALIZED,
  RTNL_LINK_INITIALIZING,
 } rtnl_link_state:16;

 void (*destructor)(struct net_device *dev);


 struct netpoll_info *npinfo;


 possible_net_t nd_net;


 union {
  void *ml_priv;
  struct pcpu_lstats *lstats;
  struct pcpu_sw_netstats *tstats;
  struct pcpu_dstats *dstats;
  struct pcpu_vstats *vstats;
 };

 struct garp_port *garp_port;
 struct mrp_port *mrp_port;

 struct device dev;
 const struct attribute_group *sysfs_groups[4];
 const struct attribute_group *sysfs_rx_queue_group;

 const struct rtnl_link_ops *rtnl_link_ops;



 unsigned int gso_max_size;

 u16 gso_max_segs;




 u8 num_tc;
 struct netdev_tc_txq tc_to_txq[16];
 u8 prio_tc_map[15 + 1];







 struct phy_device *phydev;
 struct lock_class_key *qdisc_tx_busylock;
 bool proto_down;
};




static inline __attribute__((no_instrument_function))
int netdev_get_prio_tc_map(const struct net_device *dev, u32 prio)
{
 return dev->prio_tc_map[prio & 15];
}

static inline __attribute__((no_instrument_function))
int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
 if (tc >= dev->num_tc)
  return -22;

 dev->prio_tc_map[prio & 15] = tc & 15;
 return 0;
}

static inline __attribute__((no_instrument_function))
void netdev_reset_tc(struct net_device *dev)
{
 dev->num_tc = 0;
 memset(dev->tc_to_txq, 0, sizeof(dev->tc_to_txq));
 memset(dev->prio_tc_map, 0, sizeof(dev->prio_tc_map));
}

static inline __attribute__((no_instrument_function))
int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset)
{
 if (tc >= dev->num_tc)
  return -22;

 dev->tc_to_txq[tc].count = count;
 dev->tc_to_txq[tc].offset = offset;
 return 0;
}

static inline __attribute__((no_instrument_function))
int netdev_set_num_tc(struct net_device *dev, u8 num_tc)
{
 if (num_tc > 16)
  return -22;

 dev->num_tc = num_tc;
 return 0;
}

static inline __attribute__((no_instrument_function))
int netdev_get_num_tc(struct net_device *dev)
{
 return dev->num_tc;
}

static inline __attribute__((no_instrument_function))
struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,
      unsigned int index)
{
 return &dev->_tx[index];
}

static inline __attribute__((no_instrument_function)) struct netdev_queue *skb_get_tx_queue(const struct net_device *dev,
          const struct sk_buff *skb)
{
 return netdev_get_tx_queue(dev, skb_get_queue_mapping(skb));
}

static inline __attribute__((no_instrument_function)) void netdev_for_each_tx_queue(struct net_device *dev,
         void (*f)(struct net_device *,
            struct netdev_queue *,
            void *),
         void *arg)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  f(dev, &dev->_tx[i], arg);
}

struct netdev_queue *netdev_pick_tx(struct net_device *dev,
        struct sk_buff *skb,
        void *accel_priv);




static inline __attribute__((no_instrument_function)) unsigned netdev_get_fwd_headroom(struct net_device *dev)
{
 return dev->priv_flags & IFF_PHONY_HEADROOM ? 0 : dev->needed_headroom;
}

static inline __attribute__((no_instrument_function)) void netdev_set_rx_headroom(struct net_device *dev, int new_hr)
{
 if (dev->netdev_ops->ndo_set_rx_headroom)
  dev->netdev_ops->ndo_set_rx_headroom(dev, new_hr);
}


static inline __attribute__((no_instrument_function)) void netdev_reset_rx_headroom(struct net_device *dev)
{
 netdev_set_rx_headroom(dev, -1);
}




static inline __attribute__((no_instrument_function))
struct net *dev_net(const struct net_device *dev)
{
 return read_pnet(&dev->nd_net);
}

static inline __attribute__((no_instrument_function))
void dev_net_set(struct net_device *dev, struct net *net)
{
 write_pnet(&dev->nd_net, net);
}

static inline __attribute__((no_instrument_function)) bool netdev_uses_dsa(struct net_device *dev)
{




 return false;
}







static inline __attribute__((no_instrument_function)) void *netdev_priv(const struct net_device *dev)
{
 return (char *)dev + ((((sizeof(struct net_device))) + ((typeof((sizeof(struct net_device))))((32)) - 1)) & ~((typeof((sizeof(struct net_device))))((32)) - 1));
}
# 2032 "include/linux/netdevice.h"
void netif_napi_add(struct net_device *dev, struct napi_struct *napi,
      int (*poll)(struct napi_struct *, int), int weight);
# 2046 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_tx_napi_add(struct net_device *dev,
         struct napi_struct *napi,
         int (*poll)(struct napi_struct *, int),
         int weight)
{
 set_bit(NAPI_STATE_NO_BUSY_POLL, &napi->state);
 netif_napi_add(dev, napi, poll, weight);
}







void netif_napi_del(struct napi_struct *napi);

struct napi_gro_cb {

 void *frag0;


 unsigned int frag0_len;


 int data_offset;


 u16 flush;


 u16 flush_id;


 u16 count;


 u16 gro_remcsum_start;


 unsigned long age;


 u16 proto;


 u8 same_flow:1;


 u8 encap_mark:1;


 u8 csum_valid:1;


 u8 csum_cnt:3;


 u8 free:2;




 u8 is_ipv6:1;


 u8 is_fou:1;


 u8 is_atomic:1;




 __wsum csum;


 struct sk_buff *last;
};



struct packet_type {
 __be16 type;
 struct net_device *dev;
 int (*func) (struct sk_buff *,
      struct net_device *,
      struct packet_type *,
      struct net_device *);
 bool (*id_match)(struct packet_type *ptype,
         struct sock *sk);
 void *af_packet_priv;
 struct list_head list;
};

struct offload_callbacks {
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
      netdev_features_t features);
 struct sk_buff **(*gro_receive)(struct sk_buff **head,
       struct sk_buff *skb);
 int (*gro_complete)(struct sk_buff *skb, int nhoff);
};

struct packet_offload {
 __be16 type;
 u16 priority;
 struct offload_callbacks callbacks;
 struct list_head list;
};


struct pcpu_sw_netstats {
 u64 rx_packets;
 u64 rx_bytes;
 u64 tx_packets;
 u64 tx_bytes;
 struct u64_stats_sync syncp;
};
# 2182 "include/linux/netdevice.h"
enum netdev_lag_tx_type {
 NETDEV_LAG_TX_TYPE_UNKNOWN,
 NETDEV_LAG_TX_TYPE_RANDOM,
 NETDEV_LAG_TX_TYPE_BROADCAST,
 NETDEV_LAG_TX_TYPE_ROUNDROBIN,
 NETDEV_LAG_TX_TYPE_ACTIVEBACKUP,
 NETDEV_LAG_TX_TYPE_HASH,
};

struct netdev_lag_upper_info {
 enum netdev_lag_tx_type tx_type;
};

struct netdev_lag_lower_state_info {
 u8 link_up : 1,
    tx_enabled : 1;
};
# 2239 "include/linux/netdevice.h"
int register_netdevice_notifier(struct notifier_block *nb);
int unregister_netdevice_notifier(struct notifier_block *nb);

struct netdev_notifier_info {
 struct net_device *dev;
};

struct netdev_notifier_change_info {
 struct netdev_notifier_info info;
 unsigned int flags_changed;
};

struct netdev_notifier_changeupper_info {
 struct netdev_notifier_info info;
 struct net_device *upper_dev;
 bool master;
 bool linking;
 void *upper_info;
};

struct netdev_notifier_changelowerstate_info {
 struct netdev_notifier_info info;
 void *lower_state_info;
};

static inline __attribute__((no_instrument_function)) void netdev_notifier_info_init(struct netdev_notifier_info *info,
          struct net_device *dev)
{
 info->dev = dev;
}

static inline __attribute__((no_instrument_function)) struct net_device *
netdev_notifier_info_to_dev(const struct netdev_notifier_info *info)
{
 return info->dev;
}

int call_netdevice_notifiers(unsigned long val, struct net_device *dev);


extern rwlock_t dev_base_lock;
# 2298 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) struct net_device *next_net_device(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = dev->dev_list.next;
 return lh == &net->dev_base_head ? ((void *)0) : ({ const typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - __builtin_offsetof(struct net_device, dev_list) );});
}

static inline __attribute__((no_instrument_function)) struct net_device *next_net_device_rcu(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = ({ typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)({ typeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) _________p1 = ({ union { typeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) __val; char __c[1]; } __u; if (1) __read_once_size(&(((*((struct list_head **)(&(&dev->dev_list)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&dev->dev_list)->next)))))); else __read_once_size_nocheck(&(((*((struct list_head **)(&(&dev->dev_list)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&dev->dev_list)->next)))))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)(________p1)); });
 return lh == &net->dev_base_head ? ((void *)0) : ({ const typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - __builtin_offsetof(struct net_device, dev_list) );});
}

static inline __attribute__((no_instrument_function)) struct net_device *first_net_device(struct net *net)
{
 return list_empty(&net->dev_base_head) ? ((void *)0) :
  ({ const typeof( ((struct net_device *)0)->dev_list ) *__mptr = (net->dev_base_head.next); (struct net_device *)( (char *)__mptr - __builtin_offsetof(struct net_device, dev_list) );});
}

static inline __attribute__((no_instrument_function)) struct net_device *first_net_device_rcu(struct net *net)
{
 struct list_head *lh = ({ typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)({ typeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) _________p1 = ({ union { typeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) __val; char __c[1]; } __u; if (1) __read_once_size(&(((*((struct list_head **)(&(&net->dev_base_head)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next)))))); else __read_once_size_nocheck(&(((*((struct list_head **)(&(&net->dev_base_head)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next)))))); __u.__val; }); do { } while (0); (_________p1); }); do { } while (0); ; ((typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)(________p1)); });

 return lh == &net->dev_base_head ? ((void *)0) : ({ const typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - __builtin_offsetof(struct net_device, dev_list) );});
}

int netdev_boot_setup_check(struct net_device *dev);
unsigned long netdev_boot_base(const char *prefix, int unit);
struct net_device *dev_getbyhwaddr_rcu(struct net *net, unsigned short type,
           const char *hwaddr);
struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type);
struct net_device *__dev_getfirstbyhwtype(struct net *net, unsigned short type);
void dev_add_pack(struct packet_type *pt);
void dev_remove_pack(struct packet_type *pt);
void __dev_remove_pack(struct packet_type *pt);
void dev_add_offload(struct packet_offload *po);
void dev_remove_offload(struct packet_offload *po);

int dev_get_iflink(const struct net_device *dev);
int dev_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb);
struct net_device *__dev_get_by_flags(struct net *net, unsigned short flags,
          unsigned short mask);
struct net_device *dev_get_by_name(struct net *net, const char *name);
struct net_device *dev_get_by_name_rcu(struct net *net, const char *name);
struct net_device *__dev_get_by_name(struct net *net, const char *name);
int dev_alloc_name(struct net_device *dev, const char *name);
int dev_open(struct net_device *dev);
int dev_close(struct net_device *dev);
int dev_close_many(struct list_head *head, bool unlink);
void dev_disable_lro(struct net_device *dev);
int dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *newskb);
int dev_queue_xmit(struct sk_buff *skb);
int dev_queue_xmit_accel(struct sk_buff *skb, void *accel_priv);
int register_netdevice(struct net_device *dev);
void unregister_netdevice_queue(struct net_device *dev, struct list_head *head);
void unregister_netdevice_many(struct list_head *head);
static inline __attribute__((no_instrument_function)) void unregister_netdevice(struct net_device *dev)
{
 unregister_netdevice_queue(dev, ((void *)0));
}

int netdev_refcnt_read(const struct net_device *dev);
void free_netdev(struct net_device *dev);
void netdev_freemem(struct net_device *dev);
void synchronize_net(void);
int init_dummy_netdev(struct net_device *dev);

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) xmit_recursion;
static inline __attribute__((no_instrument_function)) int dev_recursion_level(void)
{
 return ({ typeof(xmit_recursion) pscr_ret__; do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(xmit_recursion)) { case 1: pscr_ret__ = ({ typeof(xmit_recursion) pfo_ret__; switch (sizeof(xmit_recursion)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (xmit_recursion)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(xmit_recursion) pfo_ret__; switch (sizeof(xmit_recursion)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (xmit_recursion)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(xmit_recursion) pfo_ret__; switch (sizeof(xmit_recursion)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (xmit_recursion)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(xmit_recursion) pfo_ret__; switch (sizeof(xmit_recursion)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (xmit_recursion)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (xmit_recursion)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}

struct net_device *dev_get_by_index(struct net *net, int ifindex);
struct net_device *__dev_get_by_index(struct net *net, int ifindex);
struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex);
int netdev_get_name(struct net *net, char *name, int ifindex);
int dev_restart(struct net_device *dev);
int skb_gro_receive(struct sk_buff **head, struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) unsigned int skb_gro_offset(const struct sk_buff *skb)
{
 return ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((no_instrument_function)) unsigned int skb_gro_len(const struct sk_buff *skb)
{
 return skb->len - ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((no_instrument_function)) void skb_gro_pull(struct sk_buff *skb, unsigned int len)
{
 ((struct napi_gro_cb *)(skb)->cb)->data_offset += len;
}

static inline __attribute__((no_instrument_function)) void *skb_gro_header_fast(struct sk_buff *skb,
     unsigned int offset)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0 + offset;
}

static inline __attribute__((no_instrument_function)) int skb_gro_header_hard(struct sk_buff *skb, unsigned int hlen)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0_len < hlen;
}

static inline __attribute__((no_instrument_function)) void *skb_gro_header_slow(struct sk_buff *skb, unsigned int hlen,
     unsigned int offset)
{
 if (!pskb_may_pull(skb, hlen))
  return ((void *)0);

 ((struct napi_gro_cb *)(skb)->cb)->frag0 = ((void *)0);
 ((struct napi_gro_cb *)(skb)->cb)->frag0_len = 0;
 return skb->data + offset;
}

static inline __attribute__((no_instrument_function)) void *skb_gro_network_header(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->frag0 ?: skb->data) +
        skb_network_offset(skb);
}

static inline __attribute__((no_instrument_function)) void skb_gro_postpull_rcsum(struct sk_buff *skb,
     const void *start, unsigned int len)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid)
  ((struct napi_gro_cb *)(skb)->cb)->csum = csum_sub(((struct napi_gro_cb *)(skb)->cb)->csum,
        csum_partial(start, len, 0));
}






__sum16 __skb_gro_checksum_complete(struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) bool skb_at_gro_remcsum_start(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start == skb_gro_offset(skb));
}

static inline __attribute__((no_instrument_function)) bool __skb_gro_checksum_validate_needed(struct sk_buff *skb,
            bool zero_okay,
            __sum16 check)
{
 return ((skb->ip_summed != 3 ||
  skb_checksum_start_offset(skb) <
   skb_gro_offset(skb)) &&
  !skb_at_gro_remcsum_start(skb) &&
  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  (!zero_okay || check));
}

static inline __attribute__((no_instrument_function)) __sum16 __skb_gro_checksum_validate_complete(struct sk_buff *skb,
          __wsum psum)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid &&
     !csum_fold(csum_add(psum, ((struct napi_gro_cb *)(skb)->cb)->csum)))
  return 0;

 ((struct napi_gro_cb *)(skb)->cb)->csum = psum;

 return __skb_gro_checksum_complete(skb);
}

static inline __attribute__((no_instrument_function)) void skb_gro_incr_csum_unnecessary(struct sk_buff *skb)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_cnt > 0) {

  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt--;
 } else {




  __skb_incr_checksum_unnecessary(skb);
 }
}
# 2510 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) bool __skb_gro_checksum_convert_check(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  !((struct napi_gro_cb *)(skb)->cb)->csum_valid);
}

static inline __attribute__((no_instrument_function)) void __skb_gro_checksum_convert(struct sk_buff *skb,
           __sum16 check, __wsum pseudo)
{
 ((struct napi_gro_cb *)(skb)->cb)->csum = ~pseudo;
 ((struct napi_gro_cb *)(skb)->cb)->csum_valid = 1;
}
# 2530 "include/linux/netdevice.h"
struct gro_remcsum {
 int offset;
 __wsum delta;
};

static inline __attribute__((no_instrument_function)) void skb_gro_remcsum_init(struct gro_remcsum *grc)
{
 grc->offset = 0;
 grc->delta = 0;
}

static inline __attribute__((no_instrument_function)) void *skb_gro_remcsum_process(struct sk_buff *skb, void *ptr,
         unsigned int off, size_t hdrlen,
         int start, int offset,
         struct gro_remcsum *grc,
         bool nopartial)
{
 __wsum delta;
 size_t plen = hdrlen + ({ size_t __max1 = (offset + sizeof(u16)); size_t __max2 = (start); __max1 > __max2 ? __max1: __max2; });

 do { if (__builtin_expect(!!(!((struct napi_gro_cb *)(skb)->cb)->csum_valid), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/netdevice.h"), "i" (2550), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);

 if (!nopartial) {
  ((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start = off + hdrlen + start;
  return ptr;
 }

 ptr = skb_gro_header_fast(skb, off);
 if (skb_gro_header_hard(skb, off + plen)) {
  ptr = skb_gro_header_slow(skb, off + plen, off);
  if (!ptr)
   return ((void *)0);
 }

 delta = remcsum_adjust(ptr + hdrlen, ((struct napi_gro_cb *)(skb)->cb)->csum,
          start, offset);


 ((struct napi_gro_cb *)(skb)->cb)->csum = csum_add(((struct napi_gro_cb *)(skb)->cb)->csum, delta);

 grc->offset = off + hdrlen + offset;
 grc->delta = delta;

 return ptr;
}

static inline __attribute__((no_instrument_function)) void skb_gro_remcsum_cleanup(struct sk_buff *skb,
        struct gro_remcsum *grc)
{
 void *ptr;
 size_t plen = grc->offset + sizeof(u16);

 if (!grc->delta)
  return;

 ptr = skb_gro_header_fast(skb, grc->offset);
 if (skb_gro_header_hard(skb, grc->offset + sizeof(u16))) {
  ptr = skb_gro_header_slow(skb, plen, grc->offset);
  if (!ptr)
   return;
 }

 remcsum_unadjust((__sum16 *)ptr, grc->delta);
}

struct skb_csum_offl_spec {
 __u16 ipv4_okay:1,
   ipv6_okay:1,
   encap_okay:1,
   ip_options_okay:1,
   ext_hdrs_okay:1,
   tcp_okay:1,
   udp_okay:1,
   sctp_okay:1,
   vlan_okay:1,
   no_encapped_ipv6:1,
   no_not_encapped:1;
};

bool __skb_csum_offload_chk(struct sk_buff *skb,
       const struct skb_csum_offl_spec *spec,
       bool *csum_encapped,
       bool csum_help);

static inline __attribute__((no_instrument_function)) bool skb_csum_offload_chk(struct sk_buff *skb,
     const struct skb_csum_offl_spec *spec,
     bool *csum_encapped,
     bool csum_help)
{
 if (skb->ip_summed != 3)
  return false;

 return __skb_csum_offload_chk(skb, spec, csum_encapped, csum_help);
}

static inline __attribute__((no_instrument_function)) bool skb_csum_offload_chk_help(struct sk_buff *skb,
          const struct skb_csum_offl_spec *spec)
{
 bool csum_encapped;

 return skb_csum_offload_chk(skb, spec, &csum_encapped, true);
}

static inline __attribute__((no_instrument_function)) bool skb_csum_off_chk_help_cmn(struct sk_buff *skb)
{
 static const struct skb_csum_offl_spec csum_offl_spec = {
  .ipv4_okay = 1,
  .ip_options_okay = 1,
  .ipv6_okay = 1,
  .vlan_okay = 1,
  .tcp_okay = 1,
  .udp_okay = 1,
 };

 return skb_csum_offload_chk_help(skb, &csum_offl_spec);
}

static inline __attribute__((no_instrument_function)) bool skb_csum_off_chk_help_cmn_v4_only(struct sk_buff *skb)
{
 static const struct skb_csum_offl_spec csum_offl_spec = {
  .ipv4_okay = 1,
  .ip_options_okay = 1,
  .tcp_okay = 1,
  .udp_okay = 1,
  .vlan_okay = 1,
 };

 return skb_csum_offload_chk_help(skb, &csum_offl_spec);
}

static inline __attribute__((no_instrument_function)) int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
      unsigned short type,
      const void *daddr, const void *saddr,
      unsigned int len)
{
 if (!dev->header_ops || !dev->header_ops->create)
  return 0;

 return dev->header_ops->create(skb, dev, type, daddr, saddr, len);
}

static inline __attribute__((no_instrument_function)) int dev_parse_header(const struct sk_buff *skb,
       unsigned char *haddr)
{
 const struct net_device *dev = skb->dev;

 if (!dev->header_ops || !dev->header_ops->parse)
  return 0;
 return dev->header_ops->parse(skb, haddr);
}


static inline __attribute__((no_instrument_function)) bool dev_validate_header(const struct net_device *dev,
           char *ll_header, int len)
{
 if (__builtin_expect(!!(len >= dev->hard_header_len), 1))
  return true;

 if (capable(17)) {
  memset(ll_header + len, 0, dev->hard_header_len - len);
  return true;
 }

 if (dev->header_ops && dev->header_ops->validate)
  return dev->header_ops->validate(ll_header, len);

 return false;
}

typedef int gifconf_func_t(struct net_device * dev, char * bufptr, int len);
int register_gifconf(unsigned int family, gifconf_func_t *gifconf);
static inline __attribute__((no_instrument_function)) int unregister_gifconf(unsigned int family)
{
 return register_gifconf(family, ((void *)0));
}



struct sd_flow_limit {
 u64 count;
 unsigned int num_buckets;
 unsigned int history_head;
 u16 history[(1 << 7)];
 u8 buckets[];
};

extern int netdev_flow_limit_table_len;





struct softnet_data {
 struct list_head poll_list;
 struct sk_buff_head process_queue;


 unsigned int processed;
 unsigned int time_squeeze;
 unsigned int received_rps;

 struct softnet_data *rps_ipi_list;


 struct sd_flow_limit *flow_limit;

 struct Qdisc *output_queue;
 struct Qdisc **output_queue_tailp;
 struct sk_buff *completion_queue;





 unsigned int input_queue_head __attribute__((__aligned__((1 << (6)))));


 struct call_single_data csd __attribute__((__aligned__((1 << (6)))));
 struct softnet_data *rps_ipi_next;
 unsigned int cpu;
 unsigned int input_queue_tail;

 unsigned int dropped;
 struct sk_buff_head input_pkt_queue;
 struct napi_struct backlog;

};

static inline __attribute__((no_instrument_function)) void input_queue_head_incr(struct softnet_data *sd)
{

 sd->input_queue_head++;

}

static inline __attribute__((no_instrument_function)) void input_queue_tail_incr_save(struct softnet_data *sd,
           unsigned int *qtail)
{

 *qtail = ++sd->input_queue_tail;

}

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct softnet_data) softnet_data __attribute__((__aligned__((1 << (6)))));

void __netif_schedule(struct Qdisc *q);
void netif_schedule_queue(struct netdev_queue *txq);

static inline __attribute__((no_instrument_function)) void netif_tx_schedule_all(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  netif_schedule_queue(netdev_get_tx_queue(dev, i));
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
 clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline __attribute__((no_instrument_function)) void netif_start_queue(struct net_device *dev)
{
 netif_tx_start_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((no_instrument_function)) void netif_tx_start_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_start_queue(txq);
 }
}

void netif_tx_wake_queue(struct netdev_queue *dev_queue);
# 2821 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_wake_queue(struct net_device *dev)
{
 netif_tx_wake_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((no_instrument_function)) void netif_tx_wake_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_wake_queue(txq);
 }
}

static inline __attribute__((no_instrument_function)) __attribute__((always_inline)) void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
 set_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}
# 2848 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_stop_queue(struct net_device *dev)
{
 netif_tx_stop_queue(netdev_get_tx_queue(dev, 0));
}

void netif_tx_stop_all_queues(struct net_device *dev);

static inline __attribute__((no_instrument_function)) bool netif_tx_queue_stopped(const struct netdev_queue *dev_queue)
{
 return (__builtin_constant_p((__QUEUE_STATE_DRV_XOFF)) ? constant_test_bit((__QUEUE_STATE_DRV_XOFF), (&dev_queue->state)) : variable_test_bit((__QUEUE_STATE_DRV_XOFF), (&dev_queue->state)));
}







static inline __attribute__((no_instrument_function)) bool netif_queue_stopped(const struct net_device *dev)
{
 return netif_tx_queue_stopped(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((no_instrument_function)) bool netif_xmit_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF));
}

static inline __attribute__((no_instrument_function)) bool
netif_xmit_frozen_or_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & (((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF)) | (1 << __QUEUE_STATE_FROZEN));
}

static inline __attribute__((no_instrument_function)) bool
netif_xmit_frozen_or_drv_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_FROZEN));
}
# 2895 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netdev_txq_bql_enqueue_prefetchw(struct netdev_queue *dev_queue)
{

 prefetchw(&dev_queue->dql.num_queued);

}
# 2909 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netdev_txq_bql_complete_prefetchw(struct netdev_queue *dev_queue)
{

 prefetchw(&dev_queue->dql.limit);

}

static inline __attribute__((no_instrument_function)) void netdev_tx_sent_queue(struct netdev_queue *dev_queue,
     unsigned int bytes)
{

 dql_queued(&dev_queue->dql, bytes);

 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 1))
  return;

 set_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);






 asm volatile("mfence":::"memory");


 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 0))
  clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);

}
# 2949 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
 netdev_tx_sent_queue(netdev_get_tx_queue(dev, 0), bytes);
}

static inline __attribute__((no_instrument_function)) void netdev_tx_completed_queue(struct netdev_queue *dev_queue,
          unsigned int pkts, unsigned int bytes)
{

 if (__builtin_expect(!!(!bytes), 0))
  return;

 dql_completed(&dev_queue->dql, bytes);






 asm volatile("mfence":::"memory");

 if (dql_avail(&dev_queue->dql) < 0)
  return;

 if (test_and_clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state))
  netif_schedule_queue(dev_queue);

}
# 2988 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netdev_completed_queue(struct net_device *dev,
       unsigned int pkts, unsigned int bytes)
{
 netdev_tx_completed_queue(netdev_get_tx_queue(dev, 0), pkts, bytes);
}

static inline __attribute__((no_instrument_function)) void netdev_tx_reset_queue(struct netdev_queue *q)
{

 clear_bit(__QUEUE_STATE_STACK_XOFF, &q->state);
 dql_reset(&q->dql);

}
# 3009 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netdev_reset_queue(struct net_device *dev_queue)
{
 netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue, 0));
}
# 3022 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) u16 netdev_cap_txqueue(struct net_device *dev, u16 queue_index)
{
 if (__builtin_expect(!!(queue_index >= dev->real_num_tx_queues), 0)) {
  do { if (net_ratelimit()) printk("\001" "4" "%s selects TX queue %d, but real number of TX queues is %d\n", dev->name, queue_index, dev->real_num_tx_queues); } while (0)

                                 ;
  return 0;
 }

 return queue_index;
}







static inline __attribute__((no_instrument_function)) bool netif_running(const struct net_device *dev)
{
 return (__builtin_constant_p((__LINK_STATE_START)) ? constant_test_bit((__LINK_STATE_START), (&dev->state)) : variable_test_bit((__LINK_STATE_START), (&dev->state)));
}
# 3059 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_start_queue(txq);
}
# 3073 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
 netif_tx_stop_queue(txq);
}
# 3086 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) bool __netif_subqueue_stopped(const struct net_device *dev,
         u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 return netif_tx_queue_stopped(txq);
}

static inline __attribute__((no_instrument_function)) bool netif_subqueue_stopped(const struct net_device *dev,
       struct sk_buff *skb)
{
 return __netif_subqueue_stopped(dev, skb_get_queue_mapping(skb));
}

void netif_wake_subqueue(struct net_device *dev, u16 queue_index);


int netif_set_xps_queue(struct net_device *dev, const struct cpumask *mask,
   u16 index);
# 3114 "include/linux/netdevice.h"
u16 __skb_tx_hash(const struct net_device *dev, struct sk_buff *skb,
    unsigned int num_tx_queues);





static inline __attribute__((no_instrument_function)) u16 skb_tx_hash(const struct net_device *dev,
         struct sk_buff *skb)
{
 return __skb_tx_hash(dev, skb, dev->real_num_tx_queues);
}







static inline __attribute__((no_instrument_function)) bool netif_is_multiqueue(const struct net_device *dev)
{
 return dev->num_tx_queues > 1;
}

int netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq);


int netif_set_real_num_rx_queues(struct net_device *dev, unsigned int rxq);
# 3151 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) unsigned int get_netdev_rx_queue_index(
  struct netdev_rx_queue *queue)
{
 struct net_device *dev = queue->dev;
 int index = queue - dev->_rx;

 do { if (__builtin_expect(!!(index >= dev->num_rx_queues), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/linux/netdevice.h"), "i" (3157), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return index;
}



int netif_get_num_default_rss_queues(void);

enum skb_free_reason {
 SKB_REASON_CONSUMED,
 SKB_REASON_DROPPED,
};

void __dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason);
void __dev_kfree_skb_any(struct sk_buff *skb, enum skb_free_reason reason);
# 3192 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void dev_kfree_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((no_instrument_function)) void dev_consume_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_CONSUMED);
}

static inline __attribute__((no_instrument_function)) void dev_kfree_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((no_instrument_function)) void dev_consume_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_CONSUMED);
}

int netif_rx(struct sk_buff *skb);
int netif_rx_ni(struct sk_buff *skb);
int netif_receive_skb(struct sk_buff *skb);
gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb);
void napi_gro_flush(struct napi_struct *napi, bool flush_old);
struct sk_buff *napi_get_frags(struct napi_struct *napi);
gro_result_t napi_gro_frags(struct napi_struct *napi);
struct packet_offload *gro_find_receive_by_type(__be16 type);
struct packet_offload *gro_find_complete_by_type(__be16 type);

static inline __attribute__((no_instrument_function)) void napi_free_frags(struct napi_struct *napi)
{
 kfree_skb(napi->skb);
 napi->skb = ((void *)0);
}

int netdev_rx_handler_register(struct net_device *dev,
          rx_handler_func_t *rx_handler,
          void *rx_handler_data);
void netdev_rx_handler_unregister(struct net_device *dev);

bool dev_valid_name(const char *name);
int dev_ioctl(struct net *net, unsigned int cmd, void *);
int dev_ethtool(struct net *net, struct ifreq *);
unsigned int dev_get_flags(const struct net_device *);
int __dev_change_flags(struct net_device *, unsigned int flags);
int dev_change_flags(struct net_device *, unsigned int);
void __dev_notify_flags(struct net_device *, unsigned int old_flags,
   unsigned int gchanges);
int dev_change_name(struct net_device *, const char *);
int dev_set_alias(struct net_device *, const char *, size_t);
int dev_change_net_namespace(struct net_device *, struct net *, const char *);
int dev_set_mtu(struct net_device *, int);
void dev_set_group(struct net_device *, int);
int dev_set_mac_address(struct net_device *, struct sockaddr *);
int dev_change_carrier(struct net_device *, bool new_carrier);
int dev_get_phys_port_id(struct net_device *dev,
    struct netdev_phys_item_id *ppid);
int dev_get_phys_port_name(struct net_device *dev,
      char *name, size_t len);
int dev_change_proto_down(struct net_device *dev, bool proto_down);
struct sk_buff *validate_xmit_skb_list(struct sk_buff *skb, struct net_device *dev);
struct sk_buff *dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
        struct netdev_queue *txq, int *ret);
int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
int dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
bool is_skb_forwardable(const struct net_device *dev,
   const struct sk_buff *skb);

void dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev);

extern int netdev_budget;


void netdev_run_todo(void);







static inline __attribute__((no_instrument_function)) void dev_put(struct net_device *dev)
{
 do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*dev->pcpu_refcnt))(1)) && ((-(typeof(*dev->pcpu_refcnt))(1)) == 1 || (-(typeof(*dev->pcpu_refcnt))(1)) == -1)) ? (int)(-(typeof(*dev->pcpu_refcnt))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*dev->pcpu_refcnt))(1)); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*dev->pcpu_refcnt))(1)) && ((-(typeof(*dev->pcpu_refcnt))(1)) == 1 || (-(typeof(*dev->pcpu_refcnt))(1)) == -1)) ? (int)(-(typeof(*dev->pcpu_refcnt))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*dev->pcpu_refcnt))(1)); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*dev->pcpu_refcnt))(1)) && ((-(typeof(*dev->pcpu_refcnt))(1)) == 1 || (-(typeof(*dev->pcpu_refcnt))(1)) == -1)) ? (int)(-(typeof(*dev->pcpu_refcnt))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*dev->pcpu_refcnt))(1)); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*dev->pcpu_refcnt))(1)) && ((-(typeof(*dev->pcpu_refcnt))(1)) == 1 || (-(typeof(*dev->pcpu_refcnt))(1)) == -1)) ? (int)(-(typeof(*dev->pcpu_refcnt))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*dev->pcpu_refcnt))(1)); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(-(typeof(*dev->pcpu_refcnt))(1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}







static inline __attribute__((no_instrument_function)) void dev_hold(struct net_device *dev)
{
 do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*dev->pcpu_refcnt)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*dev->pcpu_refcnt))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*dev->pcpu_refcnt)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}
# 3299 "include/linux/netdevice.h"
void linkwatch_init_dev(struct net_device *dev);
void linkwatch_fire_event(struct net_device *dev);
void linkwatch_forget_dev(struct net_device *dev);







static inline __attribute__((no_instrument_function)) bool netif_carrier_ok(const struct net_device *dev)
{
 return !(__builtin_constant_p((__LINK_STATE_NOCARRIER)) ? constant_test_bit((__LINK_STATE_NOCARRIER), (&dev->state)) : variable_test_bit((__LINK_STATE_NOCARRIER), (&dev->state)));
}

unsigned long dev_trans_start(struct net_device *dev);

void __netdev_watchdog_up(struct net_device *dev);

void netif_carrier_on(struct net_device *dev);

void netif_carrier_off(struct net_device *dev);
# 3334 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_dormant_on(struct net_device *dev)
{
 if (!test_and_set_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((no_instrument_function)) void netif_dormant_off(struct net_device *dev)
{
 if (test_and_clear_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((no_instrument_function)) bool netif_dormant(const struct net_device *dev)
{
 return (__builtin_constant_p((__LINK_STATE_DORMANT)) ? constant_test_bit((__LINK_STATE_DORMANT), (&dev->state)) : variable_test_bit((__LINK_STATE_DORMANT), (&dev->state)));
}
# 3370 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) bool netif_oper_up(const struct net_device *dev)
{
 return (dev->operstate == IF_OPER_UP ||
  dev->operstate == IF_OPER_UNKNOWN );
}







static inline __attribute__((no_instrument_function)) bool netif_device_present(struct net_device *dev)
{
 return (__builtin_constant_p((__LINK_STATE_PRESENT)) ? constant_test_bit((__LINK_STATE_PRESENT), (&dev->state)) : variable_test_bit((__LINK_STATE_PRESENT), (&dev->state)));
}

void netif_device_detach(struct net_device *dev);

void netif_device_attach(struct net_device *dev);





enum {
 NETIF_MSG_DRV = 0x0001,
 NETIF_MSG_PROBE = 0x0002,
 NETIF_MSG_LINK = 0x0004,
 NETIF_MSG_TIMER = 0x0008,
 NETIF_MSG_IFDOWN = 0x0010,
 NETIF_MSG_IFUP = 0x0020,
 NETIF_MSG_RX_ERR = 0x0040,
 NETIF_MSG_TX_ERR = 0x0080,
 NETIF_MSG_TX_QUEUED = 0x0100,
 NETIF_MSG_INTR = 0x0200,
 NETIF_MSG_TX_DONE = 0x0400,
 NETIF_MSG_RX_STATUS = 0x0800,
 NETIF_MSG_PKTDATA = 0x1000,
 NETIF_MSG_HW = 0x2000,
 NETIF_MSG_WOL = 0x4000,
};
# 3429 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{

 if (debug_value < 0 || debug_value >= (sizeof(u32) * 8))
  return default_msg_enable_bits;
 if (debug_value == 0)
  return 0;

 return (1 << debug_value) - 1;
}

static inline __attribute__((no_instrument_function)) void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
 spin_lock(&txq->_xmit_lock);
 txq->xmit_lock_owner = cpu;
}

static inline __attribute__((no_instrument_function)) void __netif_tx_lock_bh(struct netdev_queue *txq)
{
 spin_lock_bh(&txq->_xmit_lock);
 txq->xmit_lock_owner = (({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }));
}

static inline __attribute__((no_instrument_function)) bool __netif_tx_trylock(struct netdev_queue *txq)
{
 bool ok = spin_trylock(&txq->_xmit_lock);
 if (__builtin_expect(!!(ok), 1))
  txq->xmit_lock_owner = (({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }));
 return ok;
}

static inline __attribute__((no_instrument_function)) void __netif_tx_unlock(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 spin_unlock(&txq->_xmit_lock);
}

static inline __attribute__((no_instrument_function)) void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 spin_unlock_bh(&txq->_xmit_lock);
}

static inline __attribute__((no_instrument_function)) void txq_trans_update(struct netdev_queue *txq)
{
 if (txq->xmit_lock_owner != -1)
  txq->trans_start = jiffies;
}


static inline __attribute__((no_instrument_function)) void netif_trans_update(struct net_device *dev)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, 0);

 if (txq->trans_start != jiffies)
  txq->trans_start = jiffies;
}







static inline __attribute__((no_instrument_function)) void netif_tx_lock(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 spin_lock(&dev->tx_global_lock);
 cpu = (({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }));
 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);







  __netif_tx_lock(txq, cpu);
  set_bit(__QUEUE_STATE_FROZEN, &txq->state);
  __netif_tx_unlock(txq);
 }
}

static inline __attribute__((no_instrument_function)) void netif_tx_lock_bh(struct net_device *dev)
{
 local_bh_disable();
 netif_tx_lock(dev);
}

static inline __attribute__((no_instrument_function)) void netif_tx_unlock(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);





  clear_bit(__QUEUE_STATE_FROZEN, &txq->state);
  netif_schedule_queue(txq);
 }
 spin_unlock(&dev->tx_global_lock);
}

static inline __attribute__((no_instrument_function)) void netif_tx_unlock_bh(struct net_device *dev)
{
 netif_tx_unlock(dev);
 local_bh_enable();
}
# 3561 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void netif_tx_disable(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 local_bh_disable();
 cpu = (({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }));
 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);

  __netif_tx_lock(txq, cpu);
  netif_tx_stop_queue(txq);
  __netif_tx_unlock(txq);
 }
 local_bh_enable();
}

static inline __attribute__((no_instrument_function)) void netif_addr_lock(struct net_device *dev)
{
 spin_lock(&dev->addr_list_lock);
}

static inline __attribute__((no_instrument_function)) void netif_addr_lock_nested(struct net_device *dev)
{
 int subclass = 1;

 if (dev->netdev_ops->ndo_get_lock_subclass)
  subclass = dev->netdev_ops->ndo_get_lock_subclass(dev);

 do { _raw_spin_lock(((void)(subclass), (spinlock_check(&dev->addr_list_lock)))); } while (0);
}

static inline __attribute__((no_instrument_function)) void netif_addr_lock_bh(struct net_device *dev)
{
 spin_lock_bh(&dev->addr_list_lock);
}

static inline __attribute__((no_instrument_function)) void netif_addr_unlock(struct net_device *dev)
{
 spin_unlock(&dev->addr_list_lock);
}

static inline __attribute__((no_instrument_function)) void netif_addr_unlock_bh(struct net_device *dev)
{
 spin_unlock_bh(&dev->addr_list_lock);
}
# 3617 "include/linux/netdevice.h"
void ether_setup(struct net_device *dev);


struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
        unsigned char name_assign_type,
        void (*setup)(struct net_device *),
        unsigned int txqs, unsigned int rxqs);







int register_netdev(struct net_device *dev);
void unregister_netdev(struct net_device *dev);


int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
     struct netdev_hw_addr_list *from_list, int addr_len);
void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
        struct netdev_hw_addr_list *from_list, int addr_len);
int __hw_addr_sync_dev(struct netdev_hw_addr_list *list,
         struct net_device *dev,
         int (*sync)(struct net_device *, const unsigned char *),
         int (*unsync)(struct net_device *,
         const unsigned char *));
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
     struct net_device *dev,
     int (*unsync)(struct net_device *,
     const unsigned char *));
void __hw_addr_init(struct netdev_hw_addr_list *list);


int dev_addr_add(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
int dev_addr_del(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
void dev_addr_flush(struct net_device *dev);
int dev_addr_init(struct net_device *dev);


int dev_uc_add(struct net_device *dev, const unsigned char *addr);
int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_uc_del(struct net_device *dev, const unsigned char *addr);
int dev_uc_sync(struct net_device *to, struct net_device *from);
int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_uc_unsync(struct net_device *to, struct net_device *from);
void dev_uc_flush(struct net_device *dev);
void dev_uc_init(struct net_device *dev);
# 3677 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) int __dev_uc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->uc, dev, sync, unsync);
}
# 3693 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void __dev_uc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->uc, dev, unsync);
}


int dev_mc_add(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_mc_del(struct net_device *dev, const unsigned char *addr);
int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_sync(struct net_device *to, struct net_device *from);
int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_mc_unsync(struct net_device *to, struct net_device *from);
void dev_mc_flush(struct net_device *dev);
void dev_mc_init(struct net_device *dev);
# 3721 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) int __dev_mc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->mc, dev, sync, unsync);
}
# 3737 "include/linux/netdevice.h"
static inline __attribute__((no_instrument_function)) void __dev_mc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->mc, dev, unsync);
}


void dev_set_rx_mode(struct net_device *dev);
void __dev_set_rx_mode(struct net_device *dev);
int dev_set_promiscuity(struct net_device *dev, int inc);
int dev_set_allmulti(struct net_device *dev, int inc);
void netdev_state_change(struct net_device *dev);
void netdev_notify_peers(struct net_device *dev);
void netdev_features_change(struct net_device *dev);

void dev_load(struct net *net, const char *name);
struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
     struct rtnl_link_stats64 *storage);
void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
        const struct net_device_stats *netdev_stats);

extern int netdev_max_backlog;
extern int netdev_tstamp_prequeue;
extern int weight_p;

bool netdev_has_upper_dev(struct net_device *dev, struct net_device *upper_dev);
struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
struct net_device *netdev_all_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
# 3783 "include/linux/netdevice.h"
void *netdev_lower_get_next_private(struct net_device *dev,
        struct list_head **iter);
void *netdev_lower_get_next_private_rcu(struct net_device *dev,
     struct list_head **iter);
# 3800 "include/linux/netdevice.h"
void *netdev_lower_get_next(struct net_device *dev,
    struct list_head **iter);






void *netdev_adjacent_get_private(struct list_head *adj_list);
void *netdev_lower_get_first_private_rcu(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
int netdev_upper_dev_link(struct net_device *dev, struct net_device *upper_dev);
int netdev_master_upper_dev_link(struct net_device *dev,
     struct net_device *upper_dev,
     void *upper_priv, void *upper_info);
void netdev_upper_dev_unlink(struct net_device *dev,
        struct net_device *upper_dev);
void netdev_adjacent_rename_links(struct net_device *dev, char *oldname);
void *netdev_lower_dev_get_private(struct net_device *dev,
       struct net_device *lower_dev);
void netdev_lower_state_changed(struct net_device *lower_dev,
    void *lower_state_info);



extern u8 netdev_rss_key[52] __attribute__((__section__(".data..read_mostly")));
void netdev_rss_key_fill(void *buffer, size_t len);

int dev_get_nest_level(struct net_device *dev,
         bool (*type_check)(const struct net_device *dev));
int skb_checksum_help(struct sk_buff *skb);
struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
      netdev_features_t features, bool tx_path);
struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
        netdev_features_t features);

struct netdev_bonding_info {
 ifslave slave;
 ifbond master;
};

struct netdev_notifier_bonding_info {
 struct netdev_notifier_info info;
 struct netdev_bonding_info bonding_info;
};

void netdev_bonding_info_change(struct net_device *dev,
    struct netdev_bonding_info *bonding_info);

static inline __attribute__((no_instrument_function))
struct sk_buff *skb_gso_segment(struct sk_buff *skb, netdev_features_t features)
{
 return __skb_gso_segment(skb, features, true);
}
__be16 skb_network_protocol(struct sk_buff *skb, int *depth);

static inline __attribute__((no_instrument_function)) bool can_checksum_protocol(netdev_features_t features,
      __be16 protocol)
{
 if (protocol == (( __be16)(__builtin_constant_p((__u16)((0x8906))) ? ((__u16)( (((__u16)((0x8906)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8906)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8906)))))
  return !!(features & ((netdev_features_t)1 << (NETIF_F_FCOE_CRC_BIT)));



 if (features & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {

  return true;
 }

 switch (protocol) {
 case (( __be16)(__builtin_constant_p((__u16)((0x0800))) ? ((__u16)( (((__u16)((0x0800)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0800)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0800)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT)));
 case (( __be16)(__builtin_constant_p((__u16)((0x86DD))) ? ((__u16)( (((__u16)((0x86DD)) & (__u16)0x00ffU) << 8) | (((__u16)((0x86DD)) & (__u16)0xff00U) >> 8))) : __fswab16((0x86DD)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 default:
  return false;
 }
}


static inline __attribute__((no_instrument_function)) int eproto_to_ipproto(int eproto)
{
 switch (eproto) {
 case (( __be16)(__builtin_constant_p((__u16)((0x0800))) ? ((__u16)( (((__u16)((0x0800)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0800)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0800)))):
  return IPPROTO_IP;
 case (( __be16)(__builtin_constant_p((__u16)((0x86DD))) ? ((__u16)( (((__u16)((0x86DD)) & (__u16)0x00ffU) << 8) | (((__u16)((0x86DD)) & (__u16)0xff00U) >> 8))) : __fswab16((0x86DD)))):
  return IPPROTO_IPV6;
 default:
  return -1;
 }
}


void netdev_rx_csum_fault(struct net_device *dev);






void net_enable_timestamp(void);
void net_disable_timestamp(void);


int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) dev_proc_init(void);




static inline __attribute__((no_instrument_function)) netdev_tx_t __netdev_start_xmit(const struct net_device_ops *ops,
           struct sk_buff *skb, struct net_device *dev,
           bool more)
{
 skb->xmit_more = more ? 1 : 0;
 return ops->ndo_start_xmit(skb, dev);
}

static inline __attribute__((no_instrument_function)) netdev_tx_t netdev_start_xmit(struct sk_buff *skb, struct net_device *dev,
         struct netdev_queue *txq, bool more)
{
 const struct net_device_ops *ops = dev->netdev_ops;
 int rc;

 rc = __netdev_start_xmit(ops, skb, dev, more);
 if (rc == NETDEV_TX_OK)
  txq_trans_update(txq);

 return rc;
}

int netdev_class_create_file_ns(struct class_attribute *class_attr,
    const void *ns);
void netdev_class_remove_file_ns(struct class_attribute *class_attr,
     const void *ns);

static inline __attribute__((no_instrument_function)) int netdev_class_create_file(struct class_attribute *class_attr)
{
 return netdev_class_create_file_ns(class_attr, ((void *)0));
}

static inline __attribute__((no_instrument_function)) void netdev_class_remove_file(struct class_attribute *class_attr)
{
 netdev_class_remove_file_ns(class_attr, ((void *)0));
}

extern struct kobj_ns_type_operations net_ns_type_operations;

const char *netdev_drivername(const struct net_device *dev);

void linkwatch_run_queue(void);

static inline __attribute__((no_instrument_function)) netdev_features_t netdev_intersect_features(netdev_features_t f1,
         netdev_features_t f2)
{
 if ((f1 ^ f2) & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {
  if (f1 & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT)))
   f1 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
  else
   f2 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 }

 return f1 & f2;
}

static inline __attribute__((no_instrument_function)) netdev_features_t netdev_get_wanted_features(
 struct net_device *dev)
{
 return (dev->features & ~dev->hw_features) | dev->wanted_features;
}
netdev_features_t netdev_increment_features(netdev_features_t all,
 netdev_features_t one, netdev_features_t mask);





static inline __attribute__((no_instrument_function)) netdev_features_t netdev_add_tso_features(netdev_features_t features,
       netdev_features_t mask)
{
 return netdev_increment_features(features, (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT))), mask);
}

int __netdev_update_features(struct net_device *dev);
void netdev_update_features(struct net_device *dev);
void netdev_change_features(struct net_device *dev);

void netif_stacked_transfer_operstate(const struct net_device *rootdev,
     struct net_device *dev);

netdev_features_t passthru_features_check(struct sk_buff *skb,
       struct net_device *dev,
       netdev_features_t features);
netdev_features_t netif_skb_features(struct sk_buff *skb);

static inline __attribute__((no_instrument_function)) bool net_gso_ok(netdev_features_t features, int gso_type)
{
 netdev_features_t feature = (netdev_features_t)gso_type << NETIF_F_GSO_SHIFT;


 do { bool __cond = !(!(SKB_GSO_TCPV4 != (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4000(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_TCPV4 != (NETIF_F_TSO >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4000(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP != (((netdev_features_t)1 << (NETIF_F_UFO_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4001(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_UDP != (NETIF_F_UFO >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4001(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_DODGY != (((netdev_features_t)1 << (NETIF_F_GSO_ROBUST_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4002(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_DODGY != (NETIF_F_GSO_ROBUST >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4002(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCP_ECN != (((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4003(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_TCP_ECN != (NETIF_F_TSO_ECN >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4003(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCP_FIXEDID != (((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4004(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_TCP_FIXEDID != (NETIF_F_TSO_MANGLEID >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4004(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCPV6 != (((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4005(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_TCPV6 != (NETIF_F_TSO6 >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4005(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_FCOE != (((netdev_features_t)1 << (NETIF_F_FSO_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4006(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_FCOE != (NETIF_F_FSO >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4006(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_GRE != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4007(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_GRE != (NETIF_F_GSO_GRE >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4007(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_GRE_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_CSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4008(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_GRE_CSUM != (NETIF_F_GSO_GRE_CSUM >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4008(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_IPXIP4 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP4_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4009(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_IPXIP4 != (NETIF_F_GSO_IPXIP4 >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4009(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_IPXIP6 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP6_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4010(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_IPXIP6 != (NETIF_F_GSO_IPXIP6 >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4010(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP_TUNNEL != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4011(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_UDP_TUNNEL != (NETIF_F_GSO_UDP_TUNNEL >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4011(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP_TUNNEL_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4012(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_UDP_TUNNEL_CSUM != (NETIF_F_GSO_UDP_TUNNEL_CSUM >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4012(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_PARTIAL != (((netdev_features_t)1 << (NETIF_F_GSO_PARTIAL_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4013(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_PARTIAL != (NETIF_F_GSO_PARTIAL >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4013(); do { } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TUNNEL_REMCSUM != (((netdev_features_t)1 << (NETIF_F_GSO_TUNNEL_REMCSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_4014(void) __attribute__((error("BUILD_BUG_ON failed: " "SKB_GSO_TUNNEL_REMCSUM != (NETIF_F_GSO_TUNNEL_REMCSUM >> NETIF_F_GSO_SHIFT)"))); if (__cond) __compiletime_assert_4014(); do { } while (0); } while (0);

 return (features & feature) == feature;
}

static inline __attribute__((no_instrument_function)) bool skb_gso_ok(struct sk_buff *skb, netdev_features_t features)
{
 return net_gso_ok(features, ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type) &&
        (!skb_has_frag_list(skb) || (features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT))));
}

static inline __attribute__((no_instrument_function)) bool netif_needs_gso(struct sk_buff *skb,
       netdev_features_t features)
{
 return skb_is_gso(skb) && (!skb_gso_ok(skb, features) ||
  __builtin_expect(!!((skb->ip_summed != 3) && (skb->ip_summed != 1)), 0)
                                             );
}

static inline __attribute__((no_instrument_function)) void netif_set_gso_max_size(struct net_device *dev,
       unsigned int size)
{
 dev->gso_max_size = size;
}

static inline __attribute__((no_instrument_function)) void skb_gso_error_unwind(struct sk_buff *skb, __be16 protocol,
     int pulled_hlen, u16 mac_offset,
     int mac_len)
{
 skb->protocol = protocol;
 skb->encapsulation = 1;
 skb_push(skb, pulled_hlen);
 skb_reset_transport_header(skb);
 skb->mac_header = mac_offset;
 skb->network_header = skb->mac_header + mac_len;
 skb->mac_len = mac_len;
}

static inline __attribute__((no_instrument_function)) bool netif_is_macsec(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACSEC;
}

static inline __attribute__((no_instrument_function)) bool netif_is_macvlan(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN;
}

static inline __attribute__((no_instrument_function)) bool netif_is_macvlan_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN_PORT;
}

static inline __attribute__((no_instrument_function)) bool netif_is_ipvlan(const struct net_device *dev)
{
 return dev->priv_flags & IFF_IPVLAN_SLAVE;
}

static inline __attribute__((no_instrument_function)) bool netif_is_ipvlan_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_IPVLAN_MASTER;
}

static inline __attribute__((no_instrument_function)) bool netif_is_bond_master(const struct net_device *dev)
{
 return dev->flags & IFF_MASTER && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((no_instrument_function)) bool netif_is_bond_slave(const struct net_device *dev)
{
 return dev->flags & IFF_SLAVE && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((no_instrument_function)) bool netif_supports_nofcs(struct net_device *dev)
{
 return dev->priv_flags & IFF_SUPP_NOFCS;
}

static inline __attribute__((no_instrument_function)) bool netif_is_l3_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_MASTER;
}

static inline __attribute__((no_instrument_function)) bool netif_is_l3_slave(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_SLAVE;
}

static inline __attribute__((no_instrument_function)) bool netif_is_bridge_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_EBRIDGE;
}

static inline __attribute__((no_instrument_function)) bool netif_is_bridge_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_BRIDGE_PORT;
}

static inline __attribute__((no_instrument_function)) bool netif_is_ovs_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_OPENVSWITCH;
}

static inline __attribute__((no_instrument_function)) bool netif_is_team_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM;
}

static inline __attribute__((no_instrument_function)) bool netif_is_team_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM_PORT;
}

static inline __attribute__((no_instrument_function)) bool netif_is_lag_master(const struct net_device *dev)
{
 return netif_is_bond_master(dev) || netif_is_team_master(dev);
}

static inline __attribute__((no_instrument_function)) bool netif_is_lag_port(const struct net_device *dev)
{
 return netif_is_bond_slave(dev) || netif_is_team_port(dev);
}

static inline __attribute__((no_instrument_function)) bool netif_is_rxfh_configured(const struct net_device *dev)
{
 return dev->priv_flags & IFF_RXFH_CONFIGURED;
}


static inline __attribute__((no_instrument_function)) void netif_keep_dst(struct net_device *dev)
{
 dev->priv_flags &= ~(IFF_XMIT_DST_RELEASE | IFF_XMIT_DST_RELEASE_PERM);
}

extern struct pernet_operations loopback_net_ops;





static inline __attribute__((no_instrument_function)) const char *netdev_name(const struct net_device *dev)
{
 if (!dev->name[0] || strchr(dev->name, '%'))
  return "(unnamed net_device)";
 return dev->name;
}

static inline __attribute__((no_instrument_function)) const char *netdev_reg_state(const struct net_device *dev)
{
 switch (dev->reg_state) {
 case NETREG_UNINITIALIZED: return " (uninitialized)";
 case NETREG_REGISTERED: return "";
 case NETREG_UNREGISTERING: return " (unregistering)";
 case NETREG_UNREGISTERED: return " (unregistered)";
 case NETREG_RELEASED: return " (released)";
 case NETREG_DUMMY: return " (dummy)";
 }

 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_fmt("include/linux/netdevice.h", 4172, "%s: unknown reg_state %d\n", dev->name, dev->reg_state); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 return " (unknown)";
}

__attribute__((format(printf, 3, 4)))
void netdev_printk(const char *level, const struct net_device *dev,
     const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_emerg(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_alert(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_crit(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_err(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_warn(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_notice(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_info(const struct net_device *dev, const char *format, ...);
# 16 "include/net/cfg80211.h" 2
# 1 "include/linux/debugfs.h" 1
# 24 "include/linux/debugfs.h"
struct device;
struct file_operations;
struct srcu_struct;

struct debugfs_blob_wrapper {
 void *data;
 unsigned long size;
};

struct debugfs_reg32 {
 char *name;
 unsigned long offset;
};

struct debugfs_regset32 {
 const struct debugfs_reg32 *regs;
 int nregs;
 void *base;
};

extern struct dentry *arch_debugfs_dir;

extern struct srcu_struct debugfs_srcu;



struct dentry *debugfs_create_file(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);
struct dentry *debugfs_create_file_unsafe(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);

struct dentry *debugfs_create_file_size(const char *name, umode_t mode,
     struct dentry *parent, void *data,
     const struct file_operations *fops,
     loff_t file_size);

struct dentry *debugfs_create_dir(const char *name, struct dentry *parent);

struct dentry *debugfs_create_symlink(const char *name, struct dentry *parent,
          const char *dest);

struct dentry *debugfs_create_automount(const char *name,
     struct dentry *parent,
     struct vfsmount *(*f)(void *),
     void *data);

void debugfs_remove(struct dentry *dentry);
void debugfs_remove_recursive(struct dentry *dentry);

int debugfs_use_file_start(const struct dentry *dentry, int *srcu_idx)
 ;

void debugfs_use_file_finish(int srcu_idx) ;

ssize_t debugfs_attr_read(struct file *file, char *buf,
   size_t len, loff_t *ppos);
ssize_t debugfs_attr_write(struct file *file, const char *buf,
   size_t len, loff_t *ppos);
# 100 "include/linux/debugfs.h"
struct dentry *debugfs_rename(struct dentry *old_dir, struct dentry *old_dentry,
                struct dentry *new_dir, const char *new_name);

struct dentry *debugfs_create_u8(const char *name, umode_t mode,
     struct dentry *parent, u8 *value);
struct dentry *debugfs_create_u16(const char *name, umode_t mode,
      struct dentry *parent, u16 *value);
struct dentry *debugfs_create_u32(const char *name, umode_t mode,
      struct dentry *parent, u32 *value);
struct dentry *debugfs_create_u64(const char *name, umode_t mode,
      struct dentry *parent, u64 *value);
struct dentry *debugfs_create_ulong(const char *name, umode_t mode,
        struct dentry *parent, unsigned long *value);
struct dentry *debugfs_create_x8(const char *name, umode_t mode,
     struct dentry *parent, u8 *value);
struct dentry *debugfs_create_x16(const char *name, umode_t mode,
      struct dentry *parent, u16 *value);
struct dentry *debugfs_create_x32(const char *name, umode_t mode,
      struct dentry *parent, u32 *value);
struct dentry *debugfs_create_x64(const char *name, umode_t mode,
      struct dentry *parent, u64 *value);
struct dentry *debugfs_create_size_t(const char *name, umode_t mode,
         struct dentry *parent, size_t *value);
struct dentry *debugfs_create_atomic_t(const char *name, umode_t mode,
         struct dentry *parent, atomic_t *value);
struct dentry *debugfs_create_bool(const char *name, umode_t mode,
      struct dentry *parent, bool *value);

struct dentry *debugfs_create_blob(const char *name, umode_t mode,
      struct dentry *parent,
      struct debugfs_blob_wrapper *blob);

struct dentry *debugfs_create_regset32(const char *name, umode_t mode,
         struct dentry *parent,
         struct debugfs_regset32 *regset);

void debugfs_print_regs32(struct seq_file *s, const struct debugfs_reg32 *regs,
     int nregs, void *base, char *prefix);

struct dentry *debugfs_create_u32_array(const char *name, umode_t mode,
     struct dentry *parent,
     u32 *array, u32 elements);

struct dentry *debugfs_create_devm_seqfile(struct device *dev, const char *name,
        struct dentry *parent,
        int (*read_fn)(struct seq_file *s,
         void *data));

bool debugfs_initialized(void);

ssize_t debugfs_read_file_bool(struct file *file, char *user_buf,
          size_t count, loff_t *ppos);

ssize_t debugfs_write_file_bool(struct file *file, const char *user_buf,
    size_t count, loff_t *ppos);
# 17 "include/net/cfg80211.h" 2




# 1 "./include/uapi/linux/nl80211.h" 1
# 839 "./include/uapi/linux/nl80211.h"
enum nl80211_commands {

 NL80211_CMD_UNSPEC,

 NL80211_CMD_GET_WIPHY,
 NL80211_CMD_SET_WIPHY,
 NL80211_CMD_NEW_WIPHY,
 NL80211_CMD_DEL_WIPHY,

 NL80211_CMD_GET_INTERFACE,
 NL80211_CMD_SET_INTERFACE,
 NL80211_CMD_NEW_INTERFACE,
 NL80211_CMD_DEL_INTERFACE,

 NL80211_CMD_GET_KEY,
 NL80211_CMD_SET_KEY,
 NL80211_CMD_NEW_KEY,
 NL80211_CMD_DEL_KEY,

 NL80211_CMD_GET_BEACON,
 NL80211_CMD_SET_BEACON,
 NL80211_CMD_START_AP,
 NL80211_CMD_NEW_BEACON = NL80211_CMD_START_AP,
 NL80211_CMD_STOP_AP,
 NL80211_CMD_DEL_BEACON = NL80211_CMD_STOP_AP,

 NL80211_CMD_GET_STATION,
 NL80211_CMD_SET_STATION,
 NL80211_CMD_NEW_STATION,
 NL80211_CMD_DEL_STATION,

 NL80211_CMD_GET_MPATH,
 NL80211_CMD_SET_MPATH,
 NL80211_CMD_NEW_MPATH,
 NL80211_CMD_DEL_MPATH,

 NL80211_CMD_SET_BSS,

 NL80211_CMD_SET_REG,
 NL80211_CMD_REQ_SET_REG,

 NL80211_CMD_GET_MESH_CONFIG,
 NL80211_CMD_SET_MESH_CONFIG,

 NL80211_CMD_SET_MGMT_EXTRA_IE ,

 NL80211_CMD_GET_REG,

 NL80211_CMD_GET_SCAN,
 NL80211_CMD_TRIGGER_SCAN,
 NL80211_CMD_NEW_SCAN_RESULTS,
 NL80211_CMD_SCAN_ABORTED,

 NL80211_CMD_REG_CHANGE,

 NL80211_CMD_AUTHENTICATE,
 NL80211_CMD_ASSOCIATE,
 NL80211_CMD_DEAUTHENTICATE,
 NL80211_CMD_DISASSOCIATE,

 NL80211_CMD_MICHAEL_MIC_FAILURE,

 NL80211_CMD_REG_BEACON_HINT,

 NL80211_CMD_JOIN_IBSS,
 NL80211_CMD_LEAVE_IBSS,

 NL80211_CMD_TESTMODE,

 NL80211_CMD_CONNECT,
 NL80211_CMD_ROAM,
 NL80211_CMD_DISCONNECT,

 NL80211_CMD_SET_WIPHY_NETNS,

 NL80211_CMD_GET_SURVEY,
 NL80211_CMD_NEW_SURVEY_RESULTS,

 NL80211_CMD_SET_PMKSA,
 NL80211_CMD_DEL_PMKSA,
 NL80211_CMD_FLUSH_PMKSA,

 NL80211_CMD_REMAIN_ON_CHANNEL,
 NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL,

 NL80211_CMD_SET_TX_BITRATE_MASK,

 NL80211_CMD_REGISTER_FRAME,
 NL80211_CMD_REGISTER_ACTION = NL80211_CMD_REGISTER_FRAME,
 NL80211_CMD_FRAME,
 NL80211_CMD_ACTION = NL80211_CMD_FRAME,
 NL80211_CMD_FRAME_TX_STATUS,
 NL80211_CMD_ACTION_TX_STATUS = NL80211_CMD_FRAME_TX_STATUS,

 NL80211_CMD_SET_POWER_SAVE,
 NL80211_CMD_GET_POWER_SAVE,

 NL80211_CMD_SET_CQM,
 NL80211_CMD_NOTIFY_CQM,

 NL80211_CMD_SET_CHANNEL,
 NL80211_CMD_SET_WDS_PEER,

 NL80211_CMD_FRAME_WAIT_CANCEL,

 NL80211_CMD_JOIN_MESH,
 NL80211_CMD_LEAVE_MESH,

 NL80211_CMD_UNPROT_DEAUTHENTICATE,
 NL80211_CMD_UNPROT_DISASSOCIATE,

 NL80211_CMD_NEW_PEER_CANDIDATE,

 NL80211_CMD_GET_WOWLAN,
 NL80211_CMD_SET_WOWLAN,

 NL80211_CMD_START_SCHED_SCAN,
 NL80211_CMD_STOP_SCHED_SCAN,
 NL80211_CMD_SCHED_SCAN_RESULTS,
 NL80211_CMD_SCHED_SCAN_STOPPED,

 NL80211_CMD_SET_REKEY_OFFLOAD,

 NL80211_CMD_PMKSA_CANDIDATE,

 NL80211_CMD_TDLS_OPER,
 NL80211_CMD_TDLS_MGMT,

 NL80211_CMD_UNEXPECTED_FRAME,

 NL80211_CMD_PROBE_CLIENT,

 NL80211_CMD_REGISTER_BEACONS,

 NL80211_CMD_UNEXPECTED_4ADDR_FRAME,

 NL80211_CMD_SET_NOACK_MAP,

 NL80211_CMD_CH_SWITCH_NOTIFY,

 NL80211_CMD_START_P2P_DEVICE,
 NL80211_CMD_STOP_P2P_DEVICE,

 NL80211_CMD_CONN_FAILED,

 NL80211_CMD_SET_MCAST_RATE,

 NL80211_CMD_SET_MAC_ACL,

 NL80211_CMD_RADAR_DETECT,

 NL80211_CMD_GET_PROTOCOL_FEATURES,

 NL80211_CMD_UPDATE_FT_IES,
 NL80211_CMD_FT_EVENT,

 NL80211_CMD_CRIT_PROTOCOL_START,
 NL80211_CMD_CRIT_PROTOCOL_STOP,

 NL80211_CMD_GET_COALESCE,
 NL80211_CMD_SET_COALESCE,

 NL80211_CMD_CHANNEL_SWITCH,

 NL80211_CMD_VENDOR,

 NL80211_CMD_SET_QOS_MAP,

 NL80211_CMD_ADD_TX_TS,
 NL80211_CMD_DEL_TX_TS,

 NL80211_CMD_GET_MPP,

 NL80211_CMD_JOIN_OCB,
 NL80211_CMD_LEAVE_OCB,

 NL80211_CMD_CH_SWITCH_STARTED_NOTIFY,

 NL80211_CMD_TDLS_CHANNEL_SWITCH,
 NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH,

 NL80211_CMD_WIPHY_REG_CHANGE,

 NL80211_CMD_ABORT_SCAN,




 __NL80211_CMD_AFTER_LAST,
 NL80211_CMD_MAX = __NL80211_CMD_AFTER_LAST - 1
};
# 1826 "./include/uapi/linux/nl80211.h"
enum nl80211_attrs {

 NL80211_ATTR_UNSPEC,

 NL80211_ATTR_WIPHY,
 NL80211_ATTR_WIPHY_NAME,

 NL80211_ATTR_IFINDEX,
 NL80211_ATTR_IFNAME,
 NL80211_ATTR_IFTYPE,

 NL80211_ATTR_MAC,

 NL80211_ATTR_KEY_DATA,
 NL80211_ATTR_KEY_IDX,
 NL80211_ATTR_KEY_CIPHER,
 NL80211_ATTR_KEY_SEQ,
 NL80211_ATTR_KEY_DEFAULT,

 NL80211_ATTR_BEACON_INTERVAL,
 NL80211_ATTR_DTIM_PERIOD,
 NL80211_ATTR_BEACON_HEAD,
 NL80211_ATTR_BEACON_TAIL,

 NL80211_ATTR_STA_AID,
 NL80211_ATTR_STA_FLAGS,
 NL80211_ATTR_STA_LISTEN_INTERVAL,
 NL80211_ATTR_STA_SUPPORTED_RATES,
 NL80211_ATTR_STA_VLAN,
 NL80211_ATTR_STA_INFO,

 NL80211_ATTR_WIPHY_BANDS,

 NL80211_ATTR_MNTR_FLAGS,

 NL80211_ATTR_MESH_ID,
 NL80211_ATTR_STA_PLINK_ACTION,
 NL80211_ATTR_MPATH_NEXT_HOP,
 NL80211_ATTR_MPATH_INFO,

 NL80211_ATTR_BSS_CTS_PROT,
 NL80211_ATTR_BSS_SHORT_PREAMBLE,
 NL80211_ATTR_BSS_SHORT_SLOT_TIME,

 NL80211_ATTR_HT_CAPABILITY,

 NL80211_ATTR_SUPPORTED_IFTYPES,

 NL80211_ATTR_REG_ALPHA2,
 NL80211_ATTR_REG_RULES,

 NL80211_ATTR_MESH_CONFIG,

 NL80211_ATTR_BSS_BASIC_RATES,

 NL80211_ATTR_WIPHY_TXQ_PARAMS,
 NL80211_ATTR_WIPHY_FREQ,
 NL80211_ATTR_WIPHY_CHANNEL_TYPE,

 NL80211_ATTR_KEY_DEFAULT_MGMT,

 NL80211_ATTR_MGMT_SUBTYPE,
 NL80211_ATTR_IE,

 NL80211_ATTR_MAX_NUM_SCAN_SSIDS,

 NL80211_ATTR_SCAN_FREQUENCIES,
 NL80211_ATTR_SCAN_SSIDS,
 NL80211_ATTR_GENERATION,
 NL80211_ATTR_BSS,

 NL80211_ATTR_REG_INITIATOR,
 NL80211_ATTR_REG_TYPE,

 NL80211_ATTR_SUPPORTED_COMMANDS,

 NL80211_ATTR_FRAME,
 NL80211_ATTR_SSID,
 NL80211_ATTR_AUTH_TYPE,
 NL80211_ATTR_REASON_CODE,

 NL80211_ATTR_KEY_TYPE,

 NL80211_ATTR_MAX_SCAN_IE_LEN,
 NL80211_ATTR_CIPHER_SUITES,

 NL80211_ATTR_FREQ_BEFORE,
 NL80211_ATTR_FREQ_AFTER,

 NL80211_ATTR_FREQ_FIXED,


 NL80211_ATTR_WIPHY_RETRY_SHORT,
 NL80211_ATTR_WIPHY_RETRY_LONG,
 NL80211_ATTR_WIPHY_FRAG_THRESHOLD,
 NL80211_ATTR_WIPHY_RTS_THRESHOLD,

 NL80211_ATTR_TIMED_OUT,

 NL80211_ATTR_USE_MFP,

 NL80211_ATTR_STA_FLAGS2,

 NL80211_ATTR_CONTROL_PORT,

 NL80211_ATTR_TESTDATA,

 NL80211_ATTR_PRIVACY,

 NL80211_ATTR_DISCONNECTED_BY_AP,
 NL80211_ATTR_STATUS_CODE,

 NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
 NL80211_ATTR_CIPHER_SUITE_GROUP,
 NL80211_ATTR_WPA_VERSIONS,
 NL80211_ATTR_AKM_SUITES,

 NL80211_ATTR_REQ_IE,
 NL80211_ATTR_RESP_IE,

 NL80211_ATTR_PREV_BSSID,

 NL80211_ATTR_KEY,
 NL80211_ATTR_KEYS,

 NL80211_ATTR_PID,

 NL80211_ATTR_4ADDR,

 NL80211_ATTR_SURVEY_INFO,

 NL80211_ATTR_PMKID,
 NL80211_ATTR_MAX_NUM_PMKIDS,

 NL80211_ATTR_DURATION,

 NL80211_ATTR_COOKIE,

 NL80211_ATTR_WIPHY_COVERAGE_CLASS,

 NL80211_ATTR_TX_RATES,

 NL80211_ATTR_FRAME_MATCH,

 NL80211_ATTR_ACK,

 NL80211_ATTR_PS_STATE,

 NL80211_ATTR_CQM,

 NL80211_ATTR_LOCAL_STATE_CHANGE,

 NL80211_ATTR_AP_ISOLATE,

 NL80211_ATTR_WIPHY_TX_POWER_SETTING,
 NL80211_ATTR_WIPHY_TX_POWER_LEVEL,

 NL80211_ATTR_TX_FRAME_TYPES,
 NL80211_ATTR_RX_FRAME_TYPES,
 NL80211_ATTR_FRAME_TYPE,

 NL80211_ATTR_CONTROL_PORT_ETHERTYPE,
 NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT,

 NL80211_ATTR_SUPPORT_IBSS_RSN,

 NL80211_ATTR_WIPHY_ANTENNA_TX,
 NL80211_ATTR_WIPHY_ANTENNA_RX,

 NL80211_ATTR_MCAST_RATE,

 NL80211_ATTR_OFFCHANNEL_TX_OK,

 NL80211_ATTR_BSS_HT_OPMODE,

 NL80211_ATTR_KEY_DEFAULT_TYPES,

 NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION,

 NL80211_ATTR_MESH_SETUP,

 NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX,
 NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX,

 NL80211_ATTR_SUPPORT_MESH_AUTH,
 NL80211_ATTR_STA_PLINK_STATE,

 NL80211_ATTR_WOWLAN_TRIGGERS,
 NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED,

 NL80211_ATTR_SCHED_SCAN_INTERVAL,

 NL80211_ATTR_INTERFACE_COMBINATIONS,
 NL80211_ATTR_SOFTWARE_IFTYPES,

 NL80211_ATTR_REKEY_DATA,

 NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS,
 NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN,

 NL80211_ATTR_SCAN_SUPP_RATES,

 NL80211_ATTR_HIDDEN_SSID,

 NL80211_ATTR_IE_PROBE_RESP,
 NL80211_ATTR_IE_ASSOC_RESP,

 NL80211_ATTR_STA_WME,
 NL80211_ATTR_SUPPORT_AP_UAPSD,

 NL80211_ATTR_ROAM_SUPPORT,

 NL80211_ATTR_SCHED_SCAN_MATCH,
 NL80211_ATTR_MAX_MATCH_SETS,

 NL80211_ATTR_PMKSA_CANDIDATE,

 NL80211_ATTR_TX_NO_CCK_RATE,

 NL80211_ATTR_TDLS_ACTION,
 NL80211_ATTR_TDLS_DIALOG_TOKEN,
 NL80211_ATTR_TDLS_OPERATION,
 NL80211_ATTR_TDLS_SUPPORT,
 NL80211_ATTR_TDLS_EXTERNAL_SETUP,

 NL80211_ATTR_DEVICE_AP_SME,

 NL80211_ATTR_DONT_WAIT_FOR_ACK,

 NL80211_ATTR_FEATURE_FLAGS,

 NL80211_ATTR_PROBE_RESP_OFFLOAD,

 NL80211_ATTR_PROBE_RESP,

 NL80211_ATTR_DFS_REGION,

 NL80211_ATTR_DISABLE_HT,
 NL80211_ATTR_HT_CAPABILITY_MASK,

 NL80211_ATTR_NOACK_MAP,

 NL80211_ATTR_INACTIVITY_TIMEOUT,

 NL80211_ATTR_RX_SIGNAL_DBM,

 NL80211_ATTR_BG_SCAN_PERIOD,

 NL80211_ATTR_WDEV,

 NL80211_ATTR_USER_REG_HINT_TYPE,

 NL80211_ATTR_CONN_FAILED_REASON,

 NL80211_ATTR_SAE_DATA,

 NL80211_ATTR_VHT_CAPABILITY,

 NL80211_ATTR_SCAN_FLAGS,

 NL80211_ATTR_CHANNEL_WIDTH,
 NL80211_ATTR_CENTER_FREQ1,
 NL80211_ATTR_CENTER_FREQ2,

 NL80211_ATTR_P2P_CTWINDOW,
 NL80211_ATTR_P2P_OPPPS,

 NL80211_ATTR_LOCAL_MESH_POWER_MODE,

 NL80211_ATTR_ACL_POLICY,

 NL80211_ATTR_MAC_ADDRS,

 NL80211_ATTR_MAC_ACL_MAX,

 NL80211_ATTR_RADAR_EVENT,

 NL80211_ATTR_EXT_CAPA,
 NL80211_ATTR_EXT_CAPA_MASK,

 NL80211_ATTR_STA_CAPABILITY,
 NL80211_ATTR_STA_EXT_CAPABILITY,

 NL80211_ATTR_PROTOCOL_FEATURES,
 NL80211_ATTR_SPLIT_WIPHY_DUMP,

 NL80211_ATTR_DISABLE_VHT,
 NL80211_ATTR_VHT_CAPABILITY_MASK,

 NL80211_ATTR_MDID,
 NL80211_ATTR_IE_RIC,

 NL80211_ATTR_CRIT_PROT_ID,
 NL80211_ATTR_MAX_CRIT_PROT_DURATION,

 NL80211_ATTR_PEER_AID,

 NL80211_ATTR_COALESCE_RULE,

 NL80211_ATTR_CH_SWITCH_COUNT,
 NL80211_ATTR_CH_SWITCH_BLOCK_TX,
 NL80211_ATTR_CSA_IES,
 NL80211_ATTR_CSA_C_OFF_BEACON,
 NL80211_ATTR_CSA_C_OFF_PRESP,

 NL80211_ATTR_RXMGMT_FLAGS,

 NL80211_ATTR_STA_SUPPORTED_CHANNELS,

 NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES,

 NL80211_ATTR_HANDLE_DFS,

 NL80211_ATTR_SUPPORT_5_MHZ,
 NL80211_ATTR_SUPPORT_10_MHZ,

 NL80211_ATTR_OPMODE_NOTIF,

 NL80211_ATTR_VENDOR_ID,
 NL80211_ATTR_VENDOR_SUBCMD,
 NL80211_ATTR_VENDOR_DATA,
 NL80211_ATTR_VENDOR_EVENTS,

 NL80211_ATTR_QOS_MAP,

 NL80211_ATTR_MAC_HINT,
 NL80211_ATTR_WIPHY_FREQ_HINT,

 NL80211_ATTR_MAX_AP_ASSOC_STA,

 NL80211_ATTR_TDLS_PEER_CAPABILITY,

 NL80211_ATTR_SOCKET_OWNER,

 NL80211_ATTR_CSA_C_OFFSETS_TX,
 NL80211_ATTR_MAX_CSA_COUNTERS,

 NL80211_ATTR_TDLS_INITIATOR,

 NL80211_ATTR_USE_RRM,

 NL80211_ATTR_WIPHY_DYN_ACK,

 NL80211_ATTR_TSID,
 NL80211_ATTR_USER_PRIO,
 NL80211_ATTR_ADMITTED_TIME,

 NL80211_ATTR_SMPS_MODE,

 NL80211_ATTR_OPER_CLASS,

 NL80211_ATTR_MAC_MASK,

 NL80211_ATTR_WIPHY_SELF_MANAGED_REG,

 NL80211_ATTR_EXT_FEATURES,

 NL80211_ATTR_SURVEY_RADIO_STATS,

 NL80211_ATTR_NETNS_FD,

 NL80211_ATTR_SCHED_SCAN_DELAY,

 NL80211_ATTR_REG_INDOOR,

 NL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS,
 NL80211_ATTR_MAX_SCAN_PLAN_INTERVAL,
 NL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS,
 NL80211_ATTR_SCHED_SCAN_PLANS,

 NL80211_ATTR_PBSS,

 NL80211_ATTR_BSS_SELECT,

 NL80211_ATTR_STA_SUPPORT_P2P_PS,

 NL80211_ATTR_PAD,



 __NL80211_ATTR_AFTER_LAST,
 NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
};
# 2289 "./include/uapi/linux/nl80211.h"
enum nl80211_iftype {
 NL80211_IFTYPE_UNSPECIFIED,
 NL80211_IFTYPE_ADHOC,
 NL80211_IFTYPE_STATION,
 NL80211_IFTYPE_AP,
 NL80211_IFTYPE_AP_VLAN,
 NL80211_IFTYPE_WDS,
 NL80211_IFTYPE_MONITOR,
 NL80211_IFTYPE_MESH_POINT,
 NL80211_IFTYPE_P2P_CLIENT,
 NL80211_IFTYPE_P2P_GO,
 NL80211_IFTYPE_P2P_DEVICE,
 NL80211_IFTYPE_OCB,


 NUM_NL80211_IFTYPES,
 NL80211_IFTYPE_MAX = NUM_NL80211_IFTYPES - 1
};
# 2332 "./include/uapi/linux/nl80211.h"
enum nl80211_sta_flags {
 __NL80211_STA_FLAG_INVALID,
 NL80211_STA_FLAG_AUTHORIZED,
 NL80211_STA_FLAG_SHORT_PREAMBLE,
 NL80211_STA_FLAG_WME,
 NL80211_STA_FLAG_MFP,
 NL80211_STA_FLAG_AUTHENTICATED,
 NL80211_STA_FLAG_TDLS_PEER,
 NL80211_STA_FLAG_ASSOCIATED,


 __NL80211_STA_FLAG_AFTER_LAST,
 NL80211_STA_FLAG_MAX = __NL80211_STA_FLAG_AFTER_LAST - 1
};
# 2354 "./include/uapi/linux/nl80211.h"
enum nl80211_sta_p2p_ps_status {
 NL80211_P2P_PS_UNSUPPORTED = 0,
 NL80211_P2P_PS_SUPPORTED,

 NUM_NL80211_P2P_PS_STATUS,
};
# 2370 "./include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
 __u32 mask;
 __u32 set;
} __attribute__((packed));
# 2409 "./include/uapi/linux/nl80211.h"
enum nl80211_rate_info {
 __NL80211_RATE_INFO_INVALID,
 NL80211_RATE_INFO_BITRATE,
 NL80211_RATE_INFO_MCS,
 NL80211_RATE_INFO_40_MHZ_WIDTH,
 NL80211_RATE_INFO_SHORT_GI,
 NL80211_RATE_INFO_BITRATE32,
 NL80211_RATE_INFO_VHT_MCS,
 NL80211_RATE_INFO_VHT_NSS,
 NL80211_RATE_INFO_80_MHZ_WIDTH,
 NL80211_RATE_INFO_80P80_MHZ_WIDTH,
 NL80211_RATE_INFO_160_MHZ_WIDTH,
 NL80211_RATE_INFO_10_MHZ_WIDTH,
 NL80211_RATE_INFO_5_MHZ_WIDTH,


 __NL80211_RATE_INFO_AFTER_LAST,
 NL80211_RATE_INFO_MAX = __NL80211_RATE_INFO_AFTER_LAST - 1
};
# 2446 "./include/uapi/linux/nl80211.h"
enum nl80211_sta_bss_param {
 __NL80211_STA_BSS_PARAM_INVALID,
 NL80211_STA_BSS_PARAM_CTS_PROT,
 NL80211_STA_BSS_PARAM_SHORT_PREAMBLE,
 NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME,
 NL80211_STA_BSS_PARAM_DTIM_PERIOD,
 NL80211_STA_BSS_PARAM_BEACON_INTERVAL,


 __NL80211_STA_BSS_PARAM_AFTER_LAST,
 NL80211_STA_BSS_PARAM_MAX = __NL80211_STA_BSS_PARAM_AFTER_LAST - 1
};
# 2524 "./include/uapi/linux/nl80211.h"
enum nl80211_sta_info {
 __NL80211_STA_INFO_INVALID,
 NL80211_STA_INFO_INACTIVE_TIME,
 NL80211_STA_INFO_RX_BYTES,
 NL80211_STA_INFO_TX_BYTES,
 NL80211_STA_INFO_LLID,
 NL80211_STA_INFO_PLID,
 NL80211_STA_INFO_PLINK_STATE,
 NL80211_STA_INFO_SIGNAL,
 NL80211_STA_INFO_TX_BITRATE,
 NL80211_STA_INFO_RX_PACKETS,
 NL80211_STA_INFO_TX_PACKETS,
 NL80211_STA_INFO_TX_RETRIES,
 NL80211_STA_INFO_TX_FAILED,
 NL80211_STA_INFO_SIGNAL_AVG,
 NL80211_STA_INFO_RX_BITRATE,
 NL80211_STA_INFO_BSS_PARAM,
 NL80211_STA_INFO_CONNECTED_TIME,
 NL80211_STA_INFO_STA_FLAGS,
 NL80211_STA_INFO_BEACON_LOSS,
 NL80211_STA_INFO_T_OFFSET,
 NL80211_STA_INFO_LOCAL_PM,
 NL80211_STA_INFO_PEER_PM,
 NL80211_STA_INFO_NONPEER_PM,
 NL80211_STA_INFO_RX_BYTES64,
 NL80211_STA_INFO_TX_BYTES64,
 NL80211_STA_INFO_CHAIN_SIGNAL,
 NL80211_STA_INFO_CHAIN_SIGNAL_AVG,
 NL80211_STA_INFO_EXPECTED_THROUGHPUT,
 NL80211_STA_INFO_RX_DROP_MISC,
 NL80211_STA_INFO_BEACON_RX,
 NL80211_STA_INFO_BEACON_SIGNAL_AVG,
 NL80211_STA_INFO_TID_STATS,
 NL80211_STA_INFO_RX_DURATION,
 NL80211_STA_INFO_PAD,


 __NL80211_STA_INFO_AFTER_LAST,
 NL80211_STA_INFO_MAX = __NL80211_STA_INFO_AFTER_LAST - 1
};
# 2579 "./include/uapi/linux/nl80211.h"
enum nl80211_tid_stats {
 __NL80211_TID_STATS_INVALID,
 NL80211_TID_STATS_RX_MSDU,
 NL80211_TID_STATS_TX_MSDU,
 NL80211_TID_STATS_TX_MSDU_RETRIES,
 NL80211_TID_STATS_TX_MSDU_FAILED,
 NL80211_TID_STATS_PAD,


 NUM_NL80211_TID_STATS,
 NL80211_TID_STATS_MAX = NUM_NL80211_TID_STATS - 1
};
# 2601 "./include/uapi/linux/nl80211.h"
enum nl80211_mpath_flags {
 NL80211_MPATH_FLAG_ACTIVE = 1<<0,
 NL80211_MPATH_FLAG_RESOLVING = 1<<1,
 NL80211_MPATH_FLAG_SN_VALID = 1<<2,
 NL80211_MPATH_FLAG_FIXED = 1<<3,
 NL80211_MPATH_FLAG_RESOLVED = 1<<4,
};
# 2628 "./include/uapi/linux/nl80211.h"
enum nl80211_mpath_info {
 __NL80211_MPATH_INFO_INVALID,
 NL80211_MPATH_INFO_FRAME_QLEN,
 NL80211_MPATH_INFO_SN,
 NL80211_MPATH_INFO_METRIC,
 NL80211_MPATH_INFO_EXPTIME,
 NL80211_MPATH_INFO_FLAGS,
 NL80211_MPATH_INFO_DISCOVERY_TIMEOUT,
 NL80211_MPATH_INFO_DISCOVERY_RETRIES,


 __NL80211_MPATH_INFO_AFTER_LAST,
 NL80211_MPATH_INFO_MAX = __NL80211_MPATH_INFO_AFTER_LAST - 1
};
# 2661 "./include/uapi/linux/nl80211.h"
enum nl80211_band_attr {
 __NL80211_BAND_ATTR_INVALID,
 NL80211_BAND_ATTR_FREQS,
 NL80211_BAND_ATTR_RATES,

 NL80211_BAND_ATTR_HT_MCS_SET,
 NL80211_BAND_ATTR_HT_CAPA,
 NL80211_BAND_ATTR_HT_AMPDU_FACTOR,
 NL80211_BAND_ATTR_HT_AMPDU_DENSITY,

 NL80211_BAND_ATTR_VHT_MCS_SET,
 NL80211_BAND_ATTR_VHT_CAPA,


 __NL80211_BAND_ATTR_AFTER_LAST,
 NL80211_BAND_ATTR_MAX = __NL80211_BAND_ATTR_AFTER_LAST - 1
};
# 2739 "./include/uapi/linux/nl80211.h"
enum nl80211_frequency_attr {
 __NL80211_FREQUENCY_ATTR_INVALID,
 NL80211_FREQUENCY_ATTR_FREQ,
 NL80211_FREQUENCY_ATTR_DISABLED,
 NL80211_FREQUENCY_ATTR_NO_IR,
 __NL80211_FREQUENCY_ATTR_NO_IBSS,
 NL80211_FREQUENCY_ATTR_RADAR,
 NL80211_FREQUENCY_ATTR_MAX_TX_POWER,
 NL80211_FREQUENCY_ATTR_DFS_STATE,
 NL80211_FREQUENCY_ATTR_DFS_TIME,
 NL80211_FREQUENCY_ATTR_NO_HT40_MINUS,
 NL80211_FREQUENCY_ATTR_NO_HT40_PLUS,
 NL80211_FREQUENCY_ATTR_NO_80MHZ,
 NL80211_FREQUENCY_ATTR_NO_160MHZ,
 NL80211_FREQUENCY_ATTR_DFS_CAC_TIME,
 NL80211_FREQUENCY_ATTR_INDOOR_ONLY,
 NL80211_FREQUENCY_ATTR_IR_CONCURRENT,
 NL80211_FREQUENCY_ATTR_NO_20MHZ,
 NL80211_FREQUENCY_ATTR_NO_10MHZ,


 __NL80211_FREQUENCY_ATTR_AFTER_LAST,
 NL80211_FREQUENCY_ATTR_MAX = __NL80211_FREQUENCY_ATTR_AFTER_LAST - 1
};
# 2781 "./include/uapi/linux/nl80211.h"
enum nl80211_bitrate_attr {
 __NL80211_BITRATE_ATTR_INVALID,
 NL80211_BITRATE_ATTR_RATE,
 NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE,


 __NL80211_BITRATE_ATTR_AFTER_LAST,
 NL80211_BITRATE_ATTR_MAX = __NL80211_BITRATE_ATTR_AFTER_LAST - 1
};
# 2807 "./include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
 NL80211_REGDOM_SET_BY_CORE,
 NL80211_REGDOM_SET_BY_USER,
 NL80211_REGDOM_SET_BY_DRIVER,
 NL80211_REGDOM_SET_BY_COUNTRY_IE,
};
# 2830 "./include/uapi/linux/nl80211.h"
enum nl80211_reg_type {
 NL80211_REGDOM_TYPE_COUNTRY,
 NL80211_REGDOM_TYPE_WORLD,
 NL80211_REGDOM_TYPE_CUSTOM_WORLD,
 NL80211_REGDOM_TYPE_INTERSECTION,
};
# 2862 "./include/uapi/linux/nl80211.h"
enum nl80211_reg_rule_attr {
 __NL80211_REG_RULE_ATTR_INVALID,
 NL80211_ATTR_REG_RULE_FLAGS,

 NL80211_ATTR_FREQ_RANGE_START,
 NL80211_ATTR_FREQ_RANGE_END,
 NL80211_ATTR_FREQ_RANGE_MAX_BW,

 NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN,
 NL80211_ATTR_POWER_RULE_MAX_EIRP,

 NL80211_ATTR_DFS_CAC_TIME,


 __NL80211_REG_RULE_ATTR_AFTER_LAST,
 NL80211_REG_RULE_ATTR_MAX = __NL80211_REG_RULE_ATTR_AFTER_LAST - 1
};
# 2897 "./include/uapi/linux/nl80211.h"
enum nl80211_sched_scan_match_attr {
 __NL80211_SCHED_SCAN_MATCH_ATTR_INVALID,

 NL80211_SCHED_SCAN_MATCH_ATTR_SSID,
 NL80211_SCHED_SCAN_MATCH_ATTR_RSSI,


 __NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST,
 NL80211_SCHED_SCAN_MATCH_ATTR_MAX =
  __NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST - 1
};
# 2934 "./include/uapi/linux/nl80211.h"
enum nl80211_reg_rule_flags {
 NL80211_RRF_NO_OFDM = 1<<0,
 NL80211_RRF_NO_CCK = 1<<1,
 NL80211_RRF_NO_INDOOR = 1<<2,
 NL80211_RRF_NO_OUTDOOR = 1<<3,
 NL80211_RRF_DFS = 1<<4,
 NL80211_RRF_PTP_ONLY = 1<<5,
 NL80211_RRF_PTMP_ONLY = 1<<6,
 NL80211_RRF_NO_IR = 1<<7,
 __NL80211_RRF_NO_IBSS = 1<<8,
 NL80211_RRF_AUTO_BW = 1<<11,
 NL80211_RRF_IR_CONCURRENT = 1<<12,
 NL80211_RRF_NO_HT40MINUS = 1<<13,
 NL80211_RRF_NO_HT40PLUS = 1<<14,
 NL80211_RRF_NO_80MHZ = 1<<15,
 NL80211_RRF_NO_160MHZ = 1<<16,
};
# 2970 "./include/uapi/linux/nl80211.h"
enum nl80211_dfs_regions {
 NL80211_DFS_UNSET = 0,
 NL80211_DFS_FCC = 1,
 NL80211_DFS_ETSI = 2,
 NL80211_DFS_JP = 3,
};
# 2994 "./include/uapi/linux/nl80211.h"
enum nl80211_user_reg_hint_type {
 NL80211_USER_REG_HINT_USER = 0,
 NL80211_USER_REG_HINT_CELL_BASE = 1,
 NL80211_USER_REG_HINT_INDOOR = 2,
};
# 3027 "./include/uapi/linux/nl80211.h"
enum nl80211_survey_info {
 __NL80211_SURVEY_INFO_INVALID,
 NL80211_SURVEY_INFO_FREQUENCY,
 NL80211_SURVEY_INFO_NOISE,
 NL80211_SURVEY_INFO_IN_USE,
 NL80211_SURVEY_INFO_TIME,
 NL80211_SURVEY_INFO_TIME_BUSY,
 NL80211_SURVEY_INFO_TIME_EXT_BUSY,
 NL80211_SURVEY_INFO_TIME_RX,
 NL80211_SURVEY_INFO_TIME_TX,
 NL80211_SURVEY_INFO_TIME_SCAN,
 NL80211_SURVEY_INFO_PAD,


 __NL80211_SURVEY_INFO_AFTER_LAST,
 NL80211_SURVEY_INFO_MAX = __NL80211_SURVEY_INFO_AFTER_LAST - 1
};
# 3071 "./include/uapi/linux/nl80211.h"
enum nl80211_mntr_flags {
 __NL80211_MNTR_FLAG_INVALID,
 NL80211_MNTR_FLAG_FCSFAIL,
 NL80211_MNTR_FLAG_PLCPFAIL,
 NL80211_MNTR_FLAG_CONTROL,
 NL80211_MNTR_FLAG_OTHER_BSS,
 NL80211_MNTR_FLAG_COOK_FRAMES,
 NL80211_MNTR_FLAG_ACTIVE,


 __NL80211_MNTR_FLAG_AFTER_LAST,
 NL80211_MNTR_FLAG_MAX = __NL80211_MNTR_FLAG_AFTER_LAST - 1
};
# 3103 "./include/uapi/linux/nl80211.h"
enum nl80211_mesh_power_mode {
 NL80211_MESH_POWER_UNKNOWN,
 NL80211_MESH_POWER_ACTIVE,
 NL80211_MESH_POWER_LIGHT_SLEEP,
 NL80211_MESH_POWER_DEEP_SLEEP,

 __NL80211_MESH_POWER_AFTER_LAST,
 NL80211_MESH_POWER_MAX = __NL80211_MESH_POWER_AFTER_LAST - 1
};
# 3221 "./include/uapi/linux/nl80211.h"
enum nl80211_meshconf_params {
 __NL80211_MESHCONF_INVALID,
 NL80211_MESHCONF_RETRY_TIMEOUT,
 NL80211_MESHCONF_CONFIRM_TIMEOUT,
 NL80211_MESHCONF_HOLDING_TIMEOUT,
 NL80211_MESHCONF_MAX_PEER_LINKS,
 NL80211_MESHCONF_MAX_RETRIES,
 NL80211_MESHCONF_TTL,
 NL80211_MESHCONF_AUTO_OPEN_PLINKS,
 NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES,
 NL80211_MESHCONF_PATH_REFRESH_TIME,
 NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT,
 NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT,
 NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL,
 NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME,
 NL80211_MESHCONF_HWMP_ROOTMODE,
 NL80211_MESHCONF_ELEMENT_TTL,
 NL80211_MESHCONF_HWMP_RANN_INTERVAL,
 NL80211_MESHCONF_GATE_ANNOUNCEMENTS,
 NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL,
 NL80211_MESHCONF_FORWARDING,
 NL80211_MESHCONF_RSSI_THRESHOLD,
 NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR,
 NL80211_MESHCONF_HT_OPMODE,
 NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT,
 NL80211_MESHCONF_HWMP_ROOT_INTERVAL,
 NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL,
 NL80211_MESHCONF_POWER_MODE,
 NL80211_MESHCONF_AWAKE_WINDOW,
 NL80211_MESHCONF_PLINK_TIMEOUT,


 __NL80211_MESHCONF_ATTR_AFTER_LAST,
 NL80211_MESHCONF_ATTR_MAX = __NL80211_MESHCONF_ATTR_AFTER_LAST - 1
};
# 3306 "./include/uapi/linux/nl80211.h"
enum nl80211_mesh_setup_params {
 __NL80211_MESH_SETUP_INVALID,
 NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL,
 NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC,
 NL80211_MESH_SETUP_IE,
 NL80211_MESH_SETUP_USERSPACE_AUTH,
 NL80211_MESH_SETUP_USERSPACE_AMPE,
 NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC,
 NL80211_MESH_SETUP_USERSPACE_MPM,
 NL80211_MESH_SETUP_AUTH_PROTOCOL,


 __NL80211_MESH_SETUP_ATTR_AFTER_LAST,
 NL80211_MESH_SETUP_ATTR_MAX = __NL80211_MESH_SETUP_ATTR_AFTER_LAST - 1
};
# 3336 "./include/uapi/linux/nl80211.h"
enum nl80211_txq_attr {
 __NL80211_TXQ_ATTR_INVALID,
 NL80211_TXQ_ATTR_AC,
 NL80211_TXQ_ATTR_TXOP,
 NL80211_TXQ_ATTR_CWMIN,
 NL80211_TXQ_ATTR_CWMAX,
 NL80211_TXQ_ATTR_AIFS,


 __NL80211_TXQ_ATTR_AFTER_LAST,
 NL80211_TXQ_ATTR_MAX = __NL80211_TXQ_ATTR_AFTER_LAST - 1
};

enum nl80211_ac {
 NL80211_AC_VO,
 NL80211_AC_VI,
 NL80211_AC_BE,
 NL80211_AC_BK,
 NL80211_NUM_ACS
};
# 3373 "./include/uapi/linux/nl80211.h"
enum nl80211_channel_type {
 NL80211_CHAN_NO_HT,
 NL80211_CHAN_HT20,
 NL80211_CHAN_HT40MINUS,
 NL80211_CHAN_HT40PLUS
};
# 3399 "./include/uapi/linux/nl80211.h"
enum nl80211_chan_width {
 NL80211_CHAN_WIDTH_20_NOHT,
 NL80211_CHAN_WIDTH_20,
 NL80211_CHAN_WIDTH_40,
 NL80211_CHAN_WIDTH_80,
 NL80211_CHAN_WIDTH_80P80,
 NL80211_CHAN_WIDTH_160,
 NL80211_CHAN_WIDTH_5,
 NL80211_CHAN_WIDTH_10,
};
# 3419 "./include/uapi/linux/nl80211.h"
enum nl80211_bss_scan_width {
 NL80211_BSS_CHAN_WIDTH_20,
 NL80211_BSS_CHAN_WIDTH_10,
 NL80211_BSS_CHAN_WIDTH_5,
};
# 3468 "./include/uapi/linux/nl80211.h"
enum nl80211_bss {
 __NL80211_BSS_INVALID,
 NL80211_BSS_BSSID,
 NL80211_BSS_FREQUENCY,
 NL80211_BSS_TSF,
 NL80211_BSS_BEACON_INTERVAL,
 NL80211_BSS_CAPABILITY,
 NL80211_BSS_INFORMATION_ELEMENTS,
 NL80211_BSS_SIGNAL_MBM,
 NL80211_BSS_SIGNAL_UNSPEC,
 NL80211_BSS_STATUS,
 NL80211_BSS_SEEN_MS_AGO,
 NL80211_BSS_BEACON_IES,
 NL80211_BSS_CHAN_WIDTH,
 NL80211_BSS_BEACON_TSF,
 NL80211_BSS_PRESP_DATA,
 NL80211_BSS_LAST_SEEN_BOOTTIME,
 NL80211_BSS_PAD,


 __NL80211_BSS_AFTER_LAST,
 NL80211_BSS_MAX = __NL80211_BSS_AFTER_LAST - 1
};
# 3504 "./include/uapi/linux/nl80211.h"
enum nl80211_bss_status {
 NL80211_BSS_STATUS_AUTHENTICATED,
 NL80211_BSS_STATUS_ASSOCIATED,
 NL80211_BSS_STATUS_IBSS_JOINED,
};
# 3524 "./include/uapi/linux/nl80211.h"
enum nl80211_auth_type {
 NL80211_AUTHTYPE_OPEN_SYSTEM,
 NL80211_AUTHTYPE_SHARED_KEY,
 NL80211_AUTHTYPE_FT,
 NL80211_AUTHTYPE_NETWORK_EAP,
 NL80211_AUTHTYPE_SAE,


 __NL80211_AUTHTYPE_NUM,
 NL80211_AUTHTYPE_MAX = __NL80211_AUTHTYPE_NUM - 1,
 NL80211_AUTHTYPE_AUTOMATIC
};
# 3544 "./include/uapi/linux/nl80211.h"
enum nl80211_key_type {
 NL80211_KEYTYPE_GROUP,
 NL80211_KEYTYPE_PAIRWISE,
 NL80211_KEYTYPE_PEERKEY,

 NUM_NL80211_KEYTYPES
};






enum nl80211_mfp {
 NL80211_MFP_NO,
 NL80211_MFP_REQUIRED,
};

enum nl80211_wpa_versions {
 NL80211_WPA_VERSION_1 = 1 << 0,
 NL80211_WPA_VERSION_2 = 1 << 1,
};
# 3576 "./include/uapi/linux/nl80211.h"
enum nl80211_key_default_types {
 __NL80211_KEY_DEFAULT_TYPE_INVALID,
 NL80211_KEY_DEFAULT_TYPE_UNICAST,
 NL80211_KEY_DEFAULT_TYPE_MULTICAST,

 NUM_NL80211_KEY_DEFAULT_TYPES
};
# 3606 "./include/uapi/linux/nl80211.h"
enum nl80211_key_attributes {
 __NL80211_KEY_INVALID,
 NL80211_KEY_DATA,
 NL80211_KEY_IDX,
 NL80211_KEY_CIPHER,
 NL80211_KEY_SEQ,
 NL80211_KEY_DEFAULT,
 NL80211_KEY_DEFAULT_MGMT,
 NL80211_KEY_TYPE,
 NL80211_KEY_DEFAULT_TYPES,


 __NL80211_KEY_AFTER_LAST,
 NL80211_KEY_MAX = __NL80211_KEY_AFTER_LAST - 1
};
# 3637 "./include/uapi/linux/nl80211.h"
enum nl80211_tx_rate_attributes {
 __NL80211_TXRATE_INVALID,
 NL80211_TXRATE_LEGACY,
 NL80211_TXRATE_HT,
 NL80211_TXRATE_VHT,
 NL80211_TXRATE_GI,


 __NL80211_TXRATE_AFTER_LAST,
 NL80211_TXRATE_MAX = __NL80211_TXRATE_AFTER_LAST - 1
};
# 3656 "./include/uapi/linux/nl80211.h"
struct nl80211_txrate_vht {
 __u16 mcs[8];
};

enum nl80211_txrate_gi {
 NL80211_TXRATE_DEFAULT_GI,
 NL80211_TXRATE_FORCE_SGI,
 NL80211_TXRATE_FORCE_LGI,
};
# 3674 "./include/uapi/linux/nl80211.h"
enum nl80211_band {
 NL80211_BAND_2GHZ,
 NL80211_BAND_5GHZ,
 NL80211_BAND_60GHZ,

 NUM_NL80211_BANDS,
};






enum nl80211_ps_state {
 NL80211_PS_DISABLED,
 NL80211_PS_ENABLED,
};
# 3720 "./include/uapi/linux/nl80211.h"
enum nl80211_attr_cqm {
 __NL80211_ATTR_CQM_INVALID,
 NL80211_ATTR_CQM_RSSI_THOLD,
 NL80211_ATTR_CQM_RSSI_HYST,
 NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT,
 NL80211_ATTR_CQM_PKT_LOSS_EVENT,
 NL80211_ATTR_CQM_TXE_RATE,
 NL80211_ATTR_CQM_TXE_PKTS,
 NL80211_ATTR_CQM_TXE_INTVL,
 NL80211_ATTR_CQM_BEACON_LOSS_EVENT,


 __NL80211_ATTR_CQM_AFTER_LAST,
 NL80211_ATTR_CQM_MAX = __NL80211_ATTR_CQM_AFTER_LAST - 1
};
# 3744 "./include/uapi/linux/nl80211.h"
enum nl80211_cqm_rssi_threshold_event {
 NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW,
 NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH,
 NL80211_CQM_RSSI_BEACON_LOSS_EVENT,
};
# 3757 "./include/uapi/linux/nl80211.h"
enum nl80211_tx_power_setting {
 NL80211_TX_POWER_AUTOMATIC,
 NL80211_TX_POWER_LIMITED,
 NL80211_TX_POWER_FIXED,
};
# 3784 "./include/uapi/linux/nl80211.h"
enum nl80211_packet_pattern_attr {
 __NL80211_PKTPAT_INVALID,
 NL80211_PKTPAT_MASK,
 NL80211_PKTPAT_PATTERN,
 NL80211_PKTPAT_OFFSET,

 NUM_NL80211_PKTPAT,
 MAX_NL80211_PKTPAT = NUM_NL80211_PKTPAT - 1,
};
# 3807 "./include/uapi/linux/nl80211.h"
struct nl80211_pattern_support {
 __u32 max_patterns;
 __u32 min_pattern_len;
 __u32 max_pattern_len;
 __u32 max_pkt_offset;
} __attribute__((packed));
# 3912 "./include/uapi/linux/nl80211.h"
enum nl80211_wowlan_triggers {
 __NL80211_WOWLAN_TRIG_INVALID,
 NL80211_WOWLAN_TRIG_ANY,
 NL80211_WOWLAN_TRIG_DISCONNECT,
 NL80211_WOWLAN_TRIG_MAGIC_PKT,
 NL80211_WOWLAN_TRIG_PKT_PATTERN,
 NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED,
 NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE,
 NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST,
 NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE,
 NL80211_WOWLAN_TRIG_RFKILL_RELEASE,
 NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211,
 NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN,
 NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023,
 NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN,
 NL80211_WOWLAN_TRIG_TCP_CONNECTION,
 NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH,
 NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST,
 NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS,
 NL80211_WOWLAN_TRIG_NET_DETECT,
 NL80211_WOWLAN_TRIG_NET_DETECT_RESULTS,


 NUM_NL80211_WOWLAN_TRIG,
 MAX_NL80211_WOWLAN_TRIG = NUM_NL80211_WOWLAN_TRIG - 1
};
# 3972 "./include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
 __u32 start, offset, len;
};
# 3983 "./include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
 __u32 offset, len;
 __u8 token_stream[];
};







struct nl80211_wowlan_tcp_data_token_feature {
 __u32 min_len, max_len, bufsize;
};
# 4030 "./include/uapi/linux/nl80211.h"
enum nl80211_wowlan_tcp_attrs {
 __NL80211_WOWLAN_TCP_INVALID,
 NL80211_WOWLAN_TCP_SRC_IPV4,
 NL80211_WOWLAN_TCP_DST_IPV4,
 NL80211_WOWLAN_TCP_DST_MAC,
 NL80211_WOWLAN_TCP_SRC_PORT,
 NL80211_WOWLAN_TCP_DST_PORT,
 NL80211_WOWLAN_TCP_DATA_PAYLOAD,
 NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ,
 NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN,
 NL80211_WOWLAN_TCP_DATA_INTERVAL,
 NL80211_WOWLAN_TCP_WAKE_PAYLOAD,
 NL80211_WOWLAN_TCP_WAKE_MASK,


 NUM_NL80211_WOWLAN_TCP,
 MAX_NL80211_WOWLAN_TCP = NUM_NL80211_WOWLAN_TCP - 1
};
# 4058 "./include/uapi/linux/nl80211.h"
struct nl80211_coalesce_rule_support {
 __u32 max_rules;
 struct nl80211_pattern_support pat;
 __u32 max_delay;
} __attribute__((packed));
# 4075 "./include/uapi/linux/nl80211.h"
enum nl80211_attr_coalesce_rule {
 __NL80211_COALESCE_RULE_INVALID,
 NL80211_ATTR_COALESCE_RULE_DELAY,
 NL80211_ATTR_COALESCE_RULE_CONDITION,
 NL80211_ATTR_COALESCE_RULE_PKT_PATTERN,


 NUM_NL80211_ATTR_COALESCE_RULE,
 NL80211_ATTR_COALESCE_RULE_MAX = NUM_NL80211_ATTR_COALESCE_RULE - 1
};
# 4093 "./include/uapi/linux/nl80211.h"
enum nl80211_coalesce_condition {
 NL80211_COALESCE_CONDITION_MATCH,
 NL80211_COALESCE_CONDITION_NO_MATCH
};
# 4108 "./include/uapi/linux/nl80211.h"
enum nl80211_iface_limit_attrs {
 NL80211_IFACE_LIMIT_UNSPEC,
 NL80211_IFACE_LIMIT_MAX,
 NL80211_IFACE_LIMIT_TYPES,


 NUM_NL80211_IFACE_LIMIT,
 MAX_NL80211_IFACE_LIMIT = NUM_NL80211_IFACE_LIMIT - 1
};
# 4164 "./include/uapi/linux/nl80211.h"
enum nl80211_if_combination_attrs {
 NL80211_IFACE_COMB_UNSPEC,
 NL80211_IFACE_COMB_LIMITS,
 NL80211_IFACE_COMB_MAXNUM,
 NL80211_IFACE_COMB_STA_AP_BI_MATCH,
 NL80211_IFACE_COMB_NUM_CHANNELS,
 NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS,
 NL80211_IFACE_COMB_RADAR_DETECT_REGIONS,


 NUM_NL80211_IFACE_COMB,
 MAX_NL80211_IFACE_COMB = NUM_NL80211_IFACE_COMB - 1
};
# 4197 "./include/uapi/linux/nl80211.h"
enum nl80211_plink_state {
 NL80211_PLINK_LISTEN,
 NL80211_PLINK_OPN_SNT,
 NL80211_PLINK_OPN_RCVD,
 NL80211_PLINK_CNF_RCVD,
 NL80211_PLINK_ESTAB,
 NL80211_PLINK_HOLDING,
 NL80211_PLINK_BLOCKED,


 NUM_NL80211_PLINK_STATES,
 MAX_NL80211_PLINK_STATES = NUM_NL80211_PLINK_STATES - 1
};
# 4219 "./include/uapi/linux/nl80211.h"
enum plink_actions {
 NL80211_PLINK_ACTION_NO_ACTION,
 NL80211_PLINK_ACTION_OPEN,
 NL80211_PLINK_ACTION_BLOCK,

 NUM_NL80211_PLINK_ACTIONS,
};
# 4241 "./include/uapi/linux/nl80211.h"
enum nl80211_rekey_data {
 __NL80211_REKEY_DATA_INVALID,
 NL80211_REKEY_DATA_KEK,
 NL80211_REKEY_DATA_KCK,
 NL80211_REKEY_DATA_REPLAY_CTR,


 NUM_NL80211_REKEY_DATA,
 MAX_NL80211_REKEY_DATA = NUM_NL80211_REKEY_DATA - 1
};
# 4261 "./include/uapi/linux/nl80211.h"
enum nl80211_hidden_ssid {
 NL80211_HIDDEN_SSID_NOT_IN_USE,
 NL80211_HIDDEN_SSID_ZERO_LEN,
 NL80211_HIDDEN_SSID_ZERO_CONTENTS
};
# 4277 "./include/uapi/linux/nl80211.h"
enum nl80211_sta_wme_attr {
 __NL80211_STA_WME_INVALID,
 NL80211_STA_WME_UAPSD_QUEUES,
 NL80211_STA_WME_MAX_SP,


 __NL80211_STA_WME_AFTER_LAST,
 NL80211_STA_WME_MAX = __NL80211_STA_WME_AFTER_LAST - 1
};
# 4299 "./include/uapi/linux/nl80211.h"
enum nl80211_pmksa_candidate_attr {
 __NL80211_PMKSA_CANDIDATE_INVALID,
 NL80211_PMKSA_CANDIDATE_INDEX,
 NL80211_PMKSA_CANDIDATE_BSSID,
 NL80211_PMKSA_CANDIDATE_PREAUTH,


 NUM_NL80211_PMKSA_CANDIDATE,
 MAX_NL80211_PMKSA_CANDIDATE = NUM_NL80211_PMKSA_CANDIDATE - 1
};
# 4318 "./include/uapi/linux/nl80211.h"
enum nl80211_tdls_operation {
 NL80211_TDLS_DISCOVERY_REQ,
 NL80211_TDLS_SETUP,
 NL80211_TDLS_TEARDOWN,
 NL80211_TDLS_ENABLE_LINK,
 NL80211_TDLS_DISABLE_LINK,
};
# 4427 "./include/uapi/linux/nl80211.h"
enum nl80211_feature_flags {
 NL80211_FEATURE_SK_TX_STATUS = 1 << 0,
 NL80211_FEATURE_HT_IBSS = 1 << 1,
 NL80211_FEATURE_INACTIVITY_TIMER = 1 << 2,
 NL80211_FEATURE_CELL_BASE_REG_HINTS = 1 << 3,
 NL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL = 1 << 4,
 NL80211_FEATURE_SAE = 1 << 5,
 NL80211_FEATURE_LOW_PRIORITY_SCAN = 1 << 6,
 NL80211_FEATURE_SCAN_FLUSH = 1 << 7,
 NL80211_FEATURE_AP_SCAN = 1 << 8,
 NL80211_FEATURE_VIF_TXPOWER = 1 << 9,
 NL80211_FEATURE_NEED_OBSS_SCAN = 1 << 10,
 NL80211_FEATURE_P2P_GO_CTWIN = 1 << 11,
 NL80211_FEATURE_P2P_GO_OPPPS = 1 << 12,

 NL80211_FEATURE_ADVERTISE_CHAN_LIMITS = 1 << 14,
 NL80211_FEATURE_FULL_AP_CLIENT_STATE = 1 << 15,
 NL80211_FEATURE_USERSPACE_MPM = 1 << 16,
 NL80211_FEATURE_ACTIVE_MONITOR = 1 << 17,
 NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE = 1 << 18,
 NL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES = 1 << 19,
 NL80211_FEATURE_WFA_TPC_IE_IN_PROBES = 1 << 20,
 NL80211_FEATURE_QUIET = 1 << 21,
 NL80211_FEATURE_TX_POWER_INSERTION = 1 << 22,
 NL80211_FEATURE_ACKTO_ESTIMATION = 1 << 23,
 NL80211_FEATURE_STATIC_SMPS = 1 << 24,
 NL80211_FEATURE_DYNAMIC_SMPS = 1 << 25,
 NL80211_FEATURE_SUPPORTS_WMM_ADMISSION = 1 << 26,
 NL80211_FEATURE_MAC_ON_CREATE = 1 << 27,
 NL80211_FEATURE_TDLS_CHANNEL_SWITCH = 1 << 28,
 NL80211_FEATURE_SCAN_RANDOM_MAC_ADDR = 1 << 29,
 NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR = 1 << 30,
 NL80211_FEATURE_ND_RANDOM_MAC_ADDR = 1 << 31,
};
# 4474 "./include/uapi/linux/nl80211.h"
enum nl80211_ext_feature_index {
 NL80211_EXT_FEATURE_VHT_IBSS,
 NL80211_EXT_FEATURE_RRM,


 NUM_NL80211_EXT_FEATURES,
 MAX_NL80211_EXT_FEATURES = NUM_NL80211_EXT_FEATURES - 1
};
# 4497 "./include/uapi/linux/nl80211.h"
enum nl80211_probe_resp_offload_support_attr {
 NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS = 1<<0,
 NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2 = 1<<1,
 NL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P = 1<<2,
 NL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U = 1<<3,
};







enum nl80211_connect_failed_reason {
 NL80211_CONN_FAIL_MAX_CLIENTS,
 NL80211_CONN_FAIL_BLOCKED_CLIENT,
};
# 4539 "./include/uapi/linux/nl80211.h"
enum nl80211_scan_flags {
 NL80211_SCAN_FLAG_LOW_PRIORITY = 1<<0,
 NL80211_SCAN_FLAG_FLUSH = 1<<1,
 NL80211_SCAN_FLAG_AP = 1<<2,
 NL80211_SCAN_FLAG_RANDOM_ADDR = 1<<3,
};
# 4559 "./include/uapi/linux/nl80211.h"
enum nl80211_acl_policy {
 NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED,
 NL80211_ACL_POLICY_DENY_UNLESS_LISTED,
};
# 4574 "./include/uapi/linux/nl80211.h"
enum nl80211_smps_mode {
 NL80211_SMPS_OFF,
 NL80211_SMPS_STATIC,
 NL80211_SMPS_DYNAMIC,

 __NL80211_SMPS_AFTER_LAST,
 NL80211_SMPS_MAX = __NL80211_SMPS_AFTER_LAST - 1
};
# 4598 "./include/uapi/linux/nl80211.h"
enum nl80211_radar_event {
 NL80211_RADAR_DETECTED,
 NL80211_RADAR_CAC_FINISHED,
 NL80211_RADAR_CAC_ABORTED,
 NL80211_RADAR_NOP_FINISHED,
};
# 4616 "./include/uapi/linux/nl80211.h"
enum nl80211_dfs_state {
 NL80211_DFS_USABLE,
 NL80211_DFS_UNAVAILABLE,
 NL80211_DFS_AVAILABLE,
};
# 4630 "./include/uapi/linux/nl80211.h"
enum nl80211_protocol_features {
 NL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP = 1 << 0,
};
# 4643 "./include/uapi/linux/nl80211.h"
enum nl80211_crit_proto_id {
 NL80211_CRIT_PROTO_UNSPEC,
 NL80211_CRIT_PROTO_DHCP,
 NL80211_CRIT_PROTO_EAPOL,
 NL80211_CRIT_PROTO_APIPA,

 NUM_NL80211_CRIT_PROTO
};
# 4662 "./include/uapi/linux/nl80211.h"
enum nl80211_rxmgmt_flags {
 NL80211_RXMGMT_FLAG_ANSWERED = 1 << 0,
};
# 4681 "./include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
 __u32 vendor_id;
 __u32 subcmd;
};
# 4696 "./include/uapi/linux/nl80211.h"
enum nl80211_tdls_peer_capability {
 NL80211_TDLS_PEER_HT = 1<<0,
 NL80211_TDLS_PEER_VHT = 1<<1,
 NL80211_TDLS_PEER_WMM = 1<<2,
};
# 4715 "./include/uapi/linux/nl80211.h"
enum nl80211_sched_scan_plan {
 __NL80211_SCHED_SCAN_PLAN_INVALID,
 NL80211_SCHED_SCAN_PLAN_INTERVAL,
 NL80211_SCHED_SCAN_PLAN_ITERATIONS,


 __NL80211_SCHED_SCAN_PLAN_AFTER_LAST,
 NL80211_SCHED_SCAN_PLAN_MAX =
  __NL80211_SCHED_SCAN_PLAN_AFTER_LAST - 1
};







struct nl80211_bss_select_rssi_adjust {
 __u8 band;
 __s8 delta;
} __attribute__((packed));
# 4759 "./include/uapi/linux/nl80211.h"
enum nl80211_bss_select_attr {
 __NL80211_BSS_SELECT_ATTR_INVALID,
 NL80211_BSS_SELECT_ATTR_RSSI,
 NL80211_BSS_SELECT_ATTR_BAND_PREF,
 NL80211_BSS_SELECT_ATTR_RSSI_ADJUST,


 __NL80211_BSS_SELECT_ATTR_AFTER_LAST,
 NL80211_BSS_SELECT_ATTR_MAX = __NL80211_BSS_SELECT_ATTR_AFTER_LAST - 1
};
# 22 "include/net/cfg80211.h" 2



# 1 "include/net/regulatory.h" 1
# 30 "include/net/regulatory.h"
enum environment_cap {
 ENVIRON_ANY,
 ENVIRON_INDOOR,
 ENVIRON_OUTDOOR,
};
# 76 "include/net/regulatory.h"
struct regulatory_request {
 struct callback_head callback_head;
 int wiphy_idx;
 enum nl80211_reg_initiator initiator;
 enum nl80211_user_reg_hint_type user_reg_hint_type;
 char alpha2[2];
 enum nl80211_dfs_regions dfs_region;
 bool intersect;
 bool processed;
 enum environment_cap country_ie_env;
 struct list_head list;
};
# 169 "include/net/regulatory.h"
enum ieee80211_regulatory_flags {
 REGULATORY_CUSTOM_REG = (1UL << (0)),
 REGULATORY_STRICT_REG = (1UL << (1)),
 REGULATORY_DISABLE_BEACON_HINTS = (1UL << (2)),
 REGULATORY_COUNTRY_IE_FOLLOW_POWER = (1UL << (3)),
 REGULATORY_COUNTRY_IE_IGNORE = (1UL << (4)),
 REGULATORY_ENABLE_RELAX_NO_IR = (1UL << (5)),
 REGULATORY_IGNORE_STALE_KICKOFF = (1UL << (6)),
 REGULATORY_WIPHY_SELF_MANAGED = (1UL << (7)),
};

struct ieee80211_freq_range {
 u32 start_freq_khz;
 u32 end_freq_khz;
 u32 max_bandwidth_khz;
};

struct ieee80211_power_rule {
 u32 max_antenna_gain;
 u32 max_eirp;
};

struct ieee80211_reg_rule {
 struct ieee80211_freq_range freq_range;
 struct ieee80211_power_rule power_rule;
 u32 flags;
 u32 dfs_cac_ms;
};

struct ieee80211_regdomain {
 struct callback_head callback_head;
 u32 n_reg_rules;
 char alpha2[3];
 enum nl80211_dfs_regions dfs_region;
 struct ieee80211_reg_rule reg_rules[];
};
# 26 "include/net/cfg80211.h" 2
# 64 "include/net/cfg80211.h"
struct wiphy;
# 102 "include/net/cfg80211.h"
enum ieee80211_channel_flags {
 IEEE80211_CHAN_DISABLED = 1<<0,
 IEEE80211_CHAN_NO_IR = 1<<1,

 IEEE80211_CHAN_RADAR = 1<<3,
 IEEE80211_CHAN_NO_HT40PLUS = 1<<4,
 IEEE80211_CHAN_NO_HT40MINUS = 1<<5,
 IEEE80211_CHAN_NO_OFDM = 1<<6,
 IEEE80211_CHAN_NO_80MHZ = 1<<7,
 IEEE80211_CHAN_NO_160MHZ = 1<<8,
 IEEE80211_CHAN_INDOOR_ONLY = 1<<9,
 IEEE80211_CHAN_IR_CONCURRENT = 1<<10,
 IEEE80211_CHAN_NO_20MHZ = 1<<11,
 IEEE80211_CHAN_NO_10MHZ = 1<<12,
};
# 149 "include/net/cfg80211.h"
struct ieee80211_channel {
 enum nl80211_band band;
 u16 center_freq;
 u16 hw_value;
 u32 flags;
 int max_antenna_gain;
 int max_power;
 int max_reg_power;
 bool beacon_found;
 u32 orig_flags;
 int orig_mag, orig_mpwr;
 enum nl80211_dfs_state dfs_state;
 unsigned long dfs_state_entered;
 unsigned int dfs_cac_ms;
};
# 188 "include/net/cfg80211.h"
enum ieee80211_rate_flags {
 IEEE80211_RATE_SHORT_PREAMBLE = 1<<0,
 IEEE80211_RATE_MANDATORY_A = 1<<1,
 IEEE80211_RATE_MANDATORY_B = 1<<2,
 IEEE80211_RATE_MANDATORY_G = 1<<3,
 IEEE80211_RATE_ERP_G = 1<<4,
 IEEE80211_RATE_SUPPORTS_5MHZ = 1<<5,
 IEEE80211_RATE_SUPPORTS_10MHZ = 1<<6,
};
# 207 "include/net/cfg80211.h"
enum ieee80211_bss_type {
 IEEE80211_BSS_TYPE_ESS,
 IEEE80211_BSS_TYPE_PBSS,
 IEEE80211_BSS_TYPE_IBSS,
 IEEE80211_BSS_TYPE_MBSS,
 IEEE80211_BSS_TYPE_ANY
};
# 222 "include/net/cfg80211.h"
enum ieee80211_privacy {
 IEEE80211_PRIVACY_ON,
 IEEE80211_PRIVACY_OFF,
 IEEE80211_PRIVACY_ANY
};
# 245 "include/net/cfg80211.h"
struct ieee80211_rate {
 u32 flags;
 u16 bitrate;
 u16 hw_value, hw_value_short;
};
# 263 "include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
 u16 cap;
 bool ht_supported;
 u8 ampdu_factor;
 u8 ampdu_density;
 struct ieee80211_mcs_info mcs;
};
# 281 "include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
 bool vht_supported;
 u32 cap;
 struct ieee80211_vht_mcs_info vht_mcs;
};
# 304 "include/net/cfg80211.h"
struct ieee80211_supported_band {
 struct ieee80211_channel *channels;
 struct ieee80211_rate *bitrates;
 enum nl80211_band band;
 int n_channels;
 int n_bitrates;
 struct ieee80211_sta_ht_cap ht_cap;
 struct ieee80211_sta_vht_cap vht_cap;
};
# 343 "include/net/cfg80211.h"
struct vif_params {
       int use_4addr;
       u8 macaddr[6];
};
# 361 "include/net/cfg80211.h"
struct key_params {
 const u8 *key;
 const u8 *seq;
 int key_len;
 int seq_len;
 u32 cipher;
};
# 377 "include/net/cfg80211.h"
struct cfg80211_chan_def {
 struct ieee80211_channel *chan;
 enum nl80211_chan_width width;
 u32 center_freq1;
 u32 center_freq2;
};
# 391 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) enum nl80211_channel_type
cfg80211_get_chandef_type(const struct cfg80211_chan_def *chandef)
{
 switch (chandef->width) {
 case NL80211_CHAN_WIDTH_20_NOHT:
  return NL80211_CHAN_NO_HT;
 case NL80211_CHAN_WIDTH_20:
  return NL80211_CHAN_HT20;
 case NL80211_CHAN_WIDTH_40:
  if (chandef->center_freq1 > chandef->chan->center_freq)
   return NL80211_CHAN_HT40PLUS;
  return NL80211_CHAN_HT40MINUS;
 default:
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/net/cfg80211.h", 404); __builtin_expect(!!(__ret_warn_on), 0); });
  return NL80211_CHAN_NO_HT;
 }
}
# 417 "include/net/cfg80211.h"
void cfg80211_chandef_create(struct cfg80211_chan_def *chandef,
        struct ieee80211_channel *channel,
        enum nl80211_channel_type chantype);
# 429 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) bool
cfg80211_chandef_identical(const struct cfg80211_chan_def *chandef1,
      const struct cfg80211_chan_def *chandef2)
{
 return (chandef1->chan == chandef2->chan &&
  chandef1->width == chandef2->width &&
  chandef1->center_freq1 == chandef2->center_freq1 &&
  chandef1->center_freq2 == chandef2->center_freq2);
}
# 447 "include/net/cfg80211.h"
const struct cfg80211_chan_def *
cfg80211_chandef_compatible(const struct cfg80211_chan_def *chandef1,
       const struct cfg80211_chan_def *chandef2);






bool cfg80211_chandef_valid(const struct cfg80211_chan_def *chandef);
# 465 "include/net/cfg80211.h"
bool cfg80211_chandef_usable(struct wiphy *wiphy,
        const struct cfg80211_chan_def *chandef,
        u32 prohibited_flags);
# 477 "include/net/cfg80211.h"
int cfg80211_chandef_dfs_required(struct wiphy *wiphy,
      const struct cfg80211_chan_def *chandef,
      enum nl80211_iftype iftype);
# 491 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) enum ieee80211_rate_flags
ieee80211_chandef_rate_flags(struct cfg80211_chan_def *chandef)
{
 switch (chandef->width) {
 case NL80211_CHAN_WIDTH_5:
  return IEEE80211_RATE_SUPPORTS_5MHZ;
 case NL80211_CHAN_WIDTH_10:
  return IEEE80211_RATE_SUPPORTS_10MHZ;
 default:
  break;
 }
 return 0;
}
# 516 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) int
ieee80211_chandef_max_power(struct cfg80211_chan_def *chandef)
{
 switch (chandef->width) {
 case NL80211_CHAN_WIDTH_5:
  return ({ typeof(chandef->chan->max_reg_power - 6) _min1 = (chandef->chan->max_reg_power - 6); typeof(chandef->chan->max_power) _min2 = (chandef->chan->max_power); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
                               ;
 case NL80211_CHAN_WIDTH_10:
  return ({ typeof(chandef->chan->max_reg_power - 3) _min1 = (chandef->chan->max_reg_power - 3); typeof(chandef->chan->max_power) _min2 = (chandef->chan->max_power); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
                               ;
 default:
  break;
 }
 return chandef->chan->max_power;
}
# 547 "include/net/cfg80211.h"
enum survey_info_flags {
 SURVEY_INFO_NOISE_DBM = (1UL << (0)),
 SURVEY_INFO_IN_USE = (1UL << (1)),
 SURVEY_INFO_TIME = (1UL << (2)),
 SURVEY_INFO_TIME_BUSY = (1UL << (3)),
 SURVEY_INFO_TIME_EXT_BUSY = (1UL << (4)),
 SURVEY_INFO_TIME_RX = (1UL << (5)),
 SURVEY_INFO_TIME_TX = (1UL << (6)),
 SURVEY_INFO_TIME_SCAN = (1UL << (7)),
};
# 578 "include/net/cfg80211.h"
struct survey_info {
 struct ieee80211_channel *channel;
 u64 time;
 u64 time_busy;
 u64 time_ext_busy;
 u64 time_rx;
 u64 time_tx;
 u64 time_scan;
 u32 filled;
 s8 noise;
};
# 608 "include/net/cfg80211.h"
struct cfg80211_crypto_settings {
 u32 wpa_versions;
 u32 cipher_group;
 int n_ciphers_pairwise;
 u32 ciphers_pairwise[5];
 int n_akm_suites;
 u32 akm_suites[2];
 bool control_port;
 __be16 control_port_ethertype;
 bool control_port_no_encrypt;
};
# 639 "include/net/cfg80211.h"
struct cfg80211_beacon_data {
 const u8 *head, *tail;
 const u8 *beacon_ies;
 const u8 *proberesp_ies;
 const u8 *assocresp_ies;
 const u8 *probe_resp;

 size_t head_len, tail_len;
 size_t beacon_ies_len;
 size_t proberesp_ies_len;
 size_t assocresp_ies_len;
 size_t probe_resp_len;
};

struct mac_address {
 u8 addr[6];
};
# 665 "include/net/cfg80211.h"
struct cfg80211_acl_data {
 enum nl80211_acl_policy acl_policy;
 int n_acl_entries;


 struct mac_address mac_addrs[];
};
# 698 "include/net/cfg80211.h"
struct cfg80211_ap_settings {
 struct cfg80211_chan_def chandef;

 struct cfg80211_beacon_data beacon;

 int beacon_interval, dtim_period;
 const u8 *ssid;
 size_t ssid_len;
 enum nl80211_hidden_ssid hidden_ssid;
 struct cfg80211_crypto_settings crypto;
 bool privacy;
 enum nl80211_auth_type auth_type;
 enum nl80211_smps_mode smps_mode;
 int inactivity_timeout;
 u8 p2p_ctwindow;
 bool p2p_opp_ps;
 const struct cfg80211_acl_data *acl;
 bool pbss;
};
# 734 "include/net/cfg80211.h"
struct cfg80211_csa_settings {
 struct cfg80211_chan_def chandef;
 struct cfg80211_beacon_data beacon_csa;
 const u16 *counter_offsets_beacon;
 const u16 *counter_offsets_presp;
 unsigned int n_counter_offsets_beacon;
 unsigned int n_counter_offsets_presp;
 struct cfg80211_beacon_data beacon_after;
 bool radar_required;
 bool block_tx;
 u8 count;
};
# 756 "include/net/cfg80211.h"
enum station_parameters_apply_mask {
 STATION_PARAM_APPLY_UAPSD = (1UL << (0)),
 STATION_PARAM_APPLY_CAPABILITY = (1UL << (1)),
 STATION_PARAM_APPLY_PLINK_STATE = (1UL << (2)),
};
# 801 "include/net/cfg80211.h"
struct station_parameters {
 const u8 *supported_rates;
 struct net_device *vlan;
 u32 sta_flags_mask, sta_flags_set;
 u32 sta_modify_mask;
 int listen_interval;
 u16 aid;
 u8 supported_rates_len;
 u8 plink_action;
 u8 plink_state;
 const struct ieee80211_ht_cap *ht_capa;
 const struct ieee80211_vht_cap *vht_capa;
 u8 uapsd_queues;
 u8 max_sp;
 enum nl80211_mesh_power_mode local_pm;
 u16 capability;
 const u8 *ext_capab;
 u8 ext_capab_len;
 const u8 *supported_channels;
 u8 supported_channels_len;
 const u8 *supported_oper_classes;
 u8 supported_oper_classes_len;
 u8 opmode_notif;
 bool opmode_notif_used;
 int support_p2p_ps;
};
# 838 "include/net/cfg80211.h"
struct station_del_parameters {
 const u8 *mac;
 u8 subtype;
 u16 reason_code;
};
# 862 "include/net/cfg80211.h"
enum cfg80211_station_type {
 CFG80211_STA_AP_CLIENT,
 CFG80211_STA_AP_CLIENT_UNASSOC,
 CFG80211_STA_AP_MLME_CLIENT,
 CFG80211_STA_AP_STA,
 CFG80211_STA_IBSS,
 CFG80211_STA_TDLS_PEER_SETUP,
 CFG80211_STA_TDLS_PEER_ACTIVE,
 CFG80211_STA_MESH_PEER_KERNEL,
 CFG80211_STA_MESH_PEER_USER,
};
# 886 "include/net/cfg80211.h"
int cfg80211_check_station_change(struct wiphy *wiphy,
      struct station_parameters *params,
      enum cfg80211_station_type statype);
# 901 "include/net/cfg80211.h"
enum rate_info_flags {
 RATE_INFO_FLAGS_MCS = (1UL << (0)),
 RATE_INFO_FLAGS_VHT_MCS = (1UL << (1)),
 RATE_INFO_FLAGS_SHORT_GI = (1UL << (2)),
 RATE_INFO_FLAGS_60G = (1UL << (3)),
};
# 920 "include/net/cfg80211.h"
enum rate_info_bw {
 RATE_INFO_BW_5,
 RATE_INFO_BW_10,
 RATE_INFO_BW_20,
 RATE_INFO_BW_40,
 RATE_INFO_BW_80,
 RATE_INFO_BW_160,
};
# 940 "include/net/cfg80211.h"
struct rate_info {
 u8 flags;
 u8 mcs;
 u16 legacy;
 u8 nss;
 u8 bw;
};
# 958 "include/net/cfg80211.h"
enum bss_param_flags {
 BSS_PARAM_FLAGS_CTS_PROT = 1<<0,
 BSS_PARAM_FLAGS_SHORT_PREAMBLE = 1<<1,
 BSS_PARAM_FLAGS_SHORT_SLOT_TIME = 1<<2,
};
# 973 "include/net/cfg80211.h"
struct sta_bss_parameters {
 u8 flags;
 u8 dtim_period;
 u16 beacon_interval;
};
# 989 "include/net/cfg80211.h"
struct cfg80211_tid_stats {
 u32 filled;
 u64 rx_msdu;
 u64 tx_msdu;
 u64 tx_msdu_retries;
 u64 tx_msdu_failed;
};
# 1052 "include/net/cfg80211.h"
struct station_info {
 u64 filled;
 u32 connected_time;
 u32 inactive_time;
 u64 rx_bytes;
 u64 tx_bytes;
 u16 llid;
 u16 plid;
 u8 plink_state;
 s8 signal;
 s8 signal_avg;

 u8 chains;
 s8 chain_signal[4];
 s8 chain_signal_avg[4];

 struct rate_info txrate;
 struct rate_info rxrate;
 u32 rx_packets;
 u32 tx_packets;
 u32 tx_retries;
 u32 tx_failed;
 u32 rx_dropped_misc;
 struct sta_bss_parameters bss_param;
 struct nl80211_sta_flag_update sta_flags;

 int generation;

 const u8 *assoc_req_ies;
 size_t assoc_req_ies_len;

 u32 beacon_loss_count;
 s64 t_offset;
 enum nl80211_mesh_power_mode local_pm;
 enum nl80211_mesh_power_mode peer_pm;
 enum nl80211_mesh_power_mode nonpeer_pm;

 u32 expected_throughput;

 u64 rx_beacon;
 u64 rx_duration;
 u8 rx_beacon_signal_avg;
 struct cfg80211_tid_stats pertid[16 + 1];
};
# 1107 "include/net/cfg80211.h"
int cfg80211_get_station(struct net_device *dev, const u8 *mac_addr,
    struct station_info *sinfo);
# 1123 "include/net/cfg80211.h"
enum monitor_flags {
 MONITOR_FLAG_FCSFAIL = 1<<NL80211_MNTR_FLAG_FCSFAIL,
 MONITOR_FLAG_PLCPFAIL = 1<<NL80211_MNTR_FLAG_PLCPFAIL,
 MONITOR_FLAG_CONTROL = 1<<NL80211_MNTR_FLAG_CONTROL,
 MONITOR_FLAG_OTHER_BSS = 1<<NL80211_MNTR_FLAG_OTHER_BSS,
 MONITOR_FLAG_COOK_FRAMES = 1<<NL80211_MNTR_FLAG_COOK_FRAMES,
 MONITOR_FLAG_ACTIVE = 1<<NL80211_MNTR_FLAG_ACTIVE,
};
# 1146 "include/net/cfg80211.h"
enum mpath_info_flags {
 MPATH_INFO_FRAME_QLEN = (1UL << (0)),
 MPATH_INFO_SN = (1UL << (1)),
 MPATH_INFO_METRIC = (1UL << (2)),
 MPATH_INFO_EXPTIME = (1UL << (3)),
 MPATH_INFO_DISCOVERY_TIMEOUT = (1UL << (4)),
 MPATH_INFO_DISCOVERY_RETRIES = (1UL << (5)),
 MPATH_INFO_FLAGS = (1UL << (6)),
};
# 1174 "include/net/cfg80211.h"
struct mpath_info {
 u32 filled;
 u32 frame_qlen;
 u32 sn;
 u32 metric;
 u32 exptime;
 u32 discovery_timeout;
 u8 discovery_retries;
 u8 flags;

 int generation;
};
# 1207 "include/net/cfg80211.h"
struct bss_parameters {
 int use_cts_prot;
 int use_short_preamble;
 int use_short_slot_time;
 const u8 *basic_rates;
 u8 basic_rates_len;
 int ap_isolate;
 int ht_opmode;
 s8 p2p_ctwindow, p2p_opp_ps;
};
# 1288 "include/net/cfg80211.h"
struct mesh_config {
 u16 dot11MeshRetryTimeout;
 u16 dot11MeshConfirmTimeout;
 u16 dot11MeshHoldingTimeout;
 u16 dot11MeshMaxPeerLinks;
 u8 dot11MeshMaxRetries;
 u8 dot11MeshTTL;
 u8 element_ttl;
 bool auto_open_plinks;
 u32 dot11MeshNbrOffsetMaxNeighbor;
 u8 dot11MeshHWMPmaxPREQretries;
 u32 path_refresh_time;
 u16 min_discovery_timeout;
 u32 dot11MeshHWMPactivePathTimeout;
 u16 dot11MeshHWMPpreqMinInterval;
 u16 dot11MeshHWMPperrMinInterval;
 u16 dot11MeshHWMPnetDiameterTraversalTime;
 u8 dot11MeshHWMPRootMode;
 u16 dot11MeshHWMPRannInterval;
 bool dot11MeshGateAnnouncementProtocol;
 bool dot11MeshForwarding;
 s32 rssi_threshold;
 u16 ht_opmode;
 u32 dot11MeshHWMPactivePathToRootTimeout;
 u16 dot11MeshHWMProotInterval;
 u16 dot11MeshHWMPconfirmationInterval;
 enum nl80211_mesh_power_mode power_mode;
 u16 dot11MeshAwakeWindowDuration;
 u32 plink_timeout;
};
# 1340 "include/net/cfg80211.h"
struct mesh_setup {
 struct cfg80211_chan_def chandef;
 const u8 *mesh_id;
 u8 mesh_id_len;
 u8 sync_method;
 u8 path_sel_proto;
 u8 path_metric;
 u8 auth_id;
 const u8 *ie;
 u8 ie_len;
 bool is_authenticated;
 bool is_secure;
 bool user_mpm;
 u8 dtim_period;
 u16 beacon_interval;
 int mcast_rate[NUM_NL80211_BANDS];
 u32 basic_rates;
};







struct ocb_setup {
 struct cfg80211_chan_def chandef;
};
# 1379 "include/net/cfg80211.h"
struct ieee80211_txq_params {
 enum nl80211_ac ac;
 u16 txop;
 u16 cwmin;
 u16 cwmax;
 u8 aifs;
};
# 1415 "include/net/cfg80211.h"
struct cfg80211_ssid {
 u8 ssid[32];
 u8 ssid_len;
};
# 1444 "include/net/cfg80211.h"
struct cfg80211_scan_request {
 struct cfg80211_ssid *ssids;
 int n_ssids;
 u32 n_channels;
 enum nl80211_bss_scan_width scan_width;
 const u8 *ie;
 size_t ie_len;
 u32 flags;

 u32 rates[NUM_NL80211_BANDS];

 struct wireless_dev *wdev;

 u8 mac_addr[6] __attribute__((aligned(2)));
 u8 mac_addr_mask[6] __attribute__((aligned(2)));
 u8 bssid[6] __attribute__((aligned(2)));


 struct wiphy *wiphy;
 unsigned long scan_start;
 bool aborted, notified;
 bool no_cck;


 struct ieee80211_channel *channels[0];
};

static inline __attribute__((no_instrument_function)) void get_random_mask_addr(u8 *buf, const u8 *addr, const u8 *mask)
{
 int i;

 get_random_bytes(buf, 6);
 for (i = 0; i < 6; i++) {
  buf[i] &= ~mask[i];
  buf[i] |= addr[i] & mask[i];
 }
}







struct cfg80211_match_set {
 struct cfg80211_ssid ssid;
 s32 rssi_thold;
};
# 1502 "include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
 u32 interval;
 u32 iterations;
};
# 1543 "include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
 struct cfg80211_ssid *ssids;
 int n_ssids;
 u32 n_channels;
 enum nl80211_bss_scan_width scan_width;
 const u8 *ie;
 size_t ie_len;
 u32 flags;
 struct cfg80211_match_set *match_sets;
 int n_match_sets;
 s32 min_rssi_thold;
 u32 delay;
 struct cfg80211_sched_scan_plan *scan_plans;
 int n_scan_plans;

 u8 mac_addr[6] __attribute__((aligned(2)));
 u8 mac_addr_mask[6] __attribute__((aligned(2)));


 struct wiphy *wiphy;
 struct net_device *dev;
 unsigned long scan_start;
 struct callback_head callback_head;
 u32 owner_nlportid;


 struct ieee80211_channel *channels[0];
};
# 1579 "include/net/cfg80211.h"
enum cfg80211_signal_type {
 CFG80211_SIGNAL_TYPE_NONE,
 CFG80211_SIGNAL_TYPE_MBM,
 CFG80211_SIGNAL_TYPE_UNSPEC,
};
# 1598 "include/net/cfg80211.h"
struct cfg80211_inform_bss {
 struct ieee80211_channel *chan;
 enum nl80211_bss_scan_width scan_width;
 s32 signal;
 u64 boottime_ns;
};
# 1613 "include/net/cfg80211.h"
struct cfg80211_bss_ies {
 u64 tsf;
 struct callback_head callback_head;
 int len;
 bool from_beacon;
 u8 data[];
};
# 1648 "include/net/cfg80211.h"
struct cfg80211_bss {
 struct ieee80211_channel *channel;
 enum nl80211_bss_scan_width scan_width;

 const struct cfg80211_bss_ies *ies;
 const struct cfg80211_bss_ies *beacon_ies;
 const struct cfg80211_bss_ies *proberesp_ies;

 struct cfg80211_bss *hidden_beacon_bss;

 s32 signal;

 u16 beacon_interval;
 u16 capability;

 u8 bssid[6];

 u8 priv[0] __attribute__((aligned(sizeof(void *))));
};
# 1677 "include/net/cfg80211.h"
const u8 *ieee80211_bss_get_ie(struct cfg80211_bss *bss, u8 ie);
# 1698 "include/net/cfg80211.h"
struct cfg80211_auth_request {
 struct cfg80211_bss *bss;
 const u8 *ie;
 size_t ie_len;
 enum nl80211_auth_type auth_type;
 const u8 *key;
 u8 key_len, key_idx;
 const u8 *sae_data;
 size_t sae_data_len;
};
# 1716 "include/net/cfg80211.h"
enum cfg80211_assoc_req_flags {
 ASSOC_REQ_DISABLE_HT = (1UL << (0)),
 ASSOC_REQ_DISABLE_VHT = (1UL << (1)),
 ASSOC_REQ_USE_RRM = (1UL << (2)),
};
# 1748 "include/net/cfg80211.h"
struct cfg80211_assoc_request {
 struct cfg80211_bss *bss;
 const u8 *ie, *prev_bssid;
 size_t ie_len;
 struct cfg80211_crypto_settings crypto;
 bool use_mfp;
 u32 flags;
 struct ieee80211_ht_cap ht_capa;
 struct ieee80211_ht_cap ht_capa_mask;
 struct ieee80211_vht_cap vht_capa, vht_capa_mask;
};
# 1773 "include/net/cfg80211.h"
struct cfg80211_deauth_request {
 const u8 *bssid;
 const u8 *ie;
 size_t ie_len;
 u16 reason_code;
 bool local_state_change;
};
# 1794 "include/net/cfg80211.h"
struct cfg80211_disassoc_request {
 struct cfg80211_bss *bss;
 const u8 *ie;
 size_t ie_len;
 u16 reason_code;
 bool local_state_change;
};
# 1833 "include/net/cfg80211.h"
struct cfg80211_ibss_params {
 const u8 *ssid;
 const u8 *bssid;
 struct cfg80211_chan_def chandef;
 const u8 *ie;
 u8 ssid_len, ie_len;
 u16 beacon_interval;
 u32 basic_rates;
 bool channel_fixed;
 bool privacy;
 bool control_port;
 bool userspace_handles_dfs;
 int mcast_rate[NUM_NL80211_BANDS];
 struct ieee80211_ht_cap ht_capa;
 struct ieee80211_ht_cap ht_capa_mask;
};







struct cfg80211_bss_select_adjust {
 enum nl80211_band band;
 s8 delta;
};
# 1869 "include/net/cfg80211.h"
struct cfg80211_bss_selection {
 enum nl80211_bss_select_attr behaviour;
 union {
  enum nl80211_band band_pref;
  struct cfg80211_bss_select_adjust adjust;
 } param;
};
# 1922 "include/net/cfg80211.h"
struct cfg80211_connect_params {
 struct ieee80211_channel *channel;
 struct ieee80211_channel *channel_hint;
 const u8 *bssid;
 const u8 *bssid_hint;
 const u8 *ssid;
 size_t ssid_len;
 enum nl80211_auth_type auth_type;
 const u8 *ie;
 size_t ie_len;
 bool privacy;
 enum nl80211_mfp mfp;
 struct cfg80211_crypto_settings crypto;
 const u8 *key;
 u8 key_len, key_idx;
 u32 flags;
 int bg_scan_period;
 struct ieee80211_ht_cap ht_capa;
 struct ieee80211_ht_cap ht_capa_mask;
 struct ieee80211_vht_cap vht_capa;
 struct ieee80211_vht_cap vht_capa_mask;
 bool pbss;
 struct cfg80211_bss_selection bss_select;
 const u8 *prev_bssid;
};
# 1957 "include/net/cfg80211.h"
enum wiphy_params_flags {
 WIPHY_PARAM_RETRY_SHORT = 1 << 0,
 WIPHY_PARAM_RETRY_LONG = 1 << 1,
 WIPHY_PARAM_FRAG_THRESHOLD = 1 << 2,
 WIPHY_PARAM_RTS_THRESHOLD = 1 << 3,
 WIPHY_PARAM_COVERAGE_CLASS = 1 << 4,
 WIPHY_PARAM_DYN_ACK = 1 << 5,
};




struct cfg80211_bitrate_mask {
 struct {
  u32 legacy;
  u8 ht_mcs[10];
  u16 vht_mcs[8];
  enum nl80211_txrate_gi gi;
 } control[NUM_NL80211_BANDS];
};
# 1986 "include/net/cfg80211.h"
struct cfg80211_pmksa {
 const u8 *bssid;
 const u8 *pmkid;
};
# 2002 "include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
 const u8 *mask, *pattern;
 int pattern_len;
 int pkt_offset;
};
# 2027 "include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
 struct socket *sock;
 __be32 src, dst;
 u16 src_port, dst_port;
 u8 dst_mac[6];
 int payload_len;
 const u8 *payload;
 struct nl80211_wowlan_tcp_data_seq payload_seq;
 u32 data_interval;
 u32 wake_len;
 const u8 *wake_data, *wake_mask;
 u32 tokens_size;

 struct nl80211_wowlan_tcp_data_token payload_tok;
};
# 2061 "include/net/cfg80211.h"
struct cfg80211_wowlan {
 bool any, disconnect, magic_pkt, gtk_rekey_failure,
      eap_identity_req, four_way_handshake,
      rfkill_release;
 struct cfg80211_pkt_pattern *patterns;
 struct cfg80211_wowlan_tcp *tcp;
 int n_patterns;
 struct cfg80211_sched_scan_request *nd_config;
};
# 2081 "include/net/cfg80211.h"
struct cfg80211_coalesce_rules {
 int delay;
 enum nl80211_coalesce_condition condition;
 struct cfg80211_pkt_pattern *patterns;
 int n_patterns;
};
# 2095 "include/net/cfg80211.h"
struct cfg80211_coalesce {
 struct cfg80211_coalesce_rules *rules;
 int n_rules;
};
# 2109 "include/net/cfg80211.h"
struct cfg80211_wowlan_nd_match {
 struct cfg80211_ssid ssid;
 int n_channels;
 u32 channels[];
};
# 2124 "include/net/cfg80211.h"
struct cfg80211_wowlan_nd_info {
 int n_matches;
 struct cfg80211_wowlan_nd_match *matches[];
};
# 2150 "include/net/cfg80211.h"
struct cfg80211_wowlan_wakeup {
 bool disconnect, magic_pkt, gtk_rekey_failure,
      eap_identity_req, four_way_handshake,
      rfkill_release, packet_80211,
      tcp_match, tcp_connlost, tcp_nomoretokens;
 s32 pattern_idx;
 u32 packet_present_len, packet_len;
 const void *packet;
 struct cfg80211_wowlan_nd_info *net_detect;
};







struct cfg80211_gtk_rekey_data {
 const u8 *kek, *kck, *replay_ctr;
};
# 2180 "include/net/cfg80211.h"
struct cfg80211_update_ft_ies_params {
 u16 md;
 const u8 *ie;
 size_t ie_len;
};
# 2201 "include/net/cfg80211.h"
struct cfg80211_mgmt_tx_params {
 struct ieee80211_channel *chan;
 bool offchan;
 unsigned int wait;
 const u8 *buf;
 size_t len;
 bool no_cck;
 bool dont_wait_for_ack;
 int n_csa_offsets;
 const u16 *csa_offsets;
};







struct cfg80211_dscp_exception {
 u8 dscp;
 u8 up;
};







struct cfg80211_dscp_range {
 u8 low;
 u8 high;
};
# 2251 "include/net/cfg80211.h"
struct cfg80211_qos_map {
 u8 num_des;
 struct cfg80211_dscp_exception dscp_exception[21];
 struct cfg80211_dscp_range up[8];
};
# 2541 "include/net/cfg80211.h"
struct cfg80211_ops {
 int (*suspend)(struct wiphy *wiphy, struct cfg80211_wowlan *wow);
 int (*resume)(struct wiphy *wiphy);
 void (*set_wakeup)(struct wiphy *wiphy, bool enabled);

 struct wireless_dev * (*add_virtual_intf)(struct wiphy *wiphy,
        const char *name,
        unsigned char name_assign_type,
        enum nl80211_iftype type,
        u32 *flags,
        struct vif_params *params);
 int (*del_virtual_intf)(struct wiphy *wiphy,
        struct wireless_dev *wdev);
 int (*change_virtual_intf)(struct wiphy *wiphy,
           struct net_device *dev,
           enum nl80211_iftype type, u32 *flags,
           struct vif_params *params);

 int (*add_key)(struct wiphy *wiphy, struct net_device *netdev,
      u8 key_index, bool pairwise, const u8 *mac_addr,
      struct key_params *params);
 int (*get_key)(struct wiphy *wiphy, struct net_device *netdev,
      u8 key_index, bool pairwise, const u8 *mac_addr,
      void *cookie,
      void (*callback)(void *cookie, struct key_params*));
 int (*del_key)(struct wiphy *wiphy, struct net_device *netdev,
      u8 key_index, bool pairwise, const u8 *mac_addr);
 int (*set_default_key)(struct wiphy *wiphy,
       struct net_device *netdev,
       u8 key_index, bool unicast, bool multicast);
 int (*set_default_mgmt_key)(struct wiphy *wiphy,
     struct net_device *netdev,
     u8 key_index);

 int (*start_ap)(struct wiphy *wiphy, struct net_device *dev,
       struct cfg80211_ap_settings *settings);
 int (*change_beacon)(struct wiphy *wiphy, struct net_device *dev,
     struct cfg80211_beacon_data *info);
 int (*stop_ap)(struct wiphy *wiphy, struct net_device *dev);


 int (*add_station)(struct wiphy *wiphy, struct net_device *dev,
          const u8 *mac,
          struct station_parameters *params);
 int (*del_station)(struct wiphy *wiphy, struct net_device *dev,
          struct station_del_parameters *params);
 int (*change_station)(struct wiphy *wiphy, struct net_device *dev,
      const u8 *mac,
      struct station_parameters *params);
 int (*get_station)(struct wiphy *wiphy, struct net_device *dev,
          const u8 *mac, struct station_info *sinfo);
 int (*dump_station)(struct wiphy *wiphy, struct net_device *dev,
    int idx, u8 *mac, struct station_info *sinfo);

 int (*add_mpath)(struct wiphy *wiphy, struct net_device *dev,
          const u8 *dst, const u8 *next_hop);
 int (*del_mpath)(struct wiphy *wiphy, struct net_device *dev,
          const u8 *dst);
 int (*change_mpath)(struct wiphy *wiphy, struct net_device *dev,
      const u8 *dst, const u8 *next_hop);
 int (*get_mpath)(struct wiphy *wiphy, struct net_device *dev,
        u8 *dst, u8 *next_hop, struct mpath_info *pinfo);
 int (*dump_mpath)(struct wiphy *wiphy, struct net_device *dev,
         int idx, u8 *dst, u8 *next_hop,
         struct mpath_info *pinfo);
 int (*get_mpp)(struct wiphy *wiphy, struct net_device *dev,
      u8 *dst, u8 *mpp, struct mpath_info *pinfo);
 int (*dump_mpp)(struct wiphy *wiphy, struct net_device *dev,
       int idx, u8 *dst, u8 *mpp,
       struct mpath_info *pinfo);
 int (*get_mesh_config)(struct wiphy *wiphy,
    struct net_device *dev,
    struct mesh_config *conf);
 int (*update_mesh_config)(struct wiphy *wiphy,
          struct net_device *dev, u32 mask,
          const struct mesh_config *nconf);
 int (*join_mesh)(struct wiphy *wiphy, struct net_device *dev,
        const struct mesh_config *conf,
        const struct mesh_setup *setup);
 int (*leave_mesh)(struct wiphy *wiphy, struct net_device *dev);

 int (*join_ocb)(struct wiphy *wiphy, struct net_device *dev,
       struct ocb_setup *setup);
 int (*leave_ocb)(struct wiphy *wiphy, struct net_device *dev);

 int (*change_bss)(struct wiphy *wiphy, struct net_device *dev,
         struct bss_parameters *params);

 int (*set_txq_params)(struct wiphy *wiphy, struct net_device *dev,
      struct ieee80211_txq_params *params);

 int (*libertas_set_mesh_channel)(struct wiphy *wiphy,
          struct net_device *dev,
          struct ieee80211_channel *chan);

 int (*set_monitor_channel)(struct wiphy *wiphy,
           struct cfg80211_chan_def *chandef);

 int (*scan)(struct wiphy *wiphy,
   struct cfg80211_scan_request *request);
 void (*abort_scan)(struct wiphy *wiphy, struct wireless_dev *wdev);

 int (*auth)(struct wiphy *wiphy, struct net_device *dev,
   struct cfg80211_auth_request *req);
 int (*assoc)(struct wiphy *wiphy, struct net_device *dev,
    struct cfg80211_assoc_request *req);
 int (*deauth)(struct wiphy *wiphy, struct net_device *dev,
     struct cfg80211_deauth_request *req);
 int (*disassoc)(struct wiphy *wiphy, struct net_device *dev,
       struct cfg80211_disassoc_request *req);

 int (*connect)(struct wiphy *wiphy, struct net_device *dev,
      struct cfg80211_connect_params *sme);
 int (*disconnect)(struct wiphy *wiphy, struct net_device *dev,
         u16 reason_code);

 int (*join_ibss)(struct wiphy *wiphy, struct net_device *dev,
        struct cfg80211_ibss_params *params);
 int (*leave_ibss)(struct wiphy *wiphy, struct net_device *dev);

 int (*set_mcast_rate)(struct wiphy *wiphy, struct net_device *dev,
      int rate[NUM_NL80211_BANDS]);

 int (*set_wiphy_params)(struct wiphy *wiphy, u32 changed);

 int (*set_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
    enum nl80211_tx_power_setting type, int mbm);
 int (*get_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
    int *dbm);

 int (*set_wds_peer)(struct wiphy *wiphy, struct net_device *dev,
    const u8 *addr);

 void (*rfkill_poll)(struct wiphy *wiphy);
# 2684 "include/net/cfg80211.h"
 int (*set_bitrate_mask)(struct wiphy *wiphy,
        struct net_device *dev,
        const u8 *peer,
        const struct cfg80211_bitrate_mask *mask);

 int (*dump_survey)(struct wiphy *wiphy, struct net_device *netdev,
   int idx, struct survey_info *info);

 int (*set_pmksa)(struct wiphy *wiphy, struct net_device *netdev,
        struct cfg80211_pmksa *pmksa);
 int (*del_pmksa)(struct wiphy *wiphy, struct net_device *netdev,
        struct cfg80211_pmksa *pmksa);
 int (*flush_pmksa)(struct wiphy *wiphy, struct net_device *netdev);

 int (*remain_on_channel)(struct wiphy *wiphy,
         struct wireless_dev *wdev,
         struct ieee80211_channel *chan,
         unsigned int duration,
         u64 *cookie);
 int (*cancel_remain_on_channel)(struct wiphy *wiphy,
         struct wireless_dev *wdev,
         u64 cookie);

 int (*mgmt_tx)(struct wiphy *wiphy, struct wireless_dev *wdev,
      struct cfg80211_mgmt_tx_params *params,
      u64 *cookie);
 int (*mgmt_tx_cancel_wait)(struct wiphy *wiphy,
           struct wireless_dev *wdev,
           u64 cookie);

 int (*set_power_mgmt)(struct wiphy *wiphy, struct net_device *dev,
      bool enabled, int timeout);

 int (*set_cqm_rssi_config)(struct wiphy *wiphy,
           struct net_device *dev,
           s32 rssi_thold, u32 rssi_hyst);

 int (*set_cqm_txe_config)(struct wiphy *wiphy,
          struct net_device *dev,
          u32 rate, u32 pkts, u32 intvl);

 void (*mgmt_frame_register)(struct wiphy *wiphy,
           struct wireless_dev *wdev,
           u16 frame_type, bool reg);

 int (*set_antenna)(struct wiphy *wiphy, u32 tx_ant, u32 rx_ant);
 int (*get_antenna)(struct wiphy *wiphy, u32 *tx_ant, u32 *rx_ant);

 int (*sched_scan_start)(struct wiphy *wiphy,
    struct net_device *dev,
    struct cfg80211_sched_scan_request *request);
 int (*sched_scan_stop)(struct wiphy *wiphy, struct net_device *dev);

 int (*set_rekey_data)(struct wiphy *wiphy, struct net_device *dev,
      struct cfg80211_gtk_rekey_data *data);

 int (*tdls_mgmt)(struct wiphy *wiphy, struct net_device *dev,
        const u8 *peer, u8 action_code, u8 dialog_token,
        u16 status_code, u32 peer_capability,
        bool initiator, const u8 *buf, size_t len);
 int (*tdls_oper)(struct wiphy *wiphy, struct net_device *dev,
        const u8 *peer, enum nl80211_tdls_operation oper);

 int (*probe_client)(struct wiphy *wiphy, struct net_device *dev,
    const u8 *peer, u64 *cookie);

 int (*set_noack_map)(struct wiphy *wiphy,
      struct net_device *dev,
      u16 noack_map);

 int (*get_channel)(struct wiphy *wiphy,
          struct wireless_dev *wdev,
          struct cfg80211_chan_def *chandef);

 int (*start_p2p_device)(struct wiphy *wiphy,
        struct wireless_dev *wdev);
 void (*stop_p2p_device)(struct wiphy *wiphy,
       struct wireless_dev *wdev);

 int (*set_mac_acl)(struct wiphy *wiphy, struct net_device *dev,
          const struct cfg80211_acl_data *params);

 int (*start_radar_detection)(struct wiphy *wiphy,
      struct net_device *dev,
      struct cfg80211_chan_def *chandef,
      u32 cac_time_ms);
 int (*update_ft_ies)(struct wiphy *wiphy, struct net_device *dev,
     struct cfg80211_update_ft_ies_params *ftie);
 int (*crit_proto_start)(struct wiphy *wiphy,
        struct wireless_dev *wdev,
        enum nl80211_crit_proto_id protocol,
        u16 duration);
 void (*crit_proto_stop)(struct wiphy *wiphy,
       struct wireless_dev *wdev);
 int (*set_coalesce)(struct wiphy *wiphy,
    struct cfg80211_coalesce *coalesce);

 int (*channel_switch)(struct wiphy *wiphy,
      struct net_device *dev,
      struct cfg80211_csa_settings *params);

 int (*set_qos_map)(struct wiphy *wiphy,
          struct net_device *dev,
          struct cfg80211_qos_map *qos_map);

 int (*set_ap_chanwidth)(struct wiphy *wiphy, struct net_device *dev,
        struct cfg80211_chan_def *chandef);

 int (*add_tx_ts)(struct wiphy *wiphy, struct net_device *dev,
        u8 tsid, const u8 *peer, u8 user_prio,
        u16 admitted_time);
 int (*del_tx_ts)(struct wiphy *wiphy, struct net_device *dev,
        u8 tsid, const u8 *peer);

 int (*tdls_channel_switch)(struct wiphy *wiphy,
           struct net_device *dev,
           const u8 *addr, u8 oper_class,
           struct cfg80211_chan_def *chandef);
 void (*tdls_cancel_channel_switch)(struct wiphy *wiphy,
           struct net_device *dev,
           const u8 *addr);
};
# 2852 "include/net/cfg80211.h"
enum wiphy_flags {



 WIPHY_FLAG_NETNS_OK = (1UL << (3)),
 WIPHY_FLAG_PS_ON_BY_DEFAULT = (1UL << (4)),
 WIPHY_FLAG_4ADDR_AP = (1UL << (5)),
 WIPHY_FLAG_4ADDR_STATION = (1UL << (6)),
 WIPHY_FLAG_CONTROL_PORT_PROTOCOL = (1UL << (7)),
 WIPHY_FLAG_IBSS_RSN = (1UL << (8)),
 WIPHY_FLAG_MESH_AUTH = (1UL << (10)),
 WIPHY_FLAG_SUPPORTS_SCHED_SCAN = (1UL << (11)),

 WIPHY_FLAG_SUPPORTS_FW_ROAM = (1UL << (13)),
 WIPHY_FLAG_AP_UAPSD = (1UL << (14)),
 WIPHY_FLAG_SUPPORTS_TDLS = (1UL << (15)),
 WIPHY_FLAG_TDLS_EXTERNAL_SETUP = (1UL << (16)),
 WIPHY_FLAG_HAVE_AP_SME = (1UL << (17)),
 WIPHY_FLAG_REPORTS_OBSS = (1UL << (18)),
 WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD = (1UL << (19)),
 WIPHY_FLAG_OFFCHAN_TX = (1UL << (20)),
 WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL = (1UL << (21)),
 WIPHY_FLAG_SUPPORTS_5_10_MHZ = (1UL << (22)),
 WIPHY_FLAG_HAS_CHANNEL_SWITCH = (1UL << (23)),
};






struct ieee80211_iface_limit {
 u16 max;
 u16 types;
};
# 2950 "include/net/cfg80211.h"
struct ieee80211_iface_combination {
 const struct ieee80211_iface_limit *limits;
 u32 num_different_channels;
 u16 max_interfaces;
 u8 n_limits;
 bool beacon_int_infra_match;
 u8 radar_detect_widths;
 u8 radar_detect_regions;
};

struct ieee80211_txrx_stypes {
 u16 tx, rx;
};
# 2981 "include/net/cfg80211.h"
enum wiphy_wowlan_support_flags {
 WIPHY_WOWLAN_ANY = (1UL << (0)),
 WIPHY_WOWLAN_MAGIC_PKT = (1UL << (1)),
 WIPHY_WOWLAN_DISCONNECT = (1UL << (2)),
 WIPHY_WOWLAN_SUPPORTS_GTK_REKEY = (1UL << (3)),
 WIPHY_WOWLAN_GTK_REKEY_FAILURE = (1UL << (4)),
 WIPHY_WOWLAN_EAP_IDENTITY_REQ = (1UL << (5)),
 WIPHY_WOWLAN_4WAY_HANDSHAKE = (1UL << (6)),
 WIPHY_WOWLAN_RFKILL_RELEASE = (1UL << (7)),
 WIPHY_WOWLAN_NET_DETECT = (1UL << (8)),
};

struct wiphy_wowlan_tcp_support {
 const struct nl80211_wowlan_tcp_data_token_feature *tok;
 u32 data_payload_max;
 u32 data_interval_max;
 u32 wake_payload_max;
 bool seq;
};
# 3016 "include/net/cfg80211.h"
struct wiphy_wowlan_support {
 u32 flags;
 int n_patterns;
 int pattern_max_len;
 int pattern_min_len;
 int max_pkt_offset;
 int max_nd_match_sets;
 const struct wiphy_wowlan_tcp_support *tcp;
};
# 3036 "include/net/cfg80211.h"
struct wiphy_coalesce_support {
 int n_rules;
 int max_delay;
 int n_patterns;
 int pattern_max_len;
 int pattern_min_len;
 int max_pkt_offset;
};
# 3052 "include/net/cfg80211.h"
enum wiphy_vendor_command_flags {
 WIPHY_VENDOR_CMD_NEED_WDEV = (1UL << (0)),
 WIPHY_VENDOR_CMD_NEED_NETDEV = (1UL << (1)),
 WIPHY_VENDOR_CMD_NEED_RUNNING = (1UL << (2)),
};
# 3072 "include/net/cfg80211.h"
struct wiphy_vendor_command {
 struct nl80211_vendor_cmd_info info;
 u32 flags;
 int (*doit)(struct wiphy *wiphy, struct wireless_dev *wdev,
      const void *data, int data_len);
 int (*dumpit)(struct wiphy *wiphy, struct wireless_dev *wdev,
        struct sk_buff *skb, const void *data, int data_len,
        unsigned long *storage);
};
# 3231 "include/net/cfg80211.h"
struct wiphy {



 u8 perm_addr[6];
 u8 addr_mask[6];

 struct mac_address *addresses;

 const struct ieee80211_txrx_stypes *mgmt_stypes;

 const struct ieee80211_iface_combination *iface_combinations;
 int n_iface_combinations;
 u16 software_iftypes;

 u16 n_addresses;


 u16 interface_modes;

 u16 max_acl_mac_addrs;

 u32 flags, regulatory_flags, features;
 u8 ext_features[(((NUM_NL80211_EXT_FEATURES) + (8) - 1) / (8))];

 u32 ap_sme_capa;

 enum cfg80211_signal_type signal_type;

 int bss_priv_size;
 u8 max_scan_ssids;
 u8 max_sched_scan_ssids;
 u8 max_match_sets;
 u16 max_scan_ie_len;
 u16 max_sched_scan_ie_len;
 u32 max_sched_scan_plans;
 u32 max_sched_scan_plan_interval;
 u32 max_sched_scan_plan_iterations;

 int n_cipher_suites;
 const u32 *cipher_suites;

 u8 retry_short;
 u8 retry_long;
 u32 frag_threshold;
 u32 rts_threshold;
 u8 coverage_class;

 char fw_version[32];
 u32 hw_version;


 const struct wiphy_wowlan_support *wowlan;
 struct cfg80211_wowlan *wowlan_config;


 u16 max_remain_on_channel_duration;

 u8 max_num_pmkids;

 u32 available_antennas_tx;
 u32 available_antennas_rx;






 u32 probe_resp_offload;

 const u8 *extended_capabilities, *extended_capabilities_mask;
 u8 extended_capabilities_len;






 const void *privid;

 struct ieee80211_supported_band *bands[NUM_NL80211_BANDS];


 void (*reg_notifier)(struct wiphy *wiphy,
        struct regulatory_request *request);



 const struct ieee80211_regdomain *regd;



 struct device dev;


 bool registered;


 struct dentry *debugfsdir;

 const struct ieee80211_ht_cap *ht_capa_mod_mask;
 const struct ieee80211_vht_cap *vht_capa_mod_mask;

 struct list_head wdev_list;


 possible_net_t _net;





 const struct wiphy_coalesce_support *coalesce;

 const struct wiphy_vendor_command *vendor_commands;
 const struct nl80211_vendor_cmd_info *vendor_events;
 int n_vendor_commands, n_vendor_events;

 u16 max_ap_assoc_sta;

 u8 max_num_csa_counters;
 u8 max_adj_channel_rssi_comp;

 u32 bss_select_support;

 char priv[0] __attribute__((aligned(32)));
};

static inline __attribute__((no_instrument_function)) struct net *wiphy_net(struct wiphy *wiphy)
{
 return read_pnet(&wiphy->_net);
}

static inline __attribute__((no_instrument_function)) void wiphy_net_set(struct wiphy *wiphy, struct net *net)
{
 write_pnet(&wiphy->_net, net);
}







static inline __attribute__((no_instrument_function)) void *wiphy_priv(struct wiphy *wiphy)
{
 do { if (__builtin_expect(!!(!wiphy), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/net/cfg80211.h"), "i" (3377), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return &wiphy->priv;
}







static inline __attribute__((no_instrument_function)) struct wiphy *priv_to_wiphy(void *priv)
{
 do { if (__builtin_expect(!!(!priv), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/net/cfg80211.h"), "i" (3389), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return ({ const typeof( ((struct wiphy *)0)->priv ) *__mptr = (priv); (struct wiphy *)( (char *)__mptr - __builtin_offsetof(struct wiphy, priv) );});
}







static inline __attribute__((no_instrument_function)) void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
 wiphy->dev.parent = dev;
}







static inline __attribute__((no_instrument_function)) struct device *wiphy_dev(struct wiphy *wiphy)
{
 return wiphy->dev.parent;
}







static inline __attribute__((no_instrument_function)) const char *wiphy_name(const struct wiphy *wiphy)
{
 return dev_name(&wiphy->dev);
}
# 3440 "include/net/cfg80211.h"
struct wiphy *wiphy_new_nm(const struct cfg80211_ops *ops, int sizeof_priv,
      const char *requested_name);
# 3455 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) struct wiphy *wiphy_new(const struct cfg80211_ops *ops,
          int sizeof_priv)
{
 return wiphy_new_nm(ops, sizeof_priv, ((void *)0));
}
# 3468 "include/net/cfg80211.h"
int wiphy_register(struct wiphy *wiphy);
# 3479 "include/net/cfg80211.h"
void wiphy_unregister(struct wiphy *wiphy);






void wiphy_free(struct wiphy *wiphy);


struct cfg80211_conn;
struct cfg80211_internal_bss;
struct cfg80211_cached_keys;
# 3552 "include/net/cfg80211.h"
struct wireless_dev {
 struct wiphy *wiphy;
 enum nl80211_iftype iftype;


 struct list_head list;
 struct net_device *netdev;

 u32 identifier;

 struct list_head mgmt_registrations;
 spinlock_t mgmt_registrations_lock;

 struct mutex mtx;

 bool use_4addr, p2p_started;

 u8 address[6] __attribute__((aligned(sizeof(u16))));


 u8 ssid[32];
 u8 ssid_len, mesh_id_len, mesh_id_up_len;
 struct cfg80211_conn *conn;
 struct cfg80211_cached_keys *connect_keys;
 enum ieee80211_bss_type conn_bss_type;

 struct list_head event_list;
 spinlock_t event_lock;

 struct cfg80211_internal_bss *current_bss;
 struct cfg80211_chan_def preset_chandef;
 struct cfg80211_chan_def chandef;

 bool ibss_fixed;
 bool ibss_dfs_possible;

 bool ps;
 int ps_timeout;

 int beacon_interval;

 u32 ap_unexpected_nlportid;

 bool cac_started;
 unsigned long cac_start_time;
 unsigned int cac_time_ms;

 u32 owner_nlportid;
# 3615 "include/net/cfg80211.h"
};

static inline __attribute__((no_instrument_function)) u8 *wdev_address(struct wireless_dev *wdev)
{
 if (wdev->netdev)
  return wdev->netdev->dev_addr;
 return wdev->address;
}







static inline __attribute__((no_instrument_function)) void *wdev_priv(struct wireless_dev *wdev)
{
 do { if (__builtin_expect(!!(!wdev), 0)) do { asm volatile("1:\tud2\n" ".pushsection __bug_table,\"a\"\n" "2:\t.long 1b - 2b, %c0 - 2b\n" "\t.word %c1, 0\n" "\t.org 2b+%c2\n" ".popsection" : : "i" ("include/net/cfg80211.h"), "i" (3632), "i" (sizeof(struct bug_entry))); __builtin_unreachable(); } while (0); } while (0);
 return wiphy_priv(wdev->wiphy);
}
# 3648 "include/net/cfg80211.h"
int ieee80211_channel_to_frequency(int chan, enum nl80211_band band);






int ieee80211_frequency_to_channel(int freq);
# 3664 "include/net/cfg80211.h"
struct ieee80211_channel *__ieee80211_get_channel(struct wiphy *wiphy,
        int freq);






static inline __attribute__((no_instrument_function)) struct ieee80211_channel *
ieee80211_get_channel(struct wiphy *wiphy, int freq)
{
 return __ieee80211_get_channel(wiphy, freq);
}
# 3690 "include/net/cfg80211.h"
struct ieee80211_rate *
ieee80211_get_response_rate(struct ieee80211_supported_band *sband,
       u32 basic_rates, int bitrate);
# 3702 "include/net/cfg80211.h"
u32 ieee80211_mandatory_rates(struct ieee80211_supported_band *sband,
         enum nl80211_bss_scan_width scan_width);
# 3712 "include/net/cfg80211.h"
struct radiotap_align_size {
 uint8_t align:4, size:4;
};

struct ieee80211_radiotap_namespace {
 const struct radiotap_align_size *align_size;
 int n_bits;
 uint32_t oui;
 uint8_t subns;
};

struct ieee80211_radiotap_vendor_namespaces {
 const struct ieee80211_radiotap_namespace *ns;
 int n_ns;
};
# 3757 "include/net/cfg80211.h"
struct ieee80211_radiotap_iterator {
 struct ieee80211_radiotap_header *_rtheader;
 const struct ieee80211_radiotap_vendor_namespaces *_vns;
 const struct ieee80211_radiotap_namespace *current_namespace;

 unsigned char *_arg, *_next_ns_data;
 __le32 *_next_bitmap;

 unsigned char *this_arg;
 int this_arg_index;
 int this_arg_size;

 int is_radiotap_ns;

 int _max_length;
 int _arg_index;
 uint32_t _bitmap_shifter;
 int _reset_on_ext;
};

int
ieee80211_radiotap_iterator_init(struct ieee80211_radiotap_iterator *iterator,
     struct ieee80211_radiotap_header *radiotap_header,
     int max_length,
     const struct ieee80211_radiotap_vendor_namespaces *vns);

int
ieee80211_radiotap_iterator_next(struct ieee80211_radiotap_iterator *iterator);


extern const unsigned char rfc1042_header[6];
extern const unsigned char bridge_tunnel_header[6];
# 3802 "include/net/cfg80211.h"
unsigned int ieee80211_get_hdrlen_from_skb(const struct sk_buff *skb);






unsigned int __attribute__((__const__)) ieee80211_hdrlen(__le16 fc);
# 3818 "include/net/cfg80211.h"
unsigned int ieee80211_get_mesh_hdrlen(struct ieee80211s_hdr *meshhdr);
# 3835 "include/net/cfg80211.h"
int ieee80211_data_to_8023(struct sk_buff *skb, const u8 *addr,
      enum nl80211_iftype iftype);
# 3847 "include/net/cfg80211.h"
int ieee80211_data_from_8023(struct sk_buff *skb, const u8 *addr,
        enum nl80211_iftype iftype, const u8 *bssid,
        bool qos);
# 3866 "include/net/cfg80211.h"
void ieee80211_amsdu_to_8023s(struct sk_buff *skb, struct sk_buff_head *list,
         const u8 *addr, enum nl80211_iftype iftype,
         const unsigned int extra_headroom,
         bool has_80211_header);







unsigned int cfg80211_classify8021d(struct sk_buff *skb,
        struct cfg80211_qos_map *qos_map);
# 3895 "include/net/cfg80211.h"
const u8 *cfg80211_find_ie(u8 eid, const u8 *ies, int len);
# 3913 "include/net/cfg80211.h"
const u8 *cfg80211_find_vendor_ie(unsigned int oui, int oui_type,
      const u8 *ies, int len);
# 3947 "include/net/cfg80211.h"
int regulatory_hint(struct wiphy *wiphy, const char *alpha2);
# 3960 "include/net/cfg80211.h"
int regulatory_set_wiphy_regd(struct wiphy *wiphy,
         struct ieee80211_regdomain *rd);
# 3974 "include/net/cfg80211.h"
int regulatory_set_wiphy_regd_sync_rtnl(struct wiphy *wiphy,
     struct ieee80211_regdomain *rd);
# 3992 "include/net/cfg80211.h"
void wiphy_apply_custom_regulatory(struct wiphy *wiphy,
       const struct ieee80211_regdomain *regd);
# 4013 "include/net/cfg80211.h"
const struct ieee80211_reg_rule *freq_reg_info(struct wiphy *wiphy,
            u32 center_freq);
# 4023 "include/net/cfg80211.h"
const char *reg_initiator_name(enum nl80211_reg_initiator initiator);
# 4037 "include/net/cfg80211.h"
void cfg80211_scan_done(struct cfg80211_scan_request *request, bool aborted);






void cfg80211_sched_scan_results(struct wiphy *wiphy);
# 4055 "include/net/cfg80211.h"
void cfg80211_sched_scan_stopped(struct wiphy *wiphy);
# 4067 "include/net/cfg80211.h"
void cfg80211_sched_scan_stopped_rtnl(struct wiphy *wiphy);
# 4083 "include/net/cfg80211.h"
struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss_frame_data(struct wiphy *wiphy,
          struct cfg80211_inform_bss *data,
          struct ieee80211_mgmt *mgmt, size_t len,
          gfp_t gfp);

static inline __attribute__((no_instrument_function)) struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss_width_frame(struct wiphy *wiphy,
    struct ieee80211_channel *rx_channel,
    enum nl80211_bss_scan_width scan_width,
    struct ieee80211_mgmt *mgmt, size_t len,
    s32 signal, gfp_t gfp)
{
 struct cfg80211_inform_bss data = {
  .chan = rx_channel,
  .scan_width = scan_width,
  .signal = signal,
 };

 return cfg80211_inform_bss_frame_data(wiphy, &data, mgmt, len, gfp);
}

static inline __attribute__((no_instrument_function)) struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss_frame(struct wiphy *wiphy,
     struct ieee80211_channel *rx_channel,
     struct ieee80211_mgmt *mgmt, size_t len,
     s32 signal, gfp_t gfp)
{
 struct cfg80211_inform_bss data = {
  .chan = rx_channel,
  .scan_width = NL80211_BSS_CHAN_WIDTH_20,
  .signal = signal,
 };

 return cfg80211_inform_bss_frame_data(wiphy, &data, mgmt, len, gfp);
}
# 4127 "include/net/cfg80211.h"
enum cfg80211_bss_frame_type {
 CFG80211_BSS_FTYPE_UNKNOWN,
 CFG80211_BSS_FTYPE_BEACON,
 CFG80211_BSS_FTYPE_PRESP,
};
# 4153 "include/net/cfg80211.h"
struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss_data(struct wiphy *wiphy,
    struct cfg80211_inform_bss *data,
    enum cfg80211_bss_frame_type ftype,
    const u8 *bssid, u64 tsf, u16 capability,
    u16 beacon_interval, const u8 *ie, size_t ielen,
    gfp_t gfp);

static inline __attribute__((no_instrument_function)) struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss_width(struct wiphy *wiphy,
     struct ieee80211_channel *rx_channel,
     enum nl80211_bss_scan_width scan_width,
     enum cfg80211_bss_frame_type ftype,
     const u8 *bssid, u64 tsf, u16 capability,
     u16 beacon_interval, const u8 *ie, size_t ielen,
     s32 signal, gfp_t gfp)
{
 struct cfg80211_inform_bss data = {
  .chan = rx_channel,
  .scan_width = scan_width,
  .signal = signal,
 };

 return cfg80211_inform_bss_data(wiphy, &data, ftype, bssid, tsf,
     capability, beacon_interval, ie, ielen,
     gfp);
}

static inline __attribute__((no_instrument_function)) struct cfg80211_bss * __attribute__((warn_unused_result))
cfg80211_inform_bss(struct wiphy *wiphy,
      struct ieee80211_channel *rx_channel,
      enum cfg80211_bss_frame_type ftype,
      const u8 *bssid, u64 tsf, u16 capability,
      u16 beacon_interval, const u8 *ie, size_t ielen,
      s32 signal, gfp_t gfp)
{
 struct cfg80211_inform_bss data = {
  .chan = rx_channel,
  .scan_width = NL80211_BSS_CHAN_WIDTH_20,
  .signal = signal,
 };

 return cfg80211_inform_bss_data(wiphy, &data, ftype, bssid, tsf,
     capability, beacon_interval, ie, ielen,
     gfp);
}

struct cfg80211_bss *cfg80211_get_bss(struct wiphy *wiphy,
          struct ieee80211_channel *channel,
          const u8 *bssid,
          const u8 *ssid, size_t ssid_len,
          enum ieee80211_bss_type bss_type,
          enum ieee80211_privacy);
static inline __attribute__((no_instrument_function)) struct cfg80211_bss *
cfg80211_get_ibss(struct wiphy *wiphy,
    struct ieee80211_channel *channel,
    const u8 *ssid, size_t ssid_len)
{
 return cfg80211_get_bss(wiphy, channel, ((void *)0), ssid, ssid_len,
    IEEE80211_BSS_TYPE_IBSS,
    IEEE80211_PRIVACY_ANY);
}
# 4223 "include/net/cfg80211.h"
void cfg80211_ref_bss(struct wiphy *wiphy, struct cfg80211_bss *bss);
# 4232 "include/net/cfg80211.h"
void cfg80211_put_bss(struct wiphy *wiphy, struct cfg80211_bss *bss);
# 4244 "include/net/cfg80211.h"
void cfg80211_unlink_bss(struct wiphy *wiphy, struct cfg80211_bss *bss);

static inline __attribute__((no_instrument_function)) enum nl80211_bss_scan_width
cfg80211_chandef_to_scan_width(const struct cfg80211_chan_def *chandef)
{
 switch (chandef->width) {
 case NL80211_CHAN_WIDTH_5:
  return NL80211_BSS_CHAN_WIDTH_5;
 case NL80211_CHAN_WIDTH_10:
  return NL80211_BSS_CHAN_WIDTH_10;
 default:
  return NL80211_BSS_CHAN_WIDTH_20;
 }
}
# 4278 "include/net/cfg80211.h"
void cfg80211_rx_mlme_mgmt(struct net_device *dev, const u8 *buf, size_t len);
# 4288 "include/net/cfg80211.h"
void cfg80211_auth_timeout(struct net_device *dev, const u8 *addr);
# 4304 "include/net/cfg80211.h"
void cfg80211_rx_assoc_resp(struct net_device *dev,
       struct cfg80211_bss *bss,
       const u8 *buf, size_t len,
       int uapsd_queues);
# 4316 "include/net/cfg80211.h"
void cfg80211_assoc_timeout(struct net_device *dev, struct cfg80211_bss *bss);
# 4329 "include/net/cfg80211.h"
void cfg80211_tx_mlme_mgmt(struct net_device *dev, const u8 *buf, size_t len);
# 4341 "include/net/cfg80211.h"
void cfg80211_rx_unprot_mlme_mgmt(struct net_device *dev,
      const u8 *buf, size_t len);
# 4357 "include/net/cfg80211.h"
void cfg80211_michael_mic_failure(struct net_device *dev, const u8 *addr,
      enum nl80211_key_type key_type, int key_id,
      const u8 *tsc, gfp_t gfp);
# 4376 "include/net/cfg80211.h"
void cfg80211_ibss_joined(struct net_device *dev, const u8 *bssid,
     struct ieee80211_channel *channel, gfp_t gfp);
# 4392 "include/net/cfg80211.h"
void cfg80211_notify_new_peer_candidate(struct net_device *dev,
  const u8 *macaddr, const u8 *ie, u8 ie_len, gfp_t gfp);
# 4414 "include/net/cfg80211.h"
void wiphy_rfkill_set_hw_state(struct wiphy *wiphy, bool blocked);





void wiphy_rfkill_start_polling(struct wiphy *wiphy);





void wiphy_rfkill_stop_polling(struct wiphy *wiphy);
# 4448 "include/net/cfg80211.h"
struct sk_buff *__cfg80211_alloc_reply_skb(struct wiphy *wiphy,
        enum nl80211_commands cmd,
        enum nl80211_attrs attr,
        int approxlen);

struct sk_buff *__cfg80211_alloc_event_skb(struct wiphy *wiphy,
        struct wireless_dev *wdev,
        enum nl80211_commands cmd,
        enum nl80211_attrs attr,
        int vendor_event_idx,
        int approxlen, gfp_t gfp);

void __cfg80211_send_event_skb(struct sk_buff *skb, gfp_t gfp);
# 4485 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *
cfg80211_vendor_cmd_alloc_reply_skb(struct wiphy *wiphy, int approxlen)
{
 return __cfg80211_alloc_reply_skb(wiphy, NL80211_CMD_VENDOR,
       NL80211_ATTR_VENDOR_DATA, approxlen);
}
# 4504 "include/net/cfg80211.h"
int cfg80211_vendor_cmd_reply(struct sk_buff *skb);
# 4527 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *
cfg80211_vendor_event_alloc(struct wiphy *wiphy, struct wireless_dev *wdev,
        int approxlen, int event_idx, gfp_t gfp)
{
 return __cfg80211_alloc_event_skb(wiphy, wdev, NL80211_CMD_VENDOR,
       NL80211_ATTR_VENDOR_DATA,
       event_idx, approxlen, gfp);
}
# 4544 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) void cfg80211_vendor_event(struct sk_buff *skb, gfp_t gfp)
{
 __cfg80211_send_event_skb(skb, gfp);
}
# 4680 "include/net/cfg80211.h"
void cfg80211_connect_bss(struct net_device *dev, const u8 *bssid,
     struct cfg80211_bss *bss, const u8 *req_ie,
     size_t req_ie_len, const u8 *resp_ie,
     size_t resp_ie_len, u16 status, gfp_t gfp);
# 4702 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) void
cfg80211_connect_result(struct net_device *dev, const u8 *bssid,
   const u8 *req_ie, size_t req_ie_len,
   const u8 *resp_ie, size_t resp_ie_len,
   u16 status, gfp_t gfp)
{
 cfg80211_connect_bss(dev, bssid, ((void *)0), req_ie, req_ie_len, resp_ie,
        resp_ie_len, status, gfp);
}
# 4727 "include/net/cfg80211.h"
void cfg80211_roamed(struct net_device *dev,
       struct ieee80211_channel *channel,
       const u8 *bssid,
       const u8 *req_ie, size_t req_ie_len,
       const u8 *resp_ie, size_t resp_ie_len, gfp_t gfp);
# 4755 "include/net/cfg80211.h"
void cfg80211_roamed_bss(struct net_device *dev, struct cfg80211_bss *bss,
    const u8 *req_ie, size_t req_ie_len,
    const u8 *resp_ie, size_t resp_ie_len, gfp_t gfp);
# 4772 "include/net/cfg80211.h"
void cfg80211_disconnected(struct net_device *dev, u16 reason,
      const u8 *ie, size_t ie_len,
      bool locally_generated, gfp_t gfp);
# 4785 "include/net/cfg80211.h"
void cfg80211_ready_on_channel(struct wireless_dev *wdev, u64 cookie,
          struct ieee80211_channel *chan,
          unsigned int duration, gfp_t gfp);
# 4796 "include/net/cfg80211.h"
void cfg80211_remain_on_channel_expired(struct wireless_dev *wdev, u64 cookie,
     struct ieee80211_channel *chan,
     gfp_t gfp);
# 4809 "include/net/cfg80211.h"
void cfg80211_new_sta(struct net_device *dev, const u8 *mac_addr,
        struct station_info *sinfo, gfp_t gfp);
# 4819 "include/net/cfg80211.h"
void cfg80211_del_sta_sinfo(struct net_device *dev, const u8 *mac_addr,
       struct station_info *sinfo, gfp_t gfp);
# 4829 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) void cfg80211_del_sta(struct net_device *dev,
        const u8 *mac_addr, gfp_t gfp)
{
 cfg80211_del_sta_sinfo(dev, mac_addr, ((void *)0), gfp);
}
# 4850 "include/net/cfg80211.h"
void cfg80211_conn_failed(struct net_device *dev, const u8 *mac_addr,
     enum nl80211_connect_failed_reason reason,
     gfp_t gfp);
# 4871 "include/net/cfg80211.h"
bool cfg80211_rx_mgmt(struct wireless_dev *wdev, int freq, int sig_dbm,
        const u8 *buf, size_t len, u32 flags);
# 4887 "include/net/cfg80211.h"
void cfg80211_mgmt_tx_status(struct wireless_dev *wdev, u64 cookie,
        const u8 *buf, size_t len, bool ack, gfp_t gfp);
# 4900 "include/net/cfg80211.h"
void cfg80211_cqm_rssi_notify(struct net_device *dev,
         enum nl80211_cqm_rssi_threshold_event rssi_event,
         gfp_t gfp);
# 4913 "include/net/cfg80211.h"
void cfg80211_cqm_pktloss_notify(struct net_device *dev,
     const u8 *peer, u32 num_packets, gfp_t gfp);
# 4928 "include/net/cfg80211.h"
void cfg80211_cqm_txe_notify(struct net_device *dev, const u8 *peer,
        u32 num_packets, u32 rate, u32 intvl, gfp_t gfp);
# 4938 "include/net/cfg80211.h"
void cfg80211_cqm_beacon_loss_notify(struct net_device *dev, gfp_t gfp);
# 4948 "include/net/cfg80211.h"
void cfg80211_radar_event(struct wiphy *wiphy,
     struct cfg80211_chan_def *chandef, gfp_t gfp);
# 4962 "include/net/cfg80211.h"
void cfg80211_cac_event(struct net_device *netdev,
   const struct cfg80211_chan_def *chandef,
   enum nl80211_radar_event event, gfp_t gfp);
# 4974 "include/net/cfg80211.h"
void cfg80211_gtk_rekey_notify(struct net_device *dev, const u8 *bssid,
          const u8 *replay_ctr, gfp_t gfp);
# 4985 "include/net/cfg80211.h"
void cfg80211_pmksa_candidate_notify(struct net_device *dev, int index,
         const u8 *bssid, bool preauth, gfp_t gfp);
# 5000 "include/net/cfg80211.h"
bool cfg80211_rx_spurious_frame(struct net_device *dev,
    const u8 *addr, gfp_t gfp);
# 5016 "include/net/cfg80211.h"
bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
     const u8 *addr, gfp_t gfp);
# 5027 "include/net/cfg80211.h"
void cfg80211_probe_status(struct net_device *dev, const u8 *addr,
      u64 cookie, bool acked, gfp_t gfp);
# 5042 "include/net/cfg80211.h"
void cfg80211_report_obss_beacon(struct wiphy *wiphy,
     const u8 *frame, size_t len,
     int freq, int sig_dbm);
# 5055 "include/net/cfg80211.h"
bool cfg80211_reg_can_beacon(struct wiphy *wiphy,
        struct cfg80211_chan_def *chandef,
        enum nl80211_iftype iftype);
# 5072 "include/net/cfg80211.h"
bool cfg80211_reg_can_beacon_relax(struct wiphy *wiphy,
       struct cfg80211_chan_def *chandef,
       enum nl80211_iftype iftype);
# 5084 "include/net/cfg80211.h"
void cfg80211_ch_switch_notify(struct net_device *dev,
          struct cfg80211_chan_def *chandef);
# 5097 "include/net/cfg80211.h"
void cfg80211_ch_switch_started_notify(struct net_device *dev,
           struct cfg80211_chan_def *chandef,
           u8 count);
# 5109 "include/net/cfg80211.h"
bool ieee80211_operating_class_to_band(u8 operating_class,
           enum nl80211_band *band);
# 5120 "include/net/cfg80211.h"
bool ieee80211_chandef_to_operating_class(struct cfg80211_chan_def *chandef,
       u8 *op_class);
# 5138 "include/net/cfg80211.h"
void cfg80211_tdls_oper_request(struct net_device *dev, const u8 *peer,
    enum nl80211_tdls_operation oper,
    u16 reason_code, gfp_t gfp);







u32 cfg80211_calculate_bitrate(struct rate_info *rate);
# 5164 "include/net/cfg80211.h"
void cfg80211_unregister_wdev(struct wireless_dev *wdev);
# 5174 "include/net/cfg80211.h"
struct cfg80211_ft_event_params {
 const u8 *ies;
 size_t ies_len;
 const u8 *target_ap;
 const u8 *ric_ies;
 size_t ric_ies_len;
};






void cfg80211_ft_event(struct net_device *netdev,
         struct cfg80211_ft_event_params *ft_event);
# 5206 "include/net/cfg80211.h"
int cfg80211_get_p2p_attr(const u8 *ies, unsigned int len,
     enum ieee80211_p2p_attr_id attr,
     u8 *buf, unsigned int bufsize);
# 5236 "include/net/cfg80211.h"
size_t ieee80211_ie_split_ric(const u8 *ies, size_t ielen,
         const u8 *ids, int n_ids,
         const u8 *after_ric, int n_after_ric,
         size_t offset);
# 5265 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) size_t ieee80211_ie_split(const u8 *ies, size_t ielen,
     const u8 *ids, int n_ids, size_t offset)
{
 return ieee80211_ie_split_ric(ies, ielen, ids, n_ids, ((void *)0), 0, offset);
}
# 5282 "include/net/cfg80211.h"
void cfg80211_report_wowlan_wakeup(struct wireless_dev *wdev,
       struct cfg80211_wowlan_wakeup *wakeup,
       gfp_t gfp);
# 5296 "include/net/cfg80211.h"
void cfg80211_crit_proto_stopped(struct wireless_dev *wdev, gfp_t gfp);







unsigned int ieee80211_get_num_supported_channels(struct wiphy *wiphy);
# 5323 "include/net/cfg80211.h"
int cfg80211_check_combinations(struct wiphy *wiphy,
    const int num_different_channels,
    const u8 radar_detect,
    const int iftype_num[NUM_NL80211_IFTYPES]);
# 5347 "include/net/cfg80211.h"
int cfg80211_iter_combinations(struct wiphy *wiphy,
          const int num_different_channels,
          const u8 radar_detect,
          const int iftype_num[NUM_NL80211_IFTYPES],
          void (*iter)(const struct ieee80211_iface_combination *c,
         void *data),
          void *data);
# 5367 "include/net/cfg80211.h"
void cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev,
    gfp_t gfp);
# 5382 "include/net/cfg80211.h"
void cfg80211_shutdown_all_interfaces(struct wiphy *wiphy);
# 5393 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) void wiphy_ext_feature_set(struct wiphy *wiphy,
      enum nl80211_ext_feature_index ftidx)
{
 u8 *ft_byte;

 ft_byte = &wiphy->ext_features[ftidx / 8];
 *ft_byte |= (1UL << (ftidx % 8));
}
# 5411 "include/net/cfg80211.h"
static inline __attribute__((no_instrument_function)) bool
wiphy_ext_feature_isset(struct wiphy *wiphy,
   enum nl80211_ext_feature_index ftidx)
{
 u8 ft_byte;

 ft_byte = wiphy->ext_features[ftidx / 8];
 return (ft_byte & (1UL << (ftidx % 8))) != 0;
}


void cfg80211_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info);
# 24 "include/net/mac80211.h" 2
# 121 "include/net/mac80211.h"
struct device;







enum ieee80211_max_queues {
 IEEE80211_MAX_QUEUES = 16,
 IEEE80211_MAX_QUEUE_MAP = (1UL << (IEEE80211_MAX_QUEUES)) - 1,
};
# 143 "include/net/mac80211.h"
enum ieee80211_ac_numbers {
 IEEE80211_AC_VO = 0,
 IEEE80211_AC_VI = 1,
 IEEE80211_AC_BE = 2,
 IEEE80211_AC_BK = 3,
};
# 165 "include/net/mac80211.h"
struct ieee80211_tx_queue_params {
 u16 txop;
 u16 cw_min;
 u16 cw_max;
 u8 aifs;
 bool acm;
 bool uapsd;
};

struct ieee80211_low_level_stats {
 unsigned int dot11ACKFailureCount;
 unsigned int dot11RTSFailureCount;
 unsigned int dot11FCSErrorCount;
 unsigned int dot11RTSSuccessCount;
};
# 190 "include/net/mac80211.h"
enum ieee80211_chanctx_change {
 IEEE80211_CHANCTX_CHANGE_WIDTH = (1UL << (0)),
 IEEE80211_CHANCTX_CHANGE_RX_CHAINS = (1UL << (1)),
 IEEE80211_CHANCTX_CHANGE_RADAR = (1UL << (2)),
 IEEE80211_CHANCTX_CHANGE_CHANNEL = (1UL << (3)),
 IEEE80211_CHANCTX_CHANGE_MIN_WIDTH = (1UL << (4)),
};
# 215 "include/net/mac80211.h"
struct ieee80211_chanctx_conf {
 struct cfg80211_chan_def def;
 struct cfg80211_chan_def min_def;

 u8 rx_chains_static, rx_chains_dynamic;

 bool radar_enabled;

 u8 drv_priv[0] __attribute__((aligned(sizeof(void *))));
};
# 240 "include/net/mac80211.h"
enum ieee80211_chanctx_switch_mode {
 CHANCTX_SWMODE_REASSIGN_VIF,
 CHANCTX_SWMODE_SWAP_CONTEXTS,
};
# 257 "include/net/mac80211.h"
struct ieee80211_vif_chanctx_switch {
 struct ieee80211_vif *vif;
 struct ieee80211_chanctx_conf *old_ctx;
 struct ieee80211_chanctx_conf *new_ctx;
};
# 303 "include/net/mac80211.h"
enum ieee80211_bss_change {
 BSS_CHANGED_ASSOC = 1<<0,
 BSS_CHANGED_ERP_CTS_PROT = 1<<1,
 BSS_CHANGED_ERP_PREAMBLE = 1<<2,
 BSS_CHANGED_ERP_SLOT = 1<<3,
 BSS_CHANGED_HT = 1<<4,
 BSS_CHANGED_BASIC_RATES = 1<<5,
 BSS_CHANGED_BEACON_INT = 1<<6,
 BSS_CHANGED_BSSID = 1<<7,
 BSS_CHANGED_BEACON = 1<<8,
 BSS_CHANGED_BEACON_ENABLED = 1<<9,
 BSS_CHANGED_CQM = 1<<10,
 BSS_CHANGED_IBSS = 1<<11,
 BSS_CHANGED_ARP_FILTER = 1<<12,
 BSS_CHANGED_QOS = 1<<13,
 BSS_CHANGED_IDLE = 1<<14,
 BSS_CHANGED_SSID = 1<<15,
 BSS_CHANGED_AP_PROBE_RESP = 1<<16,
 BSS_CHANGED_PS = 1<<17,
 BSS_CHANGED_TXPOWER = 1<<18,
 BSS_CHANGED_P2P_PS = 1<<19,
 BSS_CHANGED_BEACON_INFO = 1<<20,
 BSS_CHANGED_BANDWIDTH = 1<<21,
 BSS_CHANGED_OCB = 1<<22,
 BSS_CHANGED_MU_GROUPS = 1<<23,


};
# 348 "include/net/mac80211.h"
enum ieee80211_event_type {
 RSSI_EVENT,
 MLME_EVENT,
 BAR_RX_EVENT,
 BA_FRAME_TIMEOUT,
};






enum ieee80211_rssi_event_data {
 RSSI_EVENT_HIGH,
 RSSI_EVENT_LOW,
};





struct ieee80211_rssi_event {
 enum ieee80211_rssi_event_data data;
};
# 380 "include/net/mac80211.h"
enum ieee80211_mlme_event_data {
 AUTH_EVENT,
 ASSOC_EVENT,
 DEAUTH_RX_EVENT,
 DEAUTH_TX_EVENT,
};







enum ieee80211_mlme_event_status {
 MLME_SUCCESS,
 MLME_DENIED,
 MLME_TIMEOUT,
};







struct ieee80211_mlme_event {
 enum ieee80211_mlme_event_data data;
 enum ieee80211_mlme_event_status status;
 u16 reason;
};







struct ieee80211_ba_event {
 struct ieee80211_sta *sta;
 u16 tid;
 u16 ssn;
};
# 431 "include/net/mac80211.h"
struct ieee80211_event {
 enum ieee80211_event_type type;
 union {
  struct ieee80211_rssi_event rssi;
  struct ieee80211_mlme_event mlme;
  struct ieee80211_ba_event ba;
 } u;
};
# 448 "include/net/mac80211.h"
struct ieee80211_mu_group_data {
 u8 membership[8];
 u8 position[16];
};
# 533 "include/net/mac80211.h"
struct ieee80211_bss_conf {
 const u8 *bssid;

 bool assoc, ibss_joined;
 bool ibss_creator;
 u16 aid;

 bool use_cts_prot;
 bool use_short_preamble;
 bool use_short_slot;
 bool enable_beacon;
 u8 dtim_period;
 u16 beacon_int;
 u16 assoc_capability;
 u64 sync_tsf;
 u32 sync_device_ts;
 u8 sync_dtim_count;
 u32 basic_rates;
 struct ieee80211_rate *beacon_rate;
 int mcast_rate[NUM_NL80211_BANDS];
 u16 ht_operation_mode;
 s32 cqm_rssi_thold;
 u32 cqm_rssi_hyst;
 struct cfg80211_chan_def chandef;
 struct ieee80211_mu_group_data mu_group;
 __be32 arp_addr_list[4];
 int arp_addr_cnt;
 bool qos;
 bool idle;
 bool ps;
 u8 ssid[32];
 size_t ssid_len;
 bool hidden_ssid;
 int txpower;
 enum nl80211_tx_power_setting txpower_type;
 struct ieee80211_p2p_noa_attr p2p_noa_attr;
 bool allow_p2p_go_ps;
};
# 672 "include/net/mac80211.h"
enum mac80211_tx_info_flags {
 IEEE80211_TX_CTL_REQ_TX_STATUS = (1UL << (0)),
 IEEE80211_TX_CTL_ASSIGN_SEQ = (1UL << (1)),
 IEEE80211_TX_CTL_NO_ACK = (1UL << (2)),
 IEEE80211_TX_CTL_CLEAR_PS_FILT = (1UL << (3)),
 IEEE80211_TX_CTL_FIRST_FRAGMENT = (1UL << (4)),
 IEEE80211_TX_CTL_SEND_AFTER_DTIM = (1UL << (5)),
 IEEE80211_TX_CTL_AMPDU = (1UL << (6)),
 IEEE80211_TX_CTL_INJECTED = (1UL << (7)),
 IEEE80211_TX_STAT_TX_FILTERED = (1UL << (8)),
 IEEE80211_TX_STAT_ACK = (1UL << (9)),
 IEEE80211_TX_STAT_AMPDU = (1UL << (10)),
 IEEE80211_TX_STAT_AMPDU_NO_BACK = (1UL << (11)),
 IEEE80211_TX_CTL_RATE_CTRL_PROBE = (1UL << (12)),
 IEEE80211_TX_INTFL_OFFCHAN_TX_OK = (1UL << (13)),
 IEEE80211_TX_INTFL_NEED_TXPROCESSING = (1UL << (14)),
 IEEE80211_TX_INTFL_RETRIED = (1UL << (15)),
 IEEE80211_TX_INTFL_DONT_ENCRYPT = (1UL << (16)),
 IEEE80211_TX_CTL_NO_PS_BUFFER = (1UL << (17)),
 IEEE80211_TX_CTL_MORE_FRAMES = (1UL << (18)),
 IEEE80211_TX_INTFL_RETRANSMISSION = (1UL << (19)),
 IEEE80211_TX_INTFL_MLME_CONN_TX = (1UL << (20)),
 IEEE80211_TX_INTFL_NL80211_FRAME_TX = (1UL << (21)),
 IEEE80211_TX_CTL_LDPC = (1UL << (22)),
 IEEE80211_TX_CTL_STBC = (1UL << (23)) | (1UL << (24)),
 IEEE80211_TX_CTL_TX_OFFCHAN = (1UL << (25)),
 IEEE80211_TX_INTFL_TKIP_MIC_FAILURE = (1UL << (26)),
 IEEE80211_TX_CTL_NO_CCK_RATE = (1UL << (27)),
 IEEE80211_TX_STATUS_EOSP = (1UL << (28)),
 IEEE80211_TX_CTL_USE_MINRATE = (1UL << (29)),
 IEEE80211_TX_CTL_DONTFRAG = (1UL << (30)),
 IEEE80211_TX_STAT_NOACK_TRANSMITTED = (1UL << (31)),
};
# 720 "include/net/mac80211.h"
enum mac80211_tx_control_flags {
 IEEE80211_TX_CTRL_PORT_CTRL_PROTO = (1UL << (0)),
 IEEE80211_TX_CTRL_PS_RESPONSE = (1UL << (1)),
 IEEE80211_TX_CTRL_RATE_INJECT = (1UL << (2)),
 IEEE80211_TX_CTRL_AMSDU = (1UL << (3)),
};
# 765 "include/net/mac80211.h"
enum mac80211_rate_control_flags {
 IEEE80211_TX_RC_USE_RTS_CTS = (1UL << (0)),
 IEEE80211_TX_RC_USE_CTS_PROTECT = (1UL << (1)),
 IEEE80211_TX_RC_USE_SHORT_PREAMBLE = (1UL << (2)),


 IEEE80211_TX_RC_MCS = (1UL << (3)),
 IEEE80211_TX_RC_GREEN_FIELD = (1UL << (4)),
 IEEE80211_TX_RC_40_MHZ_WIDTH = (1UL << (5)),
 IEEE80211_TX_RC_DUP_DATA = (1UL << (6)),
 IEEE80211_TX_RC_SHORT_GI = (1UL << (7)),
 IEEE80211_TX_RC_VHT_MCS = (1UL << (8)),
 IEEE80211_TX_RC_80_MHZ_WIDTH = (1UL << (9)),
 IEEE80211_TX_RC_160_MHZ_WIDTH = (1UL << (10)),
};
# 822 "include/net/mac80211.h"
struct ieee80211_tx_rate {
 s8 idx;
 u16 count:5,
     flags:11;
} __attribute__((packed));



static inline __attribute__((no_instrument_function)) void ieee80211_rate_set_vht(struct ieee80211_tx_rate *rate,
       u8 mcs, u8 nss)
{
 ({ int __ret_warn_on = !!(mcs & ~0xF); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/net/mac80211.h", 833); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!((nss - 1) & ~0x7); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/net/mac80211.h", 834); __builtin_expect(!!(__ret_warn_on), 0); });
 rate->idx = ((nss - 1) << 4) | mcs;
}

static inline __attribute__((no_instrument_function)) u8
ieee80211_rate_get_vht_mcs(const struct ieee80211_tx_rate *rate)
{
 return rate->idx & 0xF;
}

static inline __attribute__((no_instrument_function)) u8
ieee80211_rate_get_vht_nss(const struct ieee80211_tx_rate *rate)
{
 return (rate->idx >> 4) + 1;
}
# 871 "include/net/mac80211.h"
struct ieee80211_tx_info {

 u32 flags;
 u8 band;

 u8 hw_queue;

 u16 ack_frame_id;

 union {
  struct {
   union {

    struct {
     struct ieee80211_tx_rate rates[
      4];
     s8 rts_cts_rate_idx;
     u8 use_rts:1;
     u8 use_cts_prot:1;
     u8 short_preamble:1;
     u8 skip_table:1;

    };

    unsigned long jiffies;
   };

   struct ieee80211_vif *vif;
   struct ieee80211_key_conf *hw_key;
   u32 flags;

  } control;
  struct {
   u64 cookie;
  } ack;
  struct {
   struct ieee80211_tx_rate rates[4];
   s32 ack_signal;
   u8 ampdu_ack_len;
   u8 ampdu_len;
   u8 antenna;
   u16 tx_time;
   void *status_driver_data[19 / sizeof(void *)];
  } status;
  struct {
   struct ieee80211_tx_rate driver_rates[
    4];
   u8 pad[4];

   void *rate_driver_data[
    24 / sizeof(void *)];
  };
  void *driver_data[
   40 / sizeof(void *)];
 };
};
# 940 "include/net/mac80211.h"
struct ieee80211_scan_ies {
 const u8 *ies[NUM_NL80211_BANDS];
 size_t len[NUM_NL80211_BANDS];
 const u8 *common_ies;
 size_t common_ie_len;
};


static inline __attribute__((no_instrument_function)) struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
 return (struct ieee80211_tx_info *)skb->cb;
}

static inline __attribute__((no_instrument_function)) struct ieee80211_rx_status *IEEE80211_SKB_RXCB(struct sk_buff *skb)
{
 return (struct ieee80211_rx_status *)skb->cb;
}
# 972 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void
ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
{
 int i;

 do { bool __cond = !(!(__builtin_offsetof(struct ieee80211_tx_info, status.rates) != __builtin_offsetof(struct ieee80211_tx_info, control.rates))); extern void
 __compiletime_assert_978
# 977 "include/net/mac80211.h"
 (void) __attribute__((error("BUILD_BUG_ON failed: " "offsetof(struct ieee80211_tx_info, status.rates) != offsetof(struct ieee80211_tx_info, control.rates)"))); if (__cond)
 __compiletime_assert_978
# 977 "include/net/mac80211.h"
 (); do { } while (0); } while (0)
                                                         ;
 do { bool __cond = !(!(__builtin_offsetof(struct ieee80211_tx_info, status.rates) != __builtin_offsetof(struct ieee80211_tx_info, driver_rates))); extern void
 __compiletime_assert_980
# 979 "include/net/mac80211.h"
 (void) __attribute__((error("BUILD_BUG_ON failed: " "offsetof(struct ieee80211_tx_info, status.rates) != offsetof(struct ieee80211_tx_info, driver_rates)"))); if (__cond)
 __compiletime_assert_980
# 979 "include/net/mac80211.h"
 (); do { } while (0); } while (0)
                                                        ;
 do { bool __cond = !(!(__builtin_offsetof(struct ieee80211_tx_info, status.rates) != 8)); extern void __compiletime_assert_981(void) __attribute__((error("BUILD_BUG_ON failed: " "offsetof(struct ieee80211_tx_info, status.rates) != 8"))); if (__cond) __compiletime_assert_981(); do { } while (0); } while (0);

 for (i = 0; i < 4; i++)
  info->status.rates[i].count = 0;

 do { bool __cond = !(!(__builtin_offsetof(struct ieee80211_tx_info, status.ack_signal) != 20)); extern void
 __compiletime_assert_987
# 986 "include/net/mac80211.h"
 (void) __attribute__((error("BUILD_BUG_ON failed: " "offsetof(struct ieee80211_tx_info, status.ack_signal) != 20"))); if (__cond)
 __compiletime_assert_987
# 986 "include/net/mac80211.h"
 (); do { } while (0); } while (0)
                                                                 ;
 memset(&info->status.ampdu_ack_len, 0,
        sizeof(struct ieee80211_tx_info) -
        __builtin_offsetof(struct ieee80211_tx_info, status.ampdu_ack_len));
}
# 1075 "include/net/mac80211.h"
enum mac80211_rx_flags {
 RX_FLAG_MMIC_ERROR = (1UL << (0)),
 RX_FLAG_DECRYPTED = (1UL << (1)),
 RX_FLAG_MACTIME_PLCP_START = (1UL << (2)),
 RX_FLAG_MMIC_STRIPPED = (1UL << (3)),
 RX_FLAG_IV_STRIPPED = (1UL << (4)),
 RX_FLAG_FAILED_FCS_CRC = (1UL << (5)),
 RX_FLAG_FAILED_PLCP_CRC = (1UL << (6)),
 RX_FLAG_MACTIME_START = (1UL << (7)),
 RX_FLAG_SHORTPRE = (1UL << (8)),
 RX_FLAG_HT = (1UL << (9)),
 RX_FLAG_40MHZ = (1UL << (10)),
 RX_FLAG_SHORT_GI = (1UL << (11)),
 RX_FLAG_NO_SIGNAL_VAL = (1UL << (12)),
 RX_FLAG_HT_GF = (1UL << (13)),
 RX_FLAG_AMPDU_DETAILS = (1UL << (14)),
 RX_FLAG_PN_VALIDATED = (1UL << (15)),
 RX_FLAG_DUP_VALIDATED = (1UL << (16)),
 RX_FLAG_AMPDU_LAST_KNOWN = (1UL << (17)),
 RX_FLAG_AMPDU_IS_LAST = (1UL << (18)),
 RX_FLAG_AMPDU_DELIM_CRC_ERROR = (1UL << (19)),
 RX_FLAG_AMPDU_DELIM_CRC_KNOWN = (1UL << (20)),
 RX_FLAG_MACTIME_END = (1UL << (21)),
 RX_FLAG_VHT = (1UL << (22)),
 RX_FLAG_LDPC = (1UL << (23)),
 RX_FLAG_ONLY_MONITOR = (1UL << (24)),
 RX_FLAG_SKIP_MONITOR = (1UL << (25)),
 RX_FLAG_STBC_MASK = (1UL << (26)) | (1UL << (27)),
 RX_FLAG_10MHZ = (1UL << (28)),
 RX_FLAG_5MHZ = (1UL << (29)),
 RX_FLAG_AMSDU_MORE = (1UL << (30)),
 RX_FLAG_RADIOTAP_VENDOR_DATA = (1UL << (31)),
 RX_FLAG_MIC_STRIPPED = (1ULL << (32)),
 RX_FLAG_ALLOW_SAME_PN = (1ULL << (33)),
};
# 1123 "include/net/mac80211.h"
enum mac80211_rx_vht_flags {
 RX_VHT_FLAG_80MHZ = (1UL << (0)),
 RX_VHT_FLAG_160MHZ = (1UL << (1)),
 RX_VHT_FLAG_BF = (1UL << (2)),
};
# 1164 "include/net/mac80211.h"
struct ieee80211_rx_status {
 u64 mactime;
 u64 boottime_ns;
 u32 device_timestamp;
 u32 ampdu_reference;
 u64 flag;
 u16 freq;
 u8 vht_flag;
 u8 rate_idx;
 u8 vht_nss;
 u8 rx_flags;
 u8 band;
 u8 antenna;
 s8 signal;
 u8 chains;
 s8 chain_signal[4];
 u8 ampdu_delimiter_crc;
};
# 1206 "include/net/mac80211.h"
struct ieee80211_vendor_radiotap {
 u32 present;
 u8 align;
 u8 oui[3];
 u8 subns;
 u8 pad;
 u16 len;
 u8 data[];
} __attribute__((packed));
# 1239 "include/net/mac80211.h"
enum ieee80211_conf_flags {
 IEEE80211_CONF_MONITOR = (1<<0),
 IEEE80211_CONF_PS = (1<<1),
 IEEE80211_CONF_IDLE = (1<<2),
 IEEE80211_CONF_OFFCHANNEL = (1<<3),
};
# 1261 "include/net/mac80211.h"
enum ieee80211_conf_changed {
 IEEE80211_CONF_CHANGE_SMPS = (1UL << (1)),
 IEEE80211_CONF_CHANGE_LISTEN_INTERVAL = (1UL << (2)),
 IEEE80211_CONF_CHANGE_MONITOR = (1UL << (3)),
 IEEE80211_CONF_CHANGE_PS = (1UL << (4)),
 IEEE80211_CONF_CHANGE_POWER = (1UL << (5)),
 IEEE80211_CONF_CHANGE_CHANNEL = (1UL << (6)),
 IEEE80211_CONF_CHANGE_RETRY_LIMITS = (1UL << (7)),
 IEEE80211_CONF_CHANGE_IDLE = (1UL << (8)),
};
# 1281 "include/net/mac80211.h"
enum ieee80211_smps_mode {
 IEEE80211_SMPS_AUTOMATIC,
 IEEE80211_SMPS_OFF,
 IEEE80211_SMPS_STATIC,
 IEEE80211_SMPS_DYNAMIC,


 IEEE80211_SMPS_NUM_MODES,
};
# 1325 "include/net/mac80211.h"
struct ieee80211_conf {
 u32 flags;
 int power_level, dynamic_ps_timeout;

 u16 listen_interval;
 u8 ps_dtim_period;

 u8 long_frame_max_tx_count, short_frame_max_tx_count;

 struct cfg80211_chan_def chandef;
 bool radar_enabled;
 enum ieee80211_smps_mode smps_mode;
};
# 1356 "include/net/mac80211.h"
struct ieee80211_channel_switch {
 u64 timestamp;
 u32 device_timestamp;
 bool block_tx;
 struct cfg80211_chan_def chandef;
 u8 count;
};
# 1381 "include/net/mac80211.h"
enum ieee80211_vif_flags {
 IEEE80211_VIF_BEACON_FILTER = (1UL << (0)),
 IEEE80211_VIF_SUPPORTS_CQM_RSSI = (1UL << (1)),
 IEEE80211_VIF_SUPPORTS_UAPSD = (1UL << (2)),
 IEEE80211_VIF_GET_NOA_UPDATE = (1UL << (3)),
};
# 1424 "include/net/mac80211.h"
struct ieee80211_vif {
 enum nl80211_iftype type;
 struct ieee80211_bss_conf bss_conf;
 u8 addr[6];
 bool p2p;
 bool csa_active;
 bool mu_mimo_owner;

 u8 cab_queue;
 u8 hw_queue[4];

 struct ieee80211_txq *txq;

 struct ieee80211_chanctx_conf *chanctx_conf;

 u32 driver_flags;





 unsigned int probe_req_reg;


 u8 drv_priv[0] __attribute__((aligned(sizeof(void *))));
};

static inline __attribute__((no_instrument_function)) bool ieee80211_vif_is_mesh(struct ieee80211_vif *vif)
{



 return false;
}
# 1470 "include/net/mac80211.h"
struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *wdev);
# 1483 "include/net/mac80211.h"
struct wireless_dev *ieee80211_vif_to_wdev(struct ieee80211_vif *vif);
# 1523 "include/net/mac80211.h"
enum ieee80211_key_flags {
 IEEE80211_KEY_FLAG_GENERATE_IV_MGMT = (1UL << (0)),
 IEEE80211_KEY_FLAG_GENERATE_IV = (1UL << (1)),
 IEEE80211_KEY_FLAG_GENERATE_MMIC = (1UL << (2)),
 IEEE80211_KEY_FLAG_PAIRWISE = (1UL << (3)),
 IEEE80211_KEY_FLAG_SW_MGMT_TX = (1UL << (4)),
 IEEE80211_KEY_FLAG_PUT_IV_SPACE = (1UL << (5)),
 IEEE80211_KEY_FLAG_RX_MGMT = (1UL << (6)),
 IEEE80211_KEY_FLAG_RESERVE_TAILROOM = (1UL << (7)),
};
# 1557 "include/net/mac80211.h"
struct ieee80211_key_conf {
 atomic64_t tx_pn;
 u32 cipher;
 u8 icv_len;
 u8 iv_len;
 u8 hw_key_idx;
 u8 flags;
 s8 keyidx;
 u8 keylen;
 u8 key[0];
};
# 1588 "include/net/mac80211.h"
struct ieee80211_key_seq {
 union {
  struct {
   u32 iv32;
   u16 iv16;
  } tkip;
  struct {
   u8 pn[6];
  } ccmp;
  struct {
   u8 pn[6];
  } aes_cmac;
  struct {
   u8 pn[6];
  } aes_gmac;
  struct {
   u8 pn[6];
  } gcmp;
  struct {
   u8 seq[16];
   u8 seq_len;
  } hw;
 };
};
# 1631 "include/net/mac80211.h"
struct ieee80211_cipher_scheme {
 u32 cipher;
 u16 iftype;
 u8 hdr_len;
 u8 pn_len;
 u8 pn_off;
 u8 key_idx_off;
 u8 key_idx_mask;
 u8 key_idx_shift;
 u8 mic_len;
};
# 1652 "include/net/mac80211.h"
enum set_key_cmd {
 SET_KEY, DISABLE_KEY,
};
# 1666 "include/net/mac80211.h"
enum ieee80211_sta_state {

 IEEE80211_STA_NOTEXIST,
 IEEE80211_STA_NONE,
 IEEE80211_STA_AUTH,
 IEEE80211_STA_ASSOC,
 IEEE80211_STA_AUTHORIZED,
};
# 1686 "include/net/mac80211.h"
enum ieee80211_sta_rx_bandwidth {
 IEEE80211_STA_RX_BW_20 = 0,
 IEEE80211_STA_RX_BW_40,
 IEEE80211_STA_RX_BW_80,
 IEEE80211_STA_RX_BW_160,
};
# 1700 "include/net/mac80211.h"
struct ieee80211_sta_rates {
 struct callback_head callback_head;
 struct {
  s8 idx;
  u8 count;
  u8 count_cts;
  u8 count_rts;
  u16 flags;
 } rate[4];
};
# 1760 "include/net/mac80211.h"
struct ieee80211_sta {
 u32 supp_rates[NUM_NL80211_BANDS];
 u8 addr[6];
 u16 aid;
 struct ieee80211_sta_ht_cap ht_cap;
 struct ieee80211_sta_vht_cap vht_cap;
 bool wme;
 u8 uapsd_queues;
 u8 max_sp;
 u8 rx_nss;
 enum ieee80211_sta_rx_bandwidth bandwidth;
 enum ieee80211_smps_mode smps_mode;
 struct ieee80211_sta_rates *rates;
 bool tdls;
 bool tdls_initiator;
 bool mfp;
 u8 max_amsdu_subframes;
 u16 max_amsdu_len;
 bool support_p2p_ps;
 u16 max_rc_amsdu_len;

 struct ieee80211_txq *txq[16];


 u8 drv_priv[0] __attribute__((aligned(sizeof(void *))));
};
# 1796 "include/net/mac80211.h"
enum sta_notify_cmd {
 STA_NOTIFY_SLEEP, STA_NOTIFY_AWAKE,
};







struct ieee80211_tx_control {
 struct ieee80211_sta *sta;
};
# 1822 "include/net/mac80211.h"
struct ieee80211_txq {
 struct ieee80211_vif *vif;
 struct ieee80211_sta *sta;
 u8 tid;
 u8 ac;


 u8 drv_priv[0] __attribute__((aligned(sizeof(void *))));
};
# 2007 "include/net/mac80211.h"
enum ieee80211_hw_flags {
 IEEE80211_HW_HAS_RATE_CONTROL,
 IEEE80211_HW_RX_INCLUDES_FCS,
 IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING,
 IEEE80211_HW_SIGNAL_UNSPEC,
 IEEE80211_HW_SIGNAL_DBM,
 IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC,
 IEEE80211_HW_SPECTRUM_MGMT,
 IEEE80211_HW_AMPDU_AGGREGATION,
 IEEE80211_HW_SUPPORTS_PS,
 IEEE80211_HW_PS_NULLFUNC_STACK,
 IEEE80211_HW_SUPPORTS_DYNAMIC_PS,
 IEEE80211_HW_MFP_CAPABLE,
 IEEE80211_HW_WANT_MONITOR_VIF,
 IEEE80211_HW_NO_AUTO_VIF,
 IEEE80211_HW_SW_CRYPTO_CONTROL,
 IEEE80211_HW_SUPPORT_FAST_XMIT,
 IEEE80211_HW_REPORTS_TX_ACK_STATUS,
 IEEE80211_HW_CONNECTION_MONITOR,
 IEEE80211_HW_QUEUE_CONTROL,
 IEEE80211_HW_SUPPORTS_PER_STA_GTK,
 IEEE80211_HW_AP_LINK_PS,
 IEEE80211_HW_TX_AMPDU_SETUP_IN_HW,
 IEEE80211_HW_SUPPORTS_RC_TABLE,
 IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF,
 IEEE80211_HW_TIMING_BEACON_ONLY,
 IEEE80211_HW_SUPPORTS_HT_CCK_RATES,
 IEEE80211_HW_CHANCTX_STA_CSA,
 IEEE80211_HW_SUPPORTS_CLONED_SKBS,
 IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS,
 IEEE80211_HW_TDLS_WIDER_BW,
 IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU,
 IEEE80211_HW_BEACON_TX_STATUS,
 IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR,
 IEEE80211_HW_SUPPORTS_REORDERING_BUFFER,
 IEEE80211_HW_USES_RSS,
 IEEE80211_HW_TX_AMSDU,
 IEEE80211_HW_TX_FRAG_LIST,


 NUM_IEEE80211_HW_FLAGS
};
# 2154 "include/net/mac80211.h"
struct ieee80211_hw {
 struct ieee80211_conf conf;
 struct wiphy *wiphy;
 const char *rate_control_algorithm;
 void *priv;
 unsigned long flags[(((NUM_IEEE80211_HW_FLAGS) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 unsigned int extra_tx_headroom;
 unsigned int extra_beacon_tailroom;
 int vif_data_size;
 int sta_data_size;
 int chanctx_data_size;
 int txq_data_size;
 u16 queues;
 u16 max_listen_interval;
 s8 max_signal;
 u8 max_rates;
 u8 max_report_rates;
 u8 max_rate_tries;
 u8 max_rx_aggregation_subframes;
 u8 max_tx_aggregation_subframes;
 u8 max_tx_fragments;
 u8 offchannel_tx_hw_queue;
 u8 radiotap_mcs_details;
 u16 radiotap_vht_details;
 netdev_features_t netdev_features;
 u8 uapsd_queues;
 u8 uapsd_max_sp_len;
 u8 n_cipher_schemes;
 const struct ieee80211_cipher_scheme *cipher_schemes;
 int txq_ac_max_pending;
};

static inline __attribute__((no_instrument_function)) bool _ieee80211_hw_check(struct ieee80211_hw *hw,
           enum ieee80211_hw_flags flg)
{
 return (__builtin_constant_p((flg)) ? constant_test_bit((flg), (hw->flags)) : variable_test_bit((flg), (hw->flags)));
}


static inline __attribute__((no_instrument_function)) void _ieee80211_hw_set(struct ieee80211_hw *hw,
         enum ieee80211_hw_flags flg)
{
 return __set_bit(flg, hw->flags);
}
# 2206 "include/net/mac80211.h"
struct ieee80211_scan_request {
 struct ieee80211_scan_ies ies;


 struct cfg80211_scan_request req;
};
# 2226 "include/net/mac80211.h"
struct ieee80211_tdls_ch_sw_params {
 struct ieee80211_sta *sta;
 struct cfg80211_chan_def *chandef;
 u8 action_code;
 u32 status;
 u32 timestamp;
 u16 switch_time;
 u16 switch_timeout;
 struct sk_buff *tmpl_skb;
 u32 ch_sw_tm_ie;
};
# 2251 "include/net/mac80211.h"
struct ieee80211_hw *wiphy_to_ieee80211_hw(struct wiphy *wiphy);







static inline __attribute__((no_instrument_function)) void SET_IEEE80211_DEV(struct ieee80211_hw *hw, struct device *dev)
{
 set_wiphy_dev(hw->wiphy, dev);
}







static inline __attribute__((no_instrument_function)) void SET_IEEE80211_PERM_ADDR(struct ieee80211_hw *hw, const u8 *addr)
{
 memcpy(hw->wiphy->perm_addr, addr, 6);
}

static inline __attribute__((no_instrument_function)) struct ieee80211_rate *
ieee80211_get_tx_rate(const struct ieee80211_hw *hw,
        const struct ieee80211_tx_info *c)
{
 if (({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(c->control.rates[0].idx < 0); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/net/mac80211.h", 2279); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); }))
  return ((void *)0);
 return &hw->wiphy->bands[c->band]->bitrates[c->control.rates[0].idx];
}

static inline __attribute__((no_instrument_function)) struct ieee80211_rate *
ieee80211_get_rts_cts_rate(const struct ieee80211_hw *hw,
      const struct ieee80211_tx_info *c)
{
 if (c->control.rts_cts_rate_idx < 0)
  return ((void *)0);
 return &hw->wiphy->bands[c->band]->bitrates[c->control.rts_cts_rate_idx];
}

static inline __attribute__((no_instrument_function)) struct ieee80211_rate *
ieee80211_get_alt_retry_rate(const struct ieee80211_hw *hw,
        const struct ieee80211_tx_info *c, int idx)
{
 if (c->control.rates[idx + 1].idx < 0)
  return ((void *)0);
 return &hw->wiphy->bands[c->band]->bitrates[c->control.rates[idx + 1].idx];
}
# 2310 "include/net/mac80211.h"
void ieee80211_free_txskb(struct ieee80211_hw *hw, struct sk_buff *skb);
# 2738 "include/net/mac80211.h"
enum ieee80211_filter_flags {
 FIF_ALLMULTI = 1<<1,
 FIF_FCSFAIL = 1<<2,
 FIF_PLCPFAIL = 1<<3,
 FIF_BCN_PRBRESP_PROMISC = 1<<4,
 FIF_CONTROL = 1<<5,
 FIF_OTHER_BSS = 1<<6,
 FIF_PSPOLL = 1<<7,
 FIF_PROBE_REQ = 1<<8,
};
# 2776 "include/net/mac80211.h"
enum ieee80211_ampdu_mlme_action {
 IEEE80211_AMPDU_RX_START,
 IEEE80211_AMPDU_RX_STOP,
 IEEE80211_AMPDU_TX_START,
 IEEE80211_AMPDU_TX_STOP_CONT,
 IEEE80211_AMPDU_TX_STOP_FLUSH,
 IEEE80211_AMPDU_TX_STOP_FLUSH_CONT,
 IEEE80211_AMPDU_TX_OPERATIONAL,
};
# 2803 "include/net/mac80211.h"
struct ieee80211_ampdu_params {
 enum ieee80211_ampdu_mlme_action action;
 struct ieee80211_sta *sta;
 u16 tid;
 u16 ssn;
 u8 buf_size;
 bool amsdu;
 u16 timeout;
};







enum ieee80211_frame_release_type {
 IEEE80211_FRAME_RELEASE_PSPOLL,
 IEEE80211_FRAME_RELEASE_UAPSD,
};
# 2838 "include/net/mac80211.h"
enum ieee80211_rate_control_changed {
 IEEE80211_RC_BW_CHANGED = (1UL << (0)),
 IEEE80211_RC_SMPS_CHANGED = (1UL << (1)),
 IEEE80211_RC_SUPP_RATES_CHANGED = (1UL << (2)),
 IEEE80211_RC_NSS_CHANGED = (1UL << (3)),
};
# 2858 "include/net/mac80211.h"
enum ieee80211_roc_type {
 IEEE80211_ROC_TYPE_NORMAL = 0,
 IEEE80211_ROC_TYPE_MGMT_TX,
};
# 2874 "include/net/mac80211.h"
enum ieee80211_reconfig_type {
 IEEE80211_RECONFIG_TYPE_RESTART,
 IEEE80211_RECONFIG_TYPE_SUSPEND,
};
# 3397 "include/net/mac80211.h"
struct ieee80211_ops {
 void (*tx)(struct ieee80211_hw *hw,
     struct ieee80211_tx_control *control,
     struct sk_buff *skb);
 int (*start)(struct ieee80211_hw *hw);
 void (*stop)(struct ieee80211_hw *hw);

 int (*suspend)(struct ieee80211_hw *hw, struct cfg80211_wowlan *wowlan);
 int (*resume)(struct ieee80211_hw *hw);
 void (*set_wakeup)(struct ieee80211_hw *hw, bool enabled);

 int (*add_interface)(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif);
 int (*change_interface)(struct ieee80211_hw *hw,
    struct ieee80211_vif *vif,
    enum nl80211_iftype new_type, bool p2p);
 void (*remove_interface)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif);
 int (*config)(struct ieee80211_hw *hw, u32 changed);
 void (*bss_info_changed)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif,
     struct ieee80211_bss_conf *info,
     u32 changed);

 int (*start_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 void (*stop_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);

 u64 (*prepare_multicast)(struct ieee80211_hw *hw,
     struct netdev_hw_addr_list *mc_list);
 void (*configure_filter)(struct ieee80211_hw *hw,
     unsigned int changed_flags,
     unsigned int *total_flags,
     u64 multicast);
 void (*config_iface_filter)(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        unsigned int filter_flags,
        unsigned int changed_flags);
 int (*set_tim)(struct ieee80211_hw *hw, struct ieee80211_sta *sta,
         bool set);
 int (*set_key)(struct ieee80211_hw *hw, enum set_key_cmd cmd,
         struct ieee80211_vif *vif, struct ieee80211_sta *sta,
         struct ieee80211_key_conf *key);
 void (*update_tkip_key)(struct ieee80211_hw *hw,
    struct ieee80211_vif *vif,
    struct ieee80211_key_conf *conf,
    struct ieee80211_sta *sta,
    u32 iv32, u16 *phase1key);
 void (*set_rekey_data)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          struct cfg80211_gtk_rekey_data *data);
 void (*set_default_unicast_key)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif, int idx);
 int (*hw_scan)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
         struct ieee80211_scan_request *req);
 void (*cancel_hw_scan)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif);
 int (*sched_scan_start)(struct ieee80211_hw *hw,
    struct ieee80211_vif *vif,
    struct cfg80211_sched_scan_request *req,
    struct ieee80211_scan_ies *ies);
 int (*sched_scan_stop)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif);
 void (*sw_scan_start)(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif,
         const u8 *mac_addr);
 void (*sw_scan_complete)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif);
 int (*get_stats)(struct ieee80211_hw *hw,
    struct ieee80211_low_level_stats *stats);
 void (*get_key_seq)(struct ieee80211_hw *hw,
       struct ieee80211_key_conf *key,
       struct ieee80211_key_seq *seq);
 int (*set_frag_threshold)(struct ieee80211_hw *hw, u32 value);
 int (*set_rts_threshold)(struct ieee80211_hw *hw, u32 value);
 int (*sta_add)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
         struct ieee80211_sta *sta);
 int (*sta_remove)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
     struct ieee80211_sta *sta);
# 3485 "include/net/mac80211.h"
 void (*sta_notify)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
   enum sta_notify_cmd, struct ieee80211_sta *sta);
 int (*sta_state)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
    struct ieee80211_sta *sta,
    enum ieee80211_sta_state old_state,
    enum ieee80211_sta_state new_state);
 void (*sta_pre_rcu_remove)(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif,
       struct ieee80211_sta *sta);
 void (*sta_rc_update)(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif,
         struct ieee80211_sta *sta,
         u32 changed);
 void (*sta_rate_tbl_update)(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        struct ieee80211_sta *sta);
 void (*sta_statistics)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          struct ieee80211_sta *sta,
          struct station_info *sinfo);
 int (*conf_tx)(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif, u16 ac,
         const struct ieee80211_tx_queue_params *params);
 u64 (*get_tsf)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 void (*set_tsf)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
   u64 tsf);
 void (*reset_tsf)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 int (*tx_last_beacon)(struct ieee80211_hw *hw);
 int (*ampdu_action)(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif,
       struct ieee80211_ampdu_params *params);
 int (*get_survey)(struct ieee80211_hw *hw, int idx,
  struct survey_info *survey);
 void (*rfkill_poll)(struct ieee80211_hw *hw);
 void (*set_coverage_class)(struct ieee80211_hw *hw, s16 coverage_class);







 void (*flush)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
        u32 queues, bool drop);
 void (*channel_switch)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          struct ieee80211_channel_switch *ch_switch);
 int (*set_antenna)(struct ieee80211_hw *hw, u32 tx_ant, u32 rx_ant);
 int (*get_antenna)(struct ieee80211_hw *hw, u32 *tx_ant, u32 *rx_ant);

 int (*remain_on_channel)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif,
     struct ieee80211_channel *chan,
     int duration,
     enum ieee80211_roc_type type);
 int (*cancel_remain_on_channel)(struct ieee80211_hw *hw);
 int (*set_ringparam)(struct ieee80211_hw *hw, u32 tx, u32 rx);
 void (*get_ringparam)(struct ieee80211_hw *hw,
         u32 *tx, u32 *tx_max, u32 *rx, u32 *rx_max);
 bool (*tx_frames_pending)(struct ieee80211_hw *hw);
 int (*set_bitrate_mask)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
    const struct cfg80211_bitrate_mask *mask);
 void (*event_callback)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          const struct ieee80211_event *event);

 void (*allow_buffered_frames)(struct ieee80211_hw *hw,
          struct ieee80211_sta *sta,
          u16 tids, int num_frames,
          enum ieee80211_frame_release_type reason,
          bool more_data);
 void (*release_buffered_frames)(struct ieee80211_hw *hw,
     struct ieee80211_sta *sta,
     u16 tids, int num_frames,
     enum ieee80211_frame_release_type reason,
     bool more_data);

 int (*get_et_sset_count)(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif, int sset);
 void (*get_et_stats)(struct ieee80211_hw *hw,
    struct ieee80211_vif *vif,
    struct ethtool_stats *stats, u64 *data);
 void (*get_et_strings)(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif,
      u32 sset, u8 *data);

 void (*mgd_prepare_tx)(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif);

 void (*mgd_protect_tdls_discover)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif);

 int (*add_chanctx)(struct ieee80211_hw *hw,
      struct ieee80211_chanctx_conf *ctx);
 void (*remove_chanctx)(struct ieee80211_hw *hw,
          struct ieee80211_chanctx_conf *ctx);
 void (*change_chanctx)(struct ieee80211_hw *hw,
          struct ieee80211_chanctx_conf *ctx,
          u32 changed);
 int (*assign_vif_chanctx)(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif,
      struct ieee80211_chanctx_conf *ctx);
 void (*unassign_vif_chanctx)(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif,
         struct ieee80211_chanctx_conf *ctx);
 int (*switch_vif_chanctx)(struct ieee80211_hw *hw,
      struct ieee80211_vif_chanctx_switch *vifs,
      int n_vifs,
      enum ieee80211_chanctx_switch_mode mode);

 void (*reconfig_complete)(struct ieee80211_hw *hw,
      enum ieee80211_reconfig_type reconfig_type);


 void (*ipv6_addr_change)(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif,
     struct inet6_dev *idev);

 void (*channel_switch_beacon)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          struct cfg80211_chan_def *chandef);
 int (*pre_channel_switch)(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif,
      struct ieee80211_channel_switch *ch_switch);

 int (*post_channel_switch)(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif);

 int (*join_ibss)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 void (*leave_ibss)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 u32 (*get_expected_throughput)(struct ieee80211_sta *sta);
 int (*get_txpower)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
      int *dbm);

 int (*tdls_channel_switch)(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif,
       struct ieee80211_sta *sta, u8 oper_class,
       struct cfg80211_chan_def *chandef,
       struct sk_buff *tmpl_skb, u32 ch_sw_tm_ie);
 void (*tdls_cancel_channel_switch)(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        struct ieee80211_sta *sta);
 void (*tdls_recv_channel_switch)(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif,
      struct ieee80211_tdls_ch_sw_params *params);

 void (*wake_tx_queue)(struct ieee80211_hw *hw,
         struct ieee80211_txq *txq);
 void (*sync_rx_queues)(struct ieee80211_hw *hw);
};
# 3652 "include/net/mac80211.h"
struct ieee80211_hw *ieee80211_alloc_hw_nm(size_t priv_data_len,
        const struct ieee80211_ops *ops,
        const char *requested_name);
# 3670 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function))
struct ieee80211_hw *ieee80211_alloc_hw(size_t priv_data_len,
     const struct ieee80211_ops *ops)
{
 return ieee80211_alloc_hw_nm(priv_data_len, ops, ((void *)0));
}
# 3688 "include/net/mac80211.h"
int ieee80211_register_hw(struct ieee80211_hw *hw);







struct ieee80211_tpt_blink {
 int throughput;
 int blink_time;
};
# 3708 "include/net/mac80211.h"
enum ieee80211_tpt_led_trigger_flags {
 IEEE80211_TPT_LEDTRIG_FL_RADIO = (1UL << (0)),
 IEEE80211_TPT_LEDTRIG_FL_WORK = (1UL << (1)),
 IEEE80211_TPT_LEDTRIG_FL_CONNECTED = (1UL << (2)),
};


const char *__ieee80211_get_tx_led_name(struct ieee80211_hw *hw);
const char *__ieee80211_get_rx_led_name(struct ieee80211_hw *hw);
const char *__ieee80211_get_assoc_led_name(struct ieee80211_hw *hw);
const char *__ieee80211_get_radio_led_name(struct ieee80211_hw *hw);
const char *
__ieee80211_create_tpt_led_trigger(struct ieee80211_hw *hw,
       unsigned int flags,
       const struct ieee80211_tpt_blink *blink_table,
       unsigned int blink_table_len);
# 3737 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) const char *ieee80211_get_tx_led_name(struct ieee80211_hw *hw)
{

 return __ieee80211_get_tx_led_name(hw);



}
# 3758 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) const char *ieee80211_get_rx_led_name(struct ieee80211_hw *hw)
{

 return __ieee80211_get_rx_led_name(hw);



}
# 3779 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) const char *ieee80211_get_assoc_led_name(struct ieee80211_hw *hw)
{

 return __ieee80211_get_assoc_led_name(hw);



}
# 3800 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) const char *ieee80211_get_radio_led_name(struct ieee80211_hw *hw)
{

 return __ieee80211_get_radio_led_name(hw);



}
# 3821 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) const char *
ieee80211_create_tpt_led_trigger(struct ieee80211_hw *hw, unsigned int flags,
     const struct ieee80211_tpt_blink *blink_table,
     unsigned int blink_table_len)
{

 return __ieee80211_create_tpt_led_trigger(hw, flags, blink_table,
        blink_table_len);



}
# 3842 "include/net/mac80211.h"
void ieee80211_unregister_hw(struct ieee80211_hw *hw);
# 3853 "include/net/mac80211.h"
void ieee80211_free_hw(struct ieee80211_hw *hw);
# 3867 "include/net/mac80211.h"
void ieee80211_restart_hw(struct ieee80211_hw *hw);
# 3891 "include/net/mac80211.h"
void ieee80211_rx_napi(struct ieee80211_hw *hw, struct ieee80211_sta *sta,
         struct sk_buff *skb, struct napi_struct *napi);
# 3914 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)
{
 ieee80211_rx_napi(hw, ((void *)0), skb, ((void *)0));
}
# 3932 "include/net/mac80211.h"
void ieee80211_rx_irqsafe(struct ieee80211_hw *hw, struct sk_buff *skb);
# 3947 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void ieee80211_rx_ni(struct ieee80211_hw *hw,
       struct sk_buff *skb)
{
 local_bh_disable();
 ieee80211_rx(hw, skb);
 local_bh_enable();
}
# 3972 "include/net/mac80211.h"
int ieee80211_sta_ps_transition(struct ieee80211_sta *sta, bool start);
# 3987 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) int ieee80211_sta_ps_transition_ni(struct ieee80211_sta *sta,
        bool start)
{
 int ret;

 local_bh_disable();
 ret = ieee80211_sta_ps_transition(sta, start);
 local_bh_enable();

 return ret;
}
# 4010 "include/net/mac80211.h"
void ieee80211_sta_pspoll(struct ieee80211_sta *sta);
# 4024 "include/net/mac80211.h"
void ieee80211_sta_uapsd_trigger(struct ieee80211_sta *sta, u8 tid);
# 4060 "include/net/mac80211.h"
void ieee80211_sta_set_buffered(struct ieee80211_sta *sta,
    u8 tid, bool buffered);
# 4076 "include/net/mac80211.h"
void ieee80211_get_tx_rates(struct ieee80211_vif *vif,
       struct ieee80211_sta *sta,
       struct sk_buff *skb,
       struct ieee80211_tx_rate *dest,
       int max_rates);
# 4098 "include/net/mac80211.h"
void ieee80211_tx_status(struct ieee80211_hw *hw,
    struct sk_buff *skb);
# 4117 "include/net/mac80211.h"
void ieee80211_tx_status_noskb(struct ieee80211_hw *hw,
          struct ieee80211_sta *sta,
          struct ieee80211_tx_info *info);
# 4133 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void ieee80211_tx_status_ni(struct ieee80211_hw *hw,
       struct sk_buff *skb)
{
 local_bh_disable();
 ieee80211_tx_status(hw, skb);
 local_bh_enable();
}
# 4153 "include/net/mac80211.h"
void ieee80211_tx_status_irqsafe(struct ieee80211_hw *hw,
     struct sk_buff *skb);
# 4165 "include/net/mac80211.h"
void ieee80211_report_low_ack(struct ieee80211_sta *sta, u32 num_packets);
# 4177 "include/net/mac80211.h"
struct ieee80211_mutable_offsets {
 u16 tim_offset;
 u16 tim_length;

 u16 csa_counter_offs[2];
};
# 4203 "include/net/mac80211.h"
struct sk_buff *
ieee80211_beacon_get_template(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif,
         struct ieee80211_mutable_offsets *offs);
# 4230 "include/net/mac80211.h"
struct sk_buff *ieee80211_beacon_get_tim(struct ieee80211_hw *hw,
      struct ieee80211_vif *vif,
      u16 *tim_offset, u16 *tim_length);
# 4243 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) struct sk_buff *ieee80211_beacon_get(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif)
{
 return ieee80211_beacon_get_tim(hw, vif, ((void *)0), ((void *)0));
}
# 4261 "include/net/mac80211.h"
u8 ieee80211_csa_update_counter(struct ieee80211_vif *vif);
# 4271 "include/net/mac80211.h"
void ieee80211_csa_finish(struct ieee80211_vif *vif);







bool ieee80211_csa_is_complete(struct ieee80211_vif *vif);
# 4294 "include/net/mac80211.h"
struct sk_buff *ieee80211_proberesp_get(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif);
# 4311 "include/net/mac80211.h"
struct sk_buff *ieee80211_pspoll_get(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif);
# 4328 "include/net/mac80211.h"
struct sk_buff *ieee80211_nullfunc_get(struct ieee80211_hw *hw,
           struct ieee80211_vif *vif);
# 4344 "include/net/mac80211.h"
struct sk_buff *ieee80211_probereq_get(struct ieee80211_hw *hw,
           const u8 *src_addr,
           const u8 *ssid, size_t ssid_len,
           size_t tailroom);
# 4363 "include/net/mac80211.h"
void ieee80211_rts_get(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
         const void *frame, size_t frame_len,
         const struct ieee80211_tx_info *frame_txctl,
         struct ieee80211_rts *rts);
# 4381 "include/net/mac80211.h"
__le16 ieee80211_rts_duration(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif, size_t frame_len,
         const struct ieee80211_tx_info *frame_txctl);
# 4399 "include/net/mac80211.h"
void ieee80211_ctstoself_get(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        const void *frame, size_t frame_len,
        const struct ieee80211_tx_info *frame_txctl,
        struct ieee80211_cts *cts);
# 4418 "include/net/mac80211.h"
__le16 ieee80211_ctstoself_duration(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        size_t frame_len,
        const struct ieee80211_tx_info *frame_txctl);
# 4436 "include/net/mac80211.h"
__le16 ieee80211_generic_frame_duration(struct ieee80211_hw *hw,
     struct ieee80211_vif *vif,
     enum nl80211_band band,
     size_t frame_len,
     struct ieee80211_rate *rate);
# 4463 "include/net/mac80211.h"
struct sk_buff *
ieee80211_get_buffered_bc(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
# 4475 "include/net/mac80211.h"
void ieee80211_get_tkip_p1k_iv(struct ieee80211_key_conf *keyconf,
          u32 iv32, u16 *p1k);
# 4489 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void ieee80211_get_tkip_p1k(struct ieee80211_key_conf *keyconf,
       struct sk_buff *skb, u16 *p1k)
{
 struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 const u8 *data = (u8 *)hdr + ieee80211_hdrlen(hdr->frame_control);
 u32 iv32 = get_unaligned_le32(&data[4]);

 ieee80211_get_tkip_p1k_iv(keyconf, iv32, p1k);
}
# 4510 "include/net/mac80211.h"
void ieee80211_get_tkip_rx_p1k(struct ieee80211_key_conf *keyconf,
          const u8 *ta, u32 iv32, u16 *p1k);
# 4524 "include/net/mac80211.h"
void ieee80211_get_tkip_p2k(struct ieee80211_key_conf *keyconf,
       struct sk_buff *skb, u8 *p2k);
# 4540 "include/net/mac80211.h"
u8 *ieee80211_tkip_add_iv(u8 *pos, struct ieee80211_key_conf *keyconf, u64 pn);
# 4558 "include/net/mac80211.h"
void ieee80211_get_key_rx_seq(struct ieee80211_key_conf *keyconf,
         int tid, struct ieee80211_key_seq *seq);
# 4578 "include/net/mac80211.h"
void ieee80211_set_key_rx_seq(struct ieee80211_key_conf *keyconf,
         int tid, struct ieee80211_key_seq *seq);
# 4592 "include/net/mac80211.h"
void ieee80211_remove_key(struct ieee80211_key_conf *keyconf);
# 4623 "include/net/mac80211.h"
struct ieee80211_key_conf *
ieee80211_gtk_rekey_add(struct ieee80211_vif *vif,
   struct ieee80211_key_conf *keyconf);
# 4634 "include/net/mac80211.h"
void ieee80211_gtk_rekey_notify(struct ieee80211_vif *vif, const u8 *bssid,
    const u8 *replay_ctr, gfp_t gfp);
# 4644 "include/net/mac80211.h"
void ieee80211_wake_queue(struct ieee80211_hw *hw, int queue);
# 4653 "include/net/mac80211.h"
void ieee80211_stop_queue(struct ieee80211_hw *hw, int queue);
# 4665 "include/net/mac80211.h"
int ieee80211_queue_stopped(struct ieee80211_hw *hw, int queue);







void ieee80211_stop_queues(struct ieee80211_hw *hw);







void ieee80211_wake_queues(struct ieee80211_hw *hw);
# 4694 "include/net/mac80211.h"
void ieee80211_scan_completed(struct ieee80211_hw *hw, bool aborted);
# 4704 "include/net/mac80211.h"
void ieee80211_sched_scan_results(struct ieee80211_hw *hw);
# 4716 "include/net/mac80211.h"
void ieee80211_sched_scan_stopped(struct ieee80211_hw *hw);
# 4729 "include/net/mac80211.h"
enum ieee80211_interface_iteration_flags {
 IEEE80211_IFACE_ITER_NORMAL = 0,
 IEEE80211_IFACE_ITER_RESUME_ALL = (1UL << (0)),
 IEEE80211_IFACE_ITER_ACTIVE = (1UL << (1)),
};
# 4748 "include/net/mac80211.h"
void ieee80211_iterate_interfaces(struct ieee80211_hw *hw, u32 iter_flags,
      void (*iterator)(void *data, u8 *mac,
         struct ieee80211_vif *vif),
      void *data);
# 4768 "include/net/mac80211.h"
static inline __attribute__((no_instrument_function)) void
ieee80211_iterate_active_interfaces(struct ieee80211_hw *hw, u32 iter_flags,
        void (*iterator)(void *data, u8 *mac,
           struct ieee80211_vif *vif),
        void *data)
{
 ieee80211_iterate_interfaces(hw,
         iter_flags | IEEE80211_IFACE_ITER_ACTIVE,
         iterator, data);
}
# 4793 "include/net/mac80211.h"
void ieee80211_iterate_active_interfaces_atomic(struct ieee80211_hw *hw,
      u32 iter_flags,
      void (*iterator)(void *data,
          u8 *mac,
          struct ieee80211_vif *vif),
      void *data);
# 4812 "include/net/mac80211.h"
void ieee80211_iterate_active_interfaces_rtnl(struct ieee80211_hw *hw,
           u32 iter_flags,
           void (*iterator)(void *data,
      u8 *mac,
      struct ieee80211_vif *vif),
           void *data);
# 4831 "include/net/mac80211.h"
void ieee80211_iterate_stations_atomic(struct ieee80211_hw *hw,
           void (*iterator)(void *data,
      struct ieee80211_sta *sta),
           void *data);
# 4844 "include/net/mac80211.h"
void ieee80211_queue_work(struct ieee80211_hw *hw, struct work_struct *work);
# 4856 "include/net/mac80211.h"
void ieee80211_queue_delayed_work(struct ieee80211_hw *hw,
      struct delayed_work *dwork,
      unsigned long delay);
# 4872 "include/net/mac80211.h"
int ieee80211_start_tx_ba_session(struct ieee80211_sta *sta, u16 tid,
      u16 timeout);
# 4885 "include/net/mac80211.h"
void ieee80211_start_tx_ba_cb_irqsafe(struct ieee80211_vif *vif, const u8 *ra,
          u16 tid);
# 4899 "include/net/mac80211.h"
int ieee80211_stop_tx_ba_session(struct ieee80211_sta *sta, u16 tid);
# 4911 "include/net/mac80211.h"
void ieee80211_stop_tx_ba_cb_irqsafe(struct ieee80211_vif *vif, const u8 *ra,
         u16 tid);
# 4925 "include/net/mac80211.h"
struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *vif,
      const u8 *addr);
# 4950 "include/net/mac80211.h"
struct ieee80211_sta *ieee80211_find_sta_by_ifaddr(struct ieee80211_hw *hw,
            const u8 *addr,
            const u8 *localaddr);
# 4983 "include/net/mac80211.h"
void ieee80211_sta_block_awake(struct ieee80211_hw *hw,
          struct ieee80211_sta *pubsta, bool block);
# 5005 "include/net/mac80211.h"
void ieee80211_sta_eosp(struct ieee80211_sta *pubsta);
# 5027 "include/net/mac80211.h"
void ieee80211_send_eosp_nullfunc(struct ieee80211_sta *pubsta, int tid);
# 5047 "include/net/mac80211.h"
void ieee80211_iter_keys(struct ieee80211_hw *hw,
    struct ieee80211_vif *vif,
    void (*iter)(struct ieee80211_hw *hw,
          struct ieee80211_vif *vif,
          struct ieee80211_sta *sta,
          struct ieee80211_key_conf *key,
          void *data),
    void *iter_data);
# 5071 "include/net/mac80211.h"
void ieee80211_iter_keys_rcu(struct ieee80211_hw *hw,
        struct ieee80211_vif *vif,
        void (*iter)(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif,
       struct ieee80211_sta *sta,
       struct ieee80211_key_conf *key,
       void *data),
        void *iter_data);
# 5099 "include/net/mac80211.h"
void ieee80211_iter_chan_contexts_atomic(
 struct ieee80211_hw *hw,
 void (*iter)(struct ieee80211_hw *hw,
       struct ieee80211_chanctx_conf *chanctx_conf,
       void *data),
 void *iter_data);
# 5120 "include/net/mac80211.h"
struct sk_buff *ieee80211_ap_probereq_get(struct ieee80211_hw *hw,
       struct ieee80211_vif *vif);
# 5132 "include/net/mac80211.h"
void ieee80211_beacon_loss(struct ieee80211_vif *vif);
# 5148 "include/net/mac80211.h"
void ieee80211_connection_loss(struct ieee80211_vif *vif);
# 5171 "include/net/mac80211.h"
void ieee80211_resume_disconnect(struct ieee80211_vif *vif);
# 5185 "include/net/mac80211.h"
void ieee80211_cqm_rssi_notify(struct ieee80211_vif *vif,
          enum nl80211_cqm_rssi_threshold_event rssi_event,
          gfp_t gfp);







void ieee80211_cqm_beacon_loss_notify(struct ieee80211_vif *vif, gfp_t gfp);






void ieee80211_radar_detected(struct ieee80211_hw *hw);
# 5212 "include/net/mac80211.h"
void ieee80211_chswitch_done(struct ieee80211_vif *vif, bool success);
# 5223 "include/net/mac80211.h"
void ieee80211_request_smps(struct ieee80211_vif *vif,
       enum ieee80211_smps_mode smps_mode);





void ieee80211_ready_on_channel(struct ieee80211_hw *hw);





void ieee80211_remain_on_channel_expired(struct ieee80211_hw *hw);
# 5252 "include/net/mac80211.h"
void ieee80211_stop_rx_ba_session(struct ieee80211_vif *vif, u16 ba_rx_bitmap,
      const u8 *addr);
# 5269 "include/net/mac80211.h"
void ieee80211_mark_rx_ba_filtered_frames(struct ieee80211_sta *pubsta, u8 tid,
       u16 ssn, u64 filtered,
       u16 received_mpdus);
# 5284 "include/net/mac80211.h"
void ieee80211_send_bar(struct ieee80211_vif *vif, u8 *ra, u16 tid, u16 ssn);
# 5300 "include/net/mac80211.h"
void ieee80211_start_rx_ba_session_offl(struct ieee80211_vif *vif,
     const u8 *addr, u16 tid);
# 5317 "include/net/mac80211.h"
void ieee80211_stop_rx_ba_session_offl(struct ieee80211_vif *vif,
           const u8 *addr, u16 tid);
# 5344 "include/net/mac80211.h"
struct ieee80211_tx_rate_control {
 struct ieee80211_hw *hw;
 struct ieee80211_supported_band *sband;
 struct ieee80211_bss_conf *bss_conf;
 struct sk_buff *skb;
 struct ieee80211_tx_rate reported_rate;
 bool rts, short_preamble;
 u8 max_rate_idx;
 u32 rate_idx_mask;
 u8 *rate_idx_mcs_mask;
 bool bss;
};

struct rate_control_ops {
 const char *name;
 void *(*alloc)(struct ieee80211_hw *hw, struct dentry *debugfsdir);
 void (*free)(void *priv);

 void *(*alloc_sta)(void *priv, struct ieee80211_sta *sta, gfp_t gfp);
 void (*rate_init)(void *priv, struct ieee80211_supported_band *sband,
     struct cfg80211_chan_def *chandef,
     struct ieee80211_sta *sta, void *priv_sta);
 void (*rate_update)(void *priv, struct ieee80211_supported_band *sband,
       struct cfg80211_chan_def *chandef,
       struct ieee80211_sta *sta, void *priv_sta,
       u32 changed);
 void (*free_sta)(void *priv, struct ieee80211_sta *sta,
    void *priv_sta);

 void (*tx_status_noskb)(void *priv,
    struct ieee80211_supported_band *sband,
    struct ieee80211_sta *sta, void *priv_sta,
    struct ieee80211_tx_info *info);
 void (*tx_status)(void *priv, struct ieee80211_supported_band *sband,
     struct ieee80211_sta *sta, void *priv_sta,
     struct sk_buff *skb);
 void (*get_rate)(void *priv, struct ieee80211_sta *sta, void *priv_sta,
    struct ieee80211_tx_rate_control *txrc);

 void (*add_sta_debugfs)(void *priv, void *priv_sta,
    struct dentry *dir);
 void (*remove_sta_debugfs)(void *priv, void *priv_sta);

 u32 (*get_expected_throughput)(void *priv_sta);
};

static inline __attribute__((no_instrument_function)) int rate_supported(struct ieee80211_sta *sta,
     enum nl80211_band band,
     int index)
{
 return (sta == ((void *)0) || sta->supp_rates[band] & (1UL << (index)));
}
# 5415 "include/net/mac80211.h"
bool rate_control_send_low(struct ieee80211_sta *sta,
      void *priv_sta,
      struct ieee80211_tx_rate_control *txrc);


static inline __attribute__((no_instrument_function)) s8
rate_lowest_index(struct ieee80211_supported_band *sband,
    struct ieee80211_sta *sta)
{
 int i;

 for (i = 0; i < sband->n_bitrates; i++)
  if (rate_supported(sta, sband->band, i))
   return i;


 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("include/net/mac80211.h", 5431); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });


 return 0;
}

static inline __attribute__((no_instrument_function))
bool rate_usable_index_exists(struct ieee80211_supported_band *sband,
         struct ieee80211_sta *sta)
{
 unsigned int i;

 for (i = 0; i < sband->n_bitrates; i++)
  if (rate_supported(sta, sband->band, i))
   return true;
 return false;
}
# 5461 "include/net/mac80211.h"
int rate_control_set_rates(struct ieee80211_hw *hw,
      struct ieee80211_sta *pubsta,
      struct ieee80211_sta_rates *rates);

int ieee80211_rate_control_register(const struct rate_control_ops *ops);
void ieee80211_rate_control_unregister(const struct rate_control_ops *ops);

static inline __attribute__((no_instrument_function)) bool
conf_is_ht20(struct ieee80211_conf *conf)
{
 return conf->chandef.width == NL80211_CHAN_WIDTH_20;
}

static inline __attribute__((no_instrument_function)) bool
conf_is_ht40_minus(struct ieee80211_conf *conf)
{
 return conf->chandef.width == NL80211_CHAN_WIDTH_40 &&
        conf->chandef.center_freq1 < conf->chandef.chan->center_freq;
}

static inline __attribute__((no_instrument_function)) bool
conf_is_ht40_plus(struct ieee80211_conf *conf)
{
 return conf->chandef.width == NL80211_CHAN_WIDTH_40 &&
        conf->chandef.center_freq1 > conf->chandef.chan->center_freq;
}

static inline __attribute__((no_instrument_function)) bool
conf_is_ht40(struct ieee80211_conf *conf)
{
 return conf->chandef.width == NL80211_CHAN_WIDTH_40;
}

static inline __attribute__((no_instrument_function)) bool
conf_is_ht(struct ieee80211_conf *conf)
{
 return (conf->chandef.width != NL80211_CHAN_WIDTH_5) &&
  (conf->chandef.width != NL80211_CHAN_WIDTH_10) &&
  (conf->chandef.width != NL80211_CHAN_WIDTH_20_NOHT);
}

static inline __attribute__((no_instrument_function)) enum nl80211_iftype
ieee80211_iftype_p2p(enum nl80211_iftype type, bool p2p)
{
 if (p2p) {
  switch (type) {
  case NL80211_IFTYPE_STATION:
   return NL80211_IFTYPE_P2P_CLIENT;
  case NL80211_IFTYPE_AP:
   return NL80211_IFTYPE_P2P_GO;
  default:
   break;
  }
 }
 return type;
}

static inline __attribute__((no_instrument_function)) enum nl80211_iftype
ieee80211_vif_type_p2p(struct ieee80211_vif *vif)
{
 return ieee80211_iftype_p2p(vif->type, vif->p2p);
}
# 5536 "include/net/mac80211.h"
void ieee80211_update_mu_groups(struct ieee80211_vif *vif,
    const u8 *membership, const u8 *position);

void ieee80211_enable_rssi_reports(struct ieee80211_vif *vif,
       int rssi_min_thold,
       int rssi_max_thold);

void ieee80211_disable_rssi_reports(struct ieee80211_vif *vif);
# 5555 "include/net/mac80211.h"
int ieee80211_ave_rssi(struct ieee80211_vif *vif);
# 5565 "include/net/mac80211.h"
void ieee80211_report_wowlan_wakeup(struct ieee80211_vif *vif,
        struct cfg80211_wowlan_wakeup *wakeup,
        gfp_t gfp);
# 5579 "include/net/mac80211.h"
bool ieee80211_tx_prepare_skb(struct ieee80211_hw *hw,
         struct ieee80211_vif *vif, struct sk_buff *skb,
         int band, struct ieee80211_sta **sta);
# 5596 "include/net/mac80211.h"
struct ieee80211_noa_data {
 u32 next_tsf;
 bool has_next_tsf;

 u8 absent;

 u8 count[4];
 struct {
  u32 start;
  u32 duration;
  u32 interval;
 } desc[4];
};
# 5619 "include/net/mac80211.h"
int ieee80211_parse_p2p_noa(const struct ieee80211_p2p_noa_attr *attr,
       struct ieee80211_noa_data *data, u32 tsf);







void ieee80211_update_p2p_noa(struct ieee80211_noa_data *data, u32 tsf);
# 5640 "include/net/mac80211.h"
void ieee80211_tdls_oper_request(struct ieee80211_vif *vif, const u8 *peer,
     enum nl80211_tdls_operation oper,
     u16 reason_code, gfp_t gfp);
# 5663 "include/net/mac80211.h"
int ieee80211_reserve_tid(struct ieee80211_sta *sta, u8 tid);
# 5679 "include/net/mac80211.h"
void ieee80211_unreserve_tid(struct ieee80211_sta *sta, u8 tid);
# 5689 "include/net/mac80211.h"
struct sk_buff *ieee80211_tx_dequeue(struct ieee80211_hw *hw,
         struct ieee80211_txq *txq);
# 5703 "include/net/mac80211.h"
void ieee80211_txq_get_depth(struct ieee80211_txq *txq,
        unsigned long *frame_cnt,
        unsigned long *byte_cnt);
# 27 "drivers/net/wireless/ath/ath10k/htt.h" 2

# 1 "drivers/net/wireless/ath/ath10k/htc.h" 1
# 28 "drivers/net/wireless/ath/ath10k/htc.h"
struct ath10k;
# 54 "drivers/net/wireless/ath/ath10k/htc.h"
enum ath10k_htc_tx_flags {
 ATH10K_HTC_FLAG_NEED_CREDIT_UPDATE = 0x01,
 ATH10K_HTC_FLAG_SEND_BUNDLE = 0x02
};

enum ath10k_htc_rx_flags {
 ATH10K_HTC_FLAG_TRAILER_PRESENT = 0x02,
 ATH10K_HTC_FLAG_BUNDLE_MASK = 0xF0
};

struct ath10k_htc_hdr {
 u8 eid;
 u8 flags;
 __le16 len;
 union {
  u8 trailer_len;
  u8 control_byte0;
 } __attribute__((packed));
 union {
  u8 seq_no;
  u8 control_byte1;
 } __attribute__((packed));
 u8 pad0;
 u8 pad1;
} __attribute__((packed)) __attribute__((aligned(4)));

enum ath10k_ath10k_htc_msg_id {
 ATH10K_HTC_MSG_READY_ID = 1,
 ATH10K_HTC_MSG_CONNECT_SERVICE_ID = 2,
 ATH10K_HTC_MSG_CONNECT_SERVICE_RESP_ID = 3,
 ATH10K_HTC_MSG_SETUP_COMPLETE_ID = 4,
 ATH10K_HTC_MSG_SETUP_COMPLETE_EX_ID = 5,
 ATH10K_HTC_MSG_SEND_SUSPEND_COMPLETE = 6
};

enum ath10k_htc_version {
 ATH10K_HTC_VERSION_2P0 = 0x00,
 ATH10K_HTC_VERSION_2P1 = 0x01,
};

enum ath10k_htc_conn_flags {
 ATH10K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_ONE_FOURTH = 0x0,
 ATH10K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_ONE_HALF = 0x1,
 ATH10K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS = 0x2,
 ATH10K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_UNITY = 0x3,

 ATH10K_HTC_CONN_FLAGS_REDUCE_CREDIT_DRIBBLE = 1 << 2,
 ATH10K_HTC_CONN_FLAGS_DISABLE_CREDIT_FLOW_CTRL = 1 << 3


};

enum ath10k_htc_conn_svc_status {
 ATH10K_HTC_CONN_SVC_STATUS_SUCCESS = 0,
 ATH10K_HTC_CONN_SVC_STATUS_NOT_FOUND = 1,
 ATH10K_HTC_CONN_SVC_STATUS_FAILED = 2,
 ATH10K_HTC_CONN_SVC_STATUS_NO_RESOURCES = 3,
 ATH10K_HTC_CONN_SVC_STATUS_NO_MORE_EP = 4
};

struct ath10k_ath10k_htc_msg_hdr {
 __le16 message_id;
} __attribute__((packed));

struct ath10k_htc_unknown {
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct ath10k_htc_ready {
 __le16 credit_count;
 __le16 credit_size;
 u8 max_endpoints;
 u8 pad0;
} __attribute__((packed));

struct ath10k_htc_ready_extended {
 struct ath10k_htc_ready base;
 u8 htc_version;
 u8 max_msgs_per_htc_bundle;
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct ath10k_htc_conn_svc {
 __le16 service_id;
 __le16 flags;
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct ath10k_htc_conn_svc_response {
 __le16 service_id;
 u8 status;
 u8 eid;
 __le16 max_msg_size;
} __attribute__((packed));

struct ath10k_htc_setup_complete_extended {
 u8 pad0;
 u8 pad1;
 __le32 flags;
 u8 max_msgs_per_bundled_recv;
 u8 pad2;
 u8 pad3;
 u8 pad4;
} __attribute__((packed));

struct ath10k_htc_msg {
 struct ath10k_ath10k_htc_msg_hdr hdr;
 union {

  struct ath10k_htc_conn_svc connect_service;
  struct ath10k_htc_ready ready;
  struct ath10k_htc_ready_extended ready_ext;
  struct ath10k_htc_unknown unknown;
  struct ath10k_htc_setup_complete_extended setup_complete_ext;


  struct ath10k_htc_conn_svc_response connect_service_response;
 };
} __attribute__((packed)) __attribute__((aligned(4)));

enum ath10k_ath10k_htc_record_id {
 ATH10K_HTC_RECORD_NULL = 0,
 ATH10K_HTC_RECORD_CREDITS = 1
};

struct ath10k_ath10k_htc_record_hdr {
 u8 id;
 u8 len;
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct ath10k_htc_credit_report {
 u8 eid;
 u8 credits;
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct ath10k_htc_record {
 struct ath10k_ath10k_htc_record_hdr hdr;
 union {
  struct ath10k_htc_credit_report credit_report[0];
  u8 pauload[0];
 };
} __attribute__((packed)) __attribute__((aligned(4)));





struct ath10k_htc_frame {
 struct ath10k_htc_hdr hdr;
 union {
  struct ath10k_htc_msg msg;
  u8 payload[0];
 };
 struct ath10k_htc_record trailer[0];
} __attribute__((packed)) __attribute__((aligned(4)));





enum ath10k_htc_svc_gid {
 ATH10K_HTC_SVC_GRP_RSVD = 0,
 ATH10K_HTC_SVC_GRP_WMI = 1,
 ATH10K_HTC_SVC_GRP_NMI = 2,
 ATH10K_HTC_SVC_GRP_HTT = 3,

 ATH10K_HTC_SVC_GRP_TEST = 254,
 ATH10K_HTC_SVC_GRP_LAST = 255,
};




enum ath10k_htc_svc_id {

 ATH10K_HTC_SVC_ID_RESERVED = 0x0000,
 ATH10K_HTC_SVC_ID_UNUSED = ATH10K_HTC_SVC_ID_RESERVED,

 ATH10K_HTC_SVC_ID_RSVD_CTRL = (int)(((int)(ATH10K_HTC_SVC_GRP_RSVD) << 8) | (int)(1)),
 ATH10K_HTC_SVC_ID_WMI_CONTROL = (int)(((int)(ATH10K_HTC_SVC_GRP_WMI) << 8) | (int)(0)),
 ATH10K_HTC_SVC_ID_WMI_DATA_BE = (int)(((int)(ATH10K_HTC_SVC_GRP_WMI) << 8) | (int)(1)),
 ATH10K_HTC_SVC_ID_WMI_DATA_BK = (int)(((int)(ATH10K_HTC_SVC_GRP_WMI) << 8) | (int)(2)),
 ATH10K_HTC_SVC_ID_WMI_DATA_VI = (int)(((int)(ATH10K_HTC_SVC_GRP_WMI) << 8) | (int)(3)),
 ATH10K_HTC_SVC_ID_WMI_DATA_VO = (int)(((int)(ATH10K_HTC_SVC_GRP_WMI) << 8) | (int)(4)),

 ATH10K_HTC_SVC_ID_NMI_CONTROL = (int)(((int)(ATH10K_HTC_SVC_GRP_NMI) << 8) | (int)(0)),
 ATH10K_HTC_SVC_ID_NMI_DATA = (int)(((int)(ATH10K_HTC_SVC_GRP_NMI) << 8) | (int)(1)),

 ATH10K_HTC_SVC_ID_HTT_DATA_MSG = (int)(((int)(ATH10K_HTC_SVC_GRP_HTT) << 8) | (int)(0)),


 ATH10K_HTC_SVC_ID_TEST_RAW_STREAMS = (int)(((int)(ATH10K_HTC_SVC_GRP_TEST) << 8) | (int)(0)),
};



enum ath10k_htc_ep_id {
 ATH10K_HTC_EP_UNUSED = -1,
 ATH10K_HTC_EP_0 = 0,
 ATH10K_HTC_EP_1 = 1,
 ATH10K_HTC_EP_2,
 ATH10K_HTC_EP_3,
 ATH10K_HTC_EP_4,
 ATH10K_HTC_EP_5,
 ATH10K_HTC_EP_6,
 ATH10K_HTC_EP_7,
 ATH10K_HTC_EP_8,
 ATH10K_HTC_EP_COUNT,
};

struct ath10k_htc_ops {
 void (*target_send_suspend_complete)(struct ath10k *ar);
};

struct ath10k_htc_ep_ops {
 void (*ep_tx_complete)(struct ath10k *, struct sk_buff *);
 void (*ep_rx_complete)(struct ath10k *, struct sk_buff *);
 void (*ep_tx_credits)(struct ath10k *);
};


struct ath10k_htc_svc_conn_req {
 u16 service_id;
 struct ath10k_htc_ep_ops ep_ops;
 int max_send_queue_depth;
};


struct ath10k_htc_svc_conn_resp {
 u8 buffer_len;
 u8 actual_len;
 enum ath10k_htc_ep_id eid;
 unsigned int max_msg_len;
 u8 connect_resp_code;
};
# 305 "drivers/net/wireless/ath/ath10k/htc.h"
struct ath10k_htc_ep {
 struct ath10k_htc *htc;
 enum ath10k_htc_ep_id eid;
 enum ath10k_htc_svc_id service_id;
 struct ath10k_htc_ep_ops ep_ops;

 int max_tx_queue_depth;
 int max_ep_message_len;
 u8 ul_pipe_id;
 u8 dl_pipe_id;

 u8 seq_no;
 int tx_credits;
 int tx_credit_size;
 int tx_credits_per_max_message;
 bool tx_credit_flow_enabled;
};

struct ath10k_htc_svc_tx_credits {
 u16 service_id;
 u8 credit_allocation;
};

struct ath10k_htc {
 struct ath10k *ar;
 struct ath10k_htc_ep endpoint[ATH10K_HTC_EP_COUNT];


 spinlock_t tx_lock;

 struct ath10k_htc_ops htc_ops;

 u8 control_resp_buffer[256];
 int control_resp_len;

 struct completion ctl_resp;

 int total_transmit_credits;
 struct ath10k_htc_svc_tx_credits service_tx_alloc[ATH10K_HTC_EP_COUNT];
 int target_credit_size;
};

int ath10k_htc_init(struct ath10k *ar);
int ath10k_htc_wait_target(struct ath10k_htc *htc);
int ath10k_htc_start(struct ath10k_htc *htc);
int ath10k_htc_connect_service(struct ath10k_htc *htc,
          struct ath10k_htc_svc_conn_req *conn_req,
          struct ath10k_htc_svc_conn_resp *conn_resp);
int ath10k_htc_send(struct ath10k_htc *htc, enum ath10k_htc_ep_id eid,
      struct sk_buff *packet);
struct sk_buff *ath10k_htc_alloc_skb(struct ath10k *ar, int size);
void ath10k_htc_tx_completion_handler(struct ath10k *ar, struct sk_buff *skb);
void ath10k_htc_rx_completion_handler(struct ath10k *ar, struct sk_buff *skb);
# 29 "drivers/net/wireless/ath/ath10k/htt.h" 2
# 1 "drivers/net/wireless/ath/ath10k/hw.h" 1
# 21 "drivers/net/wireless/ath/ath10k/hw.h"
# 1 "drivers/net/wireless/ath/ath10k/targaddrs.h" 1
# 21 "drivers/net/wireless/ath/ath10k/targaddrs.h"
# 1 "drivers/net/wireless/ath/ath10k/hw.h" 1
# 22 "drivers/net/wireless/ath/ath10k/targaddrs.h" 2
# 45 "drivers/net/wireless/ath/ath10k/targaddrs.h"
struct host_interest {




 u32 hi_app_host_interest;


 u32 hi_failure_state;


 u32 hi_dbglog_hdr;

 u32 hi_unused0c;





 u32 hi_option_flag;





 u32 hi_serial_enable;


 u32 hi_dset_list_head;


 u32 hi_app_start;


 u32 hi_skip_clock_init;
 u32 hi_core_clock_setting;
 u32 hi_cpu_clock_setting;
 u32 hi_system_sleep_setting;
 u32 hi_xtal_control_setting;
 u32 hi_pll_ctrl_setting_24ghz;
 u32 hi_pll_ctrl_setting_5ghz;
 u32 hi_ref_voltage_trim_setting;
 u32 hi_clock_info;


 u32 hi_be;

 u32 hi_stack;
 u32 hi_err_stack;
 u32 hi_desired_cpu_speed_hz;


 u32 hi_board_data;







 u32 hi_board_data_initialized;

 u32 hi_dset_ram_index_table;

 u32 hi_desired_baud_rate;
 u32 hi_dbglog_config;
 u32 hi_end_ram_reserve_sz;
 u32 hi_mbox_io_block_sz;

 u32 hi_num_bpatch_streams;
 u32 hi_mbox_isr_yield_limit;

 u32 hi_refclk_hz;
 u32 hi_ext_clk_detected;
 u32 hi_dbg_uart_txpin;
 u32 hi_dbg_uart_rxpin;
 u32 hi_hci_uart_baud;
 u32 hi_hci_uart_pin_assignments;

 u32 hi_hci_uart_baud_scale_val;
 u32 hi_hci_uart_baud_step_val;

 u32 hi_allocram_start;
 u32 hi_allocram_sz;
 u32 hi_hci_bridge_flags;
 u32 hi_hci_uart_support_pins;

 u32 hi_hci_uart_pwr_mgmt_params;






 u32 hi_board_ext_data;
 u32 hi_board_ext_data_config;
# 150 "drivers/net/wireless/ath/ath10k/targaddrs.h"
 u32 hi_reset_flag;

 u32 hi_reset_flag_valid;
 u32 hi_hci_uart_pwr_mgmt_params_ext;


 u32 hi_acs_flags;
 u32 hi_console_flags;
 u32 hi_nvram_state;
 u32 hi_option_flag2;


 u32 hi_sw_version_override;
 u32 hi_abi_version_override;





 u32 hi_hp_rx_traffic_ratio;


 u32 hi_test_apps_related;

 u32 hi_ota_testscript;

 u32 hi_cal_data;


 u32 hi_pktlog_num_buffers;


 u32 hi_wow_ext_config;
 u32 hi_pwr_save_flags;


 u32 hi_smps_options;


 u32 hi_interconnect_state;


 u32 hi_coex_config;


 u32 hi_early_alloc;
# 207 "drivers/net/wireless/ath/ath10k/targaddrs.h"
 u32 hi_fw_swap;
} __attribute__((packed));
# 22 "drivers/net/wireless/ath/ath10k/hw.h" 2
# 53 "drivers/net/wireless/ath/ath10k/hw.h"
enum qca6174_pci_rev {
 QCA6174_PCI_REV_1_1 = 0x11,
 QCA6174_PCI_REV_1_3 = 0x13,
 QCA6174_PCI_REV_2_0 = 0x20,
 QCA6174_PCI_REV_3_0 = 0x30,
};

enum qca6174_chip_id_rev {
 QCA6174_HW_1_0_CHIP_ID_REV = 0,
 QCA6174_HW_1_1_CHIP_ID_REV = 1,
 QCA6174_HW_1_3_CHIP_ID_REV = 2,
 QCA6174_HW_2_1_CHIP_ID_REV = 4,
 QCA6174_HW_2_2_CHIP_ID_REV = 5,
 QCA6174_HW_3_0_CHIP_ID_REV = 8,
 QCA6174_HW_3_1_CHIP_ID_REV = 9,
 QCA6174_HW_3_2_CHIP_ID_REV = 10,
};

enum qca9377_chip_id_rev {
 QCA9377_HW_1_0_CHIP_ID_REV = 0x0,
 QCA9377_HW_1_1_CHIP_ID_REV = 0x1,
};
# 125 "drivers/net/wireless/ath/ath10k/hw.h"
struct ath10k_fw_ie {
 __le32 id;
 __le32 len;
 u8 data[0];
};

enum ath10k_fw_ie_type {
 ATH10K_FW_IE_FW_VERSION = 0,
 ATH10K_FW_IE_TIMESTAMP = 1,
 ATH10K_FW_IE_FEATURES = 2,
 ATH10K_FW_IE_FW_IMAGE = 3,
 ATH10K_FW_IE_OTP_IMAGE = 4,




 ATH10K_FW_IE_WMI_OP_VERSION = 5,




 ATH10K_FW_IE_HTT_OP_VERSION = 6,


 ATH10K_FW_IE_FW_CODE_SWAP_IMAGE = 7,
};

enum ath10k_fw_wmi_op_version {
 ATH10K_FW_WMI_OP_VERSION_UNSET = 0,

 ATH10K_FW_WMI_OP_VERSION_MAIN = 1,
 ATH10K_FW_WMI_OP_VERSION_10_1 = 2,
 ATH10K_FW_WMI_OP_VERSION_10_2 = 3,
 ATH10K_FW_WMI_OP_VERSION_TLV = 4,
 ATH10K_FW_WMI_OP_VERSION_10_2_4 = 5,
 ATH10K_FW_WMI_OP_VERSION_10_4 = 6,


 ATH10K_FW_WMI_OP_VERSION_MAX,
};

enum ath10k_fw_htt_op_version {
 ATH10K_FW_HTT_OP_VERSION_UNSET = 0,

 ATH10K_FW_HTT_OP_VERSION_MAIN = 1,


 ATH10K_FW_HTT_OP_VERSION_10_1 = 2,

 ATH10K_FW_HTT_OP_VERSION_TLV = 3,

 ATH10K_FW_HTT_OP_VERSION_10_4 = 4,


 ATH10K_FW_HTT_OP_VERSION_MAX,
};

enum ath10k_bd_ie_type {

 ATH10K_BD_IE_BOARD = 0,
};

enum ath10k_bd_ie_board_type {
 ATH10K_BD_IE_BOARD_NAME = 0,
 ATH10K_BD_IE_BOARD_DATA = 1,
};

enum ath10k_hw_rev {
 ATH10K_HW_QCA988X,
 ATH10K_HW_QCA6174,
 ATH10K_HW_QCA99X0,
 ATH10K_HW_QCA9377,
 ATH10K_HW_QCA4019,
};

struct ath10k_hw_regs {
 u32 rtc_state_cold_reset_mask;
 u32 rtc_soc_base_address;
 u32 rtc_wmac_base_address;
 u32 soc_core_base_address;
 u32 ce_wrapper_base_address;
 u32 ce0_base_address;
 u32 ce1_base_address;
 u32 ce2_base_address;
 u32 ce3_base_address;
 u32 ce4_base_address;
 u32 ce5_base_address;
 u32 ce6_base_address;
 u32 ce7_base_address;
 u32 soc_reset_control_si0_rst_mask;
 u32 soc_reset_control_ce_rst_mask;
 u32 soc_chip_id_address;
 u32 scratch_3_address;
 u32 fw_indicator_address;
 u32 pcie_local_base_address;
 u32 ce_wrap_intr_sum_host_msi_lsb;
 u32 ce_wrap_intr_sum_host_msi_mask;
 u32 pcie_intr_fw_mask;
 u32 pcie_intr_ce_mask_all;
 u32 pcie_intr_clr_address;
};

extern const struct ath10k_hw_regs qca988x_regs;
extern const struct ath10k_hw_regs qca6174_regs;
extern const struct ath10k_hw_regs qca99x0_regs;
extern const struct ath10k_hw_regs qca4019_regs;

struct ath10k_hw_values {
 u32 rtc_state_val_on;
 u8 ce_count;
 u8 msi_assign_ce_max;
 u8 num_target_ce_config_wlan;
 u16 ce_desc_meta_data_mask;
 u8 ce_desc_meta_data_lsb;
};

extern const struct ath10k_hw_values qca988x_values;
extern const struct ath10k_hw_values qca6174_values;
extern const struct ath10k_hw_values qca99x0_values;
extern const struct ath10k_hw_values qca4019_values;

void ath10k_hw_fill_survey_time(struct ath10k *ar, struct survey_info *survey,
    u32 cc, u32 rcc, u32 cc_prev, u32 rcc_prev);
# 260 "drivers/net/wireless/ath/ath10k/hw.h"
enum ath10k_hw_txrx_mode {
 ATH10K_HW_TXRX_RAW = 0,




 ATH10K_HW_TXRX_NATIVE_WIFI = 1,
 ATH10K_HW_TXRX_ETHERNET = 2,


 ATH10K_HW_TXRX_MGMT = 3,
};

enum ath10k_mcast2ucast_mode {
 ATH10K_MCAST2UCAST_DISABLED = 0,
 ATH10K_MCAST2UCAST_ENABLED = 1,
};

struct ath10k_pktlog_hdr {
 __le16 flags;
 __le16 missed_cnt;
 __le16 log_type;
 __le16 size;
 __le32 timestamp;
 u8 payload[0];
} __attribute__((packed));

struct ath10k_pktlog_10_4_hdr {
 __le16 flags;
 __le16 missed_cnt;
 __le16 log_type;
 __le16 size;
 __le32 timestamp;
 __le32 type_specific_data;
 u8 payload[0];
} __attribute__((packed));

enum ath10k_hw_rate_ofdm {
 ATH10K_HW_RATE_OFDM_48M = 0,
 ATH10K_HW_RATE_OFDM_24M,
 ATH10K_HW_RATE_OFDM_12M,
 ATH10K_HW_RATE_OFDM_6M,
 ATH10K_HW_RATE_OFDM_54M,
 ATH10K_HW_RATE_OFDM_36M,
 ATH10K_HW_RATE_OFDM_18M,
 ATH10K_HW_RATE_OFDM_9M,
};

enum ath10k_hw_rate_cck {
 ATH10K_HW_RATE_CCK_LP_11M = 0,
 ATH10K_HW_RATE_CCK_LP_5_5M,
 ATH10K_HW_RATE_CCK_LP_2M,
 ATH10K_HW_RATE_CCK_LP_1M,
 ATH10K_HW_RATE_CCK_SP_11M,
 ATH10K_HW_RATE_CCK_SP_5_5M,
 ATH10K_HW_RATE_CCK_SP_2M,
};

enum ath10k_hw_4addr_pad {
 ATH10K_HW_4ADDR_PAD_AFTER,
 ATH10K_HW_4ADDR_PAD_BEFORE,
};
# 30 "drivers/net/wireless/ath/ath10k/htt.h" 2
# 1 "drivers/net/wireless/ath/ath10k/rx_desc.h" 1
# 21 "drivers/net/wireless/ath/ath10k/rx_desc.h"
enum rx_attention_flags {
 RX_ATTENTION_FLAGS_FIRST_MPDU = 1 << 0,
 RX_ATTENTION_FLAGS_LAST_MPDU = 1 << 1,
 RX_ATTENTION_FLAGS_MCAST_BCAST = 1 << 2,
 RX_ATTENTION_FLAGS_PEER_IDX_INVALID = 1 << 3,
 RX_ATTENTION_FLAGS_PEER_IDX_TIMEOUT = 1 << 4,
 RX_ATTENTION_FLAGS_POWER_MGMT = 1 << 5,
 RX_ATTENTION_FLAGS_NON_QOS = 1 << 6,
 RX_ATTENTION_FLAGS_NULL_DATA = 1 << 7,
 RX_ATTENTION_FLAGS_MGMT_TYPE = 1 << 8,
 RX_ATTENTION_FLAGS_CTRL_TYPE = 1 << 9,
 RX_ATTENTION_FLAGS_MORE_DATA = 1 << 10,
 RX_ATTENTION_FLAGS_EOSP = 1 << 11,
 RX_ATTENTION_FLAGS_U_APSD_TRIGGER = 1 << 12,
 RX_ATTENTION_FLAGS_FRAGMENT = 1 << 13,
 RX_ATTENTION_FLAGS_ORDER = 1 << 14,
 RX_ATTENTION_FLAGS_CLASSIFICATION = 1 << 15,
 RX_ATTENTION_FLAGS_OVERFLOW_ERR = 1 << 16,
 RX_ATTENTION_FLAGS_MSDU_LENGTH_ERR = 1 << 17,
 RX_ATTENTION_FLAGS_TCP_UDP_CHKSUM_FAIL = 1 << 18,
 RX_ATTENTION_FLAGS_IP_CHKSUM_FAIL = 1 << 19,
 RX_ATTENTION_FLAGS_SA_IDX_INVALID = 1 << 20,
 RX_ATTENTION_FLAGS_DA_IDX_INVALID = 1 << 21,
 RX_ATTENTION_FLAGS_SA_IDX_TIMEOUT = 1 << 22,
 RX_ATTENTION_FLAGS_DA_IDX_TIMEOUT = 1 << 23,
 RX_ATTENTION_FLAGS_ENCRYPT_REQUIRED = 1 << 24,
 RX_ATTENTION_FLAGS_DIRECTED = 1 << 25,
 RX_ATTENTION_FLAGS_BUFFER_FRAGMENT = 1 << 26,
 RX_ATTENTION_FLAGS_MPDU_LENGTH_ERR = 1 << 27,
 RX_ATTENTION_FLAGS_TKIP_MIC_ERR = 1 << 28,
 RX_ATTENTION_FLAGS_DECRYPT_ERR = 1 << 29,
 RX_ATTENTION_FLAGS_FCS_ERR = 1 << 30,
 RX_ATTENTION_FLAGS_MSDU_DONE = 1 << 31,
};

struct rx_attention {
 __le32 flags;
} __attribute__((packed));
# 208 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_frag_info {
 u8 ring0_more_count;
 u8 ring1_more_count;
 u8 ring2_more_count;
 u8 ring3_more_count;
} __attribute__((packed));
# 233 "drivers/net/wireless/ath/ath10k/rx_desc.h"
enum htt_rx_mpdu_encrypt_type {
 HTT_RX_MPDU_ENCRYPT_WEP40 = 0,
 HTT_RX_MPDU_ENCRYPT_WEP104 = 1,
 HTT_RX_MPDU_ENCRYPT_TKIP_WITHOUT_MIC = 2,
 HTT_RX_MPDU_ENCRYPT_WEP128 = 3,
 HTT_RX_MPDU_ENCRYPT_TKIP_WPA = 4,
 HTT_RX_MPDU_ENCRYPT_WAPI = 5,
 HTT_RX_MPDU_ENCRYPT_AES_CCM_WPA2 = 6,
 HTT_RX_MPDU_ENCRYPT_NONE = 7,
};
# 260 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_mpdu_start {
 __le32 info0;
 union {
  struct {
   __le32 pn31_0;
   __le32 info1;
  } __attribute__((packed));
  struct {
   u8 pn[6];
  } __attribute__((packed));
 } __attribute__((packed));
} __attribute__((packed));
# 361 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_mpdu_end {
 __le32 info0;
} __attribute__((packed));
# 443 "drivers/net/wireless/ath/ath10k/rx_desc.h"
enum rx_msdu_decap_format {
 RX_MSDU_DECAP_RAW = 0,



 RX_MSDU_DECAP_NATIVE_WIFI = 1,


 RX_MSDU_DECAP_ETHERNET2_DIX = 2,



 RX_MSDU_DECAP_8023_SNAP_LLC = 3
};

struct rx_msdu_start_common {
 __le32 info0;
 __le32 flow_id_crc;
 __le32 info1;
} __attribute__((packed));

struct rx_msdu_start_qca99x0 {
 __le32 info2;
} __attribute__((packed));

struct rx_msdu_start {
 struct rx_msdu_start_common common;
 union {
  struct rx_msdu_start_qca99x0 qca99x0;
 } __attribute__((packed));
} __attribute__((packed));
# 560 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_msdu_end_common {
 __le16 ip_hdr_cksum;
 __le16 tcp_hdr_cksum;
 u8 key_id_octet;
 u8 classification_filter;
 u8 wapi_pn[10];
 __le32 info0;
} __attribute__((packed));
# 584 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_msdu_end_qca99x0 {
 __le32 ipv6_crc;
 __le32 tcp_seq_no;
 __le32 tcp_ack_no;
 __le32 info1;
 __le32 info2;
} __attribute__((packed));

struct rx_msdu_end {
 struct rx_msdu_end_common common;
 union {
  struct rx_msdu_end_qca99x0 qca99x0;
 } __attribute__((packed));
} __attribute__((packed));
# 714 "drivers/net/wireless/ath/ath10k/rx_desc.h"
enum rx_ppdu_start_rate {
 RX_PPDU_START_RATE_OFDM_48M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_48M,
 RX_PPDU_START_RATE_OFDM_24M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_24M,
 RX_PPDU_START_RATE_OFDM_12M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_12M,
 RX_PPDU_START_RATE_OFDM_6M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_6M,
 RX_PPDU_START_RATE_OFDM_54M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_54M,
 RX_PPDU_START_RATE_OFDM_36M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_36M,
 RX_PPDU_START_RATE_OFDM_18M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_18M,
 RX_PPDU_START_RATE_OFDM_9M = (1UL << (3)) | ATH10K_HW_RATE_OFDM_9M,

 RX_PPDU_START_RATE_CCK_LP_11M = (1UL << (3)) | ATH10K_HW_RATE_CCK_LP_11M,
 RX_PPDU_START_RATE_CCK_LP_5_5M = (1UL << (3)) | ATH10K_HW_RATE_CCK_LP_5_5M,
 RX_PPDU_START_RATE_CCK_LP_2M = (1UL << (3)) | ATH10K_HW_RATE_CCK_LP_2M,
 RX_PPDU_START_RATE_CCK_LP_1M = (1UL << (3)) | ATH10K_HW_RATE_CCK_LP_1M,
 RX_PPDU_START_RATE_CCK_SP_11M = (1UL << (3)) | ATH10K_HW_RATE_CCK_SP_11M,
 RX_PPDU_START_RATE_CCK_SP_5_5M = (1UL << (3)) | ATH10K_HW_RATE_CCK_SP_5_5M,
 RX_PPDU_START_RATE_CCK_SP_2M = (1UL << (3)) | ATH10K_HW_RATE_CCK_SP_2M,
};

struct rx_ppdu_start {
 struct {
  u8 pri20_mhz;
  u8 ext20_mhz;
  u8 ext40_mhz;
  u8 ext80_mhz;
 } rssi_chains[4];
 u8 rssi_comb;
 __le16 rsvd0;
 u8 info0;
 __le32 info1;
 __le32 info2;
 __le32 info3;
 __le32 info4;
 __le32 info5;
} __attribute__((packed));
# 926 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_ppdu_end_common {
 __le32 evm_p0;
 __le32 evm_p1;
 __le32 evm_p2;
 __le32 evm_p3;
 __le32 evm_p4;
 __le32 evm_p5;
 __le32 evm_p6;
 __le32 evm_p7;
 __le32 evm_p8;
 __le32 evm_p9;
 __le32 evm_p10;
 __le32 evm_p11;
 __le32 evm_p12;
 __le32 evm_p13;
 __le32 evm_p14;
 __le32 evm_p15;
 __le32 tsf_timestamp;
 __le32 wb_timestamp;
} __attribute__((packed));

struct rx_ppdu_end_qca988x {
 u8 locationing_timestamp;
 u8 phy_err_code;
 __le16 flags;
 __le32 info0;
 __le16 bb_length;
 __le16 info1;
} __attribute__((packed));







struct rx_ppdu_end_qca6174 {
 u8 locationing_timestamp;
 u8 phy_err_code;
 __le16 flags;
 __le32 info0;
 __le32 rtt;
 __le16 bb_length;
 __le16 info1;
} __attribute__((packed));
# 993 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_pkt_end {
 __le32 info0;
 __le32 phy_timestamp_1;
 __le32 phy_timestamp_2;
 __le32 rx_location_info;
} __attribute__((packed));

enum rx_phy_ppdu_end_info0 {
 RX_PHY_PPDU_END_INFO0_ERR_RADAR = (1UL << (2)),
 RX_PHY_PPDU_END_INFO0_ERR_RX_ABORT = (1UL << (3)),
 RX_PHY_PPDU_END_INFO0_ERR_RX_NAP = (1UL << (4)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_TIMING = (1UL << (5)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_PARITY = (1UL << (6)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_RATE = (1UL << (7)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_LENGTH = (1UL << (8)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_RESTART = (1UL << (9)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_SERVICE = (1UL << (10)),
 RX_PHY_PPDU_END_INFO0_ERR_OFDM_POWER_DROP = (1UL << (11)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_BLOCKER = (1UL << (12)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_TIMING = (1UL << (13)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_HEADER_CRC = (1UL << (14)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_RATE = (1UL << (15)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_LENGTH = (1UL << (16)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_RESTART = (1UL << (17)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_SERVICE = (1UL << (18)),
 RX_PHY_PPDU_END_INFO0_ERR_CCK_POWER_DROP = (1UL << (19)),
 RX_PHY_PPDU_END_INFO0_ERR_HT_CRC = (1UL << (20)),
 RX_PHY_PPDU_END_INFO0_ERR_HT_LENGTH = (1UL << (21)),
 RX_PHY_PPDU_END_INFO0_ERR_HT_RATE = (1UL << (22)),
 RX_PHY_PPDU_END_INFO0_ERR_HT_ZLF = (1UL << (23)),
 RX_PHY_PPDU_END_INFO0_ERR_FALSE_RADAR_EXT = (1UL << (24)),
 RX_PHY_PPDU_END_INFO0_ERR_GREEN_FIELD = (1UL << (25)),
 RX_PHY_PPDU_END_INFO0_ERR_SPECTRAL_SCAN = (1UL << (26)),
 RX_PHY_PPDU_END_INFO0_ERR_RX_DYN_BW = (1UL << (27)),
 RX_PHY_PPDU_END_INFO0_ERR_LEG_HT_MISMATCH = (1UL << (28)),
 RX_PHY_PPDU_END_INFO0_ERR_VHT_CRC = (1UL << (29)),
 RX_PHY_PPDU_END_INFO0_ERR_VHT_SIGA = (1UL << (30)),
 RX_PHY_PPDU_END_INFO0_ERR_VHT_LSIG = (1UL << (31)),
};

enum rx_phy_ppdu_end_info1 {
 RX_PHY_PPDU_END_INFO1_ERR_VHT_NDP = (1UL << (0)),
 RX_PHY_PPDU_END_INFO1_ERR_VHT_NSYM = (1UL << (1)),
 RX_PHY_PPDU_END_INFO1_ERR_VHT_RX_EXT_SYM = (1UL << (2)),
 RX_PHY_PPDU_END_INFO1_ERR_VHT_RX_SKIP_ID0 = (1UL << (3)),
 RX_PHY_PPDU_END_INFO1_ERR_VHT_RX_SKIP_ID1_62 = (1UL << (4)),
 RX_PHY_PPDU_END_INFO1_ERR_VHT_RX_SKIP_ID63 = (1UL << (5)),
 RX_PHY_PPDU_END_INFO1_ERR_OFDM_LDPC_DECODER = (1UL << (6)),
 RX_PHY_PPDU_END_INFO1_ERR_DEFER_NAP = (1UL << (7)),
 RX_PHY_PPDU_END_INFO1_ERR_FDOMAIN_TIMEOUT = (1UL << (8)),
 RX_PHY_PPDU_END_INFO1_ERR_LSIG_REL_CHECK = (1UL << (9)),
 RX_PHY_PPDU_END_INFO1_ERR_BT_COLLISION = (1UL << (10)),
 RX_PHY_PPDU_END_INFO1_ERR_MU_FEEDBACK = (1UL << (11)),
 RX_PHY_PPDU_END_INFO1_ERR_TX_INTERRUPT_RX = (1UL << (12)),
 RX_PHY_PPDU_END_INFO1_ERR_RX_CBF = (1UL << (13)),
};

struct rx_phy_ppdu_end {
 __le32 info0;
 __le32 info1;
} __attribute__((packed));
# 1068 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct rx_ppdu_end_qca99x0 {
 struct rx_pkt_end rx_pkt_end;
 struct rx_phy_ppdu_end rx_phy_ppdu_end;
 __le32 rx_timing_offset;
 __le32 rx_info;
 __le16 bb_length;
 __le16 info1;
} __attribute__((packed));

struct rx_ppdu_end {
 struct rx_ppdu_end_common common;
 union {
  struct rx_ppdu_end_qca988x qca988x;
  struct rx_ppdu_end_qca6174 qca6174;
  struct rx_ppdu_end_qca99x0 qca99x0;
 } __attribute__((packed));
} __attribute__((packed));
# 1211 "drivers/net/wireless/ath/ath10k/rx_desc.h"
struct fw_rx_desc_base {
 u8 info0;
} __attribute__((packed));
# 31 "drivers/net/wireless/ath/ath10k/htt.h" 2


enum htt_dbg_stats_type {
 HTT_DBG_STATS_WAL_PDEV_TXRX = 1 << 0,
 HTT_DBG_STATS_RX_REORDER = 1 << 1,
 HTT_DBG_STATS_RX_RATE_INFO = 1 << 2,
 HTT_DBG_STATS_TX_PPDU_LOG = 1 << 3,
 HTT_DBG_STATS_TX_RATE_INFO = 1 << 4,


 HTT_DBG_NUM_STATS
};

enum htt_h2t_msg_type {
 HTT_H2T_MSG_TYPE_VERSION_REQ = 0,
 HTT_H2T_MSG_TYPE_TX_FRM = 1,
 HTT_H2T_MSG_TYPE_RX_RING_CFG = 2,
 HTT_H2T_MSG_TYPE_STATS_REQ = 3,
 HTT_H2T_MSG_TYPE_SYNC = 4,
 HTT_H2T_MSG_TYPE_AGGR_CFG = 5,
 HTT_H2T_MSG_TYPE_FRAG_DESC_BANK_CFG = 6,



 HTT_H2T_MSG_TYPE_MGMT_TX = 7,
 HTT_H2T_MSG_TYPE_TX_FETCH_RESP = 11,

 HTT_H2T_NUM_MSGS
};

struct htt_cmd_hdr {
 u8 msg_type;
} __attribute__((packed));

struct htt_ver_req {
 u8 pad[sizeof(u32) - sizeof(struct htt_cmd_hdr)];
} __attribute__((packed));
# 87 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_data_tx_desc_frag {
 union {
  struct double_word_addr {
   __le32 paddr;
   __le32 len;
  } __attribute__((packed)) dword_addr;
  struct triple_word_addr {
   __le32 paddr_lo;
   __le16 paddr_hi;
   __le16 len_16;
  } __attribute__((packed)) tword_addr;
 } __attribute__((packed));
} __attribute__((packed));

struct htt_msdu_ext_desc {
 __le32 tso_flag[3];
 __le16 ip_identification;
 u8 flags;
 u8 reserved;
 struct htt_data_tx_desc_frag frags[6];
};
# 121 "drivers/net/wireless/ath/ath10k/htt.h"
enum htt_data_tx_desc_flags0 {
 HTT_DATA_TX_DESC_FLAGS0_MAC_HDR_PRESENT = 1 << 0,
 HTT_DATA_TX_DESC_FLAGS0_NO_AGGR = 1 << 1,
 HTT_DATA_TX_DESC_FLAGS0_NO_ENCRYPT = 1 << 2,
 HTT_DATA_TX_DESC_FLAGS0_NO_CLASSIFY = 1 << 3,
 HTT_DATA_TX_DESC_FLAGS0_RSVD0 = 1 << 4


};

enum htt_data_tx_desc_flags1 {






 HTT_DATA_TX_DESC_FLAGS1_POSTPONED = 1 << 11,
 HTT_DATA_TX_DESC_FLAGS1_MORE_IN_BATCH = 1 << 12,
 HTT_DATA_TX_DESC_FLAGS1_CKSUM_L3_OFFLOAD = 1 << 13,
 HTT_DATA_TX_DESC_FLAGS1_CKSUM_L4_OFFLOAD = 1 << 14,
 HTT_DATA_TX_DESC_FLAGS1_RSVD1 = 1 << 15
};

enum htt_data_tx_ext_tid {
 HTT_DATA_TX_EXT_TID_NON_QOS_MCAST_BCAST = 16,
 HTT_DATA_TX_EXT_TID_MGMT = 17,
 HTT_DATA_TX_EXT_TID_INVALID = 31
};
# 165 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_data_tx_desc {
 u8 flags0;
 __le16 flags1;
 __le16 len;
 __le16 id;
 __le32 frags_paddr;
 union {
  __le32 peerid;
  struct {
   __le16 peerid;
   __le16 freq;
  } __attribute__((packed)) offchan_tx;
 } __attribute__((packed));
 u8 prefetch[0];
} __attribute__((packed));

enum htt_rx_ring_flags {
 HTT_RX_RING_FLAGS_MAC80211_HDR = 1 << 0,
 HTT_RX_RING_FLAGS_MSDU_PAYLOAD = 1 << 1,
 HTT_RX_RING_FLAGS_PPDU_START = 1 << 2,
 HTT_RX_RING_FLAGS_PPDU_END = 1 << 3,
 HTT_RX_RING_FLAGS_MPDU_START = 1 << 4,
 HTT_RX_RING_FLAGS_MPDU_END = 1 << 5,
 HTT_RX_RING_FLAGS_MSDU_START = 1 << 6,
 HTT_RX_RING_FLAGS_MSDU_END = 1 << 7,
 HTT_RX_RING_FLAGS_RX_ATTENTION = 1 << 8,
 HTT_RX_RING_FLAGS_FRAG_INFO = 1 << 9,
 HTT_RX_RING_FLAGS_UNICAST_RX = 1 << 10,
 HTT_RX_RING_FLAGS_MULTICAST_RX = 1 << 11,
 HTT_RX_RING_FLAGS_CTRL_RX = 1 << 12,
 HTT_RX_RING_FLAGS_MGMT_RX = 1 << 13,
 HTT_RX_RING_FLAGS_NULL_RX = 1 << 14,
 HTT_RX_RING_FLAGS_PHY_DATA_RX = 1 << 15
};




struct htt_rx_ring_setup_ring {
 __le32 fw_idx_shadow_reg_paddr;
 __le32 rx_ring_base_paddr;
 __le16 rx_ring_len;
 __le16 rx_ring_bufsize;
 __le16 flags;
 __le16 fw_idx_init_val;


 __le16 mac80211_hdr_offset;
 __le16 msdu_payload_offset;
 __le16 ppdu_start_offset;
 __le16 ppdu_end_offset;
 __le16 mpdu_start_offset;
 __le16 mpdu_end_offset;
 __le16 msdu_start_offset;
 __le16 msdu_end_offset;
 __le16 rx_attention_offset;
 __le16 frag_info_offset;
} __attribute__((packed));

struct htt_rx_ring_setup_hdr {
 u8 num_rings;
 __le16 rsvd0;
} __attribute__((packed));

struct htt_rx_ring_setup {
 struct htt_rx_ring_setup_hdr hdr;
 struct htt_rx_ring_setup_ring rings[0];
} __attribute__((packed));
# 247 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_stats_req {
 u8 upload_types[3];
 u8 rsvd0;
 u8 reset_types[3];
 struct {
  u8 mpdu_bytes;
  u8 mpdu_num_msdus;
  u8 msdu_bytes;
 } __attribute__((packed));
 u8 stat_type;
 __le32 cookie_lsb;
 __le32 cookie_msb;
} __attribute__((packed));
# 282 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_oob_sync_req {
 u8 sync_count;
 __le16 rsvd0;
} __attribute__((packed));

struct htt_aggr_conf {
 u8 max_num_ampdu_subframes;

 u8 max_num_amsdu_subframes;
} __attribute__((packed));


struct htt_mgmt_tx_desc_qca99x0 {
 __le32 rate;
} __attribute__((packed));

struct htt_mgmt_tx_desc {
 u8 pad[sizeof(u32) - sizeof(struct htt_cmd_hdr)];
 __le32 msdu_paddr;
 __le32 desc_id;
 __le32 len;
 __le32 vdev_id;
 u8 hdr[32];
 union {
  struct htt_mgmt_tx_desc_qca99x0 qca99x0;
 } __attribute__((packed));
} __attribute__((packed));

enum htt_mgmt_tx_status {
 HTT_MGMT_TX_STATUS_OK = 0,
 HTT_MGMT_TX_STATUS_RETRY = 1,
 HTT_MGMT_TX_STATUS_DROP = 2
};



enum htt_main_t2h_msg_type {
 HTT_MAIN_T2H_MSG_TYPE_VERSION_CONF = 0x0,
 HTT_MAIN_T2H_MSG_TYPE_RX_IND = 0x1,
 HTT_MAIN_T2H_MSG_TYPE_RX_FLUSH = 0x2,
 HTT_MAIN_T2H_MSG_TYPE_PEER_MAP = 0x3,
 HTT_MAIN_T2H_MSG_TYPE_PEER_UNMAP = 0x4,
 HTT_MAIN_T2H_MSG_TYPE_RX_ADDBA = 0x5,
 HTT_MAIN_T2H_MSG_TYPE_RX_DELBA = 0x6,
 HTT_MAIN_T2H_MSG_TYPE_TX_COMPL_IND = 0x7,
 HTT_MAIN_T2H_MSG_TYPE_PKTLOG = 0x8,
 HTT_MAIN_T2H_MSG_TYPE_STATS_CONF = 0x9,
 HTT_MAIN_T2H_MSG_TYPE_RX_FRAG_IND = 0xa,
 HTT_MAIN_T2H_MSG_TYPE_SEC_IND = 0xb,
 HTT_MAIN_T2H_MSG_TYPE_TX_INSPECT_IND = 0xd,
 HTT_MAIN_T2H_MSG_TYPE_MGMT_TX_COMPL_IND = 0xe,
 HTT_MAIN_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND = 0xf,
 HTT_MAIN_T2H_MSG_TYPE_RX_PN_IND = 0x10,
 HTT_MAIN_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND = 0x11,
 HTT_MAIN_T2H_MSG_TYPE_TEST,

 HTT_MAIN_T2H_NUM_MSGS
};

enum htt_10x_t2h_msg_type {
 HTT_10X_T2H_MSG_TYPE_VERSION_CONF = 0x0,
 HTT_10X_T2H_MSG_TYPE_RX_IND = 0x1,
 HTT_10X_T2H_MSG_TYPE_RX_FLUSH = 0x2,
 HTT_10X_T2H_MSG_TYPE_PEER_MAP = 0x3,
 HTT_10X_T2H_MSG_TYPE_PEER_UNMAP = 0x4,
 HTT_10X_T2H_MSG_TYPE_RX_ADDBA = 0x5,
 HTT_10X_T2H_MSG_TYPE_RX_DELBA = 0x6,
 HTT_10X_T2H_MSG_TYPE_TX_COMPL_IND = 0x7,
 HTT_10X_T2H_MSG_TYPE_PKTLOG = 0x8,
 HTT_10X_T2H_MSG_TYPE_STATS_CONF = 0x9,
 HTT_10X_T2H_MSG_TYPE_RX_FRAG_IND = 0xa,
 HTT_10X_T2H_MSG_TYPE_SEC_IND = 0xb,
 HTT_10X_T2H_MSG_TYPE_RC_UPDATE_IND = 0xc,
 HTT_10X_T2H_MSG_TYPE_TX_INSPECT_IND = 0xd,
 HTT_10X_T2H_MSG_TYPE_TEST = 0xe,
 HTT_10X_T2H_MSG_TYPE_CHAN_CHANGE = 0xf,
 HTT_10X_T2H_MSG_TYPE_AGGR_CONF = 0x11,
 HTT_10X_T2H_MSG_TYPE_STATS_NOUPLOAD = 0x12,
 HTT_10X_T2H_MSG_TYPE_MGMT_TX_COMPL_IND = 0x13,

 HTT_10X_T2H_NUM_MSGS
};

enum htt_tlv_t2h_msg_type {
 HTT_TLV_T2H_MSG_TYPE_VERSION_CONF = 0x0,
 HTT_TLV_T2H_MSG_TYPE_RX_IND = 0x1,
 HTT_TLV_T2H_MSG_TYPE_RX_FLUSH = 0x2,
 HTT_TLV_T2H_MSG_TYPE_PEER_MAP = 0x3,
 HTT_TLV_T2H_MSG_TYPE_PEER_UNMAP = 0x4,
 HTT_TLV_T2H_MSG_TYPE_RX_ADDBA = 0x5,
 HTT_TLV_T2H_MSG_TYPE_RX_DELBA = 0x6,
 HTT_TLV_T2H_MSG_TYPE_TX_COMPL_IND = 0x7,
 HTT_TLV_T2H_MSG_TYPE_PKTLOG = 0x8,
 HTT_TLV_T2H_MSG_TYPE_STATS_CONF = 0x9,
 HTT_TLV_T2H_MSG_TYPE_RX_FRAG_IND = 0xa,
 HTT_TLV_T2H_MSG_TYPE_SEC_IND = 0xb,
 HTT_TLV_T2H_MSG_TYPE_RC_UPDATE_IND = 0xc,
 HTT_TLV_T2H_MSG_TYPE_TX_INSPECT_IND = 0xd,
 HTT_TLV_T2H_MSG_TYPE_MGMT_TX_COMPL_IND = 0xe,
 HTT_TLV_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND = 0xf,
 HTT_TLV_T2H_MSG_TYPE_RX_PN_IND = 0x10,
 HTT_TLV_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND = 0x11,
 HTT_TLV_T2H_MSG_TYPE_RX_IN_ORD_PADDR_IND = 0x12,

 HTT_TLV_T2H_MSG_TYPE_WDI_IPA_OP_RESPONSE = 0x14,
 HTT_TLV_T2H_MSG_TYPE_CHAN_CHANGE = 0x15,
 HTT_TLV_T2H_MSG_TYPE_RX_OFLD_PKT_ERR = 0x16,
 HTT_TLV_T2H_MSG_TYPE_TEST,

 HTT_TLV_T2H_NUM_MSGS
};

enum htt_10_4_t2h_msg_type {
 HTT_10_4_T2H_MSG_TYPE_VERSION_CONF = 0x0,
 HTT_10_4_T2H_MSG_TYPE_RX_IND = 0x1,
 HTT_10_4_T2H_MSG_TYPE_RX_FLUSH = 0x2,
 HTT_10_4_T2H_MSG_TYPE_PEER_MAP = 0x3,
 HTT_10_4_T2H_MSG_TYPE_PEER_UNMAP = 0x4,
 HTT_10_4_T2H_MSG_TYPE_RX_ADDBA = 0x5,
 HTT_10_4_T2H_MSG_TYPE_RX_DELBA = 0x6,
 HTT_10_4_T2H_MSG_TYPE_TX_COMPL_IND = 0x7,
 HTT_10_4_T2H_MSG_TYPE_PKTLOG = 0x8,
 HTT_10_4_T2H_MSG_TYPE_STATS_CONF = 0x9,
 HTT_10_4_T2H_MSG_TYPE_RX_FRAG_IND = 0xa,
 HTT_10_4_T2H_MSG_TYPE_SEC_IND = 0xb,
 HTT_10_4_T2H_MSG_TYPE_RC_UPDATE_IND = 0xc,
 HTT_10_4_T2H_MSG_TYPE_TX_INSPECT_IND = 0xd,
 HTT_10_4_T2H_MSG_TYPE_MGMT_TX_COMPL_IND = 0xe,
 HTT_10_4_T2H_MSG_TYPE_CHAN_CHANGE = 0xf,
 HTT_10_4_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND = 0x10,
 HTT_10_4_T2H_MSG_TYPE_RX_PN_IND = 0x11,
 HTT_10_4_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND = 0x12,
 HTT_10_4_T2H_MSG_TYPE_TEST = 0x13,
 HTT_10_4_T2H_MSG_TYPE_EN_STATS = 0x14,
 HTT_10_4_T2H_MSG_TYPE_AGGR_CONF = 0x15,
 HTT_10_4_T2H_MSG_TYPE_TX_FETCH_IND = 0x16,
 HTT_10_4_T2H_MSG_TYPE_TX_FETCH_CONFIRM = 0x17,
 HTT_10_4_T2H_MSG_TYPE_STATS_NOUPLOAD = 0x18,

 HTT_10_4_T2H_MSG_TYPE_TX_MODE_SWITCH_IND = 0x30,

 HTT_10_4_T2H_NUM_MSGS
};

enum htt_t2h_msg_type {
 HTT_T2H_MSG_TYPE_VERSION_CONF,
 HTT_T2H_MSG_TYPE_RX_IND,
 HTT_T2H_MSG_TYPE_RX_FLUSH,
 HTT_T2H_MSG_TYPE_PEER_MAP,
 HTT_T2H_MSG_TYPE_PEER_UNMAP,
 HTT_T2H_MSG_TYPE_RX_ADDBA,
 HTT_T2H_MSG_TYPE_RX_DELBA,
 HTT_T2H_MSG_TYPE_TX_COMPL_IND,
 HTT_T2H_MSG_TYPE_PKTLOG,
 HTT_T2H_MSG_TYPE_STATS_CONF,
 HTT_T2H_MSG_TYPE_RX_FRAG_IND,
 HTT_T2H_MSG_TYPE_SEC_IND,
 HTT_T2H_MSG_TYPE_RC_UPDATE_IND,
 HTT_T2H_MSG_TYPE_TX_INSPECT_IND,
 HTT_T2H_MSG_TYPE_MGMT_TX_COMPLETION,
 HTT_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND,
 HTT_T2H_MSG_TYPE_RX_PN_IND,
 HTT_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND,
 HTT_T2H_MSG_TYPE_RX_IN_ORD_PADDR_IND,
 HTT_T2H_MSG_TYPE_WDI_IPA_OP_RESPONSE,
 HTT_T2H_MSG_TYPE_CHAN_CHANGE,
 HTT_T2H_MSG_TYPE_RX_OFLD_PKT_ERR,
 HTT_T2H_MSG_TYPE_AGGR_CONF,
 HTT_T2H_MSG_TYPE_STATS_NOUPLOAD,
 HTT_T2H_MSG_TYPE_TEST,
 HTT_T2H_MSG_TYPE_EN_STATS,
 HTT_T2H_MSG_TYPE_TX_FETCH_IND,
 HTT_T2H_MSG_TYPE_TX_FETCH_CONFIRM,
 HTT_T2H_MSG_TYPE_TX_MODE_SWITCH_IND,

 HTT_T2H_NUM_MSGS
};






struct htt_resp_hdr {
 u8 msg_type;
} __attribute__((packed));






struct htt_ver_resp {
 u8 minor;
 u8 major;
 u8 rsvd0;
} __attribute__((packed));

struct htt_mgmt_tx_completion {
 u8 rsvd0;
 u8 rsvd1;
 u8 rsvd2;
 __le32 desc_id;
 __le32 status;
} __attribute__((packed));
# 504 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_rx_indication_hdr {
 u8 info0;
 __le16 peer_id;
 __le32 info1;
} __attribute__((packed));
# 527 "drivers/net/wireless/ath/ath10k/htt.h"
enum htt_rx_legacy_rate {
 HTT_RX_OFDM_48 = 0,
 HTT_RX_OFDM_24 = 1,
 HTT_RX_OFDM_12,
 HTT_RX_OFDM_6,
 HTT_RX_OFDM_54,
 HTT_RX_OFDM_36,
 HTT_RX_OFDM_18,
 HTT_RX_OFDM_9,


 HTT_RX_CCK_11_LP = 0,
 HTT_RX_CCK_5_5_LP = 1,
 HTT_RX_CCK_2_LP,
 HTT_RX_CCK_1_LP,

 HTT_RX_CCK_11_SP,
 HTT_RX_CCK_5_5_SP,
 HTT_RX_CCK_2_SP
};

enum htt_rx_legacy_rate_type {
 HTT_RX_LEGACY_RATE_OFDM = 0,
 HTT_RX_LEGACY_RATE_CCK
};

enum htt_rx_preamble_type {
 HTT_RX_LEGACY = 0x4,
 HTT_RX_HT = 0x8,
 HTT_RX_HT_WITH_TXBF = 0x9,
 HTT_RX_VHT = 0xC,
 HTT_RX_VHT_WITH_TXBF = 0xD,
};
# 571 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_rx_indication_ppdu {
 u8 combined_rssi;
 u8 sub_usec_timestamp;
 u8 phy_err_code;
 u8 info0;
 struct {
  u8 pri20_db;
  u8 ext20_db;
  u8 ext40_db;
  u8 ext80_db;
 } __attribute__((packed)) rssi_chains[4];
 __le32 tsf;
 __le32 usec_timestamp;
 __le32 info1;
 __le32 info2;
} __attribute__((packed));

enum htt_rx_mpdu_status {
 HTT_RX_IND_MPDU_STATUS_UNKNOWN = 0x0,
 HTT_RX_IND_MPDU_STATUS_OK,
 HTT_RX_IND_MPDU_STATUS_ERR_FCS,
 HTT_RX_IND_MPDU_STATUS_ERR_DUP,
 HTT_RX_IND_MPDU_STATUS_ERR_REPLAY,
 HTT_RX_IND_MPDU_STATUS_ERR_INV_PEER,

 HTT_RX_IND_MPDU_STATUS_UNAUTH_PEER,
 HTT_RX_IND_MPDU_STATUS_OUT_OF_SYNC,

 HTT_RX_IND_MPDU_STATUS_MGMT_CTRL,
 HTT_RX_IND_MPDU_STATUS_TKIP_MIC_ERR,
 HTT_RX_IND_MPDU_STATUS_DECRYPT_ERR,
 HTT_RX_IND_MPDU_STATUS_MPDU_LENGTH_ERR,
 HTT_RX_IND_MPDU_STATUS_ENCRYPT_REQUIRED_ERR,
 HTT_RX_IND_MPDU_STATUS_PRIVACY_ERR,





 HTT_RX_IND_MPDU_STATUS_ERR_MISC = 0xFF
};

struct htt_rx_indication_mpdu_range {
 u8 mpdu_count;
 u8 mpdu_range_status;
 u8 pad0;
 u8 pad1;
} __attribute__((packed));

struct htt_rx_indication_prefix {
 __le16 fw_rx_desc_bytes;
 u8 pad0;
 u8 pad1;
};

struct htt_rx_indication {
 struct htt_rx_indication_hdr hdr;
 struct htt_rx_indication_ppdu ppdu;
 struct htt_rx_indication_prefix prefix;







 struct fw_rx_desc_base fw_desc;





 struct htt_rx_indication_mpdu_range mpdu_ranges[0];
} __attribute__((packed));

static inline __attribute__((no_instrument_function)) struct htt_rx_indication_mpdu_range *
  htt_rx_ind_get_mpdu_ranges(struct htt_rx_indication *rx_ind)
{
 void *ptr = rx_ind;

 ptr += sizeof(rx_ind->hdr)
      + sizeof(rx_ind->ppdu)
      + sizeof(rx_ind->prefix)
      + ( { const typeof(4) __y = 4; ((((( __u16)(__le16)(rx_ind->prefix.fw_rx_desc_bytes))) + (__y - 1)) / __y) * __y; } );
 return ptr;
}

enum htt_rx_flush_mpdu_status {
 HTT_RX_FLUSH_MPDU_DISCARD = 0,
 HTT_RX_FLUSH_MPDU_REORDER = 1,
};







struct htt_rx_flush {
 __le16 peer_id;
 u8 tid;
 u8 rsvd0;
 u8 mpdu_status;
 u8 seq_num_start;
 u8 seq_num_end;
};

struct htt_rx_peer_map {
 u8 vdev_id;
 __le16 peer_id;
 u8 addr[6];
 u8 rsvd0;
 u8 rsvd1;
} __attribute__((packed));

struct htt_rx_peer_unmap {
 u8 rsvd0;
 __le16 peer_id;
} __attribute__((packed));

enum htt_security_types {
 HTT_SECURITY_NONE,
 HTT_SECURITY_WEP128,
 HTT_SECURITY_WEP104,
 HTT_SECURITY_WEP40,
 HTT_SECURITY_TKIP,
 HTT_SECURITY_TKIP_NOMIC,
 HTT_SECURITY_AES_CCMP,
 HTT_SECURITY_WAPI,

 HTT_NUM_SECURITY_TYPES
};

enum htt_security_flags {


 HTT_SECURITY_IS_UNICAST = 1 << 7
};

struct htt_security_indication {
 union {

  u8 flags;
  struct {
   u8 security_type:7,
      is_unicast:1;
  } __attribute__((packed));
 } __attribute__((packed));
 __le16 peer_id;
 u8 michael_key[8];
 u8 wapi_rsc[16];
} __attribute__((packed));






struct htt_rx_addba {
 u8 window_size;
 __le16 info0;
} __attribute__((packed));

struct htt_rx_delba {
 u8 rsvd0;
 __le16 info0;
} __attribute__((packed));

enum htt_data_tx_status {
 HTT_DATA_TX_STATUS_OK = 0,
 HTT_DATA_TX_STATUS_DISCARD = 1,
 HTT_DATA_TX_STATUS_NO_ACK = 2,
 HTT_DATA_TX_STATUS_POSTPONE = 3,
 HTT_DATA_TX_STATUS_DOWNLOAD_FAIL = 128
};

enum htt_data_tx_flags {




 HTT_DATA_TX_TID_INVALID = 1 << 7
};



struct htt_data_tx_completion {
 union {
  u8 flags;
  struct {
   u8 status:3,
      tid:4,
      tid_invalid:1;
  } __attribute__((packed));
 } __attribute__((packed));
 u8 num_msdus;
 u8 rsvd0;
 __le16 msdus[0];
} __attribute__((packed));

struct htt_tx_compl_ind_base {
 u32 hdr;
 u16 payload[1 ];
} __attribute__((packed));

struct htt_rc_tx_done_params {
 u32 rate_code;
 u32 rate_code_flags;
 u32 flags;
 u32 num_enqued;
 u32 num_retries;
 u32 num_failed;
 u32 ack_rssi;
 u32 time_stamp;
 u32 is_probe;
};

struct htt_rc_update {
 u8 vdev_id;
 __le16 peer_id;
 u8 addr[6];
 u8 num_elems;
 u8 rsvd0;
 struct htt_rc_tx_done_params params[0];
} __attribute__((packed));


struct htt_rx_fragment_indication {
 union {
  u8 info0;
  struct {
   u8 ext_tid:5,
      flush_valid:1;
  } __attribute__((packed));
 } __attribute__((packed));
 __le16 peer_id;
 __le32 info1;
 __le16 fw_rx_desc_bytes;
 __le16 rsvd0;

 u8 fw_msdu_rx_desc[0];
} __attribute__((packed));
# 824 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_rx_pn_ind {
 __le16 peer_id;
 u8 tid;
 u8 seqno_start;
 u8 seqno_end;
 u8 pn_ie_count;
 u8 reserved;
 u8 pn_ies[0];
} __attribute__((packed));

struct htt_rx_offload_msdu {
 __le16 msdu_len;
 __le16 peer_id;
 u8 vdev_id;
 u8 tid;
 u8 fw_desc;
 u8 payload[0];
} __attribute__((packed));

struct htt_rx_offload_ind {
 u8 reserved;
 __le16 msdu_count;
} __attribute__((packed));

struct htt_rx_in_ord_msdu_desc {
 __le32 msdu_paddr;
 __le16 msdu_len;
 u8 fw_desc;
 u8 reserved;
} __attribute__((packed));

struct htt_rx_in_ord_ind {
 u8 info;
 __le16 peer_id;
 u8 vdev_id;
 u8 reserved;
 __le16 msdu_count;
 struct htt_rx_in_ord_msdu_desc msdu_descs[0];
} __attribute__((packed));
# 905 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_rx_test {
 u8 num_ints;
 __le16 num_chars;




 u8 payload[0];
} __attribute__((packed));

static inline __attribute__((no_instrument_function)) __le32 *htt_rx_test_get_ints(struct htt_rx_test *rx_test)
{
 return (__le32 *)rx_test->payload;
}

static inline __attribute__((no_instrument_function)) u8 *htt_rx_test_get_chars(struct htt_rx_test *rx_test)
{
 return rx_test->payload + (rx_test->num_ints * sizeof(__le32));
}
# 944 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_pktlog_msg {
 u8 pad[3];
 u8 payload[0];
} __attribute__((packed));

struct htt_dbg_stats_rx_reorder_stats {

 __le32 deliver_non_qos;


 __le32 deliver_in_order;


 __le32 deliver_flush_timeout;


 __le32 deliver_flush_oow;


 __le32 deliver_flush_delba;


 __le32 fcs_error;


 __le32 mgmt_ctrl;


 __le32 invalid_peer;


 __le32 dup_non_aggr;


 __le32 dup_past;


 __le32 dup_in_reorder;


 __le32 reorder_timeout;


 __le32 invalid_bar_ssn;


 __le32 ssn_reset;
};

struct htt_dbg_stats_wal_tx_stats {

 __le32 comp_queued;


 __le32 comp_delivered;


 __le32 msdu_enqued;


 __le32 mpdu_enqued;


 __le32 wmm_drop;


 __le32 local_enqued;


 __le32 local_freed;


 __le32 hw_queued;


 __le32 hw_reaped;


 __le32 underrun;


 __le32 tx_abort;


 __le32 mpdus_requed;


 __le32 tx_ko;


 __le32 data_rc;


 __le32 self_triggers;


 __le32 sw_retry_failure;


 __le32 illgl_rate_phy_err;


 __le32 pdev_cont_xretry;


 __le32 pdev_tx_timeout;


 __le32 pdev_resets;

 __le32 phy_underrun;


 __le32 txop_ovf;
} __attribute__((packed));

struct htt_dbg_stats_wal_rx_stats {

 __le32 mid_ppdu_route_change;


 __le32 status_rcvd;


 __le32 r0_frags;
 __le32 r1_frags;
 __le32 r2_frags;
 __le32 r3_frags;


 __le32 htt_msdus;
 __le32 htt_mpdus;


 __le32 loc_msdus;
 __le32 loc_mpdus;


 __le32 oversize_amsdu;


 __le32 phy_errs;


 __le32 phy_err_drop;


 __le32 mpdu_errs;
} __attribute__((packed));

struct htt_dbg_stats_wal_peer_stats {
 __le32 dummy;
} __attribute__((packed));

struct htt_dbg_stats_wal_pdev_txrx {
 struct htt_dbg_stats_wal_tx_stats tx_stats;
 struct htt_dbg_stats_wal_rx_stats rx_stats;
 struct htt_dbg_stats_wal_peer_stats peer_stats;
} __attribute__((packed));

struct htt_dbg_stats_rx_rate_info {
 __le32 mcs[10];
 __le32 sgi[10];
 __le32 nss[4];
 __le32 stbc[10];
 __le32 bw[3];
 __le32 pream[6];
 __le32 ldpc;
 __le32 txbf;
};
# 1136 "drivers/net/wireless/ath/ath10k/htt.h"
enum htt_dbg_stats_status {
 HTT_DBG_STATS_STATUS_PRESENT = 0,
 HTT_DBG_STATS_STATUS_PARTIAL = 1,
 HTT_DBG_STATS_STATUS_ERROR = 2,
 HTT_DBG_STATS_STATUS_INVALID = 3,
 HTT_DBG_STATS_STATUS_SERIES_DONE = 7
};
# 1225 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_stats_conf_item {
 union {
  u8 info;
  struct {
   u8 stat_type:5;
   u8 status:3;
  } __attribute__((packed));
 } __attribute__((packed));
 u8 pad;
 __le16 length;
 u8 payload[0];
} __attribute__((packed));

struct htt_stats_conf {
 u8 pad[3];
 __le32 cookie_lsb;
 __le32 cookie_msb;


 struct htt_stats_conf_item items[0];
} __attribute__((packed));

static inline __attribute__((no_instrument_function)) struct htt_stats_conf_item *htt_stats_conf_next_item(
     const struct htt_stats_conf_item *item)
{
 return (void *)item + sizeof(*item) + ( { const typeof(4) __y = 4; (((item->length) + (__y - 1)) / __y) * __y; } );
}
# 1302 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_frag_desc_bank_id {
 __le16 bank_min_id;
 __le16 bank_max_id;
} __attribute__((packed));
# 1318 "drivers/net/wireless/ath/ath10k/htt.h"
enum htt_q_depth_type {
 HTT_Q_DEPTH_TYPE_BYTES = 0,
 HTT_Q_DEPTH_TYPE_MSDUS = 1,
};
# 1340 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_q_state_conf {
 __le32 paddr;
 __le16 num_peers;
 __le16 num_tids;
 u8 record_size;
 u8 record_multiplier;
 u8 pad[2];
} __attribute__((packed));

struct htt_frag_desc_bank_cfg {
 u8 info;
 u8 num_banks;
 u8 desc_size;
 __le32 bank_base_addrs[4];
 struct htt_frag_desc_bank_id bank_id[4];
 struct htt_q_state_conf q_state;
} __attribute__((packed));
# 1385 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_q_state {
 u8 count[8][(512 + 16)];
 u32 map[8][((512 + 16) + 31) / 32];
 __le32 seq;
} __attribute__((packed));






struct htt_tx_fetch_record {
 __le16 info;
 __le16 num_msdus;
 __le32 num_bytes;
} __attribute__((packed));

struct htt_tx_fetch_ind {
 u8 pad0;
 __le16 fetch_seq_num;
 __le32 token;
 __le16 num_resp_ids;
 __le16 num_records;
 struct htt_tx_fetch_record records[0];
 __le32 resp_ids[0];
} __attribute__((packed));

static inline __attribute__((no_instrument_function)) void *
ath10k_htt_get_tx_fetch_ind_resp_ids(struct htt_tx_fetch_ind *ind)
{
 return (void *)&ind->records[(( __u16)(__le16)(ind->num_records))];
}

struct htt_tx_fetch_resp {
 u8 pad0;
 __le16 resp_id;
 __le16 fetch_seq_num;
 __le16 num_records;
 __le32 token;
 struct htt_tx_fetch_record records[0];
} __attribute__((packed));

struct htt_tx_fetch_confirm {
 u8 pad0;
 __le16 num_resp_ids;
 __le32 resp_ids[0];
} __attribute__((packed));

enum htt_tx_mode_switch_mode {
 HTT_TX_MODE_SWITCH_PUSH = 0,
 HTT_TX_MODE_SWITCH_PUSH_PULL = 1,
};
# 1452 "drivers/net/wireless/ath/ath10k/htt.h"
struct htt_tx_mode_switch_record {
 __le16 info0;
 __le16 num_max_msdus;
} __attribute__((packed));

struct htt_tx_mode_switch_ind {
 u8 pad0;
 __le16 info0;
 __le16 info1;
 u8 pad1[2];
 struct htt_tx_mode_switch_record records[0];
} __attribute__((packed));

struct htt_channel_change {
 u8 pad[3];
 __le32 freq;
 __le32 center_freq1;
 __le32 center_freq2;
 __le32 phymode;
} __attribute__((packed));

union htt_rx_pn_t {

 u32 pn24;


 u64 pn48;


 u64 pn128[2];
};

struct htt_cmd {
 struct htt_cmd_hdr hdr;
 union {
  struct htt_ver_req ver_req;
  struct htt_mgmt_tx_desc mgmt_tx;
  struct htt_data_tx_desc data_tx;
  struct htt_rx_ring_setup rx_setup;
  struct htt_stats_req stats_req;
  struct htt_oob_sync_req oob_sync_req;
  struct htt_aggr_conf aggr_conf;
  struct htt_frag_desc_bank_cfg frag_desc_bank_cfg;
  struct htt_tx_fetch_resp tx_fetch_resp;
 };
} __attribute__((packed));

struct htt_resp {
 struct htt_resp_hdr hdr;
 union {
  struct htt_ver_resp ver_resp;
  struct htt_mgmt_tx_completion mgmt_tx_completion;
  struct htt_data_tx_completion data_tx_completion;
  struct htt_rx_indication rx_ind;
  struct htt_rx_fragment_indication rx_frag_ind;
  struct htt_rx_peer_map peer_map;
  struct htt_rx_peer_unmap peer_unmap;
  struct htt_rx_flush rx_flush;
  struct htt_rx_addba rx_addba;
  struct htt_rx_delba rx_delba;
  struct htt_security_indication security_indication;
  struct htt_rc_update rc_update;
  struct htt_rx_test rx_test;
  struct htt_pktlog_msg pktlog_msg;
  struct htt_stats_conf stats_conf;
  struct htt_rx_pn_ind rx_pn_ind;
  struct htt_rx_offload_ind rx_offload_ind;
  struct htt_rx_in_ord_ind rx_in_ord_ind;
  struct htt_tx_fetch_ind tx_fetch_ind;
  struct htt_tx_fetch_confirm tx_fetch_confirm;
  struct htt_tx_mode_switch_ind tx_mode_switch_ind;
  struct htt_channel_change chan_change;
 };
} __attribute__((packed));



struct htt_tx_done {
 u16 msdu_id;
 u16 status;
};

enum htt_tx_compl_state {
 HTT_TX_COMPL_STATE_NONE,
 HTT_TX_COMPL_STATE_ACK,
 HTT_TX_COMPL_STATE_NOACK,
 HTT_TX_COMPL_STATE_DISCARD,
};

struct htt_peer_map_event {
 u8 vdev_id;
 u16 peer_id;
 u8 addr[6];
};

struct htt_peer_unmap_event {
 u16 peer_id;
};

struct ath10k_htt_txbuf {
 struct htt_data_tx_desc_frag frags[2];
 struct ath10k_htc_hdr htc_hdr;
 struct htt_cmd_hdr cmd_hdr;
 struct htt_data_tx_desc cmd_tx;
} __attribute__((packed));

struct ath10k_htt {
 struct ath10k *ar;
 enum ath10k_htc_ep_id eid;

 u8 target_version_major;
 u8 target_version_minor;
 struct completion target_version_received;
 u8 max_num_amsdu;
 u8 max_num_ampdu;

 const enum htt_t2h_msg_type *t2h_msg_types;
 u32 t2h_msg_types_max;

 struct {
# 1581 "drivers/net/wireless/ath/ath10k/htt.h"
  struct sk_buff **netbufs_ring;
# 1593 "drivers/net/wireless/ath/ath10k/htt.h"
  bool in_ord_rx;
  struct hlist_head skb_table[1 << (4)];







  __le32 *paddrs_ring;





  dma_addr_t base_paddr;


  int size;


  unsigned size_mask;


  int fill_level;


  int fill_cnt;







  struct {
   __le32 *vaddr;
   dma_addr_t paddr;
  } alloc_idx;


  struct {
   unsigned msdu_payld;
  } sw_rd_idx;





  struct timer_list refill_retry_timer;


  spinlock_t lock;
 } rx_ring;

 unsigned int prefetch_len;


 spinlock_t tx_lock;
 int max_num_pending_tx;
 int num_pending_tx;
 int num_pending_mgmt_tx;
 struct idr pending_tx;
 wait_queue_head_t empty_tx_wq;


 struct { union { struct __kfifo kfifo; struct htt_tx_done *type; const struct htt_tx_done *const_type; char (*rectype)[0]; struct htt_tx_done *ptr; struct htt_tx_done const *ptr_const; }; struct htt_tx_done buf[0]; } txdone_fifo;



 bool rx_confused;
 atomic_t num_mpdus_ready;



 struct tasklet_struct txrx_compl_task;
 struct sk_buff_head rx_compl_q;
 struct sk_buff_head rx_in_ord_compl_q;
 struct sk_buff_head tx_fetch_ind_q;


 struct ieee80211_rx_status rx_status;

 struct {
  dma_addr_t paddr;
  struct htt_msdu_ext_desc *vaddr;
 } frag_desc;

 struct {
  dma_addr_t paddr;
  struct ath10k_htt_txbuf *vaddr;
 } txbuf;

 struct {
  bool enabled;
  struct htt_q_state *vaddr;
  dma_addr_t paddr;
  u16 num_push_allowed;
  u16 num_peers;
  u16 num_tids;
  enum htt_tx_mode_switch_mode mode;
  enum htt_q_depth_type type;
 } tx_q_state;
};






struct htt_rx_desc {
 union {


  struct fw_rx_desc_base fw_desc;
  u32 pad;
 } __attribute__((packed));
 struct {
  struct rx_attention attention;
  struct rx_frag_info frag_info;
  struct rx_mpdu_start mpdu_start;
  struct rx_msdu_start msdu_start;
  struct rx_msdu_end msdu_end;
  struct rx_mpdu_end mpdu_end;
  struct rx_ppdu_start ppdu_start;
  struct rx_ppdu_end ppdu_end;
 } __attribute__((packed));
 u8 rx_hdr_status[64];
 u8 msdu_payload[0];
};
# 1754 "drivers/net/wireless/ath/ath10k/htt.h"
int ath10k_htt_connect(struct ath10k_htt *htt);
int ath10k_htt_init(struct ath10k *ar);
int ath10k_htt_setup(struct ath10k_htt *htt);

int ath10k_htt_tx_alloc(struct ath10k_htt *htt);
void ath10k_htt_tx_free(struct ath10k_htt *htt);

int ath10k_htt_rx_alloc(struct ath10k_htt *htt);
int ath10k_htt_rx_ring_refill(struct ath10k *ar);
void ath10k_htt_rx_free(struct ath10k_htt *htt);

void ath10k_htt_htc_tx_complete(struct ath10k *ar, struct sk_buff *skb);
void ath10k_htt_htc_t2h_msg_handler(struct ath10k *ar, struct sk_buff *skb);
bool ath10k_htt_t2h_msg_handler(struct ath10k *ar, struct sk_buff *skb);
int ath10k_htt_h2t_ver_req_msg(struct ath10k_htt *htt);
int ath10k_htt_h2t_stats_req(struct ath10k_htt *htt, u8 mask, u64 cookie);
int ath10k_htt_send_frag_desc_bank_cfg(struct ath10k_htt *htt);
int ath10k_htt_send_rx_ring_cfg_ll(struct ath10k_htt *htt);
int ath10k_htt_h2t_aggr_cfg_msg(struct ath10k_htt *htt,
    u8 max_subfrms_ampdu,
    u8 max_subfrms_amsdu);
void ath10k_htt_hif_tx_complete(struct ath10k *ar, struct sk_buff *skb);
int ath10k_htt_tx_fetch_resp(struct ath10k *ar,
        __le32 token,
        __le16 fetch_seq_num,
        struct htt_tx_fetch_record *records,
        size_t num_records);

void ath10k_htt_tx_txq_update(struct ieee80211_hw *hw,
         struct ieee80211_txq *txq);
void ath10k_htt_tx_txq_recalc(struct ieee80211_hw *hw,
         struct ieee80211_txq *txq);
void ath10k_htt_tx_txq_sync(struct ath10k *ar);
void ath10k_htt_tx_dec_pending(struct ath10k_htt *htt);
int ath10k_htt_tx_inc_pending(struct ath10k_htt *htt);
void ath10k_htt_tx_mgmt_dec_pending(struct ath10k_htt *htt);
int ath10k_htt_tx_mgmt_inc_pending(struct ath10k_htt *htt, bool is_mgmt,
       bool is_presp);

int ath10k_htt_tx_alloc_msdu_id(struct ath10k_htt *htt, struct sk_buff *skb);
void ath10k_htt_tx_free_msdu_id(struct ath10k_htt *htt, u16 msdu_id);
int ath10k_htt_mgmt_tx(struct ath10k_htt *htt, struct sk_buff *);
int ath10k_htt_tx(struct ath10k_htt *htt,
    enum ath10k_hw_txrx_mode txmode,
    struct sk_buff *msdu);
void ath10k_htt_rx_pktlog_completion_handler(struct ath10k *ar,
          struct sk_buff *skb);
# 29 "drivers/net/wireless/ath/ath10k/core.h" 2



# 1 "drivers/net/wireless/ath/ath10k/wmi.h" 1
# 64 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_cmd_hdr {
 __le32 cmd_id;
} __attribute__((packed));
# 83 "drivers/net/wireless/ath/ath10k/wmi.h"
typedef __s32 a_sle32;

static inline __attribute__((no_instrument_function)) a_sle32 a_cpu_to_sle32(s32 val)
{
 return ( a_sle32)(( __le32)(__u32)(val));
}

static inline __attribute__((no_instrument_function)) s32 a_sle32_to_cpu(a_sle32 val)
{
 return (( __u32)(__le32)(( __le32)val));
}

enum wmi_service {
 WMI_SERVICE_BEACON_OFFLOAD = 0,
 WMI_SERVICE_SCAN_OFFLOAD,
 WMI_SERVICE_ROAM_OFFLOAD,
 WMI_SERVICE_BCN_MISS_OFFLOAD,
 WMI_SERVICE_STA_PWRSAVE,
 WMI_SERVICE_STA_ADVANCED_PWRSAVE,
 WMI_SERVICE_AP_UAPSD,
 WMI_SERVICE_AP_DFS,
 WMI_SERVICE_11AC,
 WMI_SERVICE_BLOCKACK,
 WMI_SERVICE_PHYERR,
 WMI_SERVICE_BCN_FILTER,
 WMI_SERVICE_RTT,
 WMI_SERVICE_RATECTRL,
 WMI_SERVICE_WOW,
 WMI_SERVICE_RATECTRL_CACHE,
 WMI_SERVICE_IRAM_TIDS,
 WMI_SERVICE_ARPNS_OFFLOAD,
 WMI_SERVICE_NLO,
 WMI_SERVICE_GTK_OFFLOAD,
 WMI_SERVICE_SCAN_SCH,
 WMI_SERVICE_CSA_OFFLOAD,
 WMI_SERVICE_CHATTER,
 WMI_SERVICE_COEX_FREQAVOID,
 WMI_SERVICE_PACKET_POWER_SAVE,
 WMI_SERVICE_FORCE_FW_HANG,
 WMI_SERVICE_GPIO,
 WMI_SERVICE_STA_DTIM_PS_MODULATED_DTIM,
 WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG,
 WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG,
 WMI_SERVICE_STA_KEEP_ALIVE,
 WMI_SERVICE_TX_ENCAP,
 WMI_SERVICE_BURST,
 WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT,
 WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT,
 WMI_SERVICE_ROAM_SCAN_OFFLOAD,
 WMI_SERVICE_AP_PS_DETECT_OUT_OF_SYNC,
 WMI_SERVICE_EARLY_RX,
 WMI_SERVICE_STA_SMPS,
 WMI_SERVICE_FWTEST,
 WMI_SERVICE_STA_WMMAC,
 WMI_SERVICE_TDLS,
 WMI_SERVICE_MCC_BCN_INTERVAL_CHANGE,
 WMI_SERVICE_ADAPTIVE_OCS,
 WMI_SERVICE_BA_SSN_SUPPORT,
 WMI_SERVICE_FILTER_IPSEC_NATKEEPALIVE,
 WMI_SERVICE_WLAN_HB,
 WMI_SERVICE_LTE_ANT_SHARE_SUPPORT,
 WMI_SERVICE_BATCH_SCAN,
 WMI_SERVICE_QPOWER,
 WMI_SERVICE_PLMREQ,
 WMI_SERVICE_THERMAL_MGMT,
 WMI_SERVICE_RMC,
 WMI_SERVICE_MHF_OFFLOAD,
 WMI_SERVICE_COEX_SAR,
 WMI_SERVICE_BCN_TXRATE_OVERRIDE,
 WMI_SERVICE_NAN,
 WMI_SERVICE_L1SS_STAT,
 WMI_SERVICE_ESTIMATE_LINKSPEED,
 WMI_SERVICE_OBSS_SCAN,
 WMI_SERVICE_TDLS_OFFCHAN,
 WMI_SERVICE_TDLS_UAPSD_BUFFER_STA,
 WMI_SERVICE_TDLS_UAPSD_SLEEP_STA,
 WMI_SERVICE_IBSS_PWRSAVE,
 WMI_SERVICE_LPASS,
 WMI_SERVICE_EXTSCAN,
 WMI_SERVICE_D0WOW,
 WMI_SERVICE_HSOFFLOAD,
 WMI_SERVICE_ROAM_HO_OFFLOAD,
 WMI_SERVICE_RX_FULL_REORDER,
 WMI_SERVICE_DHCP_OFFLOAD,
 WMI_SERVICE_STA_RX_IPA_OFFLOAD_SUPPORT,
 WMI_SERVICE_MDNS_OFFLOAD,
 WMI_SERVICE_SAP_AUTH_OFFLOAD,
 WMI_SERVICE_ATF,
 WMI_SERVICE_COEX_GPIO,
 WMI_SERVICE_ENHANCED_PROXY_STA,
 WMI_SERVICE_TT,
 WMI_SERVICE_PEER_CACHING,
 WMI_SERVICE_AUX_SPECTRAL_INTF,
 WMI_SERVICE_AUX_CHAN_LOAD_INTF,
 WMI_SERVICE_BSS_CHANNEL_INFO_64,
 WMI_SERVICE_EXT_RES_CFG_SUPPORT,
 WMI_SERVICE_MESH_11S,
 WMI_SERVICE_MESH_NON_11S,
 WMI_SERVICE_PEER_STATS,
 WMI_SERVICE_RESTRT_CHNL_SUPPORT,
 WMI_SERVICE_TX_MODE_PUSH_ONLY,
 WMI_SERVICE_TX_MODE_PUSH_PULL,
 WMI_SERVICE_TX_MODE_DYNAMIC,


 WMI_SERVICE_MAX,
};

enum wmi_10x_service {
 WMI_10X_SERVICE_BEACON_OFFLOAD = 0,
 WMI_10X_SERVICE_SCAN_OFFLOAD,
 WMI_10X_SERVICE_ROAM_OFFLOAD,
 WMI_10X_SERVICE_BCN_MISS_OFFLOAD,
 WMI_10X_SERVICE_STA_PWRSAVE,
 WMI_10X_SERVICE_STA_ADVANCED_PWRSAVE,
 WMI_10X_SERVICE_AP_UAPSD,
 WMI_10X_SERVICE_AP_DFS,
 WMI_10X_SERVICE_11AC,
 WMI_10X_SERVICE_BLOCKACK,
 WMI_10X_SERVICE_PHYERR,
 WMI_10X_SERVICE_BCN_FILTER,
 WMI_10X_SERVICE_RTT,
 WMI_10X_SERVICE_RATECTRL,
 WMI_10X_SERVICE_WOW,
 WMI_10X_SERVICE_RATECTRL_CACHE,
 WMI_10X_SERVICE_IRAM_TIDS,
 WMI_10X_SERVICE_BURST,


 WMI_10X_SERVICE_SMART_ANTENNA_SW_SUPPORT,
 WMI_10X_SERVICE_FORCE_FW_HANG,
 WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT,
 WMI_10X_SERVICE_ATF,
 WMI_10X_SERVICE_COEX_GPIO,
 WMI_10X_SERVICE_AUX_SPECTRAL_INTF,
 WMI_10X_SERVICE_AUX_CHAN_LOAD_INTF,
 WMI_10X_SERVICE_BSS_CHANNEL_INFO_64,
 WMI_10X_SERVICE_MESH,
 WMI_10X_SERVICE_EXT_RES_CFG_SUPPORT,
 WMI_10X_SERVICE_PEER_STATS,
};

enum wmi_main_service {
 WMI_MAIN_SERVICE_BEACON_OFFLOAD = 0,
 WMI_MAIN_SERVICE_SCAN_OFFLOAD,
 WMI_MAIN_SERVICE_ROAM_OFFLOAD,
 WMI_MAIN_SERVICE_BCN_MISS_OFFLOAD,
 WMI_MAIN_SERVICE_STA_PWRSAVE,
 WMI_MAIN_SERVICE_STA_ADVANCED_PWRSAVE,
 WMI_MAIN_SERVICE_AP_UAPSD,
 WMI_MAIN_SERVICE_AP_DFS,
 WMI_MAIN_SERVICE_11AC,
 WMI_MAIN_SERVICE_BLOCKACK,
 WMI_MAIN_SERVICE_PHYERR,
 WMI_MAIN_SERVICE_BCN_FILTER,
 WMI_MAIN_SERVICE_RTT,
 WMI_MAIN_SERVICE_RATECTRL,
 WMI_MAIN_SERVICE_WOW,
 WMI_MAIN_SERVICE_RATECTRL_CACHE,
 WMI_MAIN_SERVICE_IRAM_TIDS,
 WMI_MAIN_SERVICE_ARPNS_OFFLOAD,
 WMI_MAIN_SERVICE_NLO,
 WMI_MAIN_SERVICE_GTK_OFFLOAD,
 WMI_MAIN_SERVICE_SCAN_SCH,
 WMI_MAIN_SERVICE_CSA_OFFLOAD,
 WMI_MAIN_SERVICE_CHATTER,
 WMI_MAIN_SERVICE_COEX_FREQAVOID,
 WMI_MAIN_SERVICE_PACKET_POWER_SAVE,
 WMI_MAIN_SERVICE_FORCE_FW_HANG,
 WMI_MAIN_SERVICE_GPIO,
 WMI_MAIN_SERVICE_STA_DTIM_PS_MODULATED_DTIM,
 WMI_MAIN_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG,
 WMI_MAIN_SERVICE_STA_UAPSD_VAR_AUTO_TRIG,
 WMI_MAIN_SERVICE_STA_KEEP_ALIVE,
 WMI_MAIN_SERVICE_TX_ENCAP,
};

enum wmi_10_4_service {
 WMI_10_4_SERVICE_BEACON_OFFLOAD = 0,
 WMI_10_4_SERVICE_SCAN_OFFLOAD,
 WMI_10_4_SERVICE_ROAM_OFFLOAD,
 WMI_10_4_SERVICE_BCN_MISS_OFFLOAD,
 WMI_10_4_SERVICE_STA_PWRSAVE,
 WMI_10_4_SERVICE_STA_ADVANCED_PWRSAVE,
 WMI_10_4_SERVICE_AP_UAPSD,
 WMI_10_4_SERVICE_AP_DFS,
 WMI_10_4_SERVICE_11AC,
 WMI_10_4_SERVICE_BLOCKACK,
 WMI_10_4_SERVICE_PHYERR,
 WMI_10_4_SERVICE_BCN_FILTER,
 WMI_10_4_SERVICE_RTT,
 WMI_10_4_SERVICE_RATECTRL,
 WMI_10_4_SERVICE_WOW,
 WMI_10_4_SERVICE_RATECTRL_CACHE,
 WMI_10_4_SERVICE_IRAM_TIDS,
 WMI_10_4_SERVICE_BURST,
 WMI_10_4_SERVICE_SMART_ANTENNA_SW_SUPPORT,
 WMI_10_4_SERVICE_GTK_OFFLOAD,
 WMI_10_4_SERVICE_SCAN_SCH,
 WMI_10_4_SERVICE_CSA_OFFLOAD,
 WMI_10_4_SERVICE_CHATTER,
 WMI_10_4_SERVICE_COEX_FREQAVOID,
 WMI_10_4_SERVICE_PACKET_POWER_SAVE,
 WMI_10_4_SERVICE_FORCE_FW_HANG,
 WMI_10_4_SERVICE_SMART_ANTENNA_HW_SUPPORT,
 WMI_10_4_SERVICE_GPIO,
 WMI_10_4_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG,
 WMI_10_4_SERVICE_STA_UAPSD_VAR_AUTO_TRIG,
 WMI_10_4_SERVICE_STA_KEEP_ALIVE,
 WMI_10_4_SERVICE_TX_ENCAP,
 WMI_10_4_SERVICE_AP_PS_DETECT_OUT_OF_SYNC,
 WMI_10_4_SERVICE_EARLY_RX,
 WMI_10_4_SERVICE_ENHANCED_PROXY_STA,
 WMI_10_4_SERVICE_TT,
 WMI_10_4_SERVICE_ATF,
 WMI_10_4_SERVICE_PEER_CACHING,
 WMI_10_4_SERVICE_COEX_GPIO,
 WMI_10_4_SERVICE_AUX_SPECTRAL_INTF,
 WMI_10_4_SERVICE_AUX_CHAN_LOAD_INTF,
 WMI_10_4_SERVICE_BSS_CHANNEL_INFO_64,
 WMI_10_4_SERVICE_EXT_RES_CFG_SUPPORT,
 WMI_10_4_SERVICE_MESH_NON_11S,
 WMI_10_4_SERVICE_RESTRT_CHNL_SUPPORT,
 WMI_10_4_SERVICE_PEER_STATS,
 WMI_10_4_SERVICE_MESH_11S,
 WMI_10_4_SERVICE_TX_MODE_PUSH_ONLY,
 WMI_10_4_SERVICE_TX_MODE_PUSH_PULL,
 WMI_10_4_SERVICE_TX_MODE_DYNAMIC,
};

static inline __attribute__((no_instrument_function)) char *wmi_service_name(int service_id)
{


 switch (service_id) {
 case WMI_SERVICE_BEACON_OFFLOAD: return "WMI_SERVICE_BEACON_OFFLOAD";
 case WMI_SERVICE_SCAN_OFFLOAD: return "WMI_SERVICE_SCAN_OFFLOAD";
 case WMI_SERVICE_ROAM_OFFLOAD: return "WMI_SERVICE_ROAM_OFFLOAD";
 case WMI_SERVICE_BCN_MISS_OFFLOAD: return "WMI_SERVICE_BCN_MISS_OFFLOAD";
 case WMI_SERVICE_STA_PWRSAVE: return "WMI_SERVICE_STA_PWRSAVE";
 case WMI_SERVICE_STA_ADVANCED_PWRSAVE: return "WMI_SERVICE_STA_ADVANCED_PWRSAVE";
 case WMI_SERVICE_AP_UAPSD: return "WMI_SERVICE_AP_UAPSD";
 case WMI_SERVICE_AP_DFS: return "WMI_SERVICE_AP_DFS";
 case WMI_SERVICE_11AC: return "WMI_SERVICE_11AC";
 case WMI_SERVICE_BLOCKACK: return "WMI_SERVICE_BLOCKACK";
 case WMI_SERVICE_PHYERR: return "WMI_SERVICE_PHYERR";
 case WMI_SERVICE_BCN_FILTER: return "WMI_SERVICE_BCN_FILTER";
 case WMI_SERVICE_RTT: return "WMI_SERVICE_RTT";
 case WMI_SERVICE_RATECTRL: return "WMI_SERVICE_RATECTRL";
 case WMI_SERVICE_WOW: return "WMI_SERVICE_WOW";
 case WMI_SERVICE_RATECTRL_CACHE: return "WMI_SERVICE_RATECTRL_CACHE";
 case WMI_SERVICE_IRAM_TIDS: return "WMI_SERVICE_IRAM_TIDS";
 case WMI_SERVICE_ARPNS_OFFLOAD: return "WMI_SERVICE_ARPNS_OFFLOAD";
 case WMI_SERVICE_NLO: return "WMI_SERVICE_NLO";
 case WMI_SERVICE_GTK_OFFLOAD: return "WMI_SERVICE_GTK_OFFLOAD";
 case WMI_SERVICE_SCAN_SCH: return "WMI_SERVICE_SCAN_SCH";
 case WMI_SERVICE_CSA_OFFLOAD: return "WMI_SERVICE_CSA_OFFLOAD";
 case WMI_SERVICE_CHATTER: return "WMI_SERVICE_CHATTER";
 case WMI_SERVICE_COEX_FREQAVOID: return "WMI_SERVICE_COEX_FREQAVOID";
 case WMI_SERVICE_PACKET_POWER_SAVE: return "WMI_SERVICE_PACKET_POWER_SAVE";
 case WMI_SERVICE_FORCE_FW_HANG: return "WMI_SERVICE_FORCE_FW_HANG";
 case WMI_SERVICE_GPIO: return "WMI_SERVICE_GPIO";
 case WMI_SERVICE_STA_DTIM_PS_MODULATED_DTIM: return "WMI_SERVICE_STA_DTIM_PS_MODULATED_DTIM";
 case WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG: return "WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG";
 case WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG: return "WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG";
 case WMI_SERVICE_STA_KEEP_ALIVE: return "WMI_SERVICE_STA_KEEP_ALIVE";
 case WMI_SERVICE_TX_ENCAP: return "WMI_SERVICE_TX_ENCAP";
 case WMI_SERVICE_BURST: return "WMI_SERVICE_BURST";
 case WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT: return "WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT";
 case WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT: return "WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT";
 case WMI_SERVICE_ROAM_SCAN_OFFLOAD: return "WMI_SERVICE_ROAM_SCAN_OFFLOAD";
 case WMI_SERVICE_AP_PS_DETECT_OUT_OF_SYNC: return "WMI_SERVICE_AP_PS_DETECT_OUT_OF_SYNC";
 case WMI_SERVICE_EARLY_RX: return "WMI_SERVICE_EARLY_RX";
 case WMI_SERVICE_STA_SMPS: return "WMI_SERVICE_STA_SMPS";
 case WMI_SERVICE_FWTEST: return "WMI_SERVICE_FWTEST";
 case WMI_SERVICE_STA_WMMAC: return "WMI_SERVICE_STA_WMMAC";
 case WMI_SERVICE_TDLS: return "WMI_SERVICE_TDLS";
 case WMI_SERVICE_MCC_BCN_INTERVAL_CHANGE: return "WMI_SERVICE_MCC_BCN_INTERVAL_CHANGE";
 case WMI_SERVICE_ADAPTIVE_OCS: return "WMI_SERVICE_ADAPTIVE_OCS";
 case WMI_SERVICE_BA_SSN_SUPPORT: return "WMI_SERVICE_BA_SSN_SUPPORT";
 case WMI_SERVICE_FILTER_IPSEC_NATKEEPALIVE: return "WMI_SERVICE_FILTER_IPSEC_NATKEEPALIVE";
 case WMI_SERVICE_WLAN_HB: return "WMI_SERVICE_WLAN_HB";
 case WMI_SERVICE_LTE_ANT_SHARE_SUPPORT: return "WMI_SERVICE_LTE_ANT_SHARE_SUPPORT";
 case WMI_SERVICE_BATCH_SCAN: return "WMI_SERVICE_BATCH_SCAN";
 case WMI_SERVICE_QPOWER: return "WMI_SERVICE_QPOWER";
 case WMI_SERVICE_PLMREQ: return "WMI_SERVICE_PLMREQ";
 case WMI_SERVICE_THERMAL_MGMT: return "WMI_SERVICE_THERMAL_MGMT";
 case WMI_SERVICE_RMC: return "WMI_SERVICE_RMC";
 case WMI_SERVICE_MHF_OFFLOAD: return "WMI_SERVICE_MHF_OFFLOAD";
 case WMI_SERVICE_COEX_SAR: return "WMI_SERVICE_COEX_SAR";
 case WMI_SERVICE_BCN_TXRATE_OVERRIDE: return "WMI_SERVICE_BCN_TXRATE_OVERRIDE";
 case WMI_SERVICE_NAN: return "WMI_SERVICE_NAN";
 case WMI_SERVICE_L1SS_STAT: return "WMI_SERVICE_L1SS_STAT";
 case WMI_SERVICE_ESTIMATE_LINKSPEED: return "WMI_SERVICE_ESTIMATE_LINKSPEED";
 case WMI_SERVICE_OBSS_SCAN: return "WMI_SERVICE_OBSS_SCAN";
 case WMI_SERVICE_TDLS_OFFCHAN: return "WMI_SERVICE_TDLS_OFFCHAN";
 case WMI_SERVICE_TDLS_UAPSD_BUFFER_STA: return "WMI_SERVICE_TDLS_UAPSD_BUFFER_STA";
 case WMI_SERVICE_TDLS_UAPSD_SLEEP_STA: return "WMI_SERVICE_TDLS_UAPSD_SLEEP_STA";
 case WMI_SERVICE_IBSS_PWRSAVE: return "WMI_SERVICE_IBSS_PWRSAVE";
 case WMI_SERVICE_LPASS: return "WMI_SERVICE_LPASS";
 case WMI_SERVICE_EXTSCAN: return "WMI_SERVICE_EXTSCAN";
 case WMI_SERVICE_D0WOW: return "WMI_SERVICE_D0WOW";
 case WMI_SERVICE_HSOFFLOAD: return "WMI_SERVICE_HSOFFLOAD";
 case WMI_SERVICE_ROAM_HO_OFFLOAD: return "WMI_SERVICE_ROAM_HO_OFFLOAD";
 case WMI_SERVICE_RX_FULL_REORDER: return "WMI_SERVICE_RX_FULL_REORDER";
 case WMI_SERVICE_DHCP_OFFLOAD: return "WMI_SERVICE_DHCP_OFFLOAD";
 case WMI_SERVICE_STA_RX_IPA_OFFLOAD_SUPPORT: return "WMI_SERVICE_STA_RX_IPA_OFFLOAD_SUPPORT";
 case WMI_SERVICE_MDNS_OFFLOAD: return "WMI_SERVICE_MDNS_OFFLOAD";
 case WMI_SERVICE_SAP_AUTH_OFFLOAD: return "WMI_SERVICE_SAP_AUTH_OFFLOAD";
 case WMI_SERVICE_ATF: return "WMI_SERVICE_ATF";
 case WMI_SERVICE_COEX_GPIO: return "WMI_SERVICE_COEX_GPIO";
 case WMI_SERVICE_ENHANCED_PROXY_STA: return "WMI_SERVICE_ENHANCED_PROXY_STA";
 case WMI_SERVICE_TT: return "WMI_SERVICE_TT";
 case WMI_SERVICE_PEER_CACHING: return "WMI_SERVICE_PEER_CACHING";
 case WMI_SERVICE_AUX_SPECTRAL_INTF: return "WMI_SERVICE_AUX_SPECTRAL_INTF";
 case WMI_SERVICE_AUX_CHAN_LOAD_INTF: return "WMI_SERVICE_AUX_CHAN_LOAD_INTF";
 case WMI_SERVICE_BSS_CHANNEL_INFO_64: return "WMI_SERVICE_BSS_CHANNEL_INFO_64";
 case WMI_SERVICE_EXT_RES_CFG_SUPPORT: return "WMI_SERVICE_EXT_RES_CFG_SUPPORT";
 case WMI_SERVICE_MESH_11S: return "WMI_SERVICE_MESH_11S";
 case WMI_SERVICE_MESH_NON_11S: return "WMI_SERVICE_MESH_NON_11S";
 case WMI_SERVICE_PEER_STATS: return "WMI_SERVICE_PEER_STATS";
 case WMI_SERVICE_RESTRT_CHNL_SUPPORT: return "WMI_SERVICE_RESTRT_CHNL_SUPPORT";
 case WMI_SERVICE_TX_MODE_PUSH_ONLY: return "WMI_SERVICE_TX_MODE_PUSH_ONLY";
 case WMI_SERVICE_TX_MODE_PUSH_PULL: return "WMI_SERVICE_TX_MODE_PUSH_PULL";
 case WMI_SERVICE_TX_MODE_DYNAMIC: return "WMI_SERVICE_TX_MODE_DYNAMIC";
 default:
  return ((void *)0);
 }


}
# 426 "drivers/net/wireless/ath/ath10k/wmi.h"
static inline __attribute__((no_instrument_function)) void wmi_10x_svc_map(const __le32 *in, unsigned long *out,
       size_t len)
{
 do { if ((((WMI_10X_SERVICE_BEACON_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BEACON_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BEACON_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BEACON_OFFLOAD, out); } while (0)
                                        ;
 do { if ((((WMI_10X_SERVICE_SCAN_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_SCAN_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_SCAN_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SCAN_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_10X_SERVICE_ROAM_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_ROAM_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_ROAM_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ROAM_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_10X_SERVICE_BCN_MISS_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BCN_MISS_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BCN_MISS_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_MISS_OFFLOAD, out); } while (0)
                                          ;
 do { if ((((WMI_10X_SERVICE_STA_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_STA_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_STA_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_PWRSAVE, out); } while (0)
                                     ;
 do { if ((((WMI_10X_SERVICE_STA_ADVANCED_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_STA_ADVANCED_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_STA_ADVANCED_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_ADVANCED_PWRSAVE, out); } while (0)
                                              ;
 do { if ((((WMI_10X_SERVICE_AP_UAPSD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_AP_UAPSD)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_AP_UAPSD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_UAPSD, out); } while (0)
                                  ;
 do { if ((((WMI_10X_SERVICE_AP_DFS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_AP_DFS)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_AP_DFS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_DFS, out); } while (0)
                                ;
 do { if ((((WMI_10X_SERVICE_11AC)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_11AC)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_11AC)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_11AC, out); } while (0)
                              ;
 do { if ((((WMI_10X_SERVICE_BLOCKACK)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BLOCKACK)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BLOCKACK)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BLOCKACK, out); } while (0)
                                  ;
 do { if ((((WMI_10X_SERVICE_PHYERR)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_PHYERR)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_PHYERR)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PHYERR, out); } while (0)
                                ;
 do { if ((((WMI_10X_SERVICE_BCN_FILTER)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BCN_FILTER)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BCN_FILTER)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_FILTER, out); } while (0)
                                    ;
 do { if ((((WMI_10X_SERVICE_RTT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_RTT)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_RTT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RTT, out); } while (0)
                             ;
 do { if ((((WMI_10X_SERVICE_RATECTRL)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_RATECTRL)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_RATECTRL)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL, out); } while (0)
                                  ;
 do { if ((((WMI_10X_SERVICE_WOW)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_WOW)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_WOW)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_WOW, out); } while (0)
                             ;
 do { if ((((WMI_10X_SERVICE_RATECTRL_CACHE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_RATECTRL_CACHE)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_RATECTRL_CACHE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL_CACHE, out); } while (0)
                                        ;
 do { if ((((WMI_10X_SERVICE_IRAM_TIDS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_IRAM_TIDS)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_IRAM_TIDS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_IRAM_TIDS, out); } while (0)
                                   ;
 do { if ((((WMI_10X_SERVICE_BURST)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BURST)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BURST)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BURST, out); } while (0)
                               ;
 do { if ((((WMI_10X_SERVICE_SMART_ANTENNA_SW_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_SMART_ANTENNA_SW_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_SMART_ANTENNA_SW_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT, out); } while (0)
                                                  ;
 do { if ((((WMI_10X_SERVICE_FORCE_FW_HANG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_FORCE_FW_HANG)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_FORCE_FW_HANG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_FORCE_FW_HANG, out); } while (0)
                                       ;
 do { if ((((WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, out); } while (0)
                                                  ;
 do { if ((((WMI_10X_SERVICE_ATF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_ATF)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_ATF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ATF, out); } while (0)
                             ;
 do { if ((((WMI_10X_SERVICE_COEX_GPIO)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_COEX_GPIO)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_COEX_GPIO)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_COEX_GPIO, out); } while (0)
                                   ;
 do { if ((((WMI_10X_SERVICE_AUX_SPECTRAL_INTF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_AUX_SPECTRAL_INTF)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_AUX_SPECTRAL_INTF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AUX_SPECTRAL_INTF, out); } while (0)
                                           ;
 do { if ((((WMI_10X_SERVICE_AUX_CHAN_LOAD_INTF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_AUX_CHAN_LOAD_INTF)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_AUX_CHAN_LOAD_INTF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AUX_CHAN_LOAD_INTF, out); } while (0)
                                            ;
 do { if ((((WMI_10X_SERVICE_BSS_CHANNEL_INFO_64)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_BSS_CHANNEL_INFO_64)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_BSS_CHANNEL_INFO_64)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BSS_CHANNEL_INFO_64, out); } while (0)
                                             ;
 do { if ((((WMI_10X_SERVICE_MESH)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_MESH)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_MESH)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_MESH_11S, out); } while (0)
                                  ;
 do { if ((((WMI_10X_SERVICE_EXT_RES_CFG_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_EXT_RES_CFG_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_EXT_RES_CFG_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_EXT_RES_CFG_SUPPORT, out); } while (0)
                                             ;
 do { if ((((WMI_10X_SERVICE_PEER_STATS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10X_SERVICE_PEER_STATS)) / (sizeof(u32))])) & (1UL << (((WMI_10X_SERVICE_PEER_STATS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PEER_STATS, out); } while (0)
                                    ;
}

static inline __attribute__((no_instrument_function)) void wmi_main_svc_map(const __le32 *in, unsigned long *out,
        size_t len)
{
 do { if ((((WMI_MAIN_SERVICE_BEACON_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_BEACON_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_BEACON_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BEACON_OFFLOAD, out); } while (0)
                                        ;
 do { if ((((WMI_MAIN_SERVICE_SCAN_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_SCAN_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_SCAN_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SCAN_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_MAIN_SERVICE_ROAM_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_ROAM_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_ROAM_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ROAM_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_MAIN_SERVICE_BCN_MISS_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_BCN_MISS_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_BCN_MISS_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_MISS_OFFLOAD, out); } while (0)
                                          ;
 do { if ((((WMI_MAIN_SERVICE_STA_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_PWRSAVE, out); } while (0)
                                     ;
 do { if ((((WMI_MAIN_SERVICE_STA_ADVANCED_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_ADVANCED_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_ADVANCED_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_ADVANCED_PWRSAVE, out); } while (0)
                                              ;
 do { if ((((WMI_MAIN_SERVICE_AP_UAPSD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_AP_UAPSD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_AP_UAPSD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_UAPSD, out); } while (0)
                                  ;
 do { if ((((WMI_MAIN_SERVICE_AP_DFS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_AP_DFS)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_AP_DFS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_DFS, out); } while (0)
                                ;
 do { if ((((WMI_MAIN_SERVICE_11AC)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_11AC)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_11AC)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_11AC, out); } while (0)
                              ;
 do { if ((((WMI_MAIN_SERVICE_BLOCKACK)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_BLOCKACK)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_BLOCKACK)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BLOCKACK, out); } while (0)
                                  ;
 do { if ((((WMI_MAIN_SERVICE_PHYERR)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_PHYERR)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_PHYERR)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PHYERR, out); } while (0)
                                ;
 do { if ((((WMI_MAIN_SERVICE_BCN_FILTER)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_BCN_FILTER)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_BCN_FILTER)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_FILTER, out); } while (0)
                                    ;
 do { if ((((WMI_MAIN_SERVICE_RTT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_RTT)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_RTT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RTT, out); } while (0)
                             ;
 do { if ((((WMI_MAIN_SERVICE_RATECTRL)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_RATECTRL)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_RATECTRL)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL, out); } while (0)
                                  ;
 do { if ((((WMI_MAIN_SERVICE_WOW)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_WOW)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_WOW)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_WOW, out); } while (0)
                             ;
 do { if ((((WMI_MAIN_SERVICE_RATECTRL_CACHE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_RATECTRL_CACHE)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_RATECTRL_CACHE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL_CACHE, out); } while (0)
                                        ;
 do { if ((((WMI_MAIN_SERVICE_IRAM_TIDS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_IRAM_TIDS)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_IRAM_TIDS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_IRAM_TIDS, out); } while (0)
                                   ;
 do { if ((((WMI_MAIN_SERVICE_ARPNS_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_ARPNS_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_ARPNS_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ARPNS_OFFLOAD, out); } while (0)
                                       ;
 do { if ((((WMI_MAIN_SERVICE_NLO)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_NLO)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_NLO)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_NLO, out); } while (0)
                             ;
 do { if ((((WMI_MAIN_SERVICE_GTK_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_GTK_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_GTK_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_GTK_OFFLOAD, out); } while (0)
                                     ;
 do { if ((((WMI_MAIN_SERVICE_SCAN_SCH)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_SCAN_SCH)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_SCAN_SCH)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SCAN_SCH, out); } while (0)
                                  ;
 do { if ((((WMI_MAIN_SERVICE_CSA_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_CSA_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_CSA_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_CSA_OFFLOAD, out); } while (0)
                                     ;
 do { if ((((WMI_MAIN_SERVICE_CHATTER)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_CHATTER)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_CHATTER)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_CHATTER, out); } while (0)
                                 ;
 do { if ((((WMI_MAIN_SERVICE_COEX_FREQAVOID)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_COEX_FREQAVOID)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_COEX_FREQAVOID)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_COEX_FREQAVOID, out); } while (0)
                                        ;
 do { if ((((WMI_MAIN_SERVICE_PACKET_POWER_SAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_PACKET_POWER_SAVE)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_PACKET_POWER_SAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PACKET_POWER_SAVE, out); } while (0)
                                           ;
 do { if ((((WMI_MAIN_SERVICE_FORCE_FW_HANG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_FORCE_FW_HANG)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_FORCE_FW_HANG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_FORCE_FW_HANG, out); } while (0)
                                       ;
 do { if ((((WMI_MAIN_SERVICE_GPIO)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_GPIO)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_GPIO)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_GPIO, out); } while (0)
                              ;
 do { if ((((WMI_MAIN_SERVICE_STA_DTIM_PS_MODULATED_DTIM)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_DTIM_PS_MODULATED_DTIM)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_DTIM_PS_MODULATED_DTIM)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_DTIM_PS_MODULATED_DTIM, out); } while (0)
                                                    ;
 do { if ((((WMI_MAIN_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG, out); } while (0)
                                                   ;
 do { if ((((WMI_MAIN_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG, out); } while (0)
                                                 ;
 do { if ((((WMI_MAIN_SERVICE_STA_KEEP_ALIVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_STA_KEEP_ALIVE)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_STA_KEEP_ALIVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_KEEP_ALIVE, out); } while (0)
                                        ;
 do { if ((((WMI_MAIN_SERVICE_TX_ENCAP)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_MAIN_SERVICE_TX_ENCAP)) / (sizeof(u32))])) & (1UL << (((WMI_MAIN_SERVICE_TX_ENCAP)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TX_ENCAP, out); } while (0)
                                  ;
}

static inline __attribute__((no_instrument_function)) void wmi_10_4_svc_map(const __le32 *in, unsigned long *out,
        size_t len)
{
 do { if ((((WMI_10_4_SERVICE_BEACON_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BEACON_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BEACON_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BEACON_OFFLOAD, out); } while (0)
                                        ;
 do { if ((((WMI_10_4_SERVICE_SCAN_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_SCAN_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_SCAN_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SCAN_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_10_4_SERVICE_ROAM_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_ROAM_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_ROAM_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ROAM_OFFLOAD, out); } while (0)
                                      ;
 do { if ((((WMI_10_4_SERVICE_BCN_MISS_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BCN_MISS_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BCN_MISS_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_MISS_OFFLOAD, out); } while (0)
                                          ;
 do { if ((((WMI_10_4_SERVICE_STA_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_STA_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_STA_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_PWRSAVE, out); } while (0)
                                     ;
 do { if ((((WMI_10_4_SERVICE_STA_ADVANCED_PWRSAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_STA_ADVANCED_PWRSAVE)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_STA_ADVANCED_PWRSAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_ADVANCED_PWRSAVE, out); } while (0)
                                              ;
 do { if ((((WMI_10_4_SERVICE_AP_UAPSD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_AP_UAPSD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_AP_UAPSD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_UAPSD, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_AP_DFS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_AP_DFS)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_AP_DFS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_DFS, out); } while (0)
                                ;
 do { if ((((WMI_10_4_SERVICE_11AC)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_11AC)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_11AC)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_11AC, out); } while (0)
                              ;
 do { if ((((WMI_10_4_SERVICE_BLOCKACK)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BLOCKACK)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BLOCKACK)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BLOCKACK, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_PHYERR)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_PHYERR)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_PHYERR)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PHYERR, out); } while (0)
                                ;
 do { if ((((WMI_10_4_SERVICE_BCN_FILTER)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BCN_FILTER)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BCN_FILTER)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BCN_FILTER, out); } while (0)
                                    ;
 do { if ((((WMI_10_4_SERVICE_RTT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_RTT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_RTT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RTT, out); } while (0)
                             ;
 do { if ((((WMI_10_4_SERVICE_RATECTRL)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_RATECTRL)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_RATECTRL)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_WOW)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_WOW)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_WOW)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_WOW, out); } while (0)
                             ;
 do { if ((((WMI_10_4_SERVICE_RATECTRL_CACHE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_RATECTRL_CACHE)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_RATECTRL_CACHE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RATECTRL_CACHE, out); } while (0)
                                        ;
 do { if ((((WMI_10_4_SERVICE_IRAM_TIDS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_IRAM_TIDS)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_IRAM_TIDS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_IRAM_TIDS, out); } while (0)
                                   ;
 do { if ((((WMI_10_4_SERVICE_BURST)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BURST)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BURST)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BURST, out); } while (0)
                               ;
 do { if ((((WMI_10_4_SERVICE_SMART_ANTENNA_SW_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_SMART_ANTENNA_SW_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_SMART_ANTENNA_SW_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT, out); } while (0)
                                                  ;
 do { if ((((WMI_10_4_SERVICE_GTK_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_GTK_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_GTK_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_GTK_OFFLOAD, out); } while (0)
                                     ;
 do { if ((((WMI_10_4_SERVICE_SCAN_SCH)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_SCAN_SCH)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_SCAN_SCH)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SCAN_SCH, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_CSA_OFFLOAD)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_CSA_OFFLOAD)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_CSA_OFFLOAD)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_CSA_OFFLOAD, out); } while (0)
                                     ;
 do { if ((((WMI_10_4_SERVICE_CHATTER)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_CHATTER)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_CHATTER)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_CHATTER, out); } while (0)
                                 ;
 do { if ((((WMI_10_4_SERVICE_COEX_FREQAVOID)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_COEX_FREQAVOID)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_COEX_FREQAVOID)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_COEX_FREQAVOID, out); } while (0)
                                        ;
 do { if ((((WMI_10_4_SERVICE_PACKET_POWER_SAVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_PACKET_POWER_SAVE)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_PACKET_POWER_SAVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PACKET_POWER_SAVE, out); } while (0)
                                           ;
 do { if ((((WMI_10_4_SERVICE_FORCE_FW_HANG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_FORCE_FW_HANG)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_FORCE_FW_HANG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_FORCE_FW_HANG, out); } while (0)
                                       ;
 do { if ((((WMI_10_4_SERVICE_SMART_ANTENNA_HW_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_SMART_ANTENNA_HW_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_SMART_ANTENNA_HW_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, out); } while (0)
                                                  ;
 do { if ((((WMI_10_4_SERVICE_GPIO)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_GPIO)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_GPIO)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_GPIO, out); } while (0)
                              ;
 do { if ((((WMI_10_4_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG, out); } while (0)
                                                   ;
 do { if ((((WMI_10_4_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_STA_UAPSD_VAR_AUTO_TRIG)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG, out); } while (0)
                                                 ;
 do { if ((((WMI_10_4_SERVICE_STA_KEEP_ALIVE)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_STA_KEEP_ALIVE)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_STA_KEEP_ALIVE)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_STA_KEEP_ALIVE, out); } while (0)
                                        ;
 do { if ((((WMI_10_4_SERVICE_TX_ENCAP)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_TX_ENCAP)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_TX_ENCAP)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TX_ENCAP, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_AP_PS_DETECT_OUT_OF_SYNC)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_AP_PS_DETECT_OUT_OF_SYNC)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_AP_PS_DETECT_OUT_OF_SYNC)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AP_PS_DETECT_OUT_OF_SYNC, out); } while (0)
                                                  ;
 do { if ((((WMI_10_4_SERVICE_EARLY_RX)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_EARLY_RX)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_EARLY_RX)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_EARLY_RX, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_ENHANCED_PROXY_STA)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_ENHANCED_PROXY_STA)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_ENHANCED_PROXY_STA)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ENHANCED_PROXY_STA, out); } while (0)
                                            ;
 do { if ((((WMI_10_4_SERVICE_TT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_TT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_TT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TT, out); } while (0)
                            ;
 do { if ((((WMI_10_4_SERVICE_ATF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_ATF)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_ATF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_ATF, out); } while (0)
                             ;
 do { if ((((WMI_10_4_SERVICE_PEER_CACHING)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_PEER_CACHING)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_PEER_CACHING)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PEER_CACHING, out); } while (0)
                                      ;
 do { if ((((WMI_10_4_SERVICE_COEX_GPIO)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_COEX_GPIO)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_COEX_GPIO)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_COEX_GPIO, out); } while (0)
                                   ;
 do { if ((((WMI_10_4_SERVICE_AUX_SPECTRAL_INTF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_AUX_SPECTRAL_INTF)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_AUX_SPECTRAL_INTF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AUX_SPECTRAL_INTF, out); } while (0)
                                           ;
 do { if ((((WMI_10_4_SERVICE_AUX_CHAN_LOAD_INTF)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_AUX_CHAN_LOAD_INTF)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_AUX_CHAN_LOAD_INTF)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_AUX_CHAN_LOAD_INTF, out); } while (0)
                                            ;
 do { if ((((WMI_10_4_SERVICE_BSS_CHANNEL_INFO_64)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_BSS_CHANNEL_INFO_64)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_BSS_CHANNEL_INFO_64)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_BSS_CHANNEL_INFO_64, out); } while (0)
                                             ;
 do { if ((((WMI_10_4_SERVICE_EXT_RES_CFG_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_EXT_RES_CFG_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_EXT_RES_CFG_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_EXT_RES_CFG_SUPPORT, out); } while (0)
                                             ;
 do { if ((((WMI_10_4_SERVICE_MESH_NON_11S)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_MESH_NON_11S)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_MESH_NON_11S)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_MESH_NON_11S, out); } while (0)
                                      ;
 do { if ((((WMI_10_4_SERVICE_RESTRT_CHNL_SUPPORT)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_RESTRT_CHNL_SUPPORT)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_RESTRT_CHNL_SUPPORT)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_RESTRT_CHNL_SUPPORT, out); } while (0)
                                             ;
 do { if ((((WMI_10_4_SERVICE_PEER_STATS)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_PEER_STATS)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_PEER_STATS)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_PEER_STATS, out); } while (0)
                                    ;
 do { if ((((WMI_10_4_SERVICE_MESH_11S)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_MESH_11S)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_MESH_11S)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_MESH_11S, out); } while (0)
                                  ;
 do { if ((((WMI_10_4_SERVICE_TX_MODE_PUSH_ONLY)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_TX_MODE_PUSH_ONLY)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_TX_MODE_PUSH_ONLY)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TX_MODE_PUSH_ONLY, out); } while (0)
                                           ;
 do { if ((((WMI_10_4_SERVICE_TX_MODE_PUSH_PULL)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_TX_MODE_PUSH_PULL)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_TX_MODE_PUSH_PULL)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TX_MODE_PUSH_PULL, out); } while (0)
                                           ;
 do { if ((((WMI_10_4_SERVICE_TX_MODE_DYNAMIC)) < ((len)) && (( __u32)(__le32)(((in))[((WMI_10_4_SERVICE_TX_MODE_DYNAMIC)) / (sizeof(u32))])) & (1UL << (((WMI_10_4_SERVICE_TX_MODE_DYNAMIC)) % (sizeof(u32)))))) __set_bit(WMI_SERVICE_TX_MODE_DYNAMIC, out); } while (0)
                                         ;
}




struct wmi_mac_addr {
 union {
  u8 addr[6];
  struct {
   u32 word0;
   u32 word1;
  } __attribute__((packed));
 } __attribute__((packed));
} __attribute__((packed));

struct wmi_cmd_map {
 u32 init_cmdid;
 u32 start_scan_cmdid;
 u32 stop_scan_cmdid;
 u32 scan_chan_list_cmdid;
 u32 scan_sch_prio_tbl_cmdid;
 u32 pdev_set_regdomain_cmdid;
 u32 pdev_set_channel_cmdid;
 u32 pdev_set_param_cmdid;
 u32 pdev_pktlog_enable_cmdid;
 u32 pdev_pktlog_disable_cmdid;
 u32 pdev_set_wmm_params_cmdid;
 u32 pdev_set_ht_cap_ie_cmdid;
 u32 pdev_set_vht_cap_ie_cmdid;
 u32 pdev_set_dscp_tid_map_cmdid;
 u32 pdev_set_quiet_mode_cmdid;
 u32 pdev_green_ap_ps_enable_cmdid;
 u32 pdev_get_tpc_config_cmdid;
 u32 pdev_set_base_macaddr_cmdid;
 u32 vdev_create_cmdid;
 u32 vdev_delete_cmdid;
 u32 vdev_start_request_cmdid;
 u32 vdev_restart_request_cmdid;
 u32 vdev_up_cmdid;
 u32 vdev_stop_cmdid;
 u32 vdev_down_cmdid;
 u32 vdev_set_param_cmdid;
 u32 vdev_install_key_cmdid;
 u32 peer_create_cmdid;
 u32 peer_delete_cmdid;
 u32 peer_flush_tids_cmdid;
 u32 peer_set_param_cmdid;
 u32 peer_assoc_cmdid;
 u32 peer_add_wds_entry_cmdid;
 u32 peer_remove_wds_entry_cmdid;
 u32 peer_mcast_group_cmdid;
 u32 bcn_tx_cmdid;
 u32 pdev_send_bcn_cmdid;
 u32 bcn_tmpl_cmdid;
 u32 bcn_filter_rx_cmdid;
 u32 prb_req_filter_rx_cmdid;
 u32 mgmt_tx_cmdid;
 u32 prb_tmpl_cmdid;
 u32 addba_clear_resp_cmdid;
 u32 addba_send_cmdid;
 u32 addba_status_cmdid;
 u32 delba_send_cmdid;
 u32 addba_set_resp_cmdid;
 u32 send_singleamsdu_cmdid;
 u32 sta_powersave_mode_cmdid;
 u32 sta_powersave_param_cmdid;
 u32 sta_mimo_ps_mode_cmdid;
 u32 pdev_dfs_enable_cmdid;
 u32 pdev_dfs_disable_cmdid;
 u32 roam_scan_mode;
 u32 roam_scan_rssi_threshold;
 u32 roam_scan_period;
 u32 roam_scan_rssi_change_threshold;
 u32 roam_ap_profile;
 u32 ofl_scan_add_ap_profile;
 u32 ofl_scan_remove_ap_profile;
 u32 ofl_scan_period;
 u32 p2p_dev_set_device_info;
 u32 p2p_dev_set_discoverability;
 u32 p2p_go_set_beacon_ie;
 u32 p2p_go_set_probe_resp_ie;
 u32 p2p_set_vendor_ie_data_cmdid;
 u32 ap_ps_peer_param_cmdid;
 u32 ap_ps_peer_uapsd_coex_cmdid;
 u32 peer_rate_retry_sched_cmdid;
 u32 wlan_profile_trigger_cmdid;
 u32 wlan_profile_set_hist_intvl_cmdid;
 u32 wlan_profile_get_profile_data_cmdid;
 u32 wlan_profile_enable_profile_id_cmdid;
 u32 wlan_profile_list_profile_id_cmdid;
 u32 pdev_suspend_cmdid;
 u32 pdev_resume_cmdid;
 u32 add_bcn_filter_cmdid;
 u32 rmv_bcn_filter_cmdid;
 u32 wow_add_wake_pattern_cmdid;
 u32 wow_del_wake_pattern_cmdid;
 u32 wow_enable_disable_wake_event_cmdid;
 u32 wow_enable_cmdid;
 u32 wow_hostwakeup_from_sleep_cmdid;
 u32 rtt_measreq_cmdid;
 u32 rtt_tsf_cmdid;
 u32 vdev_spectral_scan_configure_cmdid;
 u32 vdev_spectral_scan_enable_cmdid;
 u32 request_stats_cmdid;
 u32 set_arp_ns_offload_cmdid;
 u32 network_list_offload_config_cmdid;
 u32 gtk_offload_cmdid;
 u32 csa_offload_enable_cmdid;
 u32 csa_offload_chanswitch_cmdid;
 u32 chatter_set_mode_cmdid;
 u32 peer_tid_addba_cmdid;
 u32 peer_tid_delba_cmdid;
 u32 sta_dtim_ps_method_cmdid;
 u32 sta_uapsd_auto_trig_cmdid;
 u32 sta_keepalive_cmd;
 u32 echo_cmdid;
 u32 pdev_utf_cmdid;
 u32 dbglog_cfg_cmdid;
 u32 pdev_qvit_cmdid;
 u32 pdev_ftm_intg_cmdid;
 u32 vdev_set_keepalive_cmdid;
 u32 vdev_get_keepalive_cmdid;
 u32 force_fw_hang_cmdid;
 u32 gpio_config_cmdid;
 u32 gpio_output_cmdid;
 u32 pdev_get_temperature_cmdid;
 u32 vdev_set_wmm_params_cmdid;
 u32 tdls_set_state_cmdid;
 u32 tdls_peer_update_cmdid;
 u32 adaptive_qcs_cmdid;
 u32 scan_update_request_cmdid;
 u32 vdev_standby_response_cmdid;
 u32 vdev_resume_response_cmdid;
 u32 wlan_peer_caching_add_peer_cmdid;
 u32 wlan_peer_caching_evict_peer_cmdid;
 u32 wlan_peer_caching_restore_peer_cmdid;
 u32 wlan_peer_caching_print_all_peers_info_cmdid;
 u32 peer_update_wds_entry_cmdid;
 u32 peer_add_proxy_sta_entry_cmdid;
 u32 rtt_keepalive_cmdid;
 u32 oem_req_cmdid;
 u32 nan_cmdid;
 u32 vdev_ratemask_cmdid;
 u32 qboost_cfg_cmdid;
 u32 pdev_smart_ant_enable_cmdid;
 u32 pdev_smart_ant_set_rx_antenna_cmdid;
 u32 peer_smart_ant_set_tx_antenna_cmdid;
 u32 peer_smart_ant_set_train_info_cmdid;
 u32 peer_smart_ant_set_node_config_ops_cmdid;
 u32 pdev_set_antenna_switch_table_cmdid;
 u32 pdev_set_ctl_table_cmdid;
 u32 pdev_set_mimogain_table_cmdid;
 u32 pdev_ratepwr_table_cmdid;
 u32 pdev_ratepwr_chainmsk_table_cmdid;
 u32 pdev_fips_cmdid;
 u32 tt_set_conf_cmdid;
 u32 fwtest_cmdid;
 u32 vdev_atf_request_cmdid;
 u32 peer_atf_request_cmdid;
 u32 pdev_get_ani_cck_config_cmdid;
 u32 pdev_get_ani_ofdm_config_cmdid;
 u32 pdev_reserve_ast_entry_cmdid;
 u32 pdev_get_nfcal_power_cmdid;
 u32 pdev_get_tpc_cmdid;
 u32 pdev_get_ast_info_cmdid;
 u32 vdev_set_dscp_tid_map_cmdid;
 u32 pdev_get_info_cmdid;
 u32 vdev_get_info_cmdid;
 u32 vdev_filter_neighbor_rx_packets_cmdid;
 u32 mu_cal_start_cmdid;
 u32 set_cca_params_cmdid;
 u32 pdev_bss_chan_info_request_cmdid;
 u32 pdev_enable_adaptive_cca_cmdid;
 u32 ext_resource_cfg_cmdid;
};




enum wmi_cmd_group {

 WMI_GRP_START = 0x3,
 WMI_GRP_SCAN = WMI_GRP_START,
 WMI_GRP_PDEV,
 WMI_GRP_VDEV,
 WMI_GRP_PEER,
 WMI_GRP_MGMT,
 WMI_GRP_BA_NEG,
 WMI_GRP_STA_PS,
 WMI_GRP_DFS,
 WMI_GRP_ROAM,
 WMI_GRP_OFL_SCAN,
 WMI_GRP_P2P,
 WMI_GRP_AP_PS,
 WMI_GRP_RATE_CTRL,
 WMI_GRP_PROFILE,
 WMI_GRP_SUSPEND,
 WMI_GRP_BCN_FILTER,
 WMI_GRP_WOW,
 WMI_GRP_RTT,
 WMI_GRP_SPECTRAL,
 WMI_GRP_STATS,
 WMI_GRP_ARP_NS_OFL,
 WMI_GRP_NLO_OFL,
 WMI_GRP_GTK_OFL,
 WMI_GRP_CSA_OFL,
 WMI_GRP_CHATTER,
 WMI_GRP_TID_ADDBA,
 WMI_GRP_MISC,
 WMI_GRP_GPIO,
};







enum wmi_cmd_id {
 WMI_INIT_CMDID = 0x1,


 WMI_START_SCAN_CMDID = (((WMI_GRP_SCAN) << 12) | 0x1),
 WMI_STOP_SCAN_CMDID,
 WMI_SCAN_CHAN_LIST_CMDID,
 WMI_SCAN_SCH_PRIO_TBL_CMDID,


 WMI_PDEV_SET_REGDOMAIN_CMDID = (((WMI_GRP_PDEV) << 12) | 0x1),
 WMI_PDEV_SET_CHANNEL_CMDID,
 WMI_PDEV_SET_PARAM_CMDID,
 WMI_PDEV_PKTLOG_ENABLE_CMDID,
 WMI_PDEV_PKTLOG_DISABLE_CMDID,
 WMI_PDEV_SET_WMM_PARAMS_CMDID,
 WMI_PDEV_SET_HT_CAP_IE_CMDID,
 WMI_PDEV_SET_VHT_CAP_IE_CMDID,
 WMI_PDEV_SET_DSCP_TID_MAP_CMDID,
 WMI_PDEV_SET_QUIET_MODE_CMDID,
 WMI_PDEV_GREEN_AP_PS_ENABLE_CMDID,
 WMI_PDEV_GET_TPC_CONFIG_CMDID,
 WMI_PDEV_SET_BASE_MACADDR_CMDID,


 WMI_VDEV_CREATE_CMDID = (((WMI_GRP_VDEV) << 12) | 0x1),
 WMI_VDEV_DELETE_CMDID,
 WMI_VDEV_START_REQUEST_CMDID,
 WMI_VDEV_RESTART_REQUEST_CMDID,
 WMI_VDEV_UP_CMDID,
 WMI_VDEV_STOP_CMDID,
 WMI_VDEV_DOWN_CMDID,
 WMI_VDEV_SET_PARAM_CMDID,
 WMI_VDEV_INSTALL_KEY_CMDID,


 WMI_PEER_CREATE_CMDID = (((WMI_GRP_PEER) << 12) | 0x1),
 WMI_PEER_DELETE_CMDID,
 WMI_PEER_FLUSH_TIDS_CMDID,
 WMI_PEER_SET_PARAM_CMDID,
 WMI_PEER_ASSOC_CMDID,
 WMI_PEER_ADD_WDS_ENTRY_CMDID,
 WMI_PEER_REMOVE_WDS_ENTRY_CMDID,
 WMI_PEER_MCAST_GROUP_CMDID,


 WMI_BCN_TX_CMDID = (((WMI_GRP_MGMT) << 12) | 0x1),
 WMI_PDEV_SEND_BCN_CMDID,
 WMI_BCN_TMPL_CMDID,
 WMI_BCN_FILTER_RX_CMDID,
 WMI_PRB_REQ_FILTER_RX_CMDID,
 WMI_MGMT_TX_CMDID,
 WMI_PRB_TMPL_CMDID,


 WMI_ADDBA_CLEAR_RESP_CMDID = (((WMI_GRP_BA_NEG) << 12) | 0x1),
 WMI_ADDBA_SEND_CMDID,
 WMI_ADDBA_STATUS_CMDID,
 WMI_DELBA_SEND_CMDID,
 WMI_ADDBA_SET_RESP_CMDID,
 WMI_SEND_SINGLEAMSDU_CMDID,


 WMI_STA_POWERSAVE_MODE_CMDID = (((WMI_GRP_STA_PS) << 12) | 0x1),
 WMI_STA_POWERSAVE_PARAM_CMDID,
 WMI_STA_MIMO_PS_MODE_CMDID,


 WMI_PDEV_DFS_ENABLE_CMDID = (((WMI_GRP_DFS) << 12) | 0x1),
 WMI_PDEV_DFS_DISABLE_CMDID,


 WMI_ROAM_SCAN_MODE = (((WMI_GRP_ROAM) << 12) | 0x1),
 WMI_ROAM_SCAN_RSSI_THRESHOLD,
 WMI_ROAM_SCAN_PERIOD,
 WMI_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
 WMI_ROAM_AP_PROFILE,


 WMI_OFL_SCAN_ADD_AP_PROFILE = (((WMI_GRP_OFL_SCAN) << 12) | 0x1),
 WMI_OFL_SCAN_REMOVE_AP_PROFILE,
 WMI_OFL_SCAN_PERIOD,


 WMI_P2P_DEV_SET_DEVICE_INFO = (((WMI_GRP_P2P) << 12) | 0x1),
 WMI_P2P_DEV_SET_DISCOVERABILITY,
 WMI_P2P_GO_SET_BEACON_IE,
 WMI_P2P_GO_SET_PROBE_RESP_IE,
 WMI_P2P_SET_VENDOR_IE_DATA_CMDID,


 WMI_AP_PS_PEER_PARAM_CMDID = (((WMI_GRP_AP_PS) << 12) | 0x1),
 WMI_AP_PS_PEER_UAPSD_COEX_CMDID,


 WMI_PEER_RATE_RETRY_SCHED_CMDID =
 (((WMI_GRP_RATE_CTRL) << 12) | 0x1),


 WMI_WLAN_PROFILE_TRIGGER_CMDID = (((WMI_GRP_PROFILE) << 12) | 0x1),
 WMI_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
 WMI_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
 WMI_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
 WMI_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,


 WMI_PDEV_SUSPEND_CMDID = (((WMI_GRP_SUSPEND) << 12) | 0x1),
 WMI_PDEV_RESUME_CMDID,


 WMI_ADD_BCN_FILTER_CMDID = (((WMI_GRP_BCN_FILTER) << 12) | 0x1),
 WMI_RMV_BCN_FILTER_CMDID,


 WMI_WOW_ADD_WAKE_PATTERN_CMDID = (((WMI_GRP_WOW) << 12) | 0x1),
 WMI_WOW_DEL_WAKE_PATTERN_CMDID,
 WMI_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
 WMI_WOW_ENABLE_CMDID,
 WMI_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,


 WMI_RTT_MEASREQ_CMDID = (((WMI_GRP_RTT) << 12) | 0x1),
 WMI_RTT_TSF_CMDID,


 WMI_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID = (((WMI_GRP_SPECTRAL) << 12) | 0x1),
 WMI_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,


 WMI_REQUEST_STATS_CMDID = (((WMI_GRP_STATS) << 12) | 0x1),


 WMI_SET_ARP_NS_OFFLOAD_CMDID = (((WMI_GRP_ARP_NS_OFL) << 12) | 0x1),


 WMI_NETWORK_LIST_OFFLOAD_CONFIG_CMDID = (((WMI_GRP_NLO_OFL) << 12) | 0x1),


 WMI_GTK_OFFLOAD_CMDID = (((WMI_GRP_GTK_OFL) << 12) | 0x1),


 WMI_CSA_OFFLOAD_ENABLE_CMDID = (((WMI_GRP_CSA_OFL) << 12) | 0x1),
 WMI_CSA_OFFLOAD_CHANSWITCH_CMDID,


 WMI_CHATTER_SET_MODE_CMDID = (((WMI_GRP_CHATTER) << 12) | 0x1),


 WMI_PEER_TID_ADDBA_CMDID = (((WMI_GRP_TID_ADDBA) << 12) | 0x1),
 WMI_PEER_TID_DELBA_CMDID,


 WMI_STA_DTIM_PS_METHOD_CMDID,

 WMI_STA_UAPSD_AUTO_TRIG_CMDID,



 WMI_STA_KEEPALIVE_CMD,


 WMI_ECHO_CMDID = (((WMI_GRP_MISC) << 12) | 0x1),
 WMI_PDEV_UTF_CMDID,
 WMI_DBGLOG_CFG_CMDID,
 WMI_PDEV_QVIT_CMDID,
 WMI_PDEV_FTM_INTG_CMDID,
 WMI_VDEV_SET_KEEPALIVE_CMDID,
 WMI_VDEV_GET_KEEPALIVE_CMDID,
 WMI_FORCE_FW_HANG_CMDID,


 WMI_GPIO_CONFIG_CMDID = (((WMI_GRP_GPIO) << 12) | 0x1),
 WMI_GPIO_OUTPUT_CMDID,
};

enum wmi_event_id {
 WMI_SERVICE_READY_EVENTID = 0x1,
 WMI_READY_EVENTID,


 WMI_SCAN_EVENTID = (((WMI_GRP_SCAN) << 12) | 0x1),


 WMI_PDEV_TPC_CONFIG_EVENTID = (((WMI_GRP_PDEV) << 12) | 0x1),
 WMI_CHAN_INFO_EVENTID,
 WMI_PHYERR_EVENTID,


 WMI_VDEV_START_RESP_EVENTID = (((WMI_GRP_VDEV) << 12) | 0x1),
 WMI_VDEV_STOPPED_EVENTID,
 WMI_VDEV_INSTALL_KEY_COMPLETE_EVENTID,


 WMI_PEER_STA_KICKOUT_EVENTID = (((WMI_GRP_PEER) << 12) | 0x1),


 WMI_MGMT_RX_EVENTID = (((WMI_GRP_MGMT) << 12) | 0x1),
 WMI_HOST_SWBA_EVENTID,
 WMI_TBTTOFFSET_UPDATE_EVENTID,


 WMI_TX_DELBA_COMPLETE_EVENTID = (((WMI_GRP_BA_NEG) << 12) | 0x1),
 WMI_TX_ADDBA_COMPLETE_EVENTID,


 WMI_ROAM_EVENTID = (((WMI_GRP_ROAM) << 12) | 0x1),
 WMI_PROFILE_MATCH,


 WMI_WOW_WAKEUP_HOST_EVENTID = (((WMI_GRP_WOW) << 12) | 0x1),


 WMI_RTT_MEASUREMENT_REPORT_EVENTID = (((WMI_GRP_RTT) << 12) | 0x1),
 WMI_TSF_MEASUREMENT_REPORT_EVENTID,
 WMI_RTT_ERROR_REPORT_EVENTID,


 WMI_GTK_OFFLOAD_STATUS_EVENTID = (((WMI_GRP_GTK_OFL) << 12) | 0x1),
 WMI_GTK_REKEY_FAIL_EVENTID,


 WMI_CSA_HANDLING_EVENTID = (((WMI_GRP_CSA_OFL) << 12) | 0x1),


 WMI_ECHO_EVENTID = (((WMI_GRP_MISC) << 12) | 0x1),
 WMI_PDEV_UTF_EVENTID,
 WMI_DEBUG_MESG_EVENTID,
 WMI_UPDATE_STATS_EVENTID,
 WMI_DEBUG_PRINT_EVENTID,
 WMI_DCS_INTERFERENCE_EVENTID,
 WMI_PDEV_QVIT_EVENTID,
 WMI_WLAN_PROFILE_DATA_EVENTID,
 WMI_PDEV_FTM_INTG_EVENTID,
 WMI_WLAN_FREQ_AVOID_EVENTID,
 WMI_VDEV_GET_KEEPALIVE_EVENTID,


 WMI_GPIO_INPUT_EVENTID = (((WMI_GRP_GPIO) << 12) | 0x1),
};


enum wmi_10x_cmd_id {
 WMI_10X_START_CMDID = 0x9000,
 WMI_10X_END_CMDID = 0x9FFF,


 WMI_10X_INIT_CMDID,



 WMI_10X_START_SCAN_CMDID = WMI_10X_START_CMDID,
 WMI_10X_STOP_SCAN_CMDID,
 WMI_10X_SCAN_CHAN_LIST_CMDID,
 WMI_10X_ECHO_CMDID,


 WMI_10X_PDEV_SET_REGDOMAIN_CMDID,
 WMI_10X_PDEV_SET_CHANNEL_CMDID,
 WMI_10X_PDEV_SET_PARAM_CMDID,
 WMI_10X_PDEV_PKTLOG_ENABLE_CMDID,
 WMI_10X_PDEV_PKTLOG_DISABLE_CMDID,
 WMI_10X_PDEV_SET_WMM_PARAMS_CMDID,
 WMI_10X_PDEV_SET_HT_CAP_IE_CMDID,
 WMI_10X_PDEV_SET_VHT_CAP_IE_CMDID,
 WMI_10X_PDEV_SET_BASE_MACADDR_CMDID,
 WMI_10X_PDEV_SET_DSCP_TID_MAP_CMDID,
 WMI_10X_PDEV_SET_QUIET_MODE_CMDID,
 WMI_10X_PDEV_GREEN_AP_PS_ENABLE_CMDID,
 WMI_10X_PDEV_GET_TPC_CONFIG_CMDID,


 WMI_10X_VDEV_CREATE_CMDID,
 WMI_10X_VDEV_DELETE_CMDID,
 WMI_10X_VDEV_START_REQUEST_CMDID,
 WMI_10X_VDEV_RESTART_REQUEST_CMDID,
 WMI_10X_VDEV_UP_CMDID,
 WMI_10X_VDEV_STOP_CMDID,
 WMI_10X_VDEV_DOWN_CMDID,
 WMI_10X_VDEV_STANDBY_RESPONSE_CMDID,
 WMI_10X_VDEV_RESUME_RESPONSE_CMDID,
 WMI_10X_VDEV_SET_PARAM_CMDID,
 WMI_10X_VDEV_INSTALL_KEY_CMDID,


 WMI_10X_PEER_CREATE_CMDID,
 WMI_10X_PEER_DELETE_CMDID,
 WMI_10X_PEER_FLUSH_TIDS_CMDID,
 WMI_10X_PEER_SET_PARAM_CMDID,
 WMI_10X_PEER_ASSOC_CMDID,
 WMI_10X_PEER_ADD_WDS_ENTRY_CMDID,
 WMI_10X_PEER_REMOVE_WDS_ENTRY_CMDID,
 WMI_10X_PEER_MCAST_GROUP_CMDID,



 WMI_10X_BCN_TX_CMDID,
 WMI_10X_BCN_PRB_TMPL_CMDID,
 WMI_10X_BCN_FILTER_RX_CMDID,
 WMI_10X_PRB_REQ_FILTER_RX_CMDID,
 WMI_10X_MGMT_TX_CMDID,


 WMI_10X_ADDBA_CLEAR_RESP_CMDID,
 WMI_10X_ADDBA_SEND_CMDID,
 WMI_10X_ADDBA_STATUS_CMDID,
 WMI_10X_DELBA_SEND_CMDID,
 WMI_10X_ADDBA_SET_RESP_CMDID,
 WMI_10X_SEND_SINGLEAMSDU_CMDID,


 WMI_10X_STA_POWERSAVE_MODE_CMDID,
 WMI_10X_STA_POWERSAVE_PARAM_CMDID,
 WMI_10X_STA_MIMO_PS_MODE_CMDID,


 WMI_10X_DBGLOG_CFG_CMDID,


 WMI_10X_PDEV_DFS_ENABLE_CMDID,
 WMI_10X_PDEV_DFS_DISABLE_CMDID,


 WMI_10X_PDEV_QVIT_CMDID,


 WMI_10X_ROAM_SCAN_MODE,
 WMI_10X_ROAM_SCAN_RSSI_THRESHOLD,
 WMI_10X_ROAM_SCAN_PERIOD,
 WMI_10X_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
 WMI_10X_ROAM_AP_PROFILE,
 WMI_10X_OFL_SCAN_ADD_AP_PROFILE,
 WMI_10X_OFL_SCAN_REMOVE_AP_PROFILE,
 WMI_10X_OFL_SCAN_PERIOD,


 WMI_10X_P2P_DEV_SET_DEVICE_INFO,
 WMI_10X_P2P_DEV_SET_DISCOVERABILITY,
 WMI_10X_P2P_GO_SET_BEACON_IE,
 WMI_10X_P2P_GO_SET_PROBE_RESP_IE,


 WMI_10X_AP_PS_PEER_PARAM_CMDID,
 WMI_10X_AP_PS_PEER_UAPSD_COEX_CMDID,


 WMI_10X_PEER_RATE_RETRY_SCHED_CMDID,


 WMI_10X_WLAN_PROFILE_TRIGGER_CMDID,
 WMI_10X_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
 WMI_10X_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
 WMI_10X_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
 WMI_10X_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,


 WMI_10X_PDEV_SUSPEND_CMDID,
 WMI_10X_PDEV_RESUME_CMDID,


 WMI_10X_ADD_BCN_FILTER_CMDID,
 WMI_10X_RMV_BCN_FILTER_CMDID,


 WMI_10X_WOW_ADD_WAKE_PATTERN_CMDID,
 WMI_10X_WOW_DEL_WAKE_PATTERN_CMDID,
 WMI_10X_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
 WMI_10X_WOW_ENABLE_CMDID,
 WMI_10X_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,


 WMI_10X_RTT_MEASREQ_CMDID,
 WMI_10X_RTT_TSF_CMDID,


 WMI_10X_PDEV_SEND_BCN_CMDID,


 WMI_10X_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID,
 WMI_10X_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,
 WMI_10X_REQUEST_STATS_CMDID,


 WMI_10X_GPIO_CONFIG_CMDID,
 WMI_10X_GPIO_OUTPUT_CMDID,

 WMI_10X_PDEV_UTF_CMDID = WMI_10X_END_CMDID - 1,
};

enum wmi_10x_event_id {
 WMI_10X_SERVICE_READY_EVENTID = 0x8000,
 WMI_10X_READY_EVENTID,
 WMI_10X_START_EVENTID = 0x9000,
 WMI_10X_END_EVENTID = 0x9FFF,


 WMI_10X_SCAN_EVENTID = WMI_10X_START_EVENTID,
 WMI_10X_ECHO_EVENTID,
 WMI_10X_DEBUG_MESG_EVENTID,
 WMI_10X_UPDATE_STATS_EVENTID,


 WMI_10X_INST_RSSI_STATS_EVENTID,


 WMI_10X_VDEV_START_RESP_EVENTID,
 WMI_10X_VDEV_STANDBY_REQ_EVENTID,
 WMI_10X_VDEV_RESUME_REQ_EVENTID,
 WMI_10X_VDEV_STOPPED_EVENTID,


 WMI_10X_PEER_STA_KICKOUT_EVENTID,


 WMI_10X_HOST_SWBA_EVENTID,
 WMI_10X_TBTTOFFSET_UPDATE_EVENTID,
 WMI_10X_MGMT_RX_EVENTID,


 WMI_10X_CHAN_INFO_EVENTID,


 WMI_10X_PHYERR_EVENTID,


 WMI_10X_ROAM_EVENTID,


 WMI_10X_PROFILE_MATCH,


 WMI_10X_DEBUG_PRINT_EVENTID,

 WMI_10X_PDEV_QVIT_EVENTID,

 WMI_10X_WLAN_PROFILE_DATA_EVENTID,


 WMI_10X_RTT_MEASUREMENT_REPORT_EVENTID,
 WMI_10X_TSF_MEASUREMENT_REPORT_EVENTID,
 WMI_10X_RTT_ERROR_REPORT_EVENTID,

 WMI_10X_WOW_WAKEUP_HOST_EVENTID,
 WMI_10X_DCS_INTERFERENCE_EVENTID,


 WMI_10X_PDEV_TPC_CONFIG_EVENTID,

 WMI_10X_GPIO_INPUT_EVENTID,
 WMI_10X_PDEV_UTF_EVENTID = WMI_10X_END_EVENTID - 1,
};

enum wmi_10_2_cmd_id {
 WMI_10_2_START_CMDID = 0x9000,
 WMI_10_2_END_CMDID = 0x9FFF,
 WMI_10_2_INIT_CMDID,
 WMI_10_2_START_SCAN_CMDID = WMI_10_2_START_CMDID,
 WMI_10_2_STOP_SCAN_CMDID,
 WMI_10_2_SCAN_CHAN_LIST_CMDID,
 WMI_10_2_ECHO_CMDID,
 WMI_10_2_PDEV_SET_REGDOMAIN_CMDID,
 WMI_10_2_PDEV_SET_CHANNEL_CMDID,
 WMI_10_2_PDEV_SET_PARAM_CMDID,
 WMI_10_2_PDEV_PKTLOG_ENABLE_CMDID,
 WMI_10_2_PDEV_PKTLOG_DISABLE_CMDID,
 WMI_10_2_PDEV_SET_WMM_PARAMS_CMDID,
 WMI_10_2_PDEV_SET_HT_CAP_IE_CMDID,
 WMI_10_2_PDEV_SET_VHT_CAP_IE_CMDID,
 WMI_10_2_PDEV_SET_BASE_MACADDR_CMDID,
 WMI_10_2_PDEV_SET_QUIET_MODE_CMDID,
 WMI_10_2_PDEV_GREEN_AP_PS_ENABLE_CMDID,
 WMI_10_2_PDEV_GET_TPC_CONFIG_CMDID,
 WMI_10_2_VDEV_CREATE_CMDID,
 WMI_10_2_VDEV_DELETE_CMDID,
 WMI_10_2_VDEV_START_REQUEST_CMDID,
 WMI_10_2_VDEV_RESTART_REQUEST_CMDID,
 WMI_10_2_VDEV_UP_CMDID,
 WMI_10_2_VDEV_STOP_CMDID,
 WMI_10_2_VDEV_DOWN_CMDID,
 WMI_10_2_VDEV_STANDBY_RESPONSE_CMDID,
 WMI_10_2_VDEV_RESUME_RESPONSE_CMDID,
 WMI_10_2_VDEV_SET_PARAM_CMDID,
 WMI_10_2_VDEV_INSTALL_KEY_CMDID,
 WMI_10_2_VDEV_SET_DSCP_TID_MAP_CMDID,
 WMI_10_2_PEER_CREATE_CMDID,
 WMI_10_2_PEER_DELETE_CMDID,
 WMI_10_2_PEER_FLUSH_TIDS_CMDID,
 WMI_10_2_PEER_SET_PARAM_CMDID,
 WMI_10_2_PEER_ASSOC_CMDID,
 WMI_10_2_PEER_ADD_WDS_ENTRY_CMDID,
 WMI_10_2_PEER_UPDATE_WDS_ENTRY_CMDID,
 WMI_10_2_PEER_REMOVE_WDS_ENTRY_CMDID,
 WMI_10_2_PEER_MCAST_GROUP_CMDID,
 WMI_10_2_BCN_TX_CMDID,
 WMI_10_2_BCN_PRB_TMPL_CMDID,
 WMI_10_2_BCN_FILTER_RX_CMDID,
 WMI_10_2_PRB_REQ_FILTER_RX_CMDID,
 WMI_10_2_MGMT_TX_CMDID,
 WMI_10_2_ADDBA_CLEAR_RESP_CMDID,
 WMI_10_2_ADDBA_SEND_CMDID,
 WMI_10_2_ADDBA_STATUS_CMDID,
 WMI_10_2_DELBA_SEND_CMDID,
 WMI_10_2_ADDBA_SET_RESP_CMDID,
 WMI_10_2_SEND_SINGLEAMSDU_CMDID,
 WMI_10_2_STA_POWERSAVE_MODE_CMDID,
 WMI_10_2_STA_POWERSAVE_PARAM_CMDID,
 WMI_10_2_STA_MIMO_PS_MODE_CMDID,
 WMI_10_2_DBGLOG_CFG_CMDID,
 WMI_10_2_PDEV_DFS_ENABLE_CMDID,
 WMI_10_2_PDEV_DFS_DISABLE_CMDID,
 WMI_10_2_PDEV_QVIT_CMDID,
 WMI_10_2_ROAM_SCAN_MODE,
 WMI_10_2_ROAM_SCAN_RSSI_THRESHOLD,
 WMI_10_2_ROAM_SCAN_PERIOD,
 WMI_10_2_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
 WMI_10_2_ROAM_AP_PROFILE,
 WMI_10_2_OFL_SCAN_ADD_AP_PROFILE,
 WMI_10_2_OFL_SCAN_REMOVE_AP_PROFILE,
 WMI_10_2_OFL_SCAN_PERIOD,
 WMI_10_2_P2P_DEV_SET_DEVICE_INFO,
 WMI_10_2_P2P_DEV_SET_DISCOVERABILITY,
 WMI_10_2_P2P_GO_SET_BEACON_IE,
 WMI_10_2_P2P_GO_SET_PROBE_RESP_IE,
 WMI_10_2_AP_PS_PEER_PARAM_CMDID,
 WMI_10_2_AP_PS_PEER_UAPSD_COEX_CMDID,
 WMI_10_2_PEER_RATE_RETRY_SCHED_CMDID,
 WMI_10_2_WLAN_PROFILE_TRIGGER_CMDID,
 WMI_10_2_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
 WMI_10_2_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
 WMI_10_2_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
 WMI_10_2_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,
 WMI_10_2_PDEV_SUSPEND_CMDID,
 WMI_10_2_PDEV_RESUME_CMDID,
 WMI_10_2_ADD_BCN_FILTER_CMDID,
 WMI_10_2_RMV_BCN_FILTER_CMDID,
 WMI_10_2_WOW_ADD_WAKE_PATTERN_CMDID,
 WMI_10_2_WOW_DEL_WAKE_PATTERN_CMDID,
 WMI_10_2_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
 WMI_10_2_WOW_ENABLE_CMDID,
 WMI_10_2_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,
 WMI_10_2_RTT_MEASREQ_CMDID,
 WMI_10_2_RTT_TSF_CMDID,
 WMI_10_2_RTT_KEEPALIVE_CMDID,
 WMI_10_2_PDEV_SEND_BCN_CMDID,
 WMI_10_2_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID,
 WMI_10_2_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,
 WMI_10_2_REQUEST_STATS_CMDID,
 WMI_10_2_GPIO_CONFIG_CMDID,
 WMI_10_2_GPIO_OUTPUT_CMDID,
 WMI_10_2_VDEV_RATEMASK_CMDID,
 WMI_10_2_PDEV_SMART_ANT_ENABLE_CMDID,
 WMI_10_2_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
 WMI_10_2_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
 WMI_10_2_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
 WMI_10_2_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
 WMI_10_2_FORCE_FW_HANG_CMDID,
 WMI_10_2_PDEV_SET_ANTENNA_SWITCH_TABLE_CMDID,
 WMI_10_2_PDEV_SET_CTL_TABLE_CMDID,
 WMI_10_2_PDEV_SET_MIMOGAIN_TABLE_CMDID,
 WMI_10_2_PDEV_RATEPWR_TABLE_CMDID,
 WMI_10_2_PDEV_RATEPWR_CHAINMSK_TABLE_CMDID,
 WMI_10_2_PDEV_GET_INFO,
 WMI_10_2_VDEV_GET_INFO,
 WMI_10_2_VDEV_ATF_REQUEST_CMDID,
 WMI_10_2_PEER_ATF_REQUEST_CMDID,
 WMI_10_2_PDEV_GET_TEMPERATURE_CMDID,
 WMI_10_2_MU_CAL_START_CMDID,
 WMI_10_2_SET_LTEU_CONFIG_CMDID,
 WMI_10_2_SET_CCA_PARAMS,
 WMI_10_2_PDEV_BSS_CHAN_INFO_REQUEST_CMDID,
 WMI_10_2_PDEV_UTF_CMDID = WMI_10_2_END_CMDID - 1,
};

enum wmi_10_2_event_id {
 WMI_10_2_SERVICE_READY_EVENTID = 0x8000,
 WMI_10_2_READY_EVENTID,
 WMI_10_2_DEBUG_MESG_EVENTID,
 WMI_10_2_START_EVENTID = 0x9000,
 WMI_10_2_END_EVENTID = 0x9FFF,
 WMI_10_2_SCAN_EVENTID = WMI_10_2_START_EVENTID,
 WMI_10_2_ECHO_EVENTID,
 WMI_10_2_UPDATE_STATS_EVENTID,
 WMI_10_2_INST_RSSI_STATS_EVENTID,
 WMI_10_2_VDEV_START_RESP_EVENTID,
 WMI_10_2_VDEV_STANDBY_REQ_EVENTID,
 WMI_10_2_VDEV_RESUME_REQ_EVENTID,
 WMI_10_2_VDEV_STOPPED_EVENTID,
 WMI_10_2_PEER_STA_KICKOUT_EVENTID,
 WMI_10_2_HOST_SWBA_EVENTID,
 WMI_10_2_TBTTOFFSET_UPDATE_EVENTID,
 WMI_10_2_MGMT_RX_EVENTID,
 WMI_10_2_CHAN_INFO_EVENTID,
 WMI_10_2_PHYERR_EVENTID,
 WMI_10_2_ROAM_EVENTID,
 WMI_10_2_PROFILE_MATCH,
 WMI_10_2_DEBUG_PRINT_EVENTID,
 WMI_10_2_PDEV_QVIT_EVENTID,
 WMI_10_2_WLAN_PROFILE_DATA_EVENTID,
 WMI_10_2_RTT_MEASUREMENT_REPORT_EVENTID,
 WMI_10_2_TSF_MEASUREMENT_REPORT_EVENTID,
 WMI_10_2_RTT_ERROR_REPORT_EVENTID,
 WMI_10_2_RTT_KEEPALIVE_EVENTID,
 WMI_10_2_WOW_WAKEUP_HOST_EVENTID,
 WMI_10_2_DCS_INTERFERENCE_EVENTID,
 WMI_10_2_PDEV_TPC_CONFIG_EVENTID,
 WMI_10_2_GPIO_INPUT_EVENTID,
 WMI_10_2_PEER_RATECODE_LIST_EVENTID,
 WMI_10_2_GENERIC_BUFFER_EVENTID,
 WMI_10_2_MCAST_BUF_RELEASE_EVENTID,
 WMI_10_2_MCAST_LIST_AGEOUT_EVENTID,
 WMI_10_2_WDS_PEER_EVENTID,
 WMI_10_2_PEER_STA_PS_STATECHG_EVENTID,
 WMI_10_2_PDEV_TEMPERATURE_EVENTID,
 WMI_10_2_MU_REPORT_EVENTID,
 WMI_10_2_PDEV_BSS_CHAN_INFO_EVENTID,
 WMI_10_2_PDEV_UTF_EVENTID = WMI_10_2_END_EVENTID - 1,
};

enum wmi_10_4_cmd_id {
 WMI_10_4_START_CMDID = 0x9000,
 WMI_10_4_END_CMDID = 0x9FFF,
 WMI_10_4_INIT_CMDID,
 WMI_10_4_START_SCAN_CMDID = WMI_10_4_START_CMDID,
 WMI_10_4_STOP_SCAN_CMDID,
 WMI_10_4_SCAN_CHAN_LIST_CMDID,
 WMI_10_4_SCAN_SCH_PRIO_TBL_CMDID,
 WMI_10_4_SCAN_UPDATE_REQUEST_CMDID,
 WMI_10_4_ECHO_CMDID,
 WMI_10_4_PDEV_SET_REGDOMAIN_CMDID,
 WMI_10_4_PDEV_SET_CHANNEL_CMDID,
 WMI_10_4_PDEV_SET_PARAM_CMDID,
 WMI_10_4_PDEV_PKTLOG_ENABLE_CMDID,
 WMI_10_4_PDEV_PKTLOG_DISABLE_CMDID,
 WMI_10_4_PDEV_SET_WMM_PARAMS_CMDID,
 WMI_10_4_PDEV_SET_HT_CAP_IE_CMDID,
 WMI_10_4_PDEV_SET_VHT_CAP_IE_CMDID,
 WMI_10_4_PDEV_SET_BASE_MACADDR_CMDID,
 WMI_10_4_PDEV_SET_DSCP_TID_MAP_CMDID,
 WMI_10_4_PDEV_SET_QUIET_MODE_CMDID,
 WMI_10_4_PDEV_GREEN_AP_PS_ENABLE_CMDID,
 WMI_10_4_PDEV_GET_TPC_CONFIG_CMDID,
 WMI_10_4_VDEV_CREATE_CMDID,
 WMI_10_4_VDEV_DELETE_CMDID,
 WMI_10_4_VDEV_START_REQUEST_CMDID,
 WMI_10_4_VDEV_RESTART_REQUEST_CMDID,
 WMI_10_4_VDEV_UP_CMDID,
 WMI_10_4_VDEV_STOP_CMDID,
 WMI_10_4_VDEV_DOWN_CMDID,
 WMI_10_4_VDEV_STANDBY_RESPONSE_CMDID,
 WMI_10_4_VDEV_RESUME_RESPONSE_CMDID,
 WMI_10_4_VDEV_SET_PARAM_CMDID,
 WMI_10_4_VDEV_INSTALL_KEY_CMDID,
 WMI_10_4_WLAN_PEER_CACHING_ADD_PEER_CMDID,
 WMI_10_4_WLAN_PEER_CACHING_EVICT_PEER_CMDID,
 WMI_10_4_WLAN_PEER_CACHING_RESTORE_PEER_CMDID,
 WMI_10_4_WLAN_PEER_CACHING_PRINT_ALL_PEERS_INFO_CMDID,
 WMI_10_4_PEER_CREATE_CMDID,
 WMI_10_4_PEER_DELETE_CMDID,
 WMI_10_4_PEER_FLUSH_TIDS_CMDID,
 WMI_10_4_PEER_SET_PARAM_CMDID,
 WMI_10_4_PEER_ASSOC_CMDID,
 WMI_10_4_PEER_ADD_WDS_ENTRY_CMDID,
 WMI_10_4_PEER_UPDATE_WDS_ENTRY_CMDID,
 WMI_10_4_PEER_REMOVE_WDS_ENTRY_CMDID,
 WMI_10_4_PEER_ADD_PROXY_STA_ENTRY_CMDID,
 WMI_10_4_PEER_MCAST_GROUP_CMDID,
 WMI_10_4_BCN_TX_CMDID,
 WMI_10_4_PDEV_SEND_BCN_CMDID,
 WMI_10_4_BCN_PRB_TMPL_CMDID,
 WMI_10_4_BCN_FILTER_RX_CMDID,
 WMI_10_4_PRB_REQ_FILTER_RX_CMDID,
 WMI_10_4_MGMT_TX_CMDID,
 WMI_10_4_PRB_TMPL_CMDID,
 WMI_10_4_ADDBA_CLEAR_RESP_CMDID,
 WMI_10_4_ADDBA_SEND_CMDID,
 WMI_10_4_ADDBA_STATUS_CMDID,
 WMI_10_4_DELBA_SEND_CMDID,
 WMI_10_4_ADDBA_SET_RESP_CMDID,
 WMI_10_4_SEND_SINGLEAMSDU_CMDID,
 WMI_10_4_STA_POWERSAVE_MODE_CMDID,
 WMI_10_4_STA_POWERSAVE_PARAM_CMDID,
 WMI_10_4_STA_MIMO_PS_MODE_CMDID,
 WMI_10_4_DBGLOG_CFG_CMDID,
 WMI_10_4_PDEV_DFS_ENABLE_CMDID,
 WMI_10_4_PDEV_DFS_DISABLE_CMDID,
 WMI_10_4_PDEV_QVIT_CMDID,
 WMI_10_4_ROAM_SCAN_MODE,
 WMI_10_4_ROAM_SCAN_RSSI_THRESHOLD,
 WMI_10_4_ROAM_SCAN_PERIOD,
 WMI_10_4_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
 WMI_10_4_ROAM_AP_PROFILE,
 WMI_10_4_OFL_SCAN_ADD_AP_PROFILE,
 WMI_10_4_OFL_SCAN_REMOVE_AP_PROFILE,
 WMI_10_4_OFL_SCAN_PERIOD,
 WMI_10_4_P2P_DEV_SET_DEVICE_INFO,
 WMI_10_4_P2P_DEV_SET_DISCOVERABILITY,
 WMI_10_4_P2P_GO_SET_BEACON_IE,
 WMI_10_4_P2P_GO_SET_PROBE_RESP_IE,
 WMI_10_4_P2P_SET_VENDOR_IE_DATA_CMDID,
 WMI_10_4_AP_PS_PEER_PARAM_CMDID,
 WMI_10_4_AP_PS_PEER_UAPSD_COEX_CMDID,
 WMI_10_4_PEER_RATE_RETRY_SCHED_CMDID,
 WMI_10_4_WLAN_PROFILE_TRIGGER_CMDID,
 WMI_10_4_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
 WMI_10_4_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
 WMI_10_4_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
 WMI_10_4_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,
 WMI_10_4_PDEV_SUSPEND_CMDID,
 WMI_10_4_PDEV_RESUME_CMDID,
 WMI_10_4_ADD_BCN_FILTER_CMDID,
 WMI_10_4_RMV_BCN_FILTER_CMDID,
 WMI_10_4_WOW_ADD_WAKE_PATTERN_CMDID,
 WMI_10_4_WOW_DEL_WAKE_PATTERN_CMDID,
 WMI_10_4_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
 WMI_10_4_WOW_ENABLE_CMDID,
 WMI_10_4_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,
 WMI_10_4_RTT_MEASREQ_CMDID,
 WMI_10_4_RTT_TSF_CMDID,
 WMI_10_4_RTT_KEEPALIVE_CMDID,
 WMI_10_4_OEM_REQ_CMDID,
 WMI_10_4_NAN_CMDID,
 WMI_10_4_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID,
 WMI_10_4_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,
 WMI_10_4_REQUEST_STATS_CMDID,
 WMI_10_4_GPIO_CONFIG_CMDID,
 WMI_10_4_GPIO_OUTPUT_CMDID,
 WMI_10_4_VDEV_RATEMASK_CMDID,
 WMI_10_4_CSA_OFFLOAD_ENABLE_CMDID,
 WMI_10_4_GTK_OFFLOAD_CMDID,
 WMI_10_4_QBOOST_CFG_CMDID,
 WMI_10_4_CSA_OFFLOAD_CHANSWITCH_CMDID,
 WMI_10_4_PDEV_SMART_ANT_ENABLE_CMDID,
 WMI_10_4_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
 WMI_10_4_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
 WMI_10_4_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
 WMI_10_4_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
 WMI_10_4_VDEV_SET_KEEPALIVE_CMDID,
 WMI_10_4_VDEV_GET_KEEPALIVE_CMDID,
 WMI_10_4_FORCE_FW_HANG_CMDID,
 WMI_10_4_PDEV_SET_ANTENNA_SWITCH_TABLE_CMDID,
 WMI_10_4_PDEV_SET_CTL_TABLE_CMDID,
 WMI_10_4_PDEV_SET_MIMOGAIN_TABLE_CMDID,
 WMI_10_4_PDEV_RATEPWR_TABLE_CMDID,
 WMI_10_4_PDEV_RATEPWR_CHAINMSK_TABLE_CMDID,
 WMI_10_4_PDEV_FIPS_CMDID,
 WMI_10_4_TT_SET_CONF_CMDID,
 WMI_10_4_FWTEST_CMDID,
 WMI_10_4_VDEV_ATF_REQUEST_CMDID,
 WMI_10_4_PEER_ATF_REQUEST_CMDID,
 WMI_10_4_PDEV_GET_ANI_CCK_CONFIG_CMDID,
 WMI_10_4_PDEV_GET_ANI_OFDM_CONFIG_CMDID,
 WMI_10_4_PDEV_RESERVE_AST_ENTRY_CMDID,
 WMI_10_4_PDEV_GET_NFCAL_POWER_CMDID,
 WMI_10_4_PDEV_GET_TPC_CMDID,
 WMI_10_4_PDEV_GET_AST_INFO_CMDID,
 WMI_10_4_VDEV_SET_DSCP_TID_MAP_CMDID,
 WMI_10_4_PDEV_GET_TEMPERATURE_CMDID,
 WMI_10_4_PDEV_GET_INFO_CMDID,
 WMI_10_4_VDEV_GET_INFO_CMDID,
 WMI_10_4_VDEV_FILTER_NEIGHBOR_RX_PACKETS_CMDID,
 WMI_10_4_MU_CAL_START_CMDID,
 WMI_10_4_SET_CCA_PARAMS_CMDID,
 WMI_10_4_PDEV_BSS_CHAN_INFO_REQUEST_CMDID,
 WMI_10_4_EXT_RESOURCE_CFG_CMDID,
 WMI_10_4_VDEV_SET_IE_CMDID,
 WMI_10_4_SET_LTEU_CONFIG_CMDID,
 WMI_10_4_PDEV_UTF_CMDID = WMI_10_4_END_CMDID - 1,
};

enum wmi_10_4_event_id {
 WMI_10_4_SERVICE_READY_EVENTID = 0x8000,
 WMI_10_4_READY_EVENTID,
 WMI_10_4_DEBUG_MESG_EVENTID,
 WMI_10_4_START_EVENTID = 0x9000,
 WMI_10_4_END_EVENTID = 0x9FFF,
 WMI_10_4_SCAN_EVENTID = WMI_10_4_START_EVENTID,
 WMI_10_4_ECHO_EVENTID,
 WMI_10_4_UPDATE_STATS_EVENTID,
 WMI_10_4_INST_RSSI_STATS_EVENTID,
 WMI_10_4_VDEV_START_RESP_EVENTID,
 WMI_10_4_VDEV_STANDBY_REQ_EVENTID,
 WMI_10_4_VDEV_RESUME_REQ_EVENTID,
 WMI_10_4_VDEV_STOPPED_EVENTID,
 WMI_10_4_PEER_STA_KICKOUT_EVENTID,
 WMI_10_4_HOST_SWBA_EVENTID,
 WMI_10_4_TBTTOFFSET_UPDATE_EVENTID,
 WMI_10_4_MGMT_RX_EVENTID,
 WMI_10_4_CHAN_INFO_EVENTID,
 WMI_10_4_PHYERR_EVENTID,
 WMI_10_4_ROAM_EVENTID,
 WMI_10_4_PROFILE_MATCH,
 WMI_10_4_DEBUG_PRINT_EVENTID,
 WMI_10_4_PDEV_QVIT_EVENTID,
 WMI_10_4_WLAN_PROFILE_DATA_EVENTID,
 WMI_10_4_RTT_MEASUREMENT_REPORT_EVENTID,
 WMI_10_4_TSF_MEASUREMENT_REPORT_EVENTID,
 WMI_10_4_RTT_ERROR_REPORT_EVENTID,
 WMI_10_4_RTT_KEEPALIVE_EVENTID,
 WMI_10_4_OEM_CAPABILITY_EVENTID,
 WMI_10_4_OEM_MEASUREMENT_REPORT_EVENTID,
 WMI_10_4_OEM_ERROR_REPORT_EVENTID,
 WMI_10_4_NAN_EVENTID,
 WMI_10_4_WOW_WAKEUP_HOST_EVENTID,
 WMI_10_4_GTK_OFFLOAD_STATUS_EVENTID,
 WMI_10_4_GTK_REKEY_FAIL_EVENTID,
 WMI_10_4_DCS_INTERFERENCE_EVENTID,
 WMI_10_4_PDEV_TPC_CONFIG_EVENTID,
 WMI_10_4_CSA_HANDLING_EVENTID,
 WMI_10_4_GPIO_INPUT_EVENTID,
 WMI_10_4_PEER_RATECODE_LIST_EVENTID,
 WMI_10_4_GENERIC_BUFFER_EVENTID,
 WMI_10_4_MCAST_BUF_RELEASE_EVENTID,
 WMI_10_4_MCAST_LIST_AGEOUT_EVENTID,
 WMI_10_4_VDEV_GET_KEEPALIVE_EVENTID,
 WMI_10_4_WDS_PEER_EVENTID,
 WMI_10_4_PEER_STA_PS_STATECHG_EVENTID,
 WMI_10_4_PDEV_FIPS_EVENTID,
 WMI_10_4_TT_STATS_EVENTID,
 WMI_10_4_PDEV_CHANNEL_HOPPING_EVENTID,
 WMI_10_4_PDEV_ANI_CCK_LEVEL_EVENTID,
 WMI_10_4_PDEV_ANI_OFDM_LEVEL_EVENTID,
 WMI_10_4_PDEV_RESERVE_AST_ENTRY_EVENTID,
 WMI_10_4_PDEV_NFCAL_POWER_EVENTID,
 WMI_10_4_PDEV_TPC_EVENTID,
 WMI_10_4_PDEV_GET_AST_INFO_EVENTID,
 WMI_10_4_PDEV_TEMPERATURE_EVENTID,
 WMI_10_4_PDEV_NFCAL_POWER_ALL_CHANNELS_EVENTID,
 WMI_10_4_PDEV_BSS_CHAN_INFO_EVENTID,
 WMI_10_4_MU_REPORT_EVENTID,
 WMI_10_4_PDEV_UTF_EVENTID = WMI_10_4_END_EVENTID - 1,
};

enum wmi_phy_mode {
 MODE_11A = 0,
 MODE_11G = 1,
 MODE_11B = 2,
 MODE_11GONLY = 3,
 MODE_11NA_HT20 = 4,
 MODE_11NG_HT20 = 5,
 MODE_11NA_HT40 = 6,
 MODE_11NG_HT40 = 7,
 MODE_11AC_VHT20 = 8,
 MODE_11AC_VHT40 = 9,
 MODE_11AC_VHT80 = 10,

 MODE_11AC_VHT20_2G = 11,
 MODE_11AC_VHT40_2G = 12,
 MODE_11AC_VHT80_2G = 13,
 MODE_UNKNOWN = 14,
 MODE_MAX = 14
};

static inline __attribute__((no_instrument_function)) const char *ath10k_wmi_phymode_str(enum wmi_phy_mode mode)
{
 switch (mode) {
 case MODE_11A:
  return "11a";
 case MODE_11G:
  return "11g";
 case MODE_11B:
  return "11b";
 case MODE_11GONLY:
  return "11gonly";
 case MODE_11NA_HT20:
  return "11na-ht20";
 case MODE_11NG_HT20:
  return "11ng-ht20";
 case MODE_11NA_HT40:
  return "11na-ht40";
 case MODE_11NG_HT40:
  return "11ng-ht40";
 case MODE_11AC_VHT20:
  return "11ac-vht20";
 case MODE_11AC_VHT40:
  return "11ac-vht40";
 case MODE_11AC_VHT80:
  return "11ac-vht80";
 case MODE_11AC_VHT20_2G:
  return "11ac-vht20-2g";
 case MODE_11AC_VHT40_2G:
  return "11ac-vht40-2g";
 case MODE_11AC_VHT80_2G:
  return "11ac-vht80-2g";
 case MODE_UNKNOWN:

  break;



 };

 return "<unknown>";
}






struct wmi_channel {
 __le32 mhz;
 __le32 band_center_freq1;
 __le32 band_center_freq2;
 union {
  __le32 flags;
  struct {
   u8 mode;
  } __attribute__((packed));
 } __attribute__((packed));
 union {
  __le32 reginfo0;
  struct {

   u8 min_power;
   u8 max_power;
   u8 reg_power;
   u8 reg_classid;
  } __attribute__((packed));
 } __attribute__((packed));
 union {
  __le32 reginfo1;
  struct {
   u8 antenna_max;
   u8 max_tx_power;
  } __attribute__((packed));
 } __attribute__((packed));
} __attribute__((packed));

struct wmi_channel_arg {
 u32 freq;
 u32 band_center_freq1;
 bool passive;
 bool allow_ibss;
 bool allow_ht;
 bool allow_vht;
 bool ht40plus;
 bool chan_radar;

 u32 min_power;
 u32 max_power;
 u32 max_reg_power;
 u32 max_antenna_gain;
 u32 reg_class_id;
 enum wmi_phy_mode mode;
};

enum wmi_channel_change_cause {
 WMI_CHANNEL_CHANGE_CAUSE_NONE = 0,
 WMI_CHANNEL_CHANGE_CAUSE_CSA,
};
# 1903 "drivers/net/wireless/ath/ath10k/wmi.h"
enum {
 REGDMN_MODE_11A = 0x00001,
 REGDMN_MODE_TURBO = 0x00002,
 REGDMN_MODE_11B = 0x00004,
 REGDMN_MODE_PUREG = 0x00008,
 REGDMN_MODE_11G = 0x00008,
 REGDMN_MODE_108G = 0x00020,
 REGDMN_MODE_108A = 0x00040,
 REGDMN_MODE_XR = 0x00100,
 REGDMN_MODE_11A_HALF_RATE = 0x00200,
 REGDMN_MODE_11A_QUARTER_RATE = 0x00400,
 REGDMN_MODE_11NG_HT20 = 0x00800,
 REGDMN_MODE_11NA_HT20 = 0x01000,
 REGDMN_MODE_11NG_HT40PLUS = 0x02000,
 REGDMN_MODE_11NG_HT40MINUS = 0x04000,
 REGDMN_MODE_11NA_HT40PLUS = 0x08000,
 REGDMN_MODE_11NA_HT40MINUS = 0x10000,
 REGDMN_MODE_11AC_VHT20 = 0x20000,
 REGDMN_MODE_11AC_VHT40PLUS = 0x40000,
 REGDMN_MODE_11AC_VHT40MINUS = 0x80000,
 REGDMN_MODE_11AC_VHT80 = 0x100000,
 REGDMN_MODE_ALL = 0xffffffff
};
# 1939 "drivers/net/wireless/ath/ath10k/wmi.h"
struct hal_reg_capabilities {

 __le32 eeprom_rd;

 __le32 eeprom_rd_ext;

 __le32 regcap1;

 __le32 regcap2;

 __le32 wireless_modes;
 __le32 low_2ghz_chan;
 __le32 high_2ghz_chan;
 __le32 low_5ghz_chan;
 __le32 high_5ghz_chan;
} __attribute__((packed));

enum wlan_mode_capability {
 WHAL_WLAN_11A_CAPABILITY = 0x1,
 WHAL_WLAN_11G_CAPABILITY = 0x2,
 WHAL_WLAN_11AG_CAPABILITY = 0x3,
};


struct wlan_host_mem_req {

 __le32 req_id;

 __le32 unit_size;




 __le32 num_unit_info;







 __le32 num_units;
} __attribute__((packed));






struct wmi_service_ready_event {
 __le32 sw_version;
 __le32 sw_version_1;
 __le32 abi_version;

 __le32 phy_capability;

 __le32 max_frag_entry;
 __le32 wmi_service_bitmap[16];
 __le32 num_rf_chains;




 __le32 ht_cap_info;
 __le32 vht_cap_info;
 __le32 vht_supp_mcs;
 __le32 hw_min_tx_power;
 __le32 hw_max_tx_power;
 struct hal_reg_capabilities hal_reg_capabilities;
 __le32 sys_cap_info;
 __le32 min_pkt_size_enable;




 __le32 max_bcn_ie_size;






 __le32 num_mem_reqs;
 struct wlan_host_mem_req mem_reqs[0];
} __attribute__((packed));


struct wmi_10x_service_ready_event {
 __le32 sw_version;
 __le32 abi_version;


 __le32 phy_capability;


 __le32 max_frag_entry;
 __le32 wmi_service_bitmap[16];
 __le32 num_rf_chains;





 __le32 ht_cap_info;
 __le32 vht_cap_info;
 __le32 vht_supp_mcs;
 __le32 hw_min_tx_power;
 __le32 hw_max_tx_power;

 struct hal_reg_capabilities hal_reg_capabilities;

 __le32 sys_cap_info;
 __le32 min_pkt_size_enable;







 __le32 num_mem_reqs;

 struct wlan_host_mem_req mem_reqs[0];
} __attribute__((packed));




struct wmi_ready_event {
 __le32 sw_version;
 __le32 abi_version;
 struct wmi_mac_addr mac_addr;
 __le32 status;
} __attribute__((packed));

struct wmi_resource_config {

 __le32 num_vdevs;


 __le32 num_peers;
# 2088 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_offload_peers;


 __le32 num_offload_reorder_bufs;


 __le32 num_peer_keys;


 __le32 num_tids;
# 2109 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 ast_skid_limit;
# 2119 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 tx_chain_mask;
# 2131 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_chain_mask;
# 2143 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_timeout_pri_vi;
 __le32 rx_timeout_pri_vo;
 __le32 rx_timeout_pri_be;
 __le32 rx_timeout_pri_bk;
# 2155 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_decap_mode;


 __le32 scan_max_pending_reqs;


 __le32 bmiss_offload_max_vdev;


 __le32 roam_offload_max_vdev;


 __le32 roam_offload_max_ap_profiles;
# 2181 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_groups;
# 2192 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_table_elems;
# 2212 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 mcast2ucast_mode;
# 2221 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 tx_dbg_log_size;


 __le32 num_wds_entries;





 __le32 dma_burst_size;





 __le32 mac_aggr_delim;
# 2247 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_skip_defrag_timeout_dup_detection_check;






 __le32 vow_config;


 __le32 gtk_offload_max_vdev;


 __le32 num_msdu_desc;







 __le32 max_frag_entries;
} __attribute__((packed));

struct wmi_resource_config_10x {

 __le32 num_vdevs;


 __le32 num_peers;


 __le32 num_peer_keys;


 __le32 num_tids;
# 2294 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 ast_skid_limit;
# 2304 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 tx_chain_mask;
# 2316 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_chain_mask;
# 2328 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_timeout_pri_vi;
 __le32 rx_timeout_pri_vo;
 __le32 rx_timeout_pri_be;
 __le32 rx_timeout_pri_bk;
# 2340 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_decap_mode;


 __le32 scan_max_pending_reqs;


 __le32 bmiss_offload_max_vdev;


 __le32 roam_offload_max_vdev;


 __le32 roam_offload_max_ap_profiles;
# 2366 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_groups;
# 2377 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_table_elems;
# 2397 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 mcast2ucast_mode;
# 2406 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 tx_dbg_log_size;


 __le32 num_wds_entries;





 __le32 dma_burst_size;





 __le32 mac_aggr_delim;
# 2432 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_skip_defrag_timeout_dup_detection_check;






 __le32 vow_config;


 __le32 num_msdu_desc;







 __le32 max_frag_entries;
} __attribute__((packed));

enum wmi_10_2_feature_mask {
 WMI_10_2_RX_BATCH_MODE = (1UL << (0)),
 WMI_10_2_ATF_CONFIG = (1UL << (1)),
 WMI_10_2_COEX_GPIO = (1UL << (3)),
 WMI_10_2_BSS_CHAN_INFO = (1UL << (6)),
 WMI_10_2_PEER_STATS = (1UL << (7)),
};

struct wmi_resource_config_10_2 {
 struct wmi_resource_config_10x common;
 __le32 max_peer_ext_stats;
 __le32 smart_ant_cap;
 __le32 bk_min_free;
 __le32 be_min_free;
 __le32 vi_min_free;
 __le32 vo_min_free;
 __le32 feature_mask;
} __attribute__((packed));





struct wmi_resource_config_10_4 {

 __le32 num_vdevs;


 __le32 num_peers;


 __le32 num_active_peers;







 __le32 num_offload_peers;




 __le32 num_offload_reorder_buffs;


 __le32 num_peer_keys;


 __le32 num_tids;
# 2513 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 ast_skid_limit;







 __le32 tx_chain_mask;
# 2531 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_chain_mask;
# 2540 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_timeout_pri[4];






 __le32 rx_decap_mode;

 __le32 scan_max_pending_req;

 __le32 bmiss_offload_max_vdev;

 __le32 roam_offload_max_vdev;

 __le32 roam_offload_max_ap_profiles;
# 2566 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_groups;
# 2575 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 num_mcast_table_elems;
# 2592 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 mcast2ucast_mode;






 __le32 tx_dbg_log_size;


 __le32 num_wds_entries;


 __le32 dma_burst_size;




 __le32 mac_aggr_delim;
# 2619 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 rx_skip_defrag_timeout_dup_detection_check;




 __le32 vow_config;


 __le32 gtk_offload_max_vdev;


 __le32 num_msdu_desc;






 __le32 max_frag_entries;





 __le32 max_peer_ext_stats;






 __le32 smart_ant_cap;




 __le32 bk_minfree;
 __le32 be_minfree;
 __le32 vi_minfree;
 __le32 vo_minfree;





 __le32 rx_batchmode;





 __le32 tt_support;





 __le32 atf_config;





 __le32 iphdr_pad_config;
# 2693 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 qwrap_config;
} __attribute__((packed));
# 2705 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_10_4_feature_mask {
 WMI_10_4_LTEU_SUPPORT = (1UL << (0)),
 WMI_10_4_COEX_GPIO_SUPPORT = (1UL << (1)),
 WMI_10_4_AUX_RADIO_SPECTRAL_INTF = (1UL << (2)),
 WMI_10_4_AUX_RADIO_CHAN_LOAD_INTF = (1UL << (3)),
 WMI_10_4_BSS_CHANNEL_INFO_64 = (1UL << (4)),
 WMI_10_4_PEER_STATS = (1UL << (5)),
};

struct wmi_ext_resource_config_10_4_cmd {

 __le32 host_platform_config;

 __le32 fw_feature_bitmap;
};


struct host_memory_chunk {

 __le32 req_id;

 __le32 ptr;

 __le32 size;
} __attribute__((packed));

struct wmi_host_mem_chunks {
 __le32 count;

 struct host_memory_chunk items[1];
} __attribute__((packed));

struct wmi_init_cmd {
 struct wmi_resource_config resource_config;
 struct wmi_host_mem_chunks mem_chunks;
} __attribute__((packed));


struct wmi_init_cmd_10x {
 struct wmi_resource_config_10x resource_config;
 struct wmi_host_mem_chunks mem_chunks;
} __attribute__((packed));

struct wmi_init_cmd_10_2 {
 struct wmi_resource_config_10_2 resource_config;
 struct wmi_host_mem_chunks mem_chunks;
} __attribute__((packed));

struct wmi_init_cmd_10_4 {
 struct wmi_resource_config_10_4 resource_config;
 struct wmi_host_mem_chunks mem_chunks;
} __attribute__((packed));

struct wmi_chan_list_entry {
 __le16 freq;
 u8 phy_mode;
 u8 reserved;
} __attribute__((packed));


struct wmi_chan_list {
 __le32 tag;
 __le32 num_chan;
 struct wmi_chan_list_entry channel_list[0];
} __attribute__((packed));

struct wmi_bssid_list {
 __le32 tag;
 __le32 num_bssid;
 struct wmi_mac_addr bssid_list[0];
} __attribute__((packed));

struct wmi_ie_data {
 __le32 tag;
 __le32 ie_len;
 u8 ie_data[0];
} __attribute__((packed));

struct wmi_ssid {
 __le32 ssid_len;
 u8 ssid[32];
} __attribute__((packed));

struct wmi_ssid_list {
 __le32 tag;
 __le32 num_ssids;
 struct wmi_ssid ssids[0];
} __attribute__((packed));
# 2811 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_scan_priority {
 WMI_SCAN_PRIORITY_VERY_LOW = 0,
 WMI_SCAN_PRIORITY_LOW,
 WMI_SCAN_PRIORITY_MEDIUM,
 WMI_SCAN_PRIORITY_HIGH,
 WMI_SCAN_PRIORITY_VERY_HIGH,
 WMI_SCAN_PRIORITY_COUNT
};

struct wmi_start_scan_common {

 __le32 scan_id;

 __le32 scan_req_id;

 __le32 vdev_id;

 __le32 scan_priority;

 __le32 notify_scan_events;

 __le32 dwell_time_active;

 __le32 dwell_time_passive;




 __le32 min_rest_time;
# 2853 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 max_rest_time;







 __le32 repeat_probe_time;

 __le32 probe_spacing_time;




 __le32 idle_time;

 __le32 max_scan_time;




 __le32 probe_delay;

 __le32 scan_ctrl_flags;
} __attribute__((packed));

struct wmi_start_scan_tlvs {



 u8 tlvs[0];
} __attribute__((packed));

struct wmi_start_scan_cmd {
 struct wmi_start_scan_common common;
 __le32 burst_duration_ms;
 struct wmi_start_scan_tlvs tlvs;
} __attribute__((packed));


struct wmi_10x_start_scan_cmd {
 struct wmi_start_scan_common common;
 struct wmi_start_scan_tlvs tlvs;
} __attribute__((packed));

struct wmi_ssid_arg {
 int len;
 const u8 *ssid;
};

struct wmi_bssid_arg {
 const u8 *bssid;
};

struct wmi_start_scan_arg {
 u32 scan_id;
 u32 scan_req_id;
 u32 vdev_id;
 u32 scan_priority;
 u32 notify_scan_events;
 u32 dwell_time_active;
 u32 dwell_time_passive;
 u32 min_rest_time;
 u32 max_rest_time;
 u32 repeat_probe_time;
 u32 probe_spacing_time;
 u32 idle_time;
 u32 max_scan_time;
 u32 probe_delay;
 u32 scan_ctrl_flags;
 u32 burst_duration_ms;

 u32 ie_len;
 u32 n_channels;
 u32 n_ssids;
 u32 n_bssids;

 u8 ie[256];
 u16 channels[64];
 struct wmi_ssid_arg ssids[16];
 struct wmi_bssid_arg bssids[4];
};
# 2960 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_stop_scan_type {
 WMI_SCAN_STOP_ONE = 0x00000000,
 WMI_SCAN_STOP_VDEV_ALL = 0x01000000,
 WMI_SCAN_STOP_ALL = 0x04000000,
};

struct wmi_stop_scan_cmd {
 __le32 scan_req_id;
 __le32 scan_id;
 __le32 req_type;
 __le32 vdev_id;
} __attribute__((packed));

struct wmi_stop_scan_arg {
 u32 req_id;
 enum wmi_stop_scan_type req_type;
 union {
  u32 scan_id;
  u32 vdev_id;
 } u;
};

struct wmi_scan_chan_list_cmd {
 __le32 num_scan_chans;
 struct wmi_channel chan_info[0];
} __attribute__((packed));

struct wmi_scan_chan_list_arg {
 u32 n_channels;
 struct wmi_channel_arg *channels;
};

enum wmi_bss_filter {
 WMI_BSS_FILTER_NONE = 0,
 WMI_BSS_FILTER_ALL,
 WMI_BSS_FILTER_PROFILE,
 WMI_BSS_FILTER_ALL_BUT_PROFILE,
 WMI_BSS_FILTER_CURRENT_BSS,
 WMI_BSS_FILTER_ALL_BUT_BSS,
 WMI_BSS_FILTER_PROBED_SSID,
 WMI_BSS_FILTER_LAST_BSS,
};

enum wmi_scan_event_type {
 WMI_SCAN_EVENT_STARTED = (1UL << (0)),
 WMI_SCAN_EVENT_COMPLETED = (1UL << (1)),
 WMI_SCAN_EVENT_BSS_CHANNEL = (1UL << (2)),
 WMI_SCAN_EVENT_FOREIGN_CHANNEL = (1UL << (3)),
 WMI_SCAN_EVENT_DEQUEUED = (1UL << (4)),

 WMI_SCAN_EVENT_PREEMPTED = (1UL << (5)),
 WMI_SCAN_EVENT_START_FAILED = (1UL << (6)),
 WMI_SCAN_EVENT_RESTARTED = (1UL << (7)),
 WMI_SCAN_EVENT_FOREIGN_CHANNEL_EXIT = (1UL << (8)),
 WMI_SCAN_EVENT_MAX = (1UL << (15)),
};

enum wmi_scan_completion_reason {
 WMI_SCAN_REASON_COMPLETED,
 WMI_SCAN_REASON_CANCELLED,
 WMI_SCAN_REASON_PREEMPTED,
 WMI_SCAN_REASON_TIMEDOUT,
 WMI_SCAN_REASON_INTERNAL_FAILURE,
 WMI_SCAN_REASON_MAX,
};

struct wmi_scan_event {
 __le32 event_type;
 __le32 reason;
 __le32 channel_freq;
 __le32 scan_req_id;
 __le32 scan_id;
 __le32 vdev_id;
} __attribute__((packed));
# 3052 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_mgmt_rx_hdr_v1 {
 __le32 channel;
 __le32 snr;
 __le32 rate;
 __le32 phy_mode;
 __le32 buf_len;
 __le32 status;
} __attribute__((packed));

struct wmi_mgmt_rx_hdr_v2 {
 struct wmi_mgmt_rx_hdr_v1 v1;
 __le32 rssi_ctl[4];
} __attribute__((packed));

struct wmi_mgmt_rx_event_v1 {
 struct wmi_mgmt_rx_hdr_v1 hdr;
 u8 buf[0];
} __attribute__((packed));

struct wmi_mgmt_rx_event_v2 {
 struct wmi_mgmt_rx_hdr_v2 hdr;
 u8 buf[0];
} __attribute__((packed));

struct wmi_10_4_mgmt_rx_hdr {
 __le32 channel;
 __le32 snr;
     u8 rssi_ctl[4];
 __le32 rate;
 __le32 phy_mode;
 __le32 buf_len;
 __le32 status;
} __attribute__((packed));

struct wmi_10_4_mgmt_rx_event {
 struct wmi_10_4_mgmt_rx_hdr hdr;
 u8 buf[0];
} __attribute__((packed));

struct wmi_mgmt_rx_ext_info {
 __le64 rx_mac_timestamp;
} __attribute__((packed)) __attribute__((aligned(4)));
# 3110 "drivers/net/wireless/ath/ath10k/wmi.h"
enum phy_err_type {
 PHY_ERROR_UNKNOWN,
 PHY_ERROR_SPECTRAL_SCAN,
 PHY_ERROR_FALSE_RADAR_EXT,
 PHY_ERROR_RADAR
};

struct wmi_phyerr {
 __le32 tsf_timestamp;
 __le16 freq1;
 __le16 freq2;
 u8 rssi_combined;
 u8 chan_width_mhz;
 u8 phy_err_code;
 u8 rsvd0;
 __le32 rssi_chains[4];
 __le16 nf_chains[4];
 __le32 buf_len;
 u8 buf[0];
} __attribute__((packed));

struct wmi_phyerr_event {
 __le32 num_phyerrs;
 __le32 tsf_l32;
 __le32 tsf_u32;
 struct wmi_phyerr phyerrs[0];
} __attribute__((packed));

struct wmi_10_4_phyerr_event {
 __le32 tsf_l32;
 __le32 tsf_u32;
 __le16 freq1;
 __le16 freq2;
 u8 rssi_combined;
 u8 chan_width_mhz;
 u8 phy_err_code;
 u8 rsvd0;
 __le32 rssi_chains[4];
 __le16 nf_chains[4];
 __le32 phy_err_mask[2];
 __le32 tsf_timestamp;
 __le32 buf_len;
 u8 buf[0];
} __attribute__((packed));






struct phyerr_radar_report {
 __le32 reg0;
 __le32 reg1;
} __attribute__((packed));
# 3198 "drivers/net/wireless/ath/ath10k/wmi.h"
struct phyerr_fft_report {
 __le32 reg0;
 __le32 reg1;
} __attribute__((packed));
# 3227 "drivers/net/wireless/ath/ath10k/wmi.h"
struct phyerr_tlv {
 __le16 len;
 u8 tag;
 u8 sig;
} __attribute__((packed));




struct wmi_mgmt_tx_hdr {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
 __le32 tx_rate;
 __le32 tx_power;
 __le32 buf_len;
} __attribute__((packed));

struct wmi_mgmt_tx_cmd {
 struct wmi_mgmt_tx_hdr hdr;
 u8 buf[0];
} __attribute__((packed));

struct wmi_echo_event {
 __le32 value;
} __attribute__((packed));

struct wmi_echo_cmd {
 __le32 value;
} __attribute__((packed));

struct wmi_pdev_set_regdomain_cmd {
 __le32 reg_domain;
 __le32 reg_domain_2G;
 __le32 reg_domain_5G;
 __le32 conformance_test_limit_2G;
 __le32 conformance_test_limit_5G;
} __attribute__((packed));

enum wmi_dfs_region {

 WMI_UNINIT_DFS_DOMAIN = 0,


 WMI_FCC_DFS_DOMAIN = 1,


 WMI_ETSI_DFS_DOMAIN = 2,


 WMI_MKK4_DFS_DOMAIN = 3,
};

struct wmi_pdev_set_regdomain_cmd_10x {
 __le32 reg_domain;
 __le32 reg_domain_2G;
 __le32 reg_domain_5G;
 __le32 conformance_test_limit_2G;
 __le32 conformance_test_limit_5G;


 __le32 dfs_domain;
} __attribute__((packed));


struct wmi_pdev_set_quiet_cmd {

 __le32 period;


 __le32 duration;


 __le32 next_start;


 __le32 enabled;
} __attribute__((packed));




enum ath10k_protmode {
 ATH10K_PROT_NONE = 0,
 ATH10K_PROT_CTSONLY = 1,
 ATH10K_PROT_RTSCTS = 2,
};

enum wmi_rtscts_profile {
 WMI_RTSCTS_FOR_NO_RATESERIES = 0,
 WMI_RTSCTS_FOR_SECOND_RATESERIES,
 WMI_RTSCTS_ACROSS_SW_RETRIES
};
# 3327 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_beacon_gen_mode {
 WMI_BEACON_STAGGERED_MODE = 0,
 WMI_BEACON_BURST_MODE = 1
};

enum wmi_csa_event_ies_present_flag {
 WMI_CSA_IE_PRESENT = 0x00000001,
 WMI_XCSA_IE_PRESENT = 0x00000002,
 WMI_WBW_IE_PRESENT = 0x00000004,
 WMI_CSWARP_IE_PRESENT = 0x00000008,
};


struct wmi_csa_event {
 __le32 i_fc_dur;


 struct wmi_mac_addr i_addr1;
 struct wmi_mac_addr i_addr2;
 __le32 csa_ie[2];
 __le32 xcsa_ie[2];
 __le32 wb_ie[2];
 __le32 cswarp_ie;
 __le32 ies_present_flag;
} __attribute__((packed));






struct wmi_pdev_param_map {
 u32 tx_chain_mask;
 u32 rx_chain_mask;
 u32 txpower_limit2g;
 u32 txpower_limit5g;
 u32 txpower_scale;
 u32 beacon_gen_mode;
 u32 beacon_tx_mode;
 u32 resmgr_offchan_mode;
 u32 protection_mode;
 u32 dynamic_bw;
 u32 non_agg_sw_retry_th;
 u32 agg_sw_retry_th;
 u32 sta_kickout_th;
 u32 ac_aggrsize_scaling;
 u32 ltr_enable;
 u32 ltr_ac_latency_be;
 u32 ltr_ac_latency_bk;
 u32 ltr_ac_latency_vi;
 u32 ltr_ac_latency_vo;
 u32 ltr_ac_latency_timeout;
 u32 ltr_sleep_override;
 u32 ltr_rx_override;
 u32 ltr_tx_activity_timeout;
 u32 l1ss_enable;
 u32 dsleep_enable;
 u32 pcielp_txbuf_flush;
 u32 pcielp_txbuf_watermark;
 u32 pcielp_txbuf_tmo_en;
 u32 pcielp_txbuf_tmo_value;
 u32 pdev_stats_update_period;
 u32 vdev_stats_update_period;
 u32 peer_stats_update_period;
 u32 bcnflt_stats_update_period;
 u32 pmf_qos;
 u32 arp_ac_override;
 u32 dcs;
 u32 ani_enable;
 u32 ani_poll_period;
 u32 ani_listen_period;
 u32 ani_ofdm_level;
 u32 ani_cck_level;
 u32 dyntxchain;
 u32 proxy_sta;
 u32 idle_ps_config;
 u32 power_gating_sleep;
 u32 fast_channel_reset;
 u32 burst_dur;
 u32 burst_enable;
 u32 cal_period;
 u32 aggr_burst;
 u32 rx_decap_mode;
 u32 smart_antenna_default_antenna;
 u32 igmpmld_override;
 u32 igmpmld_tid;
 u32 antenna_gain;
 u32 rx_filter;
 u32 set_mcast_to_ucast_tid;
 u32 proxy_sta_mode;
 u32 set_mcast2ucast_mode;
 u32 set_mcast2ucast_buffer;
 u32 remove_mcast2ucast_buffer;
 u32 peer_sta_ps_statechg_enable;
 u32 igmpmld_ac_override;
 u32 block_interbss;
 u32 set_disable_reset_cmdid;
 u32 set_msdu_ttl_cmdid;
 u32 set_ppdu_duration_cmdid;
 u32 txbf_sound_period_cmdid;
 u32 set_promisc_mode_cmdid;
 u32 set_burst_mode_cmdid;
 u32 en_stats;
 u32 mu_group_policy;
 u32 noise_detection;
 u32 noise_threshold;
 u32 dpd_enable;
 u32 set_mcast_bcast_echo;
 u32 atf_strict_sch;
 u32 atf_sched_duration;
 u32 ant_plzn;
 u32 mgmt_retry_limit;
 u32 sensitivity_level;
 u32 signed_txpower_2g;
 u32 signed_txpower_5g;
 u32 enable_per_tid_amsdu;
 u32 enable_per_tid_ampdu;
 u32 cca_threshold;
 u32 rts_fixed_rate;
 u32 pdev_reset;
 u32 wapi_mbssid_offset;
 u32 arp_srcaddr;
 u32 arp_dstaddr;
};



enum wmi_pdev_param {

 WMI_PDEV_PARAM_TX_CHAIN_MASK = 0x1,

 WMI_PDEV_PARAM_RX_CHAIN_MASK,

 WMI_PDEV_PARAM_TXPOWER_LIMIT2G,

 WMI_PDEV_PARAM_TXPOWER_LIMIT5G,

 WMI_PDEV_PARAM_TXPOWER_SCALE,

 WMI_PDEV_PARAM_BEACON_GEN_MODE,

 WMI_PDEV_PARAM_BEACON_TX_MODE,




 WMI_PDEV_PARAM_RESMGR_OFFCHAN_MODE,




 WMI_PDEV_PARAM_PROTECTION_MODE,






 WMI_PDEV_PARAM_DYNAMIC_BW,

 WMI_PDEV_PARAM_NON_AGG_SW_RETRY_TH,

 WMI_PDEV_PARAM_AGG_SW_RETRY_TH,

 WMI_PDEV_PARAM_STA_KICKOUT_TH,

 WMI_PDEV_PARAM_AC_AGGRSIZE_SCALING,

 WMI_PDEV_PARAM_LTR_ENABLE,

 WMI_PDEV_PARAM_LTR_AC_LATENCY_BE,

 WMI_PDEV_PARAM_LTR_AC_LATENCY_BK,

 WMI_PDEV_PARAM_LTR_AC_LATENCY_VI,

 WMI_PDEV_PARAM_LTR_AC_LATENCY_VO,

 WMI_PDEV_PARAM_LTR_AC_LATENCY_TIMEOUT,

 WMI_PDEV_PARAM_LTR_SLEEP_OVERRIDE,

 WMI_PDEV_PARAM_LTR_RX_OVERRIDE,

 WMI_PDEV_PARAM_LTR_TX_ACTIVITY_TIMEOUT,

 WMI_PDEV_PARAM_L1SS_ENABLE,

 WMI_PDEV_PARAM_DSLEEP_ENABLE,

 WMI_PDEV_PARAM_PCIELP_TXBUF_FLUSH,

 WMI_PDEV_PARAM_PCIELP_TXBUF_WATERMARK,

 WMI_PDEV_PARAM_PCIELP_TXBUF_TMO_EN,

 WMI_PDEV_PARAM_PCIELP_TXBUF_TMO_VALUE,

 WMI_PDEV_PARAM_PDEV_STATS_UPDATE_PERIOD,

 WMI_PDEV_PARAM_VDEV_STATS_UPDATE_PERIOD,

 WMI_PDEV_PARAM_PEER_STATS_UPDATE_PERIOD,

 WMI_PDEV_PARAM_BCNFLT_STATS_UPDATE_PERIOD,

 WMI_PDEV_PARAM_PMF_QOS,

 WMI_PDEV_PARAM_ARP_AC_OVERRIDE,

 WMI_PDEV_PARAM_DCS,

 WMI_PDEV_PARAM_ANI_ENABLE,

 WMI_PDEV_PARAM_ANI_POLL_PERIOD,

 WMI_PDEV_PARAM_ANI_LISTEN_PERIOD,

 WMI_PDEV_PARAM_ANI_OFDM_LEVEL,

 WMI_PDEV_PARAM_ANI_CCK_LEVEL,

 WMI_PDEV_PARAM_DYNTXCHAIN,

 WMI_PDEV_PARAM_PROXY_STA,

 WMI_PDEV_PARAM_IDLE_PS_CONFIG,

 WMI_PDEV_PARAM_POWER_GATING_SLEEP,
};

enum wmi_10x_pdev_param {

 WMI_10X_PDEV_PARAM_TX_CHAIN_MASK = 0x1,

 WMI_10X_PDEV_PARAM_RX_CHAIN_MASK,

 WMI_10X_PDEV_PARAM_TXPOWER_LIMIT2G,

 WMI_10X_PDEV_PARAM_TXPOWER_LIMIT5G,

 WMI_10X_PDEV_PARAM_TXPOWER_SCALE,

 WMI_10X_PDEV_PARAM_BEACON_GEN_MODE,

 WMI_10X_PDEV_PARAM_BEACON_TX_MODE,




 WMI_10X_PDEV_PARAM_RESMGR_OFFCHAN_MODE,




 WMI_10X_PDEV_PARAM_PROTECTION_MODE,

 WMI_10X_PDEV_PARAM_DYNAMIC_BW,

 WMI_10X_PDEV_PARAM_NON_AGG_SW_RETRY_TH,

 WMI_10X_PDEV_PARAM_AGG_SW_RETRY_TH,

 WMI_10X_PDEV_PARAM_STA_KICKOUT_TH,

 WMI_10X_PDEV_PARAM_AC_AGGRSIZE_SCALING,

 WMI_10X_PDEV_PARAM_LTR_ENABLE,

 WMI_10X_PDEV_PARAM_LTR_AC_LATENCY_BE,

 WMI_10X_PDEV_PARAM_LTR_AC_LATENCY_BK,

 WMI_10X_PDEV_PARAM_LTR_AC_LATENCY_VI,

 WMI_10X_PDEV_PARAM_LTR_AC_LATENCY_VO,

 WMI_10X_PDEV_PARAM_LTR_AC_LATENCY_TIMEOUT,

 WMI_10X_PDEV_PARAM_LTR_SLEEP_OVERRIDE,

 WMI_10X_PDEV_PARAM_LTR_RX_OVERRIDE,

 WMI_10X_PDEV_PARAM_LTR_TX_ACTIVITY_TIMEOUT,

 WMI_10X_PDEV_PARAM_L1SS_ENABLE,

 WMI_10X_PDEV_PARAM_DSLEEP_ENABLE,

 WMI_10X_PDEV_PARAM_PDEV_STATS_UPDATE_PERIOD,

 WMI_10X_PDEV_PARAM_VDEV_STATS_UPDATE_PERIOD,

 WMI_10X_PDEV_PARAM_PEER_STATS_UPDATE_PERIOD,

 WMI_10X_PDEV_PARAM_BCNFLT_STATS_UPDATE_PERIOD,

 WMI_10X_PDEV_PARAM_PMF_QOS,

 WMI_10X_PDEV_PARAM_ARPDHCP_AC_OVERRIDE,

 WMI_10X_PDEV_PARAM_DCS,

 WMI_10X_PDEV_PARAM_ANI_ENABLE,

 WMI_10X_PDEV_PARAM_ANI_POLL_PERIOD,

 WMI_10X_PDEV_PARAM_ANI_LISTEN_PERIOD,

 WMI_10X_PDEV_PARAM_ANI_OFDM_LEVEL,

 WMI_10X_PDEV_PARAM_ANI_CCK_LEVEL,

 WMI_10X_PDEV_PARAM_DYNTXCHAIN,

 WMI_10X_PDEV_PARAM_FAST_CHANNEL_RESET,

 WMI_10X_PDEV_PARAM_BURST_DUR,

 WMI_10X_PDEV_PARAM_BURST_ENABLE,


 WMI_10X_PDEV_PARAM_SMART_ANTENNA_DEFAULT_ANTENNA,
 WMI_10X_PDEV_PARAM_IGMPMLD_OVERRIDE,
 WMI_10X_PDEV_PARAM_IGMPMLD_TID,
 WMI_10X_PDEV_PARAM_ANTENNA_GAIN,
 WMI_10X_PDEV_PARAM_RX_DECAP_MODE,
 WMI_10X_PDEV_PARAM_RX_FILTER,
 WMI_10X_PDEV_PARAM_SET_MCAST_TO_UCAST_TID,
 WMI_10X_PDEV_PARAM_PROXY_STA_MODE,
 WMI_10X_PDEV_PARAM_SET_MCAST2UCAST_MODE,
 WMI_10X_PDEV_PARAM_SET_MCAST2UCAST_BUFFER,
 WMI_10X_PDEV_PARAM_REMOVE_MCAST2UCAST_BUFFER,
 WMI_10X_PDEV_PARAM_PEER_STA_PS_STATECHG_ENABLE,
 WMI_10X_PDEV_PARAM_RTS_FIXED_RATE,
 WMI_10X_PDEV_PARAM_CAL_PERIOD
};

enum wmi_10_4_pdev_param {
 WMI_10_4_PDEV_PARAM_TX_CHAIN_MASK = 0x1,
 WMI_10_4_PDEV_PARAM_RX_CHAIN_MASK,
 WMI_10_4_PDEV_PARAM_TXPOWER_LIMIT2G,
 WMI_10_4_PDEV_PARAM_TXPOWER_LIMIT5G,
 WMI_10_4_PDEV_PARAM_TXPOWER_SCALE,
 WMI_10_4_PDEV_PARAM_BEACON_GEN_MODE,
 WMI_10_4_PDEV_PARAM_BEACON_TX_MODE,
 WMI_10_4_PDEV_PARAM_RESMGR_OFFCHAN_MODE,
 WMI_10_4_PDEV_PARAM_PROTECTION_MODE,
 WMI_10_4_PDEV_PARAM_DYNAMIC_BW,
 WMI_10_4_PDEV_PARAM_NON_AGG_SW_RETRY_TH,
 WMI_10_4_PDEV_PARAM_AGG_SW_RETRY_TH,
 WMI_10_4_PDEV_PARAM_STA_KICKOUT_TH,
 WMI_10_4_PDEV_PARAM_AC_AGGRSIZE_SCALING,
 WMI_10_4_PDEV_PARAM_LTR_ENABLE,
 WMI_10_4_PDEV_PARAM_LTR_AC_LATENCY_BE,
 WMI_10_4_PDEV_PARAM_LTR_AC_LATENCY_BK,
 WMI_10_4_PDEV_PARAM_LTR_AC_LATENCY_VI,
 WMI_10_4_PDEV_PARAM_LTR_AC_LATENCY_VO,
 WMI_10_4_PDEV_PARAM_LTR_AC_LATENCY_TIMEOUT,
 WMI_10_4_PDEV_PARAM_LTR_SLEEP_OVERRIDE,
 WMI_10_4_PDEV_PARAM_LTR_RX_OVERRIDE,
 WMI_10_4_PDEV_PARAM_LTR_TX_ACTIVITY_TIMEOUT,
 WMI_10_4_PDEV_PARAM_L1SS_ENABLE,
 WMI_10_4_PDEV_PARAM_DSLEEP_ENABLE,
 WMI_10_4_PDEV_PARAM_PCIELP_TXBUF_FLUSH,
 WMI_10_4_PDEV_PARAM_PCIELP_TXBUF_WATERMARK,
 WMI_10_4_PDEV_PARAM_PCIELP_TXBUF_TMO_EN,
 WMI_10_4_PDEV_PARAM_PCIELP_TXBUF_TMO_VALUE,
 WMI_10_4_PDEV_PARAM_PDEV_STATS_UPDATE_PERIOD,
 WMI_10_4_PDEV_PARAM_VDEV_STATS_UPDATE_PERIOD,
 WMI_10_4_PDEV_PARAM_PEER_STATS_UPDATE_PERIOD,
 WMI_10_4_PDEV_PARAM_BCNFLT_STATS_UPDATE_PERIOD,
 WMI_10_4_PDEV_PARAM_PMF_QOS,
 WMI_10_4_PDEV_PARAM_ARP_AC_OVERRIDE,
 WMI_10_4_PDEV_PARAM_DCS,
 WMI_10_4_PDEV_PARAM_ANI_ENABLE,
 WMI_10_4_PDEV_PARAM_ANI_POLL_PERIOD,
 WMI_10_4_PDEV_PARAM_ANI_LISTEN_PERIOD,
 WMI_10_4_PDEV_PARAM_ANI_OFDM_LEVEL,
 WMI_10_4_PDEV_PARAM_ANI_CCK_LEVEL,
 WMI_10_4_PDEV_PARAM_DYNTXCHAIN,
 WMI_10_4_PDEV_PARAM_PROXY_STA,
 WMI_10_4_PDEV_PARAM_IDLE_PS_CONFIG,
 WMI_10_4_PDEV_PARAM_POWER_GATING_SLEEP,
 WMI_10_4_PDEV_PARAM_AGGR_BURST,
 WMI_10_4_PDEV_PARAM_RX_DECAP_MODE,
 WMI_10_4_PDEV_PARAM_FAST_CHANNEL_RESET,
 WMI_10_4_PDEV_PARAM_BURST_DUR,
 WMI_10_4_PDEV_PARAM_BURST_ENABLE,
 WMI_10_4_PDEV_PARAM_SMART_ANTENNA_DEFAULT_ANTENNA,
 WMI_10_4_PDEV_PARAM_IGMPMLD_OVERRIDE,
 WMI_10_4_PDEV_PARAM_IGMPMLD_TID,
 WMI_10_4_PDEV_PARAM_ANTENNA_GAIN,
 WMI_10_4_PDEV_PARAM_RX_FILTER,
 WMI_10_4_PDEV_SET_MCAST_TO_UCAST_TID,
 WMI_10_4_PDEV_PARAM_PROXY_STA_MODE,
 WMI_10_4_PDEV_PARAM_SET_MCAST2UCAST_MODE,
 WMI_10_4_PDEV_PARAM_SET_MCAST2UCAST_BUFFER,
 WMI_10_4_PDEV_PARAM_REMOVE_MCAST2UCAST_BUFFER,
 WMI_10_4_PDEV_PEER_STA_PS_STATECHG_ENABLE,
 WMI_10_4_PDEV_PARAM_IGMPMLD_AC_OVERRIDE,
 WMI_10_4_PDEV_PARAM_BLOCK_INTERBSS,
 WMI_10_4_PDEV_PARAM_SET_DISABLE_RESET_CMDID,
 WMI_10_4_PDEV_PARAM_SET_MSDU_TTL_CMDID,
 WMI_10_4_PDEV_PARAM_SET_PPDU_DURATION_CMDID,
 WMI_10_4_PDEV_PARAM_TXBF_SOUND_PERIOD_CMDID,
 WMI_10_4_PDEV_PARAM_SET_PROMISC_MODE_CMDID,
 WMI_10_4_PDEV_PARAM_SET_BURST_MODE_CMDID,
 WMI_10_4_PDEV_PARAM_EN_STATS,
 WMI_10_4_PDEV_PARAM_MU_GROUP_POLICY,
 WMI_10_4_PDEV_PARAM_NOISE_DETECTION,
 WMI_10_4_PDEV_PARAM_NOISE_THRESHOLD,
 WMI_10_4_PDEV_PARAM_DPD_ENABLE,
 WMI_10_4_PDEV_PARAM_SET_MCAST_BCAST_ECHO,
 WMI_10_4_PDEV_PARAM_ATF_STRICT_SCH,
 WMI_10_4_PDEV_PARAM_ATF_SCHED_DURATION,
 WMI_10_4_PDEV_PARAM_ANT_PLZN,
 WMI_10_4_PDEV_PARAM_MGMT_RETRY_LIMIT,
 WMI_10_4_PDEV_PARAM_SENSITIVITY_LEVEL,
 WMI_10_4_PDEV_PARAM_SIGNED_TXPOWER_2G,
 WMI_10_4_PDEV_PARAM_SIGNED_TXPOWER_5G,
 WMI_10_4_PDEV_PARAM_ENABLE_PER_TID_AMSDU,
 WMI_10_4_PDEV_PARAM_ENABLE_PER_TID_AMPDU,
 WMI_10_4_PDEV_PARAM_CCA_THRESHOLD,
 WMI_10_4_PDEV_PARAM_RTS_FIXED_RATE,
 WMI_10_4_PDEV_PARAM_CAL_PERIOD,
 WMI_10_4_PDEV_PARAM_PDEV_RESET,
 WMI_10_4_PDEV_PARAM_WAPI_MBSSID_OFFSET,
 WMI_10_4_PDEV_PARAM_ARP_SRCADDR,
 WMI_10_4_PDEV_PARAM_ARP_DSTADDR,
 WMI_10_4_PDEV_PARAM_TXPOWER_DECR_DB,
 WMI_10_4_PDEV_PARAM_RX_BATCHMODE,
 WMI_10_4_PDEV_PARAM_PACKET_AGGR_DELAY,
 WMI_10_4_PDEV_PARAM_ATF_OBSS_NOISE_SCH,
 WMI_10_4_PDEV_PARAM_ATF_OBSS_NOISE_SCALING_FACTOR,
 WMI_10_4_PDEV_PARAM_CUST_TXPOWER_SCALE,
};

struct wmi_pdev_set_param_cmd {
 __le32 param_id;
 __le32 param_value;
} __attribute__((packed));




struct wmi_pdev_get_tpc_config_cmd {

 __le32 param;
} __attribute__((packed));
# 3785 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_tpc_table_type {
 WMI_TPC_TABLE_TYPE_CDD = 0,
 WMI_TPC_TABLE_TYPE_STBC = 1,
 WMI_TPC_TABLE_TYPE_TXBF = 2,
};

enum wmi_tpc_config_event_flag {
 WMI_TPC_CONFIG_EVENT_FLAG_TABLE_CDD = 0x1,
 WMI_TPC_CONFIG_EVENT_FLAG_TABLE_STBC = 0x2,
 WMI_TPC_CONFIG_EVENT_FLAG_TABLE_TXBF = 0x4,
};

struct wmi_pdev_tpc_config_event {
 __le32 reg_domain;
 __le32 chan_freq;
 __le32 phy_mode;
 __le32 twice_antenna_reduction;
 __le32 twice_max_rd_power;
 a_sle32 twice_antenna_gain;
 __le32 power_limit;
 __le32 rate_max;
 __le32 num_tx_chain;
 __le32 ctl;
 __le32 flags;
 s8 max_reg_allow_pow[4];
 s8 max_reg_allow_pow_agcdd[4][4];
 s8 max_reg_allow_pow_agstbc[4][4];
 s8 max_reg_allow_pow_agtxbf[4][4];
 u8 rates_array[160];
} __attribute__((packed));


enum wmi_tp_scale {
 WMI_TP_SCALE_MAX = 0,
 WMI_TP_SCALE_50 = 1,
 WMI_TP_SCALE_25 = 2,
 WMI_TP_SCALE_12 = 3,
 WMI_TP_SCALE_MIN = 4,
 WMI_TP_SCALE_SIZE = 5,
};

struct wmi_pdev_chanlist_update_event {

 __le32 num_chan;

 struct wmi_channel channel_list[1];
} __attribute__((packed));



struct wmi_debug_mesg_event {

 char bufp[(sizeof(u32) * 32)];
} __attribute__((packed));

enum {

 VDEV_SUBTYPE_P2PDEV = 0,

 VDEV_SUBTYPE_P2PCLI,

 VDEV_SUBTYPE_P2PGO,

 VDEV_SUBTYPE_BT,
};

struct wmi_pdev_set_channel_cmd {

 struct wmi_channel chan;
} __attribute__((packed));

struct wmi_pdev_pktlog_enable_cmd {
 __le32 ev_bitmap;
} __attribute__((packed));



struct wmi_pdev_set_dscp_tid_map_cmd {

 __le32 dscp_to_tid_map[(64)];
} __attribute__((packed));

enum mcast_bcast_rate_id {
 WMI_SET_MCAST_RATE,
 WMI_SET_BCAST_RATE
};

struct mcast_bcast_rate {
 enum mcast_bcast_rate_id rate_id;
 __le32 rate;
} __attribute__((packed));

struct wmi_wmm_params {
 __le32 cwmin;
 __le32 cwmax;
 __le32 aifs;
 __le32 txop;
 __le32 acm;
 __le32 no_ack;
} __attribute__((packed));

struct wmi_pdev_set_wmm_params {
 struct wmi_wmm_params ac_be;
 struct wmi_wmm_params ac_bk;
 struct wmi_wmm_params ac_vi;
 struct wmi_wmm_params ac_vo;
} __attribute__((packed));

struct wmi_wmm_params_arg {
 u32 cwmin;
 u32 cwmax;
 u32 aifs;
 u32 txop;
 u32 acm;
 u32 no_ack;
};

struct wmi_wmm_params_all_arg {
 struct wmi_wmm_params_arg ac_be;
 struct wmi_wmm_params_arg ac_bk;
 struct wmi_wmm_params_arg ac_vi;
 struct wmi_wmm_params_arg ac_vo;
};

struct wmi_pdev_stats_tx {

 __le32 comp_queued;


 __le32 comp_delivered;


 __le32 msdu_enqued;


 __le32 mpdu_enqued;


 __le32 wmm_drop;


 __le32 local_enqued;


 __le32 local_freed;


 __le32 hw_queued;


 __le32 hw_reaped;


 __le32 underrun;


 __le32 tx_abort;


 __le32 mpdus_requed;


 __le32 tx_ko;


 __le32 data_rc;


 __le32 self_triggers;


 __le32 sw_retry_failure;


 __le32 illgl_rate_phy_err;


 __le32 pdev_cont_xretry;


 __le32 pdev_tx_timeout;


 __le32 pdev_resets;


 __le32 stateless_tid_alloc_failure;

 __le32 phy_underrun;


 __le32 txop_ovf;
} __attribute__((packed));

struct wmi_10_4_pdev_stats_tx {

 __le32 comp_queued;


 __le32 comp_delivered;


 __le32 msdu_enqued;


 __le32 mpdu_enqued;


 __le32 wmm_drop;


 __le32 local_enqued;


 __le32 local_freed;


 __le32 hw_queued;


 __le32 hw_reaped;


 __le32 underrun;


 __le32 hw_paused;


 __le32 tx_abort;


 __le32 mpdus_requed;


 __le32 tx_ko;


 __le32 data_rc;


 __le32 self_triggers;


 __le32 sw_retry_failure;


 __le32 illgl_rate_phy_err;


 __le32 pdev_cont_xretry;


 __le32 pdev_tx_timeout;


 __le32 pdev_resets;


 __le32 stateless_tid_alloc_failure;

 __le32 phy_underrun;


 __le32 txop_ovf;


 __le32 seq_posted;


 __le32 seq_failed_queueing;


 __le32 seq_completed;


 __le32 seq_restarted;


 __le32 mu_seq_posted;


 __le32 mpdus_sw_flush;


 __le32 mpdus_hw_filter;




 __le32 mpdus_truncated;


 __le32 mpdus_ack_failed;


 __le32 mpdus_expired;
} __attribute__((packed));

struct wmi_pdev_stats_rx {

 __le32 mid_ppdu_route_change;


 __le32 status_rcvd;


 __le32 r0_frags;
 __le32 r1_frags;
 __le32 r2_frags;
 __le32 r3_frags;


 __le32 htt_msdus;
 __le32 htt_mpdus;


 __le32 loc_msdus;
 __le32 loc_mpdus;


 __le32 oversize_amsdu;


 __le32 phy_errs;


 __le32 phy_err_drop;


 __le32 mpdu_errs;
} __attribute__((packed));

struct wmi_pdev_stats_peer {

 __le32 dummy;
} __attribute__((packed));

enum wmi_stats_id {
 WMI_STAT_PEER = (1UL << (0)),
 WMI_STAT_AP = (1UL << (1)),
 WMI_STAT_PDEV = (1UL << (2)),
 WMI_STAT_VDEV = (1UL << (3)),
 WMI_STAT_BCNFLT = (1UL << (4)),
 WMI_STAT_VDEV_RATE = (1UL << (5)),
};

enum wmi_10_4_stats_id {
 WMI_10_4_STAT_PEER = (1UL << (0)),
 WMI_10_4_STAT_AP = (1UL << (1)),
 WMI_10_4_STAT_INST = (1UL << (2)),
 WMI_10_4_STAT_PEER_EXTD = (1UL << (3)),
};

struct wlan_inst_rssi_args {
 __le16 cfg_retry_count;
 __le16 retry_count;
};

struct wmi_request_stats_cmd {
 __le32 stats_id;

 __le32 vdev_id;


 struct wmi_mac_addr peer_macaddr;


 struct wlan_inst_rssi_args inst_rssi_args;
} __attribute__((packed));


enum {

 WMI_PDEV_SUSPEND,


 WMI_PDEV_SUSPEND_AND_DISABLE_INTR,
};

struct wmi_pdev_suspend_cmd {

 __le32 suspend_opt;
} __attribute__((packed));

struct wmi_stats_event {
 __le32 stats_id;




 __le32 num_pdev_stats;




 __le32 num_vdev_stats;




 __le32 num_peer_stats;
 __le32 num_bcnflt_stats;
# 4197 "drivers/net/wireless/ath/ath10k/wmi.h"
 u8 data[0];
} __attribute__((packed));

struct wmi_10_2_stats_event {
 __le32 stats_id;
 __le32 num_pdev_stats;
 __le32 num_pdev_ext_stats;
 __le32 num_vdev_stats;
 __le32 num_peer_stats;
 __le32 num_bcnflt_stats;
 u8 data[0];
} __attribute__((packed));





struct wmi_pdev_stats_base {
 __le32 chan_nf;
 __le32 tx_frame_count;
 __le32 rx_frame_count;
 __le32 rx_clear_count;
 __le32 cycle_count;
 __le32 phy_err_count;
 __le32 chan_tx_pwr;
} __attribute__((packed));

struct wmi_pdev_stats {
 struct wmi_pdev_stats_base base;
 struct wmi_pdev_stats_tx tx;
 struct wmi_pdev_stats_rx rx;
 struct wmi_pdev_stats_peer peer;
} __attribute__((packed));

struct wmi_pdev_stats_extra {
 __le32 ack_rx_bad;
 __le32 rts_bad;
 __le32 rts_good;
 __le32 fcs_bad;
 __le32 no_beacons;
 __le32 mib_int_count;
} __attribute__((packed));

struct wmi_10x_pdev_stats {
 struct wmi_pdev_stats_base base;
 struct wmi_pdev_stats_tx tx;
 struct wmi_pdev_stats_rx rx;
 struct wmi_pdev_stats_peer peer;
 struct wmi_pdev_stats_extra extra;
} __attribute__((packed));

struct wmi_pdev_stats_mem {
 __le32 dram_free;
 __le32 iram_free;
} __attribute__((packed));

struct wmi_10_2_pdev_stats {
 struct wmi_pdev_stats_base base;
 struct wmi_pdev_stats_tx tx;
 __le32 mc_drop;
 struct wmi_pdev_stats_rx rx;
 __le32 pdev_rx_timeout;
 struct wmi_pdev_stats_mem mem;
 struct wmi_pdev_stats_peer peer;
 struct wmi_pdev_stats_extra extra;
} __attribute__((packed));

struct wmi_10_4_pdev_stats {
 struct wmi_pdev_stats_base base;
 struct wmi_10_4_pdev_stats_tx tx;
 struct wmi_pdev_stats_rx rx;
 __le32 rx_ovfl_errs;
 struct wmi_pdev_stats_mem mem;
 __le32 sram_free_size;
 struct wmi_pdev_stats_extra extra;
} __attribute__((packed));





struct wmi_vdev_stats {
 __le32 vdev_id;
} __attribute__((packed));





struct wmi_peer_stats {
 struct wmi_mac_addr peer_macaddr;
 __le32 peer_rssi;
 __le32 peer_tx_rate;
} __attribute__((packed));

struct wmi_10x_peer_stats {
 struct wmi_peer_stats old;
 __le32 peer_rx_rate;
} __attribute__((packed));

struct wmi_10_2_peer_stats {
 struct wmi_peer_stats old;
 __le32 peer_rx_rate;
 __le32 current_per;
 __le32 retries;
 __le32 tx_rate_count;
 __le32 max_4ms_frame_len;
 __le32 total_sub_frames;
 __le32 tx_bytes;
 __le32 num_pkt_loss_overflow[4];
 __le32 num_pkt_loss_excess_retry[4];
} __attribute__((packed));

struct wmi_10_2_4_peer_stats {
 struct wmi_10_2_peer_stats common;
 __le32 peer_rssi_changed;
} __attribute__((packed));

struct wmi_10_2_4_ext_peer_stats {
 struct wmi_10_2_peer_stats common;
 __le32 peer_rssi_changed;
 __le32 rx_duration;
} __attribute__((packed));

struct wmi_10_4_peer_stats {
 struct wmi_mac_addr peer_macaddr;
 __le32 peer_rssi;
 __le32 peer_rssi_seq_num;
 __le32 peer_tx_rate;
 __le32 peer_rx_rate;
 __le32 current_per;
 __le32 retries;
 __le32 tx_rate_count;
 __le32 max_4ms_frame_len;
 __le32 total_sub_frames;
 __le32 tx_bytes;
 __le32 num_pkt_loss_overflow[4];
 __le32 num_pkt_loss_excess_retry[4];
 __le32 peer_rssi_changed;
} __attribute__((packed));

struct wmi_10_4_peer_extd_stats {
 struct wmi_10_4_peer_stats common;
 struct wmi_mac_addr peer_macaddr;
 __le32 inactive_time;
 __le32 peer_chain_rssi;
 __le32 rx_duration;
 __le32 reserved[10];
} __attribute__((packed));

struct wmi_10_2_pdev_ext_stats {
 __le32 rx_rssi_comb;
 __le32 rx_rssi[4];
 __le32 rx_mcs[10];
 __le32 tx_mcs[10];
 __le32 ack_rssi;
} __attribute__((packed));

struct wmi_vdev_create_cmd {
 __le32 vdev_id;
 __le32 vdev_type;
 __le32 vdev_subtype;
 struct wmi_mac_addr vdev_macaddr;
} __attribute__((packed));

enum wmi_vdev_type {
 WMI_VDEV_TYPE_AP = 1,
 WMI_VDEV_TYPE_STA = 2,
 WMI_VDEV_TYPE_IBSS = 3,
 WMI_VDEV_TYPE_MONITOR = 4,
};

enum wmi_vdev_subtype {
 WMI_VDEV_SUBTYPE_NONE,
 WMI_VDEV_SUBTYPE_P2P_DEVICE,
 WMI_VDEV_SUBTYPE_P2P_CLIENT,
 WMI_VDEV_SUBTYPE_P2P_GO,
 WMI_VDEV_SUBTYPE_PROXY_STA,
 WMI_VDEV_SUBTYPE_MESH_11S,
 WMI_VDEV_SUBTYPE_MESH_NON_11S,
};

enum wmi_vdev_subtype_legacy {
 WMI_VDEV_SUBTYPE_LEGACY_NONE = 0,
 WMI_VDEV_SUBTYPE_LEGACY_P2P_DEV = 1,
 WMI_VDEV_SUBTYPE_LEGACY_P2P_CLI = 2,
 WMI_VDEV_SUBTYPE_LEGACY_P2P_GO = 3,
 WMI_VDEV_SUBTYPE_LEGACY_PROXY_STA = 4,
};

enum wmi_vdev_subtype_10_2_4 {
 WMI_VDEV_SUBTYPE_10_2_4_NONE = 0,
 WMI_VDEV_SUBTYPE_10_2_4_P2P_DEV = 1,
 WMI_VDEV_SUBTYPE_10_2_4_P2P_CLI = 2,
 WMI_VDEV_SUBTYPE_10_2_4_P2P_GO = 3,
 WMI_VDEV_SUBTYPE_10_2_4_PROXY_STA = 4,
 WMI_VDEV_SUBTYPE_10_2_4_MESH_11S = 5,
};

enum wmi_vdev_subtype_10_4 {
 WMI_VDEV_SUBTYPE_10_4_NONE = 0,
 WMI_VDEV_SUBTYPE_10_4_P2P_DEV = 1,
 WMI_VDEV_SUBTYPE_10_4_P2P_CLI = 2,
 WMI_VDEV_SUBTYPE_10_4_P2P_GO = 3,
 WMI_VDEV_SUBTYPE_10_4_PROXY_STA = 4,
 WMI_VDEV_SUBTYPE_10_4_MESH_NON_11S = 5,
 WMI_VDEV_SUBTYPE_10_4_MESH_11S = 6,
};
# 4421 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_p2p_noa_descriptor {
 __le32 type_count;
 __le32 duration;
 __le32 interval;
 __le32 start_time;
} __attribute__((packed));

struct wmi_vdev_start_request_cmd {

 struct wmi_channel chan;

 __le32 vdev_id;

 __le32 requestor_id;

 __le32 beacon_interval;

 __le32 dtim_period;

 __le32 flags;

 struct wmi_ssid ssid;

 __le32 bcn_tx_rate;

 __le32 bcn_tx_power;

 __le32 num_noa_descriptors;




 __le32 disable_hw_ack;

 struct wmi_p2p_noa_descriptor noa_descriptors[2];
} __attribute__((packed));

struct wmi_vdev_restart_request_cmd {
 struct wmi_vdev_start_request_cmd vdev_start_request_cmd;
} __attribute__((packed));

struct wmi_vdev_start_request_arg {
 u32 vdev_id;
 struct wmi_channel_arg channel;
 u32 bcn_intval;
 u32 dtim_period;
 u8 *ssid;
 u32 ssid_len;
 u32 bcn_tx_rate;
 u32 bcn_tx_power;
 bool disable_hw_ack;
 bool hidden_ssid;
 bool pmf_enabled;
};

struct wmi_vdev_delete_cmd {

 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_up_cmd {
 __le32 vdev_id;
 __le32 vdev_assoc_id;
 struct wmi_mac_addr vdev_bssid;
} __attribute__((packed));

struct wmi_vdev_stop_cmd {
 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_down_cmd {
 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_standby_response_cmd {

 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_resume_response_cmd {

 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_set_param_cmd {
 __le32 vdev_id;
 __le32 param_id;
 __le32 param_value;
} __attribute__((packed));
# 4518 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_key_seq_counter {
 __le32 key_seq_counter_l;
 __le32 key_seq_counter_h;
} __attribute__((packed));
# 4532 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_vdev_install_key_cmd {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
 __le32 key_idx;
 __le32 key_flags;
 __le32 key_cipher;
 struct wmi_key_seq_counter key_rsc_counter;
 struct wmi_key_seq_counter key_global_rsc_counter;
 struct wmi_key_seq_counter key_tsc_counter;
 u8 wpi_key_rsc_counter[16];
 u8 wpi_key_tsc_counter[16];
 __le32 key_len;
 __le32 key_txmic_len;
 __le32 key_rxmic_len;


 u8 key_data[0];
} __attribute__((packed));

struct wmi_vdev_install_key_arg {
 u32 vdev_id;
 const u8 *macaddr;
 u32 key_idx;
 u32 key_flags;
 u32 key_cipher;
 u32 key_len;
 u32 key_txmic_len;
 u32 key_rxmic_len;
 const void *key_data;
};
# 4576 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_rate_preamble {
 WMI_RATE_PREAMBLE_OFDM,
 WMI_RATE_PREAMBLE_CCK,
 WMI_RATE_PREAMBLE_HT,
 WMI_RATE_PREAMBLE_VHT,
};
# 4591 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_vdev_param_map {
 u32 rts_threshold;
 u32 fragmentation_threshold;
 u32 beacon_interval;
 u32 listen_interval;
 u32 multicast_rate;
 u32 mgmt_tx_rate;
 u32 slot_time;
 u32 preamble;
 u32 swba_time;
 u32 wmi_vdev_stats_update_period;
 u32 wmi_vdev_pwrsave_ageout_time;
 u32 wmi_vdev_host_swba_interval;
 u32 dtim_period;
 u32 wmi_vdev_oc_scheduler_air_time_limit;
 u32 wds;
 u32 atim_window;
 u32 bmiss_count_max;
 u32 bmiss_first_bcnt;
 u32 bmiss_final_bcnt;
 u32 feature_wmm;
 u32 chwidth;
 u32 chextoffset;
 u32 disable_htprotection;
 u32 sta_quickkickout;
 u32 mgmt_rate;
 u32 protection_mode;
 u32 fixed_rate;
 u32 sgi;
 u32 ldpc;
 u32 tx_stbc;
 u32 rx_stbc;
 u32 intra_bss_fwd;
 u32 def_keyid;
 u32 nss;
 u32 bcast_data_rate;
 u32 mcast_data_rate;
 u32 mcast_indicate;
 u32 dhcp_indicate;
 u32 unknown_dest_indicate;
 u32 ap_keepalive_min_idle_inactive_time_secs;
 u32 ap_keepalive_max_idle_inactive_time_secs;
 u32 ap_keepalive_max_unresponsive_time_secs;
 u32 ap_enable_nawds;
 u32 mcast2ucast_set;
 u32 enable_rtscts;
 u32 txbf;
 u32 packet_powersave;
 u32 drop_unencry;
 u32 tx_encap_type;
 u32 ap_detect_out_of_sync_sleeping_sta_time_secs;
 u32 rc_num_retries;
 u32 cabq_maxdur;
 u32 mfptest_set;
 u32 rts_fixed_rate;
 u32 vht_sgimask;
 u32 vht80_ratemask;
 u32 early_rx_adjust_enable;
 u32 early_rx_tgt_bmiss_num;
 u32 early_rx_bmiss_sample_cycle;
 u32 early_rx_slop_step;
 u32 early_rx_init_slop;
 u32 early_rx_adjust_pause;
 u32 proxy_sta;
 u32 meru_vc;
 u32 rx_decap_type;
 u32 bw_nss_ratemask;
 u32 set_tsf;
};




enum wmi_vdev_param {

 WMI_VDEV_PARAM_RTS_THRESHOLD = 0x1,

 WMI_VDEV_PARAM_FRAGMENTATION_THRESHOLD,

 WMI_VDEV_PARAM_BEACON_INTERVAL,

 WMI_VDEV_PARAM_LISTEN_INTERVAL,

 WMI_VDEV_PARAM_MULTICAST_RATE,

 WMI_VDEV_PARAM_MGMT_TX_RATE,

 WMI_VDEV_PARAM_SLOT_TIME,

 WMI_VDEV_PARAM_PREAMBLE,

 WMI_VDEV_PARAM_SWBA_TIME,

 WMI_VDEV_STATS_UPDATE_PERIOD,

 WMI_VDEV_PWRSAVE_AGEOUT_TIME,




 WMI_VDEV_HOST_SWBA_INTERVAL,

 WMI_VDEV_PARAM_DTIM_PERIOD,




 WMI_VDEV_OC_SCHEDULER_AIR_TIME_LIMIT,

 WMI_VDEV_PARAM_WDS,

 WMI_VDEV_PARAM_ATIM_WINDOW,

 WMI_VDEV_PARAM_BMISS_COUNT_MAX,

 WMI_VDEV_PARAM_BMISS_FIRST_BCNT,

 WMI_VDEV_PARAM_BMISS_FINAL_BCNT,

 WMI_VDEV_PARAM_FEATURE_WMM,

 WMI_VDEV_PARAM_CHWIDTH,

 WMI_VDEV_PARAM_CHEXTOFFSET,

 WMI_VDEV_PARAM_DISABLE_HTPROTECTION,

 WMI_VDEV_PARAM_STA_QUICKKICKOUT,

 WMI_VDEV_PARAM_MGMT_RATE,

 WMI_VDEV_PARAM_PROTECTION_MODE,

 WMI_VDEV_PARAM_FIXED_RATE,

 WMI_VDEV_PARAM_SGI,

 WMI_VDEV_PARAM_LDPC,

 WMI_VDEV_PARAM_TX_STBC,

 WMI_VDEV_PARAM_RX_STBC,

 WMI_VDEV_PARAM_INTRA_BSS_FWD,

 WMI_VDEV_PARAM_DEF_KEYID,

 WMI_VDEV_PARAM_NSS,

 WMI_VDEV_PARAM_BCAST_DATA_RATE,

 WMI_VDEV_PARAM_MCAST_DATA_RATE,

 WMI_VDEV_PARAM_MCAST_INDICATE,

 WMI_VDEV_PARAM_DHCP_INDICATE,

 WMI_VDEV_PARAM_UNKNOWN_DEST_INDICATE,


 WMI_VDEV_PARAM_AP_KEEPALIVE_MIN_IDLE_INACTIVE_TIME_SECS,
# 4763 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_VDEV_PARAM_AP_KEEPALIVE_MAX_IDLE_INACTIVE_TIME_SECS,






 WMI_VDEV_PARAM_AP_KEEPALIVE_MAX_UNRESPONSIVE_TIME_SECS,


 WMI_VDEV_PARAM_AP_ENABLE_NAWDS,

 WMI_VDEV_PARAM_ENABLE_RTSCTS,

 WMI_VDEV_PARAM_TXBF,


 WMI_VDEV_PARAM_PACKET_POWERSAVE,





 WMI_VDEV_PARAM_DROP_UNENCRY,




 WMI_VDEV_PARAM_TX_ENCAP_TYPE,
};


enum wmi_10x_vdev_param {

 WMI_10X_VDEV_PARAM_RTS_THRESHOLD = 0x1,

 WMI_10X_VDEV_PARAM_FRAGMENTATION_THRESHOLD,

 WMI_10X_VDEV_PARAM_BEACON_INTERVAL,

 WMI_10X_VDEV_PARAM_LISTEN_INTERVAL,

 WMI_10X_VDEV_PARAM_MULTICAST_RATE,

 WMI_10X_VDEV_PARAM_MGMT_TX_RATE,

 WMI_10X_VDEV_PARAM_SLOT_TIME,

 WMI_10X_VDEV_PARAM_PREAMBLE,

 WMI_10X_VDEV_PARAM_SWBA_TIME,

 WMI_10X_VDEV_STATS_UPDATE_PERIOD,

 WMI_10X_VDEV_PWRSAVE_AGEOUT_TIME,




 WMI_10X_VDEV_HOST_SWBA_INTERVAL,

 WMI_10X_VDEV_PARAM_DTIM_PERIOD,




 WMI_10X_VDEV_OC_SCHEDULER_AIR_TIME_LIMIT,

 WMI_10X_VDEV_PARAM_WDS,

 WMI_10X_VDEV_PARAM_ATIM_WINDOW,

 WMI_10X_VDEV_PARAM_BMISS_COUNT_MAX,

 WMI_10X_VDEV_PARAM_FEATURE_WMM,

 WMI_10X_VDEV_PARAM_CHWIDTH,

 WMI_10X_VDEV_PARAM_CHEXTOFFSET,

 WMI_10X_VDEV_PARAM_DISABLE_HTPROTECTION,

 WMI_10X_VDEV_PARAM_STA_QUICKKICKOUT,

 WMI_10X_VDEV_PARAM_MGMT_RATE,

 WMI_10X_VDEV_PARAM_PROTECTION_MODE,

 WMI_10X_VDEV_PARAM_FIXED_RATE,

 WMI_10X_VDEV_PARAM_SGI,

 WMI_10X_VDEV_PARAM_LDPC,

 WMI_10X_VDEV_PARAM_TX_STBC,

 WMI_10X_VDEV_PARAM_RX_STBC,

 WMI_10X_VDEV_PARAM_INTRA_BSS_FWD,

 WMI_10X_VDEV_PARAM_DEF_KEYID,

 WMI_10X_VDEV_PARAM_NSS,

 WMI_10X_VDEV_PARAM_BCAST_DATA_RATE,

 WMI_10X_VDEV_PARAM_MCAST_DATA_RATE,

 WMI_10X_VDEV_PARAM_MCAST_INDICATE,

 WMI_10X_VDEV_PARAM_DHCP_INDICATE,

 WMI_10X_VDEV_PARAM_UNKNOWN_DEST_INDICATE,


 WMI_10X_VDEV_PARAM_AP_KEEPALIVE_MIN_IDLE_INACTIVE_TIME_SECS,
# 4890 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_10X_VDEV_PARAM_AP_KEEPALIVE_MAX_IDLE_INACTIVE_TIME_SECS,






 WMI_10X_VDEV_PARAM_AP_KEEPALIVE_MAX_UNRESPONSIVE_TIME_SECS,


 WMI_10X_VDEV_PARAM_AP_ENABLE_NAWDS,

 WMI_10X_VDEV_PARAM_MCAST2UCAST_SET,

 WMI_10X_VDEV_PARAM_ENABLE_RTSCTS,

 WMI_10X_VDEV_PARAM_AP_DETECT_OUT_OF_SYNC_SLEEPING_STA_TIME_SECS,


 WMI_10X_VDEV_PARAM_TX_ENCAP_TYPE,
 WMI_10X_VDEV_PARAM_CABQ_MAXDUR,
 WMI_10X_VDEV_PARAM_MFPTEST_SET,
 WMI_10X_VDEV_PARAM_RTS_FIXED_RATE,
 WMI_10X_VDEV_PARAM_VHT_SGIMASK,
 WMI_10X_VDEV_PARAM_VHT80_RATEMASK,
 WMI_10X_VDEV_PARAM_TSF_INCREMENT,
};

enum wmi_10_4_vdev_param {
 WMI_10_4_VDEV_PARAM_RTS_THRESHOLD = 0x1,
 WMI_10_4_VDEV_PARAM_FRAGMENTATION_THRESHOLD,
 WMI_10_4_VDEV_PARAM_BEACON_INTERVAL,
 WMI_10_4_VDEV_PARAM_LISTEN_INTERVAL,
 WMI_10_4_VDEV_PARAM_MULTICAST_RATE,
 WMI_10_4_VDEV_PARAM_MGMT_TX_RATE,
 WMI_10_4_VDEV_PARAM_SLOT_TIME,
 WMI_10_4_VDEV_PARAM_PREAMBLE,
 WMI_10_4_VDEV_PARAM_SWBA_TIME,
 WMI_10_4_VDEV_STATS_UPDATE_PERIOD,
 WMI_10_4_VDEV_PWRSAVE_AGEOUT_TIME,
 WMI_10_4_VDEV_HOST_SWBA_INTERVAL,
 WMI_10_4_VDEV_PARAM_DTIM_PERIOD,
 WMI_10_4_VDEV_OC_SCHEDULER_AIR_TIME_LIMIT,
 WMI_10_4_VDEV_PARAM_WDS,
 WMI_10_4_VDEV_PARAM_ATIM_WINDOW,
 WMI_10_4_VDEV_PARAM_BMISS_COUNT_MAX,
 WMI_10_4_VDEV_PARAM_BMISS_FIRST_BCNT,
 WMI_10_4_VDEV_PARAM_BMISS_FINAL_BCNT,
 WMI_10_4_VDEV_PARAM_FEATURE_WMM,
 WMI_10_4_VDEV_PARAM_CHWIDTH,
 WMI_10_4_VDEV_PARAM_CHEXTOFFSET,
 WMI_10_4_VDEV_PARAM_DISABLE_HTPROTECTION,
 WMI_10_4_VDEV_PARAM_STA_QUICKKICKOUT,
 WMI_10_4_VDEV_PARAM_MGMT_RATE,
 WMI_10_4_VDEV_PARAM_PROTECTION_MODE,
 WMI_10_4_VDEV_PARAM_FIXED_RATE,
 WMI_10_4_VDEV_PARAM_SGI,
 WMI_10_4_VDEV_PARAM_LDPC,
 WMI_10_4_VDEV_PARAM_TX_STBC,
 WMI_10_4_VDEV_PARAM_RX_STBC,
 WMI_10_4_VDEV_PARAM_INTRA_BSS_FWD,
 WMI_10_4_VDEV_PARAM_DEF_KEYID,
 WMI_10_4_VDEV_PARAM_NSS,
 WMI_10_4_VDEV_PARAM_BCAST_DATA_RATE,
 WMI_10_4_VDEV_PARAM_MCAST_DATA_RATE,
 WMI_10_4_VDEV_PARAM_MCAST_INDICATE,
 WMI_10_4_VDEV_PARAM_DHCP_INDICATE,
 WMI_10_4_VDEV_PARAM_UNKNOWN_DEST_INDICATE,
 WMI_10_4_VDEV_PARAM_AP_KEEPALIVE_MIN_IDLE_INACTIVE_TIME_SECS,
 WMI_10_4_VDEV_PARAM_AP_KEEPALIVE_MAX_IDLE_INACTIVE_TIME_SECS,
 WMI_10_4_VDEV_PARAM_AP_KEEPALIVE_MAX_UNRESPONSIVE_TIME_SECS,
 WMI_10_4_VDEV_PARAM_AP_ENABLE_NAWDS,
 WMI_10_4_VDEV_PARAM_MCAST2UCAST_SET,
 WMI_10_4_VDEV_PARAM_ENABLE_RTSCTS,
 WMI_10_4_VDEV_PARAM_RC_NUM_RETRIES,
 WMI_10_4_VDEV_PARAM_TXBF,
 WMI_10_4_VDEV_PARAM_PACKET_POWERSAVE,
 WMI_10_4_VDEV_PARAM_DROP_UNENCRY,
 WMI_10_4_VDEV_PARAM_TX_ENCAP_TYPE,
 WMI_10_4_VDEV_PARAM_AP_DETECT_OUT_OF_SYNC_SLEEPING_STA_TIME_SECS,
 WMI_10_4_VDEV_PARAM_CABQ_MAXDUR,
 WMI_10_4_VDEV_PARAM_MFPTEST_SET,
 WMI_10_4_VDEV_PARAM_RTS_FIXED_RATE,
 WMI_10_4_VDEV_PARAM_VHT_SGIMASK,
 WMI_10_4_VDEV_PARAM_VHT80_RATEMASK,
 WMI_10_4_VDEV_PARAM_EARLY_RX_ADJUST_ENABLE,
 WMI_10_4_VDEV_PARAM_EARLY_RX_TGT_BMISS_NUM,
 WMI_10_4_VDEV_PARAM_EARLY_RX_BMISS_SAMPLE_CYCLE,
 WMI_10_4_VDEV_PARAM_EARLY_RX_SLOP_STEP,
 WMI_10_4_VDEV_PARAM_EARLY_RX_INIT_SLOP,
 WMI_10_4_VDEV_PARAM_EARLY_RX_ADJUST_PAUSE,
 WMI_10_4_VDEV_PARAM_PROXY_STA,
 WMI_10_4_VDEV_PARAM_MERU_VC,
 WMI_10_4_VDEV_PARAM_RX_DECAP_TYPE,
 WMI_10_4_VDEV_PARAM_BW_NSS_RATEMASK,
 WMI_10_4_VDEV_PARAM_SENSOR_AP,
 WMI_10_4_VDEV_PARAM_BEACON_RATE,
 WMI_10_4_VDEV_PARAM_DTIM_ENABLE_CTS,
 WMI_10_4_VDEV_PARAM_STA_KICKOUT,
 WMI_10_4_VDEV_PARAM_CAPABILITIES,
 WMI_10_4_VDEV_PARAM_TSF_INCREMENT,
};
# 5012 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_start_event_param {
 WMI_VDEV_RESP_START_EVENT = 0,
 WMI_VDEV_RESP_RESTART_EVENT,
};

struct wmi_vdev_start_response_event {
 __le32 vdev_id;
 __le32 req_id;
 __le32 resp_type;
 __le32 status;
} __attribute__((packed));

struct wmi_vdev_standby_req_event {

 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_resume_req_event {

 __le32 vdev_id;
} __attribute__((packed));

struct wmi_vdev_stopped_event {

 __le32 vdev_id;
} __attribute__((packed));





struct wmi_vdev_simple_event {

 __le32 vdev_id;
} __attribute__((packed));
# 5059 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_vdev_spectral_conf_cmd {
 __le32 vdev_id;


 __le32 scan_count;
 __le32 scan_period;
 __le32 scan_priority;


 __le32 scan_fft_size;
 __le32 scan_gc_ena;
 __le32 scan_restart_ena;
 __le32 scan_noise_floor_ref;
 __le32 scan_init_delay;
 __le32 scan_nb_tone_thr;
 __le32 scan_str_bin_thr;
 __le32 scan_wb_rpt_mode;
 __le32 scan_rssi_rpt_mode;
 __le32 scan_rssi_thr;
 __le32 scan_pwr_format;
# 5091 "drivers/net/wireless/ath/ath10k/wmi.h"
 __le32 scan_rpt_mode;
 __le32 scan_bin_scale;
 __le32 scan_dbm_adj;
 __le32 scan_chn_mask;
} __attribute__((packed));

struct wmi_vdev_spectral_conf_arg {
 u32 vdev_id;
 u32 scan_count;
 u32 scan_period;
 u32 scan_priority;
 u32 scan_fft_size;
 u32 scan_gc_ena;
 u32 scan_restart_ena;
 u32 scan_noise_floor_ref;
 u32 scan_init_delay;
 u32 scan_nb_tone_thr;
 u32 scan_str_bin_thr;
 u32 scan_wb_rpt_mode;
 u32 scan_rssi_rpt_mode;
 u32 scan_rssi_thr;
 u32 scan_pwr_format;
 u32 scan_rpt_mode;
 u32 scan_bin_scale;
 u32 scan_dbm_adj;
 u32 scan_chn_mask;
};
# 5139 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_vdev_spectral_enable_cmd {
 __le32 vdev_id;
 __le32 trigger_cmd;
 __le32 enable_cmd;
} __attribute__((packed));







struct wmi_bcn_tx_hdr {
 __le32 vdev_id;
 __le32 tx_rate;
 __le32 tx_power;
 __le32 bcn_len;
} __attribute__((packed));

struct wmi_bcn_tx_cmd {
 struct wmi_bcn_tx_hdr hdr;
 u8 *bcn[0];
} __attribute__((packed));

struct wmi_bcn_tx_arg {
 u32 vdev_id;
 u32 tx_rate;
 u32 tx_power;
 u32 bcn_len;
 const void *bcn;
};

enum wmi_bcn_tx_ref_flags {
 WMI_BCN_TX_REF_FLAG_DTIM_ZERO = 0x1,
 WMI_BCN_TX_REF_FLAG_DELIVER_CAB = 0x2,
};






struct wmi_bcn_tx_ref_cmd {
 __le32 vdev_id;
 __le32 data_len;

 __le32 data_ptr;

 __le32 msdu_id;

 __le32 frame_control;

 __le32 flags;

 __le32 antenna_mask;
} __attribute__((packed));
# 5203 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_bcn_filter_rx_cmd {

 __le32 bcn_filter_id;

 __le32 bcn_filter;

 __le32 bcn_filter_len;

 u8 *bcn_filter_buf;
} __attribute__((packed));


struct wmi_bcn_prb_info {

 __le32 caps;

 __le32 erp;
# 5229 "drivers/net/wireless/ath/ath10k/wmi.h"
} __attribute__((packed));

struct wmi_bcn_tmpl_cmd {

 __le32 vdev_id;

 __le32 tim_ie_offset;

 struct wmi_bcn_prb_info bcn_prb_info;

 __le32 buf_len;

 u8 data[1];
} __attribute__((packed));

struct wmi_prb_tmpl_cmd {

 __le32 vdev_id;

 struct wmi_bcn_prb_info bcn_prb_info;

 __le32 buf_len;

 u8 data[1];
} __attribute__((packed));

enum wmi_sta_ps_mode {

 WMI_STA_PS_MODE_DISABLED = 0,

 WMI_STA_PS_MODE_ENABLED = 1,
};

struct wmi_sta_powersave_mode_cmd {

 __le32 vdev_id;





 __le32 sta_ps_mode;
} __attribute__((packed));

enum wmi_csa_offload_en {
 WMI_CSA_OFFLOAD_DISABLE = 0,
 WMI_CSA_OFFLOAD_ENABLE = 1,
};

struct wmi_csa_offload_enable_cmd {
 __le32 vdev_id;
 __le32 csa_offload_enable;
} __attribute__((packed));

struct wmi_csa_offload_chanswitch_cmd {
 __le32 vdev_id;
 struct wmi_channel chan;
} __attribute__((packed));







enum wmi_sta_ps_param_rx_wake_policy {






 WMI_STA_PS_RX_WAKE_POLICY_WAKE = 0,
# 5310 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_STA_PS_RX_WAKE_POLICY_POLL_UAPSD = 1,
};
# 5321 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_sta_ps_param_tx_wake_threshold {
 WMI_STA_PS_TX_WAKE_THRESHOLD_NEVER = 0,
 WMI_STA_PS_TX_WAKE_THRESHOLD_ALWAYS = 1,





};
# 5340 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_sta_ps_param_pspoll_count {
 WMI_STA_PS_PSPOLL_COUNT_NO_MAX = 0,
# 5352 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_STA_PS_PSPOLL_COUNT_UAPSD = 3,
};
# 5367 "drivers/net/wireless/ath/ath10k/wmi.h"
enum wmi_sta_ps_param_uapsd {
 WMI_STA_PS_UAPSD_AC0_DELIVERY_EN = (1 << 0),
 WMI_STA_PS_UAPSD_AC0_TRIGGER_EN = (1 << 1),
 WMI_STA_PS_UAPSD_AC1_DELIVERY_EN = (1 << 2),
 WMI_STA_PS_UAPSD_AC1_TRIGGER_EN = (1 << 3),
 WMI_STA_PS_UAPSD_AC2_DELIVERY_EN = (1 << 4),
 WMI_STA_PS_UAPSD_AC2_TRIGGER_EN = (1 << 5),
 WMI_STA_PS_UAPSD_AC3_DELIVERY_EN = (1 << 6),
 WMI_STA_PS_UAPSD_AC3_TRIGGER_EN = (1 << 7),
};



struct wmi_sta_uapsd_auto_trig_param {
 __le32 wmm_ac;
 __le32 user_priority;
 __le32 service_interval;
 __le32 suspend_interval;
 __le32 delay_interval;
};

struct wmi_sta_uapsd_auto_trig_cmd_fixed_param {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
 __le32 num_ac;
};

struct wmi_sta_uapsd_auto_trig_arg {
 u32 wmm_ac;
 u32 user_priority;
 u32 service_interval;
 u32 suspend_interval;
 u32 delay_interval;
};

enum wmi_sta_powersave_param {





 WMI_STA_PS_PARAM_RX_WAKE_POLICY = 0,






 WMI_STA_PS_PARAM_TX_WAKE_THRESHOLD = 1,







 WMI_STA_PS_PARAM_PSPOLL_COUNT = 2,
# 5432 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_STA_PS_PARAM_INACTIVITY_TIME = 3,






 WMI_STA_PS_PARAM_UAPSD = 4,
};

struct wmi_sta_powersave_param_cmd {
 __le32 vdev_id;
 __le32 param_id;
 __le32 param_value;
} __attribute__((packed));
# 5455 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_sta_mimo_ps_mode_cmd {

 __le32 vdev_id;

 __le32 mimo_pwrsave_mode;
} __attribute__((packed));


enum wmi_ap_ps_param_uapsd {
 WMI_AP_PS_UAPSD_AC0_DELIVERY_EN = (1 << 0),
 WMI_AP_PS_UAPSD_AC0_TRIGGER_EN = (1 << 1),
 WMI_AP_PS_UAPSD_AC1_DELIVERY_EN = (1 << 2),
 WMI_AP_PS_UAPSD_AC1_TRIGGER_EN = (1 << 3),
 WMI_AP_PS_UAPSD_AC2_DELIVERY_EN = (1 << 4),
 WMI_AP_PS_UAPSD_AC2_TRIGGER_EN = (1 << 5),
 WMI_AP_PS_UAPSD_AC3_DELIVERY_EN = (1 << 6),
 WMI_AP_PS_UAPSD_AC3_TRIGGER_EN = (1 << 7),
};


enum wmi_ap_ps_peer_param_max_sp {
 WMI_AP_PS_PEER_PARAM_MAX_SP_UNLIMITED = 0,
 WMI_AP_PS_PEER_PARAM_MAX_SP_2 = 1,
 WMI_AP_PS_PEER_PARAM_MAX_SP_4 = 2,
 WMI_AP_PS_PEER_PARAM_MAX_SP_6 = 3,
 MAX_WMI_AP_PS_PEER_PARAM_MAX_SP,
};





enum wmi_ap_ps_peer_param {
# 5499 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_AP_PS_PEER_PARAM_UAPSD = 0,
# 5508 "drivers/net/wireless/ath/ath10k/wmi.h"
 WMI_AP_PS_PEER_PARAM_MAX_SP = 1,


 WMI_AP_PS_PEER_PARAM_AGEOUT_TIME = 2,
};

struct wmi_ap_ps_peer_cmd {

 __le32 vdev_id;


 struct wmi_mac_addr peer_macaddr;


 __le32 param_id;


 __le32 param_value;
} __attribute__((packed));




struct wmi_tim_info {
 __le32 tim_len;
 __le32 tim_mcast;
 __le32 tim_bitmap[4];
 __le32 tim_changed;
 __le32 tim_num_ps_pending;
} __attribute__((packed));

struct wmi_tim_info_arg {
 __le32 tim_len;
 __le32 tim_mcast;
 const __le32 *tim_bitmap;
 __le32 tim_changed;
 __le32 tim_num_ps_pending;
} __attribute__((packed));







struct wmi_p2p_noa_info {


 u8 changed;

 u8 index;


 u8 ctwindow_oppps;

 u8 num_descriptors;

 struct wmi_p2p_noa_descriptor descriptors[4];
} __attribute__((packed));

struct wmi_bcn_info {
 struct wmi_tim_info tim_info;
 struct wmi_p2p_noa_info p2p_noa_info;
} __attribute__((packed));

struct wmi_host_swba_event {
 __le32 vdev_map;
 struct wmi_bcn_info bcn_info[0];
} __attribute__((packed));

struct wmi_10_2_4_bcn_info {
 struct wmi_tim_info tim_info;

} __attribute__((packed));

struct wmi_10_2_4_host_swba_event {
 __le32 vdev_map;
 struct wmi_10_2_4_bcn_info bcn_info[0];
} __attribute__((packed));




struct wmi_10_4_tim_info {
 __le32 tim_len;
 __le32 tim_mcast;
 __le32 tim_bitmap[17];
 __le32 tim_changed;
 __le32 tim_num_ps_pending;
} __attribute__((packed));



struct wmi_10_4_p2p_noa_info {



 u8 changed;

 u8 index;



 u8 ctwindow_oppps;

 u8 num_descriptors;

 struct wmi_p2p_noa_descriptor
  noa_descriptors[1];
} __attribute__((packed));

struct wmi_10_4_bcn_info {
 struct wmi_10_4_tim_info tim_info;
 struct wmi_10_4_p2p_noa_info p2p_noa_info;
} __attribute__((packed));

struct wmi_10_4_host_swba_event {
 __le32 vdev_map;
 struct wmi_10_4_bcn_info bcn_info[0];
} __attribute__((packed));



struct wmi_tbtt_offset_event {
 __le32 vdev_map;
 __le32 tbttoffset_list[16];
} __attribute__((packed));

struct wmi_peer_create_cmd {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
} __attribute__((packed));

enum wmi_peer_type {
 WMI_PEER_TYPE_DEFAULT = 0,
 WMI_PEER_TYPE_BSS = 1,
 WMI_PEER_TYPE_TDLS = 2,
};

struct wmi_peer_delete_cmd {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
} __attribute__((packed));

struct wmi_peer_flush_tids_cmd {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
 __le32 peer_tid_bitmap;
} __attribute__((packed));

struct wmi_fixed_rate {






 __le32 rate_mode;




 __le32 rate_series;





 __le32 rate_retries;
} __attribute__((packed));

struct wmi_peer_fixed_rate_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;

 struct wmi_fixed_rate peer_fixed_rate;
} __attribute__((packed));



struct wmi_addba_clear_resp_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;
} __attribute__((packed));

struct wmi_addba_send_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;

 __le32 tid;

 __le32 buffersize;
} __attribute__((packed));

struct wmi_delba_send_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;

 __le32 tid;

 __le32 initiator;

 __le32 reasoncode;
} __attribute__((packed));

struct wmi_addba_setresponse_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;

 __le32 tid;

 __le32 statuscode;
} __attribute__((packed));

struct wmi_send_singleamsdu_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;

 __le32 tid;
} __attribute__((packed));

enum wmi_peer_smps_state {
 WMI_PEER_SMPS_PS_NONE = 0x0,
 WMI_PEER_SMPS_STATIC = 0x1,
 WMI_PEER_SMPS_DYNAMIC = 0x2
};

enum wmi_peer_chwidth {
 WMI_PEER_CHWIDTH_20MHZ = 0,
 WMI_PEER_CHWIDTH_40MHZ = 1,
 WMI_PEER_CHWIDTH_80MHZ = 2,
};

enum wmi_peer_param {
 WMI_PEER_SMPS_STATE = 0x1,
 WMI_PEER_AMPDU = 0x2,
 WMI_PEER_AUTHORIZE = 0x3,
 WMI_PEER_CHAN_WIDTH = 0x4,
 WMI_PEER_NSS = 0x5,
 WMI_PEER_USE_4ADDR = 0x6,
 WMI_PEER_DUMMY_VAR = 0xff,
};

struct wmi_peer_set_param_cmd {
 __le32 vdev_id;
 struct wmi_mac_addr peer_macaddr;
 __le32 param_id;
 __le32 param_value;
} __attribute__((packed));



struct wmi_rate_set {

 __le32 num_rates;





 __le32 rates[(128 / 4) + 1];
} __attribute__((packed));

struct wmi_rate_set_arg {
 unsigned int num_rates;
 u8 rates[128];
};






struct wmi_vht_rate_set {
 __le32 rx_max_rate;
 __le32 rx_mcs_set;
 __le32 tx_max_rate;
 __le32 tx_mcs_set;
} __attribute__((packed));

struct wmi_vht_rate_set_arg {
 u32 rx_max_rate;
 u32 rx_mcs_set;
 u32 tx_max_rate;
 u32 tx_mcs_set;
};

struct wmi_peer_set_rates_cmd {

 struct wmi_mac_addr peer_macaddr;

 struct wmi_rate_set peer_legacy_rates;

 struct wmi_rate_set peer_ht_rates;
} __attribute__((packed));

struct wmi_peer_set_q_empty_callback_cmd {

 __le32 vdev_id;

 struct wmi_mac_addr peer_macaddr;
 __le32 callback_enable;
} __attribute__((packed));

struct wmi_peer_flags_map {
 u32 auth;
 u32 qos;
 u32 need_ptk_4_way;
 u32 need_gtk_2_way;
 u32 apsd;
 u32 ht;
 u32 bw40;
 u32 stbc;
 u32 ldbc;
 u32 dyn_mimops;
 u32 static_mimops;
 u32 spatial_mux;
 u32 vht;
 u32 bw80;
 u32 vht_2g;
 u32 pmf;
};

enum wmi_peer_flags {
 WMI_PEER_AUTH = 0x00000001,
 WMI_PEER_QOS = 0x00000002,
 WMI_PEER_NEED_PTK_4_WAY = 0x00000004,
 WMI_PEER_NEED_GTK_2_WAY = 0x00000010,
 WMI_PEER_APSD = 0x00000800,
 WMI_PEER_HT = 0x00001000,
 WMI_PEER_40MHZ = 0x00002000,
 WMI_PEER_STBC = 0x00008000,
 WMI_PEER_LDPC = 0x00010000,
 WMI_PEER_DYN_MIMOPS = 0x00020000,
 WMI_PEER_STATIC_MIMOPS = 0x00040000,
 WMI_PEER_SPATIAL_MUX = 0x00200000,
 WMI_PEER_VHT = 0x02000000,
 WMI_PEER_80MHZ = 0x04000000,
 WMI_PEER_VHT_2G = 0x08000000,
 WMI_PEER_PMF = 0x10000000,
};

enum wmi_10x_peer_flags {
 WMI_10X_PEER_AUTH = 0x00000001,
 WMI_10X_PEER_QOS = 0x00000002,
 WMI_10X_PEER_NEED_PTK_4_WAY = 0x00000004,
 WMI_10X_PEER_NEED_GTK_2_WAY = 0x00000010,
 WMI_10X_PEER_APSD = 0x00000800,
 WMI_10X_PEER_HT = 0x00001000,
 WMI_10X_PEER_40MHZ = 0x00002000,
 WMI_10X_PEER_STBC = 0x00008000,
 WMI_10X_PEER_LDPC = 0x00010000,
 WMI_10X_PEER_DYN_MIMOPS = 0x00020000,
 WMI_10X_PEER_STATIC_MIMOPS = 0x00040000,
 WMI_10X_PEER_SPATIAL_MUX = 0x00200000,
 WMI_10X_PEER_VHT = 0x02000000,
 WMI_10X_PEER_80MHZ = 0x04000000,
};

enum wmi_10_2_peer_flags {
 WMI_10_2_PEER_AUTH = 0x00000001,
 WMI_10_2_PEER_QOS = 0x00000002,
 WMI_10_2_PEER_NEED_PTK_4_WAY = 0x00000004,
 WMI_10_2_PEER_NEED_GTK_2_WAY = 0x00000010,
 WMI_10_2_PEER_APSD = 0x00000800,
 WMI_10_2_PEER_HT = 0x00001000,
 WMI_10_2_PEER_40MHZ = 0x00002000,
 WMI_10_2_PEER_STBC = 0x00008000,
 WMI_10_2_PEER_LDPC = 0x00010000,
 WMI_10_2_PEER_DYN_MIMOPS = 0x00020000,
 WMI_10_2_PEER_STATIC_MIMOPS = 0x00040000,
 WMI_10_2_PEER_SPATIAL_MUX = 0x00200000,
 WMI_10_2_PEER_VHT = 0x02000000,
 WMI_10_2_PEER_80MHZ = 0x04000000,
 WMI_10_2_PEER_VHT_2G = 0x08000000,
 WMI_10_2_PEER_PMF = 0x10000000,
};
# 5920 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_common_peer_assoc_complete_cmd {
 struct wmi_mac_addr peer_macaddr;
 __le32 vdev_id;
 __le32 peer_new_assoc;
 __le32 peer_associd;
 __le32 peer_flags;
 __le32 peer_caps;
 __le32 peer_listen_intval;
 __le32 peer_ht_caps;
 __le32 peer_max_mpdu;
 __le32 peer_mpdu_density;
 __le32 peer_rate_caps;
 struct wmi_rate_set peer_legacy_rates;
 struct wmi_rate_set peer_ht_rates;
 __le32 peer_nss;
 __le32 peer_vht_caps;
 __le32 peer_phymode;
 struct wmi_vht_rate_set peer_vht_rates;
};

struct wmi_main_peer_assoc_complete_cmd {
 struct wmi_common_peer_assoc_complete_cmd cmd;



 __le32 peer_ht_info[2];
} __attribute__((packed));

struct wmi_10_1_peer_assoc_complete_cmd {
 struct wmi_common_peer_assoc_complete_cmd cmd;
} __attribute__((packed));






struct wmi_10_2_peer_assoc_complete_cmd {
 struct wmi_common_peer_assoc_complete_cmd cmd;
 __le32 info0;
} __attribute__((packed));

struct wmi_10_4_peer_assoc_complete_cmd {
 struct wmi_10_2_peer_assoc_complete_cmd cmd;
 __le32 peer_bw_rxnss_override;
} __attribute__((packed));

struct wmi_peer_assoc_complete_arg {
 u8 addr[6];
 u32 vdev_id;
 bool peer_reassoc;
 u16 peer_aid;
 u32 peer_flags;
 u16 peer_caps;
 u32 peer_listen_intval;
 u32 peer_ht_caps;
 u32 peer_max_mpdu;
 u32 peer_mpdu_density;
 u32 peer_rate_caps;
 struct wmi_rate_set_arg peer_legacy_rates;
 struct wmi_rate_set_arg peer_ht_rates;
 u32 peer_num_spatial_streams;
 u32 peer_vht_caps;
 enum wmi_phy_mode peer_phymode;
 struct wmi_vht_rate_set_arg peer_vht_rates;
};

struct wmi_peer_add_wds_entry_cmd {

 struct wmi_mac_addr peer_macaddr;

 struct wmi_mac_addr wds_macaddr;
} __attribute__((packed));

struct wmi_peer_remove_wds_entry_cmd {

 struct wmi_mac_addr wds_macaddr;
} __attribute__((packed));

struct wmi_peer_q_empty_callback_event {

 struct wmi_mac_addr peer_macaddr;
} __attribute__((packed));




struct wmi_chan_info_event {
 __le32 err_code;
 __le32 freq;
 __le32 cmd_flags;
 __le32 noise_floor;
 __le32 rx_clear_count;
 __le32 cycle_count;
} __attribute__((packed));

struct wmi_10_4_chan_info_event {
 __le32 err_code;
 __le32 freq;
 __le32 cmd_flags;
 __le32 noise_floor;
 __le32 rx_clear_count;
 __le32 cycle_count;
 __le32 chan_tx_pwr_range;
 __le32 chan_tx_pwr_tp;
 __le32 rx_frame_count;
} __attribute__((packed));

struct wmi_peer_sta_kickout_event {
 struct wmi_mac_addr peer_macaddr;
} __attribute__((packed));
# 6039 "drivers/net/wireless/ath/ath10k/wmi.h"
struct bss_bcn_stats {
 __le32 vdev_id;
 __le32 bss_bcnsdropped;
 __le32 bss_bcnsdelivered;
} __attribute__((packed));

struct bcn_filter_stats {
 __le32 bcns_dropped;
 __le32 bcns_delivered;
 __le32 activefilters;
 struct bss_bcn_stats bss_stats;
} __attribute__((packed));

struct wmi_add_bcn_filter_cmd {
 u32 vdev_id;
 u32 ie_map[(256 / 32)];
} __attribute__((packed));

enum wmi_sta_keepalive_method {
 WMI_STA_KEEPALIVE_METHOD_NULL_FRAME = 1,
 WMI_STA_KEEPALIVE_METHOD_UNSOLICITATED_ARP_RESPONSE = 2,
};







struct wmi_sta_keepalive_arp_resp {
 __be32 src_ip4_addr;
 __be32 dest_ip4_addr;
 struct wmi_mac_addr dest_mac_addr;
} __attribute__((packed));

struct wmi_sta_keepalive_cmd {
 __le32 vdev_id;
 __le32 enabled;
 __le32 method;
 __le32 interval;
 struct wmi_sta_keepalive_arp_resp arp_resp;
} __attribute__((packed));

struct wmi_sta_keepalive_arg {
 u32 vdev_id;
 u32 enabled;
 u32 method;
 u32 interval;
 __be32 src_ip4_addr;
 __be32 dest_ip4_addr;
 const u8 dest_mac_addr[6];
};

enum wmi_force_fw_hang_type {
 WMI_FORCE_FW_HANG_ASSERT = 1,
 WMI_FORCE_FW_HANG_NO_DETECT,
 WMI_FORCE_FW_HANG_CTRL_EP_FULL,
 WMI_FORCE_FW_HANG_EMPTY_POINT,
 WMI_FORCE_FW_HANG_STACK_OVERFLOW,
 WMI_FORCE_FW_HANG_INFINITE_LOOP,
};



struct wmi_force_fw_hang_cmd {
 __le32 type;
 __le32 delay_ms;
} __attribute__((packed));

enum ath10k_dbglog_level {
 ATH10K_DBGLOG_LEVEL_VERBOSE = 0,
 ATH10K_DBGLOG_LEVEL_INFO = 1,
 ATH10K_DBGLOG_LEVEL_WARN = 2,
 ATH10K_DBGLOG_LEVEL_ERR = 3,
};
# 6142 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_dbglog_cfg_cmd {

 __le32 module_enable;


 __le32 config_enable;


 __le32 module_valid;


 __le32 config_valid;
} __attribute__((packed));

enum wmi_roam_reason {
 WMI_ROAM_REASON_BETTER_AP = 1,
 WMI_ROAM_REASON_BEACON_MISS = 2,
 WMI_ROAM_REASON_LOW_RSSI = 3,
 WMI_ROAM_REASON_SUITABLE_AP_FOUND = 4,
 WMI_ROAM_REASON_HO_FAILED = 5,


 WMI_ROAM_REASON_MAX,
};

struct wmi_roam_ev {
 __le32 vdev_id;
 __le32 reason;
} __attribute__((packed));
# 6184 "drivers/net/wireless/ath/ath10k/wmi.h"
struct wmi_scan_ev_arg {
 __le32 event_type;
 __le32 reason;
 __le32 channel_freq;
 __le32 scan_req_id;
 __le32 scan_id;
 __le32 vdev_id;
};

struct wmi_mgmt_rx_ev_arg {
 __le32 channel;
 __le32 snr;
 __le32 rate;
 __le32 phy_mode;
 __le32 buf_len;
 __le32 status;
 struct wmi_mgmt_rx_ext_info ext_info;
};

struct wmi_ch_info_ev_arg {
 __le32 err_code;
 __le32 freq;
 __le32 cmd_flags;
 __le32 noise_floor;
 __le32 rx_clear_count;
 __le32 cycle_count;
 __le32 chan_tx_pwr_range;
 __le32 chan_tx_pwr_tp;
 __le32 rx_frame_count;
};

struct wmi_vdev_start_ev_arg {
 __le32 vdev_id;
 __le32 req_id;
 __le32 resp_type;
 __le32 status;
};

struct wmi_peer_kick_ev_arg {
 const u8 *mac_addr;
};

struct wmi_swba_ev_arg {
 __le32 vdev_map;
 struct wmi_tim_info_arg tim_info[16];
 const struct wmi_p2p_noa_info *noa_info[16];
};

struct wmi_phyerr_ev_arg {
 u32 tsf_timestamp;
 u16 freq1;
 u16 freq2;
 u8 rssi_combined;
 u8 chan_width_mhz;
 u8 phy_err_code;
 u16 nf_chains[4];
 u32 buf_len;
 const u8 *buf;
 u8 hdr_len;
};

struct wmi_phyerr_hdr_arg {
 u32 num_phyerrs;
 u32 tsf_l32;
 u32 tsf_u32;
 u32 buf_len;
 const void *phyerrs;
};

struct wmi_svc_rdy_ev_arg {
 __le32 min_tx_power;
 __le32 max_tx_power;
 __le32 ht_cap;
 __le32 vht_cap;
 __le32 sw_ver0;
 __le32 sw_ver1;
 __le32 fw_build;
 __le32 phy_capab;
 __le32 num_rf_chains;
 __le32 eeprom_rd;
 __le32 num_mem_reqs;
 const __le32 *service_map;
 size_t service_map_len;
 const struct wlan_host_mem_req *mem_reqs[16];
};

struct wmi_rdy_ev_arg {
 __le32 sw_version;
 __le32 abi_version;
 __le32 status;
 const u8 *mac_addr;
};

struct wmi_roam_ev_arg {
 __le32 vdev_id;
 __le32 reason;
 __le32 rssi;
};

struct wmi_pdev_temperature_event {

 __le32 temperature;
} __attribute__((packed));

struct wmi_pdev_bss_chan_info_event {
 __le32 freq;
 __le32 noise_floor;
 __le64 cycle_busy;
 __le64 cycle_total;
 __le64 cycle_tx;
 __le64 cycle_rx;
 __le64 cycle_rx_bss;
 __le32 reserved;
} __attribute__((packed));


enum wmi_wow_wakeup_event {
 WOW_BMISS_EVENT = 0,
 WOW_BETTER_AP_EVENT,
 WOW_DEAUTH_RECVD_EVENT,
 WOW_MAGIC_PKT_RECVD_EVENT,
 WOW_GTK_ERR_EVENT,
 WOW_FOURWAY_HSHAKE_EVENT,
 WOW_EAPOL_RECVD_EVENT,
 WOW_NLO_DETECTED_EVENT,
 WOW_DISASSOC_RECVD_EVENT,
 WOW_PATTERN_MATCH_EVENT,
 WOW_CSA_IE_EVENT,
 WOW_PROBE_REQ_WPS_IE_EVENT,
 WOW_AUTH_REQ_EVENT,
 WOW_ASSOC_REQ_EVENT,
 WOW_HTT_EVENT,
 WOW_RA_MATCH_EVENT,
 WOW_HOST_AUTO_SHUTDOWN_EVENT,
 WOW_IOAC_MAGIC_EVENT,
 WOW_IOAC_SHORT_EVENT,
 WOW_IOAC_EXTEND_EVENT,
 WOW_IOAC_TIMER_EVENT,
 WOW_DFS_PHYERR_RADAR_EVENT,
 WOW_BEACON_EVENT,
 WOW_CLIENT_KICKOUT_EVENT,
 WOW_EVENT_MAX,
};



static inline __attribute__((no_instrument_function)) const char *wow_wakeup_event(enum wmi_wow_wakeup_event ev)
{
 switch (ev) {
 case WOW_BMISS_EVENT: return "WOW_BMISS_EVENT";
 case WOW_BETTER_AP_EVENT: return "WOW_BETTER_AP_EVENT";
 case WOW_DEAUTH_RECVD_EVENT: return "WOW_DEAUTH_RECVD_EVENT";
 case WOW_MAGIC_PKT_RECVD_EVENT: return "WOW_MAGIC_PKT_RECVD_EVENT";
 case WOW_GTK_ERR_EVENT: return "WOW_GTK_ERR_EVENT";
 case WOW_FOURWAY_HSHAKE_EVENT: return "WOW_FOURWAY_HSHAKE_EVENT";
 case WOW_EAPOL_RECVD_EVENT: return "WOW_EAPOL_RECVD_EVENT";
 case WOW_NLO_DETECTED_EVENT: return "WOW_NLO_DETECTED_EVENT";
 case WOW_DISASSOC_RECVD_EVENT: return "WOW_DISASSOC_RECVD_EVENT";
 case WOW_PATTERN_MATCH_EVENT: return "WOW_PATTERN_MATCH_EVENT";
 case WOW_CSA_IE_EVENT: return "WOW_CSA_IE_EVENT";
 case WOW_PROBE_REQ_WPS_IE_EVENT: return "WOW_PROBE_REQ_WPS_IE_EVENT";
 case WOW_AUTH_REQ_EVENT: return "WOW_AUTH_REQ_EVENT";
 case WOW_ASSOC_REQ_EVENT: return "WOW_ASSOC_REQ_EVENT";
 case WOW_HTT_EVENT: return "WOW_HTT_EVENT";
 case WOW_RA_MATCH_EVENT: return "WOW_RA_MATCH_EVENT";
 case WOW_HOST_AUTO_SHUTDOWN_EVENT: return "WOW_HOST_AUTO_SHUTDOWN_EVENT";
 case WOW_IOAC_MAGIC_EVENT: return "WOW_IOAC_MAGIC_EVENT";
 case WOW_IOAC_SHORT_EVENT: return "WOW_IOAC_SHORT_EVENT";
 case WOW_IOAC_EXTEND_EVENT: return "WOW_IOAC_EXTEND_EVENT";
 case WOW_IOAC_TIMER_EVENT: return "WOW_IOAC_TIMER_EVENT";
 case WOW_DFS_PHYERR_RADAR_EVENT: return "WOW_DFS_PHYERR_RADAR_EVENT";
 case WOW_BEACON_EVENT: return "WOW_BEACON_EVENT";
 case WOW_CLIENT_KICKOUT_EVENT: return "WOW_CLIENT_KICKOUT_EVENT";
 case WOW_EVENT_MAX: return "WOW_EVENT_MAX";
 default:
  return ((void *)0);
 }
}

enum wmi_wow_wake_reason {
 WOW_REASON_UNSPECIFIED = -1,
 WOW_REASON_NLOD = 0,
 WOW_REASON_AP_ASSOC_LOST,
 WOW_REASON_LOW_RSSI,
 WOW_REASON_DEAUTH_RECVD,
 WOW_REASON_DISASSOC_RECVD,
 WOW_REASON_GTK_HS_ERR,
 WOW_REASON_EAP_REQ,
 WOW_REASON_FOURWAY_HS_RECV,
 WOW_REASON_TIMER_INTR_RECV,
 WOW_REASON_PATTERN_MATCH_FOUND,
 WOW_REASON_RECV_MAGIC_PATTERN,
 WOW_REASON_P2P_DISC,
 WOW_REASON_WLAN_HB,
 WOW_REASON_CSA_EVENT,
 WOW_REASON_PROBE_REQ_WPS_IE_RECV,
 WOW_REASON_AUTH_REQ_RECV,
 WOW_REASON_ASSOC_REQ_RECV,
 WOW_REASON_HTT_EVENT,
 WOW_REASON_RA_MATCH,
 WOW_REASON_HOST_AUTO_SHUTDOWN,
 WOW_REASON_IOAC_MAGIC_EVENT,
 WOW_REASON_IOAC_SHORT_EVENT,
 WOW_REASON_IOAC_EXTEND_EVENT,
 WOW_REASON_IOAC_TIMER_EVENT,
 WOW_REASON_ROAM_HO,
 WOW_REASON_DFS_PHYERR_RADADR_EVENT,
 WOW_REASON_BEACON_RECV,
 WOW_REASON_CLIENT_KICKOUT_EVENT,
 WOW_REASON_DEBUG_TEST = 0xFF,
};

static inline __attribute__((no_instrument_function)) const char *wow_reason(enum wmi_wow_wake_reason reason)
{
 switch (reason) {
 case WOW_REASON_UNSPECIFIED: return "WOW_REASON_UNSPECIFIED";
 case WOW_REASON_NLOD: return "WOW_REASON_NLOD";
 case WOW_REASON_AP_ASSOC_LOST: return "WOW_REASON_AP_ASSOC_LOST";
 case WOW_REASON_LOW_RSSI: return "WOW_REASON_LOW_RSSI";
 case WOW_REASON_DEAUTH_RECVD: return "WOW_REASON_DEAUTH_RECVD";
 case WOW_REASON_DISASSOC_RECVD: return "WOW_REASON_DISASSOC_RECVD";
 case WOW_REASON_GTK_HS_ERR: return "WOW_REASON_GTK_HS_ERR";
 case WOW_REASON_EAP_REQ: return "WOW_REASON_EAP_REQ";
 case WOW_REASON_FOURWAY_HS_RECV: return "WOW_REASON_FOURWAY_HS_RECV";
 case WOW_REASON_TIMER_INTR_RECV: return "WOW_REASON_TIMER_INTR_RECV";
 case WOW_REASON_PATTERN_MATCH_FOUND: return "WOW_REASON_PATTERN_MATCH_FOUND";
 case WOW_REASON_RECV_MAGIC_PATTERN: return "WOW_REASON_RECV_MAGIC_PATTERN";
 case WOW_REASON_P2P_DISC: return "WOW_REASON_P2P_DISC";
 case WOW_REASON_WLAN_HB: return "WOW_REASON_WLAN_HB";
 case WOW_REASON_CSA_EVENT: return "WOW_REASON_CSA_EVENT";
 case WOW_REASON_PROBE_REQ_WPS_IE_RECV: return "WOW_REASON_PROBE_REQ_WPS_IE_RECV";
 case WOW_REASON_AUTH_REQ_RECV: return "WOW_REASON_AUTH_REQ_RECV";
 case WOW_REASON_ASSOC_REQ_RECV: return "WOW_REASON_ASSOC_REQ_RECV";
 case WOW_REASON_HTT_EVENT: return "WOW_REASON_HTT_EVENT";
 case WOW_REASON_RA_MATCH: return "WOW_REASON_RA_MATCH";
 case WOW_REASON_HOST_AUTO_SHUTDOWN: return "WOW_REASON_HOST_AUTO_SHUTDOWN";
 case WOW_REASON_IOAC_MAGIC_EVENT: return "WOW_REASON_IOAC_MAGIC_EVENT";
 case WOW_REASON_IOAC_SHORT_EVENT: return "WOW_REASON_IOAC_SHORT_EVENT";
 case WOW_REASON_IOAC_EXTEND_EVENT: return "WOW_REASON_IOAC_EXTEND_EVENT";
 case WOW_REASON_IOAC_TIMER_EVENT: return "WOW_REASON_IOAC_TIMER_EVENT";
 case WOW_REASON_ROAM_HO: return "WOW_REASON_ROAM_HO";
 case WOW_REASON_DFS_PHYERR_RADADR_EVENT: return "WOW_REASON_DFS_PHYERR_RADADR_EVENT";
 case WOW_REASON_BEACON_RECV: return "WOW_REASON_BEACON_RECV";
 case WOW_REASON_CLIENT_KICKOUT_EVENT: return "WOW_REASON_CLIENT_KICKOUT_EVENT";
 case WOW_REASON_DEBUG_TEST: return "WOW_REASON_DEBUG_TEST";
 default:
  return ((void *)0);
 }
}



struct wmi_wow_ev_arg {
 u32 vdev_id;
 u32 flag;
 enum wmi_wow_wake_reason wake_reason;
 u32 data_len;
};





enum wmi_tdls_state {
 WMI_TDLS_DISABLE,
 WMI_TDLS_ENABLE_PASSIVE,
 WMI_TDLS_ENABLE_ACTIVE,
};

enum wmi_tdls_peer_state {
 WMI_TDLS_PEER_STATE_PEERING,
 WMI_TDLS_PEER_STATE_CONNECTED,
 WMI_TDLS_PEER_STATE_TEARDOWN,
};

struct wmi_tdls_peer_update_cmd_arg {
 u32 vdev_id;
 enum wmi_tdls_peer_state peer_state;
 u8 addr[6];
};



struct wmi_tdls_peer_capab_arg {
 u8 peer_uapsd_queues;
 u8 peer_max_sp;
 u32 buff_sta_support;
 u32 off_chan_support;
 u32 peer_curr_operclass;
 u32 self_curr_operclass;
 u32 peer_chan_len;
 u32 peer_operclass_len;
 u8 peer_operclass[32];
 u32 is_peer_responder;
 u32 pref_offchan_num;
 u32 pref_offchan_bw;
};

enum wmi_txbf_conf {
 WMI_TXBF_CONF_UNSUPPORTED,
 WMI_TXBF_CONF_BEFORE_ASSOC,
 WMI_TXBF_CONF_AFTER_ASSOC,
};




struct wmi_pdev_set_adaptive_cca_params {
 __le32 enable;
 __le32 cca_detect_level;
 __le32 cca_detect_margin;
} __attribute__((packed));

enum wmi_host_platform_type {
 WMI_HOST_PLATFORM_HIGH_PERF,
 WMI_HOST_PLATFORM_LOW_PERF,
};

enum wmi_bss_survey_req_type {
 WMI_BSS_SURVEY_REQ_TYPE_READ = 1,
 WMI_BSS_SURVEY_REQ_TYPE_READ_CLEAR,
};

struct wmi_pdev_chan_info_req_cmd {
 __le32 type;
 __le32 reserved;
} __attribute__((packed));

struct ath10k;
struct ath10k_vif;
struct ath10k_fw_stats_pdev;
struct ath10k_fw_stats_peer;
struct ath10k_fw_stats;

int ath10k_wmi_attach(struct ath10k *ar);
void ath10k_wmi_detach(struct ath10k *ar);
void ath10k_wmi_free_host_mem(struct ath10k *ar);
int ath10k_wmi_wait_for_service_ready(struct ath10k *ar);
int ath10k_wmi_wait_for_unified_ready(struct ath10k *ar);

struct sk_buff *ath10k_wmi_alloc_skb(struct ath10k *ar, u32 len);
int ath10k_wmi_connect(struct ath10k *ar);

struct sk_buff *ath10k_wmi_alloc_skb(struct ath10k *ar, u32 len);
int ath10k_wmi_cmd_send(struct ath10k *ar, struct sk_buff *skb, u32 cmd_id);
int ath10k_wmi_cmd_send_nowait(struct ath10k *ar, struct sk_buff *skb,
          u32 cmd_id);
void ath10k_wmi_start_scan_init(struct ath10k *ar, struct wmi_start_scan_arg *);

void ath10k_wmi_pull_pdev_stats_base(const struct wmi_pdev_stats_base *src,
         struct ath10k_fw_stats_pdev *dst);
void ath10k_wmi_pull_pdev_stats_tx(const struct wmi_pdev_stats_tx *src,
       struct ath10k_fw_stats_pdev *dst);
void ath10k_wmi_pull_pdev_stats_rx(const struct wmi_pdev_stats_rx *src,
       struct ath10k_fw_stats_pdev *dst);
void ath10k_wmi_pull_pdev_stats_extra(const struct wmi_pdev_stats_extra *src,
          struct ath10k_fw_stats_pdev *dst);
void ath10k_wmi_pull_peer_stats(const struct wmi_peer_stats *src,
    struct ath10k_fw_stats_peer *dst);
void ath10k_wmi_put_host_mem_chunks(struct ath10k *ar,
        struct wmi_host_mem_chunks *chunks);
void ath10k_wmi_put_start_scan_common(struct wmi_start_scan_common *cmn,
          const struct wmi_start_scan_arg *arg);
void ath10k_wmi_set_wmm_param(struct wmi_wmm_params *params,
         const struct wmi_wmm_params_arg *arg);
void ath10k_wmi_put_wmi_channel(struct wmi_channel *ch,
    const struct wmi_channel_arg *arg);
int ath10k_wmi_start_scan_verify(const struct wmi_start_scan_arg *arg);

int ath10k_wmi_event_scan(struct ath10k *ar, struct sk_buff *skb);
int ath10k_wmi_event_mgmt_rx(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_chan_info(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_echo(struct ath10k *ar, struct sk_buff *skb);
int ath10k_wmi_event_debug_mesg(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_update_stats(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_vdev_start_resp(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_vdev_stopped(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_peer_sta_kickout(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_host_swba(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_tbttoffset_update(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_dfs(struct ath10k *ar,
     struct wmi_phyerr_ev_arg *phyerr, u64 tsf);
void ath10k_wmi_event_spectral_scan(struct ath10k *ar,
        struct wmi_phyerr_ev_arg *phyerr,
        u64 tsf);
void ath10k_wmi_event_phyerr(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_roam(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_profile_match(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_debug_print(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_pdev_qvit(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_wlan_profile_data(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_rtt_measurement_report(struct ath10k *ar,
          struct sk_buff *skb);
void ath10k_wmi_event_tsf_measurement_report(struct ath10k *ar,
          struct sk_buff *skb);
void ath10k_wmi_event_rtt_error_report(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_wow_wakeup_host(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_dcs_interference(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_pdev_tpc_config(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_pdev_ftm_intg(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_gtk_offload_status(struct ath10k *ar,
      struct sk_buff *skb);
void ath10k_wmi_event_gtk_rekey_fail(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_delba_complete(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_addba_complete(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_vdev_install_key_complete(struct ath10k *ar,
      struct sk_buff *skb);
void ath10k_wmi_event_inst_rssi_stats(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_vdev_standby_req(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_vdev_resume_req(struct ath10k *ar, struct sk_buff *skb);
void ath10k_wmi_event_service_ready(struct ath10k *ar, struct sk_buff *skb);
int ath10k_wmi_event_ready(struct ath10k *ar, struct sk_buff *skb);
int ath10k_wmi_op_pull_phyerr_ev(struct ath10k *ar, const void *phyerr_buf,
     int left_len, struct wmi_phyerr_ev_arg *arg);
void ath10k_wmi_main_op_fw_stats_fill(struct ath10k *ar,
          struct ath10k_fw_stats *fw_stats,
          char *buf);
void ath10k_wmi_10x_op_fw_stats_fill(struct ath10k *ar,
         struct ath10k_fw_stats *fw_stats,
         char *buf);
size_t ath10k_wmi_fw_stats_num_peers(struct list_head *head);
size_t ath10k_wmi_fw_stats_num_vdevs(struct list_head *head);
void ath10k_wmi_10_4_op_fw_stats_fill(struct ath10k *ar,
          struct ath10k_fw_stats *fw_stats,
          char *buf);
int ath10k_wmi_op_get_vdev_subtype(struct ath10k *ar,
       enum wmi_vdev_subtype subtype);
# 33 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/../ath.h" 1
# 20 "drivers/net/wireless/ath/ath10k/../ath.h"
# 1 "include/linux/etherdevice.h" 1
# 32 "include/linux/etherdevice.h"
struct device;
int eth_platform_get_mac_address(struct device *dev, u8 *mac_addr);
unsigned char *arch_get_platform_get_mac_address(void);
u32 eth_get_headlen(void *data, unsigned int max_len);
__be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev);
extern const struct header_ops eth_header_ops;

int eth_header(struct sk_buff *skb, struct net_device *dev, unsigned short type,
        const void *daddr, const void *saddr, unsigned len);
int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr);
int eth_header_cache(const struct neighbour *neigh, struct hh_cache *hh,
       __be16 type);
void eth_header_cache_update(struct hh_cache *hh, const struct net_device *dev,
        const unsigned char *haddr);
int eth_prepare_mac_addr_change(struct net_device *dev, void *p);
void eth_commit_mac_addr_change(struct net_device *dev, void *p);
int eth_mac_addr(struct net_device *dev, void *p);
int eth_change_mtu(struct net_device *dev, int new_mtu);
int eth_validate_addr(struct net_device *dev);

struct net_device *alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs,
         unsigned int rxqs);



struct sk_buff **eth_gro_receive(struct sk_buff **head,
     struct sk_buff *skb);
int eth_gro_complete(struct sk_buff *skb, int nhoff);


static const u8 eth_reserved_addr_base[6] __attribute__((aligned(2))) =
{ 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
# 74 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_link_local_ether_addr(const u8 *addr)
{
 __be16 *a = (__be16 *)addr;
 static const __be16 *b = (const __be16 *)eth_reserved_addr_base;
 static const __be16 m = (( __be16)(__builtin_constant_p((__u16)((0xfff0))) ? ((__u16)( (((__u16)((0xfff0)) & (__u16)0x00ffU) << 8) | (((__u16)((0xfff0)) & (__u16)0xff00U) >> 8))) : __fswab16((0xfff0))));


 return (((*(const u32 *)addr) ^ (*(const u32 *)b)) |
  ( int)((a[2] ^ b[2]) & m)) == 0;



}
# 96 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_zero_ether_addr(const u8 *addr)
{

 return ((*(const u32 *)addr) | (*(const u16 *)(addr + 4))) == 0;





}
# 114 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_multicast_ether_addr(const u8 *addr)
{

 u32 a = *(const u32 *)addr;






 return 0x01 & a;

}

static inline __attribute__((no_instrument_function)) bool is_multicast_ether_addr_64bits(const u8 addr[6+2])
{




 return 0x01 & (*(const u64 *)addr);




}







static inline __attribute__((no_instrument_function)) bool is_local_ether_addr(const u8 *addr)
{
 return 0x02 & addr[0];
}
# 160 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_broadcast_ether_addr(const u8 *addr)
{
 return (*(const u16 *)(addr + 0) &
  *(const u16 *)(addr + 2) &
  *(const u16 *)(addr + 4)) == 0xffff;
}







static inline __attribute__((no_instrument_function)) bool is_unicast_ether_addr(const u8 *addr)
{
 return !is_multicast_ether_addr(addr);
}
# 189 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_valid_ether_addr(const u8 *addr)
{


 return !is_multicast_ether_addr(addr) && !is_zero_ether_addr(addr);
}
# 204 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool eth_proto_is_802_3(__be16 proto)
{


 proto &= (( __be16)(__builtin_constant_p((__u16)((0xFF00))) ? ((__u16)( (((__u16)((0xFF00)) & (__u16)0x00ffU) << 8) | (((__u16)((0xFF00)) & (__u16)0xff00U) >> 8))) : __fswab16((0xFF00))));


 return ( u16)proto >= ( u16)(( __be16)(__builtin_constant_p((__u16)((0x0600))) ? ((__u16)( (((__u16)((0x0600)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0600)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0600))));
}
# 221 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) void eth_random_addr(u8 *addr)
{
 get_random_bytes(addr, 6);
 addr[0] &= 0xfe;
 addr[0] |= 0x02;
}
# 236 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) void eth_broadcast_addr(u8 *addr)
{
 memset(addr, 0xff, 6);
}







static inline __attribute__((no_instrument_function)) void eth_zero_addr(u8 *addr)
{
 memset(addr, 0x00, 6);
}
# 261 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) void eth_hw_addr_random(struct net_device *dev)
{
 dev->addr_assign_type = 1;
 eth_random_addr(dev->dev_addr);
}
# 274 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) void ether_addr_copy(u8 *dst, const u8 *src)
{

 *(u32 *)dst = *(const u32 *)src;
 *(u16 *)(dst + 4) = *(const u16 *)(src + 4);
# 287 "include/linux/etherdevice.h"
}
# 297 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) void eth_hw_addr_inherit(struct net_device *dst,
           struct net_device *src)
{
 dst->addr_assign_type = src->addr_assign_type;
 ether_addr_copy(dst->dev_addr, src->dev_addr);
}
# 313 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool ether_addr_equal(const u8 *addr1, const u8 *addr2)
{

 u32 fold = ((*(const u32 *)addr1) ^ (*(const u32 *)addr2)) |
     ((*(const u16 *)(addr1 + 4)) ^ (*(const u16 *)(addr2 + 4)));

 return fold == 0;






}
# 342 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool ether_addr_equal_64bits(const u8 addr1[6+2],
        const u8 addr2[6+2])
{

 u64 fold = (*(const u64 *)addr1) ^ (*(const u64 *)addr2);




 return (fold << 16) == 0;




}
# 367 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool ether_addr_equal_unaligned(const u8 *addr1, const u8 *addr2)
{

 return ether_addr_equal(addr1, addr2);



}
# 387 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) bool is_etherdev_addr(const struct net_device *dev,
        const u8 addr[6 + 2])
{
 struct netdev_hw_addr *ha;
 bool res = false;

 rcu_read_lock();
 for (ha = ({ const typeof( ((typeof(*ha) *)0)->list ) *__mptr = (({ typeof((&dev->dev_addrs.list)->next) _________p1 = ({ union { typeof((&dev->dev_addrs.list)->next) __val; char __c[1]; } __u; if (1) __read_once_size(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); else __read_once_size_nocheck(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); __u.__val; }); do { } while (0); (_________p1); })); (typeof(*ha) *)( (char *)__mptr - __builtin_offsetof(typeof(*ha), list) );}); &ha->list != (&dev->dev_addrs.list); ha = ({ const typeof( ((typeof(*ha) *)0)->list ) *__mptr = (({ typeof(ha->list.next) _________p1 = ({ union { typeof(ha->list.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(ha->list.next), __u.__c, sizeof(ha->list.next)); else __read_once_size_nocheck(&(ha->list.next), __u.__c, sizeof(ha->list.next)); __u.__val; }); do { } while (0); (_________p1); })); (typeof(*ha) *)( (char *)__mptr - __builtin_offsetof(typeof(*ha), list) );})) {
  res = ether_addr_equal_64bits(addr, ha->addr);
  if (res)
   break;
 }
 rcu_read_unlock();
 return res;
}
# 416 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) unsigned long compare_ether_header(const void *a, const void *b)
{

 unsigned long fold;
# 429 "include/linux/etherdevice.h"
 fold = *(unsigned long *)a ^ *(unsigned long *)b;
 fold |= *(unsigned long *)(a + 6) ^ *(unsigned long *)(b + 6);
 return fold;







}
# 448 "include/linux/etherdevice.h"
static inline __attribute__((no_instrument_function)) int eth_skb_pad(struct sk_buff *skb)
{
 return skb_put_padto(skb, 60);
}
# 21 "drivers/net/wireless/ath/ath10k/../ath.h" 2
# 36 "drivers/net/wireless/ath/ath10k/../ath.h"
static const u8 ath_bcast_mac[6] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

struct ath_ani {
 bool caldone;
 unsigned int longcal_timer;
 unsigned int shortcal_timer;
 unsigned int resetcal_timer;
 unsigned int checkani_timer;
 struct timer_list timer;
};

struct ath_cycle_counters {
 u32 cycles;
 u32 rx_busy;
 u32 rx_frame;
 u32 tx_frame;
};

enum ath_device_state {
 ATH_HW_UNAVAILABLE,
 ATH_HW_INITIALIZED,
};

enum ath_op_flags {
 ATH_OP_INVALID,
 ATH_OP_BEACONS,
 ATH_OP_ANI_RUN,
 ATH_OP_PRIM_STA_VIF,
 ATH_OP_HW_RESET,
 ATH_OP_SCANNING,
 ATH_OP_MULTI_CHANNEL,
 ATH_OP_WOW_ENABLED,
};

enum ath_bus_type {
 ATH_PCI,
 ATH_AHB,
 ATH_USB,
};

struct reg_dmn_pair_mapping {
 u16 reg_domain;
 u16 reg_5ghz_ctl;
 u16 reg_2ghz_ctl;
};

struct ath_regulatory {
 char alpha2[2];
 enum nl80211_dfs_regions region;
 u16 country_code;
 u16 max_power_level;
 u16 current_rd;
 int16_t power_limit;
 struct reg_dmn_pair_mapping *regpair;
};

enum ath_crypt_caps {
 ATH_CRYPT_CAP_CIPHER_AESCCM = (1UL << (0)),
 ATH_CRYPT_CAP_MIC_COMBINED = (1UL << (1)),
};

struct ath_keyval {
 u8 kv_type;
 u8 kv_pad;
 u16 kv_len;
 u8 kv_val[16];
 u8 kv_mic[8];
 u8 kv_txmic[8];


};

enum ath_cipher {
 ATH_CIPHER_WEP = 0,
 ATH_CIPHER_AES_OCB = 1,
 ATH_CIPHER_AES_CCM = 2,
 ATH_CIPHER_CKIP = 3,
 ATH_CIPHER_TKIP = 4,
 ATH_CIPHER_CLR = 5,
 ATH_CIPHER_MIC = 127
};
# 127 "drivers/net/wireless/ath/ath10k/../ath.h"
struct ath_ops {
 unsigned int (*read)(void *, u32 reg_offset);
 void (*multi_read)(void *, u32 *addr, u32 *val, u16 count);
 void (*write)(void *, u32 val, u32 reg_offset);
 void (*enable_write_buffer)(void *);
 void (*write_flush) (void *);
 u32 (*rmw)(void *, u32 reg_offset, u32 set, u32 clr);
 void (*enable_rmw_buffer)(void *);
 void (*rmw_flush) (void *);

};

struct ath_common;
struct ath_bus_ops;

struct ath_ps_ops {
 void (*wakeup)(struct ath_common *common);
 void (*restore)(struct ath_common *common);
};

struct ath_common {
 void *ah;
 void *priv;
 struct ieee80211_hw *hw;
 int debug_mask;
 enum ath_device_state state;
 unsigned long op_flags;

 struct ath_ani ani;

 u16 cachelsz;
 u16 curaid;
 u8 macaddr[6];
 u8 curbssid[6] __attribute__((aligned(2)));
 u8 bssidmask[6];

 u32 rx_bufsize;

 u32 keymax;
 unsigned long keymap[(((128) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 unsigned long tkip_keymap[(((128) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 unsigned long ccmp_keymap[(((128) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 enum ath_crypt_caps crypt_caps;

 unsigned int clockrate;

 spinlock_t cc_lock;
 struct ath_cycle_counters cc_ani;
 struct ath_cycle_counters cc_survey;

 struct ath_regulatory regulatory;
 struct ath_regulatory reg_world_copy;
 const struct ath_ops *ops;
 const struct ath_bus_ops *bus_ops;
 const struct ath_ps_ops *ps_ops;

 bool btcoex_enabled;
 bool disable_ani;
 bool bt_ant_diversity;

 int last_rssi;
 struct ieee80211_supported_band sbands[NUM_NL80211_BANDS];
};

static inline __attribute__((no_instrument_function)) const struct ath_ps_ops *ath_ps_ops(struct ath_common *common)
{
 return common->ps_ops;
}

struct sk_buff *ath_rxbuf_alloc(struct ath_common *common,
    u32 len,
    gfp_t gfp_mask);
bool ath_is_mybeacon(struct ath_common *common, struct ieee80211_hdr *hdr);

void ath_hw_setbssidmask(struct ath_common *common);
void ath_key_delete(struct ath_common *common, struct ieee80211_key_conf *key);
int ath_key_config(struct ath_common *common,
     struct ieee80211_vif *vif,
     struct ieee80211_sta *sta,
     struct ieee80211_key_conf *key);
bool ath_hw_keyreset(struct ath_common *common, u16 entry);
void ath_hw_cycle_counters_update(struct ath_common *common);
int32_t ath_hw_get_listen_time(struct ath_common *common);

__attribute__((format(printf, 3, 4)))
void ath_printk(const char *level, const struct ath_common *common,
  const char *fmt, ...);
# 263 "drivers/net/wireless/ath/ath10k/../ath.h"
enum ATH_DEBUG {
 ATH_DBG_RESET = 0x00000001,
 ATH_DBG_QUEUE = 0x00000002,
 ATH_DBG_EEPROM = 0x00000004,
 ATH_DBG_CALIBRATE = 0x00000008,
 ATH_DBG_INTERRUPT = 0x00000010,
 ATH_DBG_REGULATORY = 0x00000020,
 ATH_DBG_ANI = 0x00000040,
 ATH_DBG_XMIT = 0x00000080,
 ATH_DBG_BEACON = 0x00000100,
 ATH_DBG_CONFIG = 0x00000200,
 ATH_DBG_FATAL = 0x00000400,
 ATH_DBG_PS = 0x00000800,
 ATH_DBG_BTCOEX = 0x00001000,
 ATH_DBG_WMI = 0x00002000,
 ATH_DBG_BSTUCK = 0x00004000,
 ATH_DBG_MCI = 0x00008000,
 ATH_DBG_DFS = 0x00010000,
 ATH_DBG_WOW = 0x00020000,
 ATH_DBG_CHAN_CTX = 0x00040000,
 ATH_DBG_DYNACK = 0x00080000,
 ATH_DBG_SPECTRAL_SCAN = 0x00100000,
 ATH_DBG_ANY = 0xffffffff
};
# 304 "drivers/net/wireless/ath/ath10k/../ath.h"
static inline __attribute__((no_instrument_function)) __attribute__ ((format (printf, 3, 4)))
void _ath_dbg(struct ath_common *common, enum ATH_DEBUG dbg_mask,
      const char *fmt, ...)
{
}
# 324 "drivers/net/wireless/ath/ath10k/../ath.h"
static inline __attribute__((no_instrument_function)) const char *ath_opmode_to_string(enum nl80211_iftype opmode)
{
 return "UNKNOWN";
}
# 34 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/../regd.h" 1
# 23 "drivers/net/wireless/ath/ath10k/../regd.h"
# 1 "drivers/net/wireless/ath/ath10k/../ath.h" 1
# 24 "drivers/net/wireless/ath/ath10k/../regd.h" 2

enum ctl_group {
 CTL_FCC = 0x10,
 CTL_MKK = 0x40,
 CTL_ETSI = 0x30,
};
# 56 "drivers/net/wireless/ath/ath10k/../regd.h"
struct country_code_to_enum_rd {
 u16 countryCode;
 u16 regDmnEnum;
 const char *isoName;
};

enum CountryCode {
 CTRY_ALBANIA = 8,
 CTRY_ALGERIA = 12,
 CTRY_ARGENTINA = 32,
 CTRY_ARMENIA = 51,
 CTRY_ARUBA = 533,
 CTRY_AUSTRALIA = 36,
 CTRY_AUSTRIA = 40,
 CTRY_AZERBAIJAN = 31,
 CTRY_BAHRAIN = 48,
 CTRY_BANGLADESH = 50,
 CTRY_BARBADOS = 52,
 CTRY_BELARUS = 112,
 CTRY_BELGIUM = 56,
 CTRY_BELIZE = 84,
 CTRY_BOLIVIA = 68,
 CTRY_BOSNIA_HERZ = 70,
 CTRY_BRAZIL = 76,
 CTRY_BRUNEI_DARUSSALAM = 96,
 CTRY_BULGARIA = 100,
 CTRY_CAMBODIA = 116,
 CTRY_CANADA = 124,
 CTRY_CHILE = 152,
 CTRY_CHINA = 156,
 CTRY_COLOMBIA = 170,
 CTRY_COSTA_RICA = 188,
 CTRY_CROATIA = 191,
 CTRY_CYPRUS = 196,
 CTRY_CZECH = 203,
 CTRY_DENMARK = 208,
 CTRY_DOMINICAN_REPUBLIC = 214,
 CTRY_ECUADOR = 218,
 CTRY_EGYPT = 818,
 CTRY_EL_SALVADOR = 222,
 CTRY_ESTONIA = 233,
 CTRY_FAEROE_ISLANDS = 234,
 CTRY_FINLAND = 246,
 CTRY_FRANCE = 250,
 CTRY_GEORGIA = 268,
 CTRY_GERMANY = 276,
 CTRY_GREECE = 300,
 CTRY_GREENLAND = 304,
 CTRY_GRENADA = 308,
 CTRY_GUAM = 316,
 CTRY_GUATEMALA = 320,
 CTRY_HAITI = 332,
 CTRY_HONDURAS = 340,
 CTRY_HONG_KONG = 344,
 CTRY_HUNGARY = 348,
 CTRY_ICELAND = 352,
 CTRY_INDIA = 356,
 CTRY_INDONESIA = 360,
 CTRY_IRAN = 364,
 CTRY_IRAQ = 368,
 CTRY_IRELAND = 372,
 CTRY_ISRAEL = 376,
 CTRY_ITALY = 380,
 CTRY_JAMAICA = 388,
 CTRY_JAPAN = 392,
 CTRY_JORDAN = 400,
 CTRY_KAZAKHSTAN = 398,
 CTRY_KENYA = 404,
 CTRY_KOREA_NORTH = 408,
 CTRY_KOREA_ROC = 410,
 CTRY_KOREA_ROC2 = 411,
 CTRY_KOREA_ROC3 = 412,
 CTRY_KUWAIT = 414,
 CTRY_LATVIA = 428,
 CTRY_LEBANON = 422,
 CTRY_LIBYA = 434,
 CTRY_LIECHTENSTEIN = 438,
 CTRY_LITHUANIA = 440,
 CTRY_LUXEMBOURG = 442,
 CTRY_MACAU = 446,
 CTRY_MACEDONIA = 807,
 CTRY_MALAYSIA = 458,
 CTRY_MALTA = 470,
 CTRY_MEXICO = 484,
 CTRY_MONACO = 492,
 CTRY_MOROCCO = 504,
 CTRY_NEPAL = 524,
 CTRY_NETHERLANDS = 528,
 CTRY_NETHERLANDS_ANTILLES = 530,
 CTRY_NEW_ZEALAND = 554,
 CTRY_NICARAGUA = 558,
 CTRY_NORWAY = 578,
 CTRY_OMAN = 512,
 CTRY_PAKISTAN = 586,
 CTRY_PANAMA = 591,
 CTRY_PAPUA_NEW_GUINEA = 598,
 CTRY_PARAGUAY = 600,
 CTRY_PERU = 604,
 CTRY_PHILIPPINES = 608,
 CTRY_POLAND = 616,
 CTRY_PORTUGAL = 620,
 CTRY_PUERTO_RICO = 630,
 CTRY_QATAR = 634,
 CTRY_ROMANIA = 642,
 CTRY_RUSSIA = 643,
 CTRY_SAUDI_ARABIA = 682,
 CTRY_SERBIA_MONTENEGRO = 891,
 CTRY_SINGAPORE = 702,
 CTRY_SLOVAKIA = 703,
 CTRY_SLOVENIA = 705,
 CTRY_SOUTH_AFRICA = 710,
 CTRY_SPAIN = 724,
 CTRY_SRI_LANKA = 144,
 CTRY_SWEDEN = 752,
 CTRY_SWITZERLAND = 756,
 CTRY_SYRIA = 760,
 CTRY_TAIWAN = 158,
 CTRY_THAILAND = 764,
 CTRY_TRINIDAD_Y_TOBAGO = 780,
 CTRY_TUNISIA = 788,
 CTRY_TURKEY = 792,
 CTRY_UAE = 784,
 CTRY_UKRAINE = 804,
 CTRY_UNITED_KINGDOM = 826,
 CTRY_UNITED_STATES = 840,
 CTRY_UNITED_STATES_FCC49 = 842,
 CTRY_URUGUAY = 858,
 CTRY_UZBEKISTAN = 860,
 CTRY_VENEZUELA = 862,
 CTRY_VIET_NAM = 704,
 CTRY_YEMEN = 887,
 CTRY_ZIMBABWE = 716,
 CTRY_JAPAN1 = 393,
 CTRY_JAPAN2 = 394,
 CTRY_JAPAN3 = 395,
 CTRY_JAPAN4 = 396,
 CTRY_JAPAN5 = 397,
 CTRY_JAPAN6 = 4006,
 CTRY_JAPAN7 = 4007,
 CTRY_JAPAN8 = 4008,
 CTRY_JAPAN9 = 4009,
 CTRY_JAPAN10 = 4010,
 CTRY_JAPAN11 = 4011,
 CTRY_JAPAN12 = 4012,
 CTRY_JAPAN13 = 4013,
 CTRY_JAPAN14 = 4014,
 CTRY_JAPAN15 = 4015,
 CTRY_JAPAN16 = 4016,
 CTRY_JAPAN17 = 4017,
 CTRY_JAPAN18 = 4018,
 CTRY_JAPAN19 = 4019,
 CTRY_JAPAN20 = 4020,
 CTRY_JAPAN21 = 4021,
 CTRY_JAPAN22 = 4022,
 CTRY_JAPAN23 = 4023,
 CTRY_JAPAN24 = 4024,
 CTRY_JAPAN25 = 4025,
 CTRY_JAPAN26 = 4026,
 CTRY_JAPAN27 = 4027,
 CTRY_JAPAN28 = 4028,
 CTRY_JAPAN29 = 4029,
 CTRY_JAPAN30 = 4030,
 CTRY_JAPAN31 = 4031,
 CTRY_JAPAN32 = 4032,
 CTRY_JAPAN33 = 4033,
 CTRY_JAPAN34 = 4034,
 CTRY_JAPAN35 = 4035,
 CTRY_JAPAN36 = 4036,
 CTRY_JAPAN37 = 4037,
 CTRY_JAPAN38 = 4038,
 CTRY_JAPAN39 = 4039,
 CTRY_JAPAN40 = 4040,
 CTRY_JAPAN41 = 4041,
 CTRY_JAPAN42 = 4042,
 CTRY_JAPAN43 = 4043,
 CTRY_JAPAN44 = 4044,
 CTRY_JAPAN45 = 4045,
 CTRY_JAPAN46 = 4046,
 CTRY_JAPAN47 = 4047,
 CTRY_JAPAN48 = 4048,
 CTRY_JAPAN49 = 4049,
 CTRY_JAPAN50 = 4050,
 CTRY_JAPAN51 = 4051,
 CTRY_JAPAN52 = 4052,
 CTRY_JAPAN53 = 4053,
 CTRY_JAPAN54 = 4054,
 CTRY_JAPAN55 = 4055,
 CTRY_JAPAN56 = 4056,
 CTRY_JAPAN57 = 4057,
 CTRY_JAPAN58 = 4058,
 CTRY_JAPAN59 = 4059,
 CTRY_AUSTRALIA2 = 5000,
 CTRY_CANADA2 = 5001,
 CTRY_BELGIUM2 = 5002
};

bool ath_is_world_regd(struct ath_regulatory *reg);
bool ath_is_49ghz_allowed(u16 redomain);
int ath_regd_init(struct ath_regulatory *reg, struct wiphy *wiphy,
    void (*reg_notifier)(struct wiphy *wiphy,
           struct regulatory_request *request));
u32 ath_regd_get_band_ctl(struct ath_regulatory *reg,
     enum nl80211_band band);
void ath_reg_notifier_apply(struct wiphy *wiphy,
       struct regulatory_request *request,
       struct ath_regulatory *reg);
# 35 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/../dfs_pattern_detector.h" 1
# 32 "drivers/net/wireless/ath/ath10k/../dfs_pattern_detector.h"
struct ath_dfs_pool_stats {
 u32 pool_reference;
 u32 pulse_allocated;
 u32 pulse_alloc_error;
 u32 pulse_used;
 u32 pseq_allocated;
 u32 pseq_alloc_error;
 u32 pseq_used;
};
# 50 "drivers/net/wireless/ath/ath10k/../dfs_pattern_detector.h"
struct pulse_event {
 u64 ts;
 u16 freq;
 u8 width;
 u8 rssi;
 bool chirp;
};
# 71 "drivers/net/wireless/ath/ath10k/../dfs_pattern_detector.h"
struct radar_detector_specs {
 u8 type_id;
 u8 width_min;
 u8 width_max;
 u16 pri_min;
 u16 pri_max;
 u8 num_pri;
 u8 ppb;
 u8 ppb_thresh;
 u8 max_pri_tolerance;
 bool chirp;
};
# 95 "drivers/net/wireless/ath/ath10k/../dfs_pattern_detector.h"
struct dfs_pattern_detector {
 void (*exit)(struct dfs_pattern_detector *dpd);
 bool (*set_dfs_domain)(struct dfs_pattern_detector *dpd,
      enum nl80211_dfs_regions region);
 bool (*add_pulse)(struct dfs_pattern_detector *dpd,
     struct pulse_event *pe);

 struct ath_dfs_pool_stats (*get_stats)(struct dfs_pattern_detector *dpd);
 enum nl80211_dfs_regions region;
 u8 num_radar_types;
 u64 last_pulse_ts;

 struct ath_common *common;

 const struct radar_detector_specs *radar_spec;
 struct list_head channel_detectors;
};






extern struct dfs_pattern_detector *
dfs_pattern_detector_init(struct ath_common *common,
     enum nl80211_dfs_regions region);
# 36 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/spectral.h" 1
# 20 "drivers/net/wireless/ath/ath10k/spectral.h"
# 1 "drivers/net/wireless/ath/ath10k/../spectral_common.h" 1
# 36 "drivers/net/wireless/ath/ath10k/../spectral_common.h"
enum ath_fft_sample_type {
 ATH_FFT_SAMPLE_HT20 = 1,
 ATH_FFT_SAMPLE_HT20_40,
 ATH_FFT_SAMPLE_ATH10K,
};

struct fft_sample_tlv {
 u8 type;
 __be16 length;

} __attribute__((packed));

struct fft_sample_ht20 {
 struct fft_sample_tlv tlv;

 u8 max_exp;

 __be16 freq;
 s8 rssi;
 s8 noise;

 __be16 max_magnitude;
 u8 max_index;
 u8 bitmap_weight;

 __be64 tsf;

 u8 data[56];
} __attribute__((packed));

struct fft_sample_ht20_40 {
 struct fft_sample_tlv tlv;

 u8 channel_type;
 __be16 freq;

 s8 lower_rssi;
 s8 upper_rssi;

 __be64 tsf;

 s8 lower_noise;
 s8 upper_noise;

 __be16 lower_max_magnitude;
 __be16 upper_max_magnitude;

 u8 lower_max_index;
 u8 upper_max_index;

 u8 lower_bitmap_weight;
 u8 upper_bitmap_weight;

 u8 max_exp;

 u8 data[128];
} __attribute__((packed));

struct fft_sample_ath10k {
 struct fft_sample_tlv tlv;
 u8 chan_width_mhz;
 __be16 freq1;
 __be16 freq2;
 __be16 noise;
 __be16 max_magnitude;
 __be16 total_gain_db;
 __be16 base_pwr_db;
 __be64 tsf;
 s8 max_index;
 u8 rssi;
 u8 relpwr_db;
 u8 avgpwr_db;
 u8 max_exp;

 u8 data[0];
} __attribute__((packed));
# 21 "drivers/net/wireless/ath/ath10k/spectral.h" 2







struct ath10k_spec_scan {
 u8 count;
 u8 fft_size;
};
# 41 "drivers/net/wireless/ath/ath10k/spectral.h"
enum ath10k_spectral_mode {
 SPECTRAL_DISABLED = 0,
 SPECTRAL_BACKGROUND,
 SPECTRAL_MANUAL,
};
# 60 "drivers/net/wireless/ath/ath10k/spectral.h"
static inline __attribute__((no_instrument_function)) int
ath10k_spectral_process_fft(struct ath10k *ar,
       struct wmi_phyerr_ev_arg *phyerr,
       const struct phyerr_fft_report *fftr,
       size_t bin_len, u64 tsf)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int ath10k_spectral_start(struct ath10k *ar)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int ath10k_spectral_vif_stop(struct ath10k_vif *arvif)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) int ath10k_spectral_create(struct ath10k *ar)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void ath10k_spectral_destroy(struct ath10k *ar)
{
}
# 37 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/thermal.h" 1
# 26 "drivers/net/wireless/ath/ath10k/thermal.h"
struct ath10k_thermal {
 struct thermal_cooling_device *cdev;
 struct completion wmi_sync;


 u32 throttle_state;
 u32 quiet_period;



 int temperature;
};


int ath10k_thermal_register(struct ath10k *ar);
void ath10k_thermal_unregister(struct ath10k *ar);
void ath10k_thermal_event_temperature(struct ath10k *ar, int temperature);
void ath10k_thermal_set_throttling(struct ath10k *ar);
# 38 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/wow.h" 1
# 19 "drivers/net/wireless/ath/ath10k/wow.h"
struct ath10k_wow {
 u32 max_num_patterns;
 struct completion wakeup_completed;
 struct wiphy_wowlan_support wowlan_support;
};



int ath10k_wow_init(struct ath10k *ar);
int ath10k_wow_op_suspend(struct ieee80211_hw *hw,
     struct cfg80211_wowlan *wowlan);
int ath10k_wow_op_resume(struct ieee80211_hw *hw);
# 39 "drivers/net/wireless/ath/ath10k/core.h" 2
# 1 "drivers/net/wireless/ath/ath10k/swap.h" 1
# 26 "drivers/net/wireless/ath/ath10k/swap.h"
struct ath10k_swap_code_seg_tlv {
 __le32 address;
 __le32 length;
 u8 data[0];
} __attribute__((packed));

struct ath10k_swap_code_seg_tail {
 u8 magic_signature[12];
 __le32 bmi_write_addr;
} __attribute__((packed));

union ath10k_swap_code_seg_item {
 struct ath10k_swap_code_seg_tlv tlv;
 struct ath10k_swap_code_seg_tail tail;
} __attribute__((packed));

struct ath10k_swap_code_seg_hw_info {

 __le32 swap_size;
 __le32 num_segs;


 __le32 size;
 __le32 size_log2;
 __le32 bus_addr[16];
 __le64 reserved[16];
} __attribute__((packed));

struct ath10k_swap_code_seg_info {
 struct ath10k_swap_code_seg_hw_info seg_hw_info;
 void *virt_address[1];
 u32 target_addr;
 dma_addr_t paddr[1];
};

int ath10k_swap_code_seg_configure(struct ath10k *ar);
void ath10k_swap_code_seg_release(struct ath10k *ar);
int ath10k_swap_code_seg_init(struct ath10k *ar);
# 40 "drivers/net/wireless/ath/ath10k/core.h" 2
# 68 "drivers/net/wireless/ath/ath10k/core.h"
struct ath10k;

enum ath10k_bus {
 ATH10K_BUS_PCI,
 ATH10K_BUS_AHB,
};

static inline __attribute__((no_instrument_function)) const char *ath10k_bus_str(enum ath10k_bus bus)
{
 switch (bus) {
 case ATH10K_BUS_PCI:
  return "pci";
 case ATH10K_BUS_AHB:
  return "ahb";
 }

 return "unknown";
}

enum ath10k_skb_flags {
 ATH10K_SKB_F_NO_HWCRYPT = (1UL << (0)),
 ATH10K_SKB_F_DTIM_ZERO = (1UL << (1)),
 ATH10K_SKB_F_DELIVER_CAB = (1UL << (2)),
 ATH10K_SKB_F_MGMT = (1UL << (3)),
 ATH10K_SKB_F_QOS = (1UL << (4)),
};

struct ath10k_skb_cb {
 dma_addr_t paddr;
 u8 flags;
 u8 eid;
 u16 msdu_id;
 struct ieee80211_vif *vif;
 struct ieee80211_txq *txq;
} __attribute__((packed));

struct ath10k_skb_rxcb {
 dma_addr_t paddr;
 struct hlist_node hlist;
};

static inline __attribute__((no_instrument_function)) struct ath10k_skb_cb *ATH10K_SKB_CB(struct sk_buff *skb)
{
 do { bool __cond = !(!(sizeof(struct ath10k_skb_cb) > 40)); extern void
 __compiletime_assert_112
# 111 "drivers/net/wireless/ath/ath10k/core.h"
 (void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct ath10k_skb_cb) > IEEE80211_TX_INFO_DRIVER_DATA_SIZE"))); if (__cond)
 __compiletime_assert_112
# 111 "drivers/net/wireless/ath/ath10k/core.h"
 (); do { } while (0); } while (0)
                                          ;
 return (struct ath10k_skb_cb *)&IEEE80211_SKB_CB(skb)->driver_data;
}

static inline __attribute__((no_instrument_function)) struct ath10k_skb_rxcb *ATH10K_SKB_RXCB(struct sk_buff *skb)
{
 do { bool __cond = !(!(sizeof(struct ath10k_skb_rxcb) > sizeof(skb->cb))); extern void __compiletime_assert_118(void) __attribute__((error("BUILD_BUG_ON failed: " "sizeof(struct ath10k_skb_rxcb) > sizeof(skb->cb)"))); if (__cond) __compiletime_assert_118(); do { } while (0); } while (0);
 return (struct ath10k_skb_rxcb *)skb->cb;
}




static inline __attribute__((no_instrument_function)) u32 host_interest_item_address(u32 item_offset)
{
 return 0x00400800 + item_offset;
}

struct ath10k_bmi {
 bool done_sent;
};

struct ath10k_mem_chunk {
 void *vaddr;
 dma_addr_t paddr;
 u32 len;
 u32 req_id;
};

struct ath10k_wmi {
 enum ath10k_htc_ep_id eid;
 struct completion service_ready;
 struct completion unified_ready;
 wait_queue_head_t tx_credits_wq;
 unsigned long svc_map[(((WMI_SERVICE_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 struct wmi_cmd_map *cmd;
 struct wmi_vdev_param_map *vdev_param;
 struct wmi_pdev_param_map *pdev_param;
 const struct wmi_ops *ops;
 const struct wmi_peer_flags_map *peer_flags;

 u32 num_mem_chunks;
 u32 rx_decap_mode;
 struct ath10k_mem_chunk mem_chunks[16];
};

struct ath10k_fw_stats_peer {
 struct list_head list;

 u8 peer_macaddr[6];
 u32 peer_rssi;
 u32 peer_tx_rate;
 u32 peer_rx_rate;
 u32 rx_duration;
};

struct ath10k_fw_stats_vdev {
 struct list_head list;

 u32 vdev_id;
 u32 beacon_snr;
 u32 data_snr;
 u32 num_tx_frames[4];
 u32 num_rx_frames;
 u32 num_tx_frames_retries[4];
 u32 num_tx_frames_failures[4];
 u32 num_rts_fail;
 u32 num_rts_success;
 u32 num_rx_err;
 u32 num_rx_discard;
 u32 num_tx_not_acked;
 u32 tx_rate_history[10];
 u32 beacon_rssi_history[10];
};

struct ath10k_fw_stats_pdev {
 struct list_head list;


 s32 ch_noise_floor;
 u32 tx_frame_count;
 u32 rx_frame_count;
 u32 rx_clear_count;
 u32 cycle_count;
 u32 phy_err_count;
 u32 chan_tx_power;
 u32 ack_rx_bad;
 u32 rts_bad;
 u32 rts_good;
 u32 fcs_bad;
 u32 no_beacons;
 u32 mib_int_count;


 s32 comp_queued;
 s32 comp_delivered;
 s32 msdu_enqued;
 s32 mpdu_enqued;
 s32 wmm_drop;
 s32 local_enqued;
 s32 local_freed;
 s32 hw_queued;
 s32 hw_reaped;
 s32 underrun;
 u32 hw_paused;
 s32 tx_abort;
 s32 mpdus_requed;
 u32 tx_ko;
 u32 data_rc;
 u32 self_triggers;
 u32 sw_retry_failure;
 u32 illgl_rate_phy_err;
 u32 pdev_cont_xretry;
 u32 pdev_tx_timeout;
 u32 pdev_resets;
 u32 phy_underrun;
 u32 txop_ovf;
 u32 seq_posted;
 u32 seq_failed_queueing;
 u32 seq_completed;
 u32 seq_restarted;
 u32 mu_seq_posted;
 u32 mpdus_sw_flush;
 u32 mpdus_hw_filter;
 u32 mpdus_truncated;
 u32 mpdus_ack_failed;
 u32 mpdus_expired;


 s32 mid_ppdu_route_change;
 s32 status_rcvd;
 s32 r0_frags;
 s32 r1_frags;
 s32 r2_frags;
 s32 r3_frags;
 s32 htt_msdus;
 s32 htt_mpdus;
 s32 loc_msdus;
 s32 loc_mpdus;
 s32 oversize_amsdu;
 s32 phy_errs;
 s32 phy_err_drop;
 s32 mpdu_errs;
 s32 rx_ovfl_errs;
};

struct ath10k_fw_stats {
 struct list_head pdevs;
 struct list_head vdevs;
 struct list_head peers;
};




struct ath10k_tpc_table {
 u32 pream_idx[160];
 u8 rate_code[160];
 char tpc_value[160][4 * 10];
};

struct ath10k_tpc_stats {
 u32 reg_domain;
 u32 chan_freq;
 u32 phy_mode;
 u32 twice_antenna_reduction;
 u32 twice_max_rd_power;
 s32 twice_antenna_gain;
 u32 power_limit;
 u32 num_tx_chain;
 u32 ctl;
 u32 rate_max;
 u8 flag[3];
 struct ath10k_tpc_table tpc_table[3];
};

struct ath10k_dfs_stats {
 u32 phy_errors;
 u32 pulses_total;
 u32 pulses_detected;
 u32 pulses_discarded;
 u32 radar_detected;
};



struct ath10k_peer {
 struct list_head list;
 struct ieee80211_vif *vif;
 struct ieee80211_sta *sta;

 int vdev_id;
 u8 addr[6];
 unsigned long peer_ids[((((1 << 11)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];


 struct ieee80211_key_conf *keys[3 + 1];
};

struct ath10k_txq {
 struct list_head list;
 unsigned long num_fw_queued;
 unsigned long num_push_allowed;
};

struct ath10k_sta {
 struct ath10k_vif *arvif;


 u32 changed;
 u32 bw;
 u32 nss;
 u32 smps;
 u16 peer_id;

 struct work_struct update_wk;






};



enum ath10k_beacon_state {
 ATH10K_BEACON_SCHEDULED = 0,
 ATH10K_BEACON_SENDING,
 ATH10K_BEACON_SENT,
};

struct ath10k_vif {
 struct list_head list;

 u32 vdev_id;
 u16 peer_id;
 enum wmi_vdev_type vdev_type;
 enum wmi_vdev_subtype vdev_subtype;
 u32 beacon_interval;
 u32 dtim_period;
 struct sk_buff *beacon;

 enum ath10k_beacon_state beacon_state;
 void *beacon_buf;
 dma_addr_t beacon_paddr;
 unsigned long tx_paused;

 struct ath10k *ar;
 struct ieee80211_vif *vif;

 bool is_started;
 bool is_up;
 bool spectral_enabled;
 bool ps;
 u32 aid;
 u8 bssid[6];

 struct ieee80211_key_conf *wep_keys[3 + 1];
 s8 def_wep_key_idx;

 u16 tx_seq_no;

 union {
  struct {
   u32 uapsd;
  } sta;
  struct {

   u8 tim_bitmap[64];
   u8 tim_len;
   u32 ssid_len;
   u8 ssid[32];
   bool hidden_ssid;

   u32 noa_len;
   u8 *noa_data;
  } ap;
 } u;

 bool use_cts_prot;
 bool nohwcrypt;
 int num_legacy_stations;
 int txpower;
 struct wmi_wmm_params_all_arg wmm_params;
 struct work_struct ap_csa_work;
 struct delayed_work connection_loss_work;
 struct cfg80211_bitrate_mask bitrate_mask;
};

struct ath10k_vif_iter {
 u32 vdev_id;
 struct ath10k_vif *arvif;
};


struct ath10k_fw_crash_data {
 bool crashed_since_read;

 uuid_le uuid;
 struct timespec timestamp;
 __le32 registers[60];
};

struct ath10k_debug {
 struct dentry *debugfs_phy;

 struct ath10k_fw_stats fw_stats;
 struct completion fw_stats_complete;
 bool fw_stats_done;

 unsigned long htt_stats_mask;
 struct delayed_work htt_stats_dwork;
 struct ath10k_dfs_stats dfs_stats;
 struct ath_dfs_pool_stats dfs_pool_stats;


 struct ath10k_tpc_stats *tpc_stats;

 struct completion tpc_complete;


 u32 fw_dbglog_mask;
 u32 fw_dbglog_level;
 u32 pktlog_filter;
 u32 reg_addr;
 u32 nf_cal_period;

 struct ath10k_fw_crash_data *fw_crash_data;
};

enum ath10k_state {
 ATH10K_STATE_OFF = 0,
 ATH10K_STATE_ON,
# 455 "drivers/net/wireless/ath/ath10k/core.h"
 ATH10K_STATE_RESTARTING,
 ATH10K_STATE_RESTARTED,





 ATH10K_STATE_WEDGED,


 ATH10K_STATE_UTF,
};

enum ath10k_firmware_mode {

 ATH10K_FIRMWARE_MODE_NORMAL,


 ATH10K_FIRMWARE_MODE_UTF,
};

enum ath10k_fw_features {

 ATH10K_FW_FEATURE_EXT_WMI_MGMT_RX = 0,


 ATH10K_FW_FEATURE_WMI_10X = 1,


 ATH10K_FW_FEATURE_HAS_WMI_MGMT_TX = 2,


 ATH10K_FW_FEATURE_NO_P2P = 3,





 ATH10K_FW_FEATURE_WMI_10_2 = 4,





 ATH10K_FW_FEATURE_MULTI_VIF_PS_SUPPORT = 5,





 ATH10K_FW_FEATURE_WOWLAN_SUPPORT = 6,


 ATH10K_FW_FEATURE_IGNORE_OTP_RESULT = 7,




 ATH10K_FW_FEATURE_NO_NWIFI_DECAP_4ADDR_PADDING = 8,


 ATH10K_FW_FEATURE_SUPPORTS_SKIP_CLOCK_INIT = 9,




 ATH10K_FW_FEATURE_RAW_MODE_SUPPORT = 10,


 ATH10K_FW_FEATURE_SUPPORTS_ADAPTIVE_CCA = 11,


 ATH10K_FW_FEATURE_MFP_SUPPORT = 12,
# 536 "drivers/net/wireless/ath/ath10k/core.h"
 ATH10K_FW_FEATURE_PEER_FLOW_CONTROL = 13,


 ATH10K_FW_FEATURE_COUNT,
};

enum ath10k_dev_flags {

 ATH10K_CAC_RUNNING,
 ATH10K_FLAG_CORE_REGISTERED,




 ATH10K_FLAG_CRASH_FLUSH,





 ATH10K_FLAG_RAW_MODE,


 ATH10K_FLAG_HW_CRYPTO_DISABLED,


 ATH10K_FLAG_BTCOEX,


 ATH10K_FLAG_PEER_STATS,
};

enum ath10k_cal_mode {
 ATH10K_CAL_MODE_FILE,
 ATH10K_CAL_MODE_OTP,
 ATH10K_CAL_MODE_DT,
 ATH10K_PRE_CAL_MODE_FILE,
 ATH10K_PRE_CAL_MODE_DT,
};

enum ath10k_crypt_mode {

 ATH10K_CRYPT_MODE_HW,

 ATH10K_CRYPT_MODE_SW,
};

static inline __attribute__((no_instrument_function)) const char *ath10k_cal_mode_str(enum ath10k_cal_mode mode)
{
 switch (mode) {
 case ATH10K_CAL_MODE_FILE:
  return "file";
 case ATH10K_CAL_MODE_OTP:
  return "otp";
 case ATH10K_CAL_MODE_DT:
  return "dt";
 case ATH10K_PRE_CAL_MODE_FILE:
  return "pre-cal-file";
 case ATH10K_PRE_CAL_MODE_DT:
  return "pre-cal-dt";
 }

 return "unknown";
}

enum ath10k_scan_state {
 ATH10K_SCAN_IDLE,
 ATH10K_SCAN_STARTING,
 ATH10K_SCAN_RUNNING,
 ATH10K_SCAN_ABORTING,
};

static inline __attribute__((no_instrument_function)) const char *ath10k_scan_state_str(enum ath10k_scan_state state)
{
 switch (state) {
 case ATH10K_SCAN_IDLE:
  return "idle";
 case ATH10K_SCAN_STARTING:
  return "starting";
 case ATH10K_SCAN_RUNNING:
  return "running";
 case ATH10K_SCAN_ABORTING:
  return "aborting";
 }

 return "unknown";
}

enum ath10k_tx_pause_reason {
 ATH10K_TX_PAUSE_Q_FULL,
 ATH10K_TX_PAUSE_MAX,
};

struct ath10k_fw_file {
 const struct firmware *firmware;

 char fw_version[32];

 unsigned long fw_features[(((ATH10K_FW_FEATURE_COUNT) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

 enum ath10k_fw_wmi_op_version wmi_op_version;
 enum ath10k_fw_htt_op_version htt_op_version;

 const void *firmware_data;
 size_t firmware_len;

 const void *otp_data;
 size_t otp_len;

 const void *codeswap_data;
 size_t codeswap_len;
};

struct ath10k_fw_components {
 const struct firmware *board;
 const void *board_data;
 size_t board_len;

 struct ath10k_fw_file fw_file;
};

struct ath10k {
 struct ath_common ath_common;
 struct ieee80211_hw *hw;
 struct device *dev;
 u8 mac_addr[6];

 enum ath10k_hw_rev hw_rev;
 u16 dev_id;
 u32 chip_id;
 u32 target_version;
 u8 fw_version_major;
 u32 fw_version_minor;
 u16 fw_version_release;
 u16 fw_version_build;
 u32 fw_stats_req_mask;
 u32 phy_capability;
 u32 hw_min_tx_power;
 u32 hw_max_tx_power;
 u32 ht_cap_info;
 u32 vht_cap_info;
 u32 num_rf_chains;
 u32 max_spatial_stream;

 bool ani_enabled;

 bool p2p;

 struct {
  enum ath10k_bus bus;
  const struct ath10k_hif_ops *ops;
 } hif;

 struct completion target_suspend;

 const struct ath10k_hw_regs *regs;
 const struct ath10k_hw_values *hw_values;
 struct ath10k_bmi bmi;
 struct ath10k_wmi wmi;
 struct ath10k_htc htc;
 struct ath10k_htt htt;

 struct ath10k_hw_params {
  u32 id;
  u16 dev_id;
  const char *name;
  u32 patch_load_addr;
  int uart_pin;
  u32 otp_exe_param;






  bool has_shifted_cc_wraparound;





  bool continuous_frag_desc;

  u32 channel_counters_freq_hz;




  u32 max_probe_resp_desc_thres;


  enum ath10k_hw_4addr_pad hw_4addr_pad;

  u32 tx_chain_mask;
  u32 rx_chain_mask;
  u32 max_spatial_stream;
  u32 cal_data_len;

  struct ath10k_hw_params_fw {
   const char *dir;
   const char *board;
   size_t board_size;
   size_t board_ext_size;
  } fw;
 } hw_params;


 struct ath10k_fw_components normal_mode_fw;




 const struct ath10k_fw_components *running_fw;

 const struct firmware *pre_cal_file;
 const struct firmware *cal_file;

 struct {
  struct ath10k_swap_code_seg_info *firmware_swap_code_seg_info;
 } swap;

 struct {
  u32 vendor;
  u32 device;
  u32 subsystem_vendor;
  u32 subsystem_device;

  bool bmi_ids_valid;
  u8 bmi_board_id;
  u8 bmi_chip_id;
 } id;

 int fw_api;
 int bd_api;
 enum ath10k_cal_mode cal_mode;

 struct {
  struct completion started;
  struct completion completed;
  struct completion on_channel;
  struct delayed_work timeout;
  enum ath10k_scan_state state;
  bool is_roc;
  int vdev_id;
  int roc_freq;
  bool roc_notify;
 } scan;

 struct {
  struct ieee80211_supported_band sbands[NUM_NL80211_BANDS];
 } mac;


 struct ieee80211_channel *rx_channel;


 struct ieee80211_channel *scan_channel;


 struct cfg80211_chan_def chandef;


 struct ieee80211_channel *tgt_oper_chan;

 unsigned long long free_vdev_map;
 struct ath10k_vif *monitor_arvif;
 bool monitor;
 int monitor_vdev_id;
 bool monitor_started;
 unsigned int filter_flags;
 unsigned long dev_flags;
 bool dfs_block_radar_events;


 bool radar_enabled;
 int num_started_vdevs;


 u8 cfg_tx_chainmask;
 u8 cfg_rx_chainmask;

 struct completion install_key_done;

 struct completion vdev_setup_done;

 struct workqueue_struct *workqueue;

 struct workqueue_struct *workqueue_aux;


 struct mutex conf_mutex;


 spinlock_t data_lock;

 spinlock_t txqs_lock;

 struct list_head txqs;
 struct list_head arvifs;
 struct list_head peers;
 struct ath10k_peer *peer_map[(1 << 11)];
 wait_queue_head_t peer_mapping_wq;


 int num_peers;
 int num_stations;

 int max_num_peers;
 int max_num_stations;
 int max_num_vdevs;
 int max_num_tdls_vdevs;
 int num_active_peers;
 int num_tids;

 struct work_struct svc_rdy_work;
 struct sk_buff *svc_rdy_skb;

 struct work_struct offchan_tx_work;
 struct sk_buff_head offchan_tx_queue;
 struct completion offchan_tx_completed;
 struct sk_buff *offchan_tx_skb;

 struct work_struct wmi_mgmt_tx_work;
 struct sk_buff_head wmi_mgmt_tx_queue;

 enum ath10k_state state;

 struct work_struct register_work;
 struct work_struct restart_work;



 u32 survey_last_rx_clear_count;
 u32 survey_last_cycle_count;
 struct survey_info survey[39];







 bool ch_info_can_report_survey;
 struct completion bss_survey_done;

 struct dfs_pattern_detector *dfs_detector;

 unsigned long tx_paused;
# 897 "drivers/net/wireless/ath/ath10k/core.h"
 struct {

  struct ath10k_fw_components utf_mode_fw;


  bool utf_monitor;
 } testmode;

 struct {

  u32 fw_crash_counter;
  u32 fw_warm_reset_counter;
  u32 fw_cold_reset_counter;
 } stats;

 struct ath10k_thermal thermal;
 struct ath10k_wow wow;


 u8 drv_priv[0] __attribute__((aligned(sizeof(void *))));
};

static inline __attribute__((no_instrument_function)) bool ath10k_peer_stats_enabled(struct ath10k *ar)
{
 if ((__builtin_constant_p((ATH10K_FLAG_PEER_STATS)) ? constant_test_bit((ATH10K_FLAG_PEER_STATS), (&ar->dev_flags)) : variable_test_bit((ATH10K_FLAG_PEER_STATS), (&ar->dev_flags))) &&
     (__builtin_constant_p((WMI_SERVICE_PEER_STATS)) ? constant_test_bit((WMI_SERVICE_PEER_STATS), (ar->wmi.svc_map)) : variable_test_bit((WMI_SERVICE_PEER_STATS), (ar->wmi.svc_map))))
  return true;

 return false;
}

struct ath10k *ath10k_core_create(size_t priv_size, struct device *dev,
      enum ath10k_bus bus,
      enum ath10k_hw_rev hw_rev,
      const struct ath10k_hif_ops *hif_ops);
void ath10k_core_destroy(struct ath10k *ar);
void ath10k_core_get_fw_features_str(struct ath10k *ar,
         char *buf,
         size_t max_len);
int ath10k_core_fetch_firmware_api_n(struct ath10k *ar, const char *name,
         struct ath10k_fw_file *fw_file);

int ath10k_core_start(struct ath10k *ar, enum ath10k_firmware_mode mode,
        const struct ath10k_fw_components *fw_components);
int ath10k_wait_for_suspend(struct ath10k *ar, u32 suspend_opt);
void ath10k_core_stop(struct ath10k *ar);
int ath10k_core_register(struct ath10k *ar, u32 chip_id);
void ath10k_core_unregister(struct ath10k *ar);
# 19 "drivers/net/wireless/ath/ath10k/htt_rx.c" 2


# 1 "drivers/net/wireless/ath/ath10k/txrx.h" 1
# 22 "drivers/net/wireless/ath/ath10k/txrx.h"
int ath10k_txrx_tx_unref(struct ath10k_htt *htt,
    const struct htt_tx_done *tx_done);

struct ath10k_peer *ath10k_peer_find(struct ath10k *ar, int vdev_id,
         const u8 *addr);
struct ath10k_peer *ath10k_peer_find_by_id(struct ath10k *ar, int peer_id);
int ath10k_wait_for_peer_created(struct ath10k *ar, int vdev_id,
     const u8 *addr);
int ath10k_wait_for_peer_deleted(struct ath10k *ar, int vdev_id,
     const u8 *addr);

void ath10k_peer_map_event(struct ath10k_htt *htt,
      struct htt_peer_map_event *ev);
void ath10k_peer_unmap_event(struct ath10k_htt *htt,
        struct htt_peer_unmap_event *ev);
# 22 "drivers/net/wireless/ath/ath10k/htt_rx.c" 2
# 1 "drivers/net/wireless/ath/ath10k/debug.h" 1
# 22 "drivers/net/wireless/ath/ath10k/debug.h"
# 1 "drivers/net/wireless/ath/ath10k/trace.h" 1
# 20 "drivers/net/wireless/ath/ath10k/trace.h"
# 1 "include/linux/tracepoint.h" 1
# 24 "include/linux/tracepoint.h"
struct module;
struct tracepoint;
struct notifier_block;

struct trace_enum_map {
 const char *system;
 const char *enum_string;
 unsigned long enum_value;
};



extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 78 "include/linux/tracepoint.h"
static inline __attribute__((no_instrument_function)) void tracepoint_synchronize_unregister(void)
{
 synchronize_sched();
}


extern void syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 21 "drivers/net/wireless/ath/ath10k/trace.h" 2



static inline __attribute__((no_instrument_function)) u32 ath10k_frm_hdr_len(const void *buf, size_t len)
{
 const struct ieee80211_hdr *hdr = buf;






 return ({ u32 __min1 = (len); u32 __min2 = (ieee80211_hdrlen(hdr->frame_control)); __min1 < __min2 ? __min1: __min2; });
}
# 56 "drivers/net/wireless/ath/ath10k/trace.h"

# 78 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_log_err
# 80 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, struct va_format *vaf) {}


 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_log_warn
# 85 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, struct va_format *vaf) {}


 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_log_info
# 90 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, struct va_format *vaf) {}


 ;

static inline __attribute__((no_instrument_function)) void
# 119 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_log_dbg
# 95 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, unsigned int level, struct va_format *vaf) {}
# 119 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 152 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_log_dbg_dump
# 121 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const char *msg, const char *prefix, const void *buf, size_t buf_len) {}
# 152 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 186 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_wmi_cmd
# 154 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, int id, const void *buf, size_t buf_len, int ret) {}
# 186 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 216 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_wmi_event
# 188 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, int id, const void *buf, size_t buf_len) {}
# 216 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 243 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_htt_stats
# 218 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *buf, size_t buf_len) {}
# 243 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 273 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_wmi_dbglog
# 245 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *buf, size_t buf_len) {}
# 273 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 303 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_htt_pktlog
# 275 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *buf, u16 buf_len) {}
# 303 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 338 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_htt_tx
# 305 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, u16 msdu_id, u16 msdu_len, u8 vdev_id, u8 tid) {}
# 338 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 363 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_txrx_tx_unref
# 340 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, u16 msdu_id) {}
# 363 "drivers/net/wireless/ath/ath10k/trace.h"
 ;


# 390 "drivers/net/wireless/ath/ath10k/trace.h"
 ;


# 419 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_tx_hdr
# 421 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}


 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_tx_payload
# 426 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}


 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_rx_hdr
# 431 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}


 ;

static inline __attribute__((no_instrument_function)) void


 trace_ath10k_rx_payload
# 436 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}


 ;

static inline __attribute__((no_instrument_function)) void
# 469 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_htt_rx_desc
# 441 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}
# 469 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 510 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_wmi_diag_container
# 471 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, u8 type, u32 timestamp, u32 code, u16 len, const void *data) {}
# 510 "drivers/net/wireless/ath/ath10k/trace.h"
 ;

static inline __attribute__((no_instrument_function)) void
# 537 "drivers/net/wireless/ath/ath10k/trace.h"
 trace_ath10k_wmi_diag
# 512 "drivers/net/wireless/ath/ath10k/trace.h"
 (struct ath10k *ar, const void *data, size_t len) {}
# 537 "drivers/net/wireless/ath/ath10k/trace.h"
 ;
# 548 "drivers/net/wireless/ath/ath10k/trace.h"
# 1 "include/trace/define_trace.h" 1
# 548 "drivers/net/wireless/ath/ath10k/trace.h" 2
# 23 "drivers/net/wireless/ath/ath10k/debug.h" 2

enum ath10k_debug_mask {
 ATH10K_DBG_PCI = 0x00000001,
 ATH10K_DBG_WMI = 0x00000002,
 ATH10K_DBG_HTC = 0x00000004,
 ATH10K_DBG_HTT = 0x00000008,
 ATH10K_DBG_MAC = 0x00000010,
 ATH10K_DBG_BOOT = 0x00000020,
 ATH10K_DBG_PCI_DUMP = 0x00000040,
 ATH10K_DBG_HTT_DUMP = 0x00000080,
 ATH10K_DBG_MGMT = 0x00000100,
 ATH10K_DBG_DATA = 0x00000200,
 ATH10K_DBG_BMI = 0x00000400,
 ATH10K_DBG_REGULATORY = 0x00000800,
 ATH10K_DBG_TESTMODE = 0x00001000,
 ATH10K_DBG_WMI_PRINT = 0x00002000,
 ATH10K_DBG_PCI_PS = 0x00004000,
 ATH10K_DBG_AHB = 0x00008000,
 ATH10K_DBG_ANY = 0xffffffff,
};

enum ath10k_pktlog_filter {
 ATH10K_PKTLOG_RX = 0x000000001,
 ATH10K_PKTLOG_TX = 0x000000002,
 ATH10K_PKTLOG_RCFIND = 0x000000004,
 ATH10K_PKTLOG_RCUPDATE = 0x000000008,
 ATH10K_PKTLOG_DBG_PRINT = 0x000000010,
 ATH10K_PKTLOG_ANY = 0x00000001f,
};

enum ath10k_dbg_aggr_mode {
 ATH10K_DBG_AGGR_MODE_AUTO,
 ATH10K_DBG_AGGR_MODE_MANUAL,
 ATH10K_DBG_AGGR_MODE_MAX,
};




extern unsigned int ath10k_debug_mask;

__attribute__((format(printf, 2, 3))) void ath10k_info(struct ath10k *ar, const char *fmt, ...);
__attribute__((format(printf, 2, 3))) void ath10k_err(struct ath10k *ar, const char *fmt, ...);
__attribute__((format(printf, 2, 3))) void ath10k_warn(struct ath10k *ar, const char *fmt, ...);

void ath10k_debug_print_hwfw_info(struct ath10k *ar);
void ath10k_debug_print_board_info(struct ath10k *ar);
void ath10k_debug_print_boot_info(struct ath10k *ar);
void ath10k_print_driver_info(struct ath10k *ar);
# 98 "drivers/net/wireless/ath/ath10k/debug.h"
static inline __attribute__((no_instrument_function)) int ath10k_debug_start(struct ath10k *ar)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_stop(struct ath10k *ar)
{
}

static inline __attribute__((no_instrument_function)) int ath10k_debug_create(struct ath10k *ar)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_destroy(struct ath10k *ar)
{
}

static inline __attribute__((no_instrument_function)) int ath10k_debug_register(struct ath10k *ar)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_unregister(struct ath10k *ar)
{
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_fw_stats_process(struct ath10k *ar,
       struct sk_buff *skb)
{
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_tpc_stats_process(struct ath10k *ar,
        struct ath10k_tpc_stats *tpc_stats)
{
 kfree(tpc_stats);
}

static inline __attribute__((no_instrument_function)) void ath10k_debug_dbglog_add(struct ath10k *ar, u8 *buffer,
        int len)
{
}

static inline __attribute__((no_instrument_function)) struct ath10k_fw_crash_data *
ath10k_debug_get_new_fw_crash_data(struct ath10k *ar)
{
 return ((void *)0);
}
# 159 "drivers/net/wireless/ath/ath10k/debug.h"
static inline __attribute__((no_instrument_function)) void ath10k_sta_update_rx_duration(struct ath10k *ar,
       struct list_head *peer)
{
}
# 175 "drivers/net/wireless/ath/ath10k/debug.h"
static inline __attribute__((no_instrument_function)) int ath10k_dbg(struct ath10k *ar,
        enum ath10k_debug_mask dbg_mask,
        const char *fmt, ...)
{
 return 0;
}

static inline __attribute__((no_instrument_function)) void ath10k_dbg_dump(struct ath10k *ar,
       enum ath10k_debug_mask mask,
       const char *msg, const char *prefix,
       const void *buf, size_t len)
{
}
# 23 "drivers/net/wireless/ath/ath10k/htt_rx.c" 2
# 1 "drivers/net/wireless/ath/ath10k/trace.h" 1
# 548 "drivers/net/wireless/ath/ath10k/trace.h"
# 1 "include/trace/define_trace.h" 1
# 548 "drivers/net/wireless/ath/ath10k/trace.h" 2
# 24 "drivers/net/wireless/ath/ath10k/htt_rx.c" 2
# 1 "drivers/net/wireless/ath/ath10k/mac.h" 1
# 26 "drivers/net/wireless/ath/ath10k/mac.h"
enum wmi_tlv_tx_pause_id;
enum wmi_tlv_tx_pause_action;

struct ath10k_generic_iter {
 struct ath10k *ar;
 int ret;
};

struct rfc1042_hdr {
 u8 llc_dsap;
 u8 llc_ssap;
 u8 llc_ctrl;
 u8 snap_oui[3];
 __be16 snap_type;
} __attribute__((packed));

struct ath10k *ath10k_mac_create(size_t priv_size);
void ath10k_mac_destroy(struct ath10k *ar);
int ath10k_mac_register(struct ath10k *ar);
void ath10k_mac_unregister(struct ath10k *ar);
struct ath10k_vif *ath10k_get_arvif(struct ath10k *ar, u32 vdev_id);
void __ath10k_scan_finish(struct ath10k *ar);
void ath10k_scan_finish(struct ath10k *ar);
void ath10k_scan_timeout_work(struct work_struct *work);
void ath10k_offchan_tx_purge(struct ath10k *ar);
void ath10k_offchan_tx_work(struct work_struct *work);
void ath10k_mgmt_over_wmi_tx_purge(struct ath10k *ar);
void ath10k_mgmt_over_wmi_tx_work(struct work_struct *work);
void ath10k_halt(struct ath10k *ar);
void ath10k_mac_vif_beacon_free(struct ath10k_vif *arvif);
void ath10k_drain_tx(struct ath10k *ar);
bool ath10k_mac_is_peer_wep_key_set(struct ath10k *ar, const u8 *addr,
        u8 keyidx);
int ath10k_mac_vif_chan(struct ieee80211_vif *vif,
   struct cfg80211_chan_def *def);

void ath10k_mac_handle_beacon(struct ath10k *ar, struct sk_buff *skb);
void ath10k_mac_handle_beacon_miss(struct ath10k *ar, u32 vdev_id);
void ath10k_mac_handle_tx_pause_vdev(struct ath10k *ar, u32 vdev_id,
         enum wmi_tlv_tx_pause_id pause_id,
         enum wmi_tlv_tx_pause_action action);

u8 ath10k_mac_hw_rate_to_idx(const struct ieee80211_supported_band *sband,
        u8 hw_rate, bool cck);
u8 ath10k_mac_bitrate_to_idx(const struct ieee80211_supported_band *sband,
        u32 bitrate);

void ath10k_mac_tx_lock(struct ath10k *ar, int reason);
void ath10k_mac_tx_unlock(struct ath10k *ar, int reason);
void ath10k_mac_vif_tx_lock(struct ath10k_vif *arvif, int reason);
void ath10k_mac_vif_tx_unlock(struct ath10k_vif *arvif, int reason);
bool ath10k_mac_tx_frm_has_freq(struct ath10k *ar);
void ath10k_mac_tx_push_pending(struct ath10k *ar);
int ath10k_mac_tx_push_txq(struct ieee80211_hw *hw,
      struct ieee80211_txq *txq);
struct ieee80211_txq *ath10k_mac_txq_lookup(struct ath10k *ar,
         u16 peer_id,
         u8 tid);
int ath10k_mac_ext_resource_config(struct ath10k *ar, u32 val);

static inline __attribute__((no_instrument_function)) struct ath10k_vif *ath10k_vif_to_arvif(struct ieee80211_vif *vif)
{
 return (struct ath10k_vif *)vif->drv_priv;
}

static inline __attribute__((no_instrument_function)) void ath10k_tx_h_seq_no(struct ieee80211_vif *vif,
          struct sk_buff *skb)
{
 struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 struct ath10k_vif *arvif = ath10k_vif_to_arvif(vif);

 if (info->flags & IEEE80211_TX_CTL_ASSIGN_SEQ) {
  if (arvif->tx_seq_no == 0)
   arvif->tx_seq_no = 0x1000;

  if (info->flags & IEEE80211_TX_CTL_FIRST_FRAGMENT)
   arvif->tx_seq_no += 0x10;
  hdr->seq_ctrl &= (( __le16)(__u16)(0x000F));
  hdr->seq_ctrl |= (( __le16)(__u16)(arvif->tx_seq_no));
 }
}
# 25 "drivers/net/wireless/ath/ath10k/htt_rx.c" 2
# 36 "drivers/net/wireless/ath/ath10k/htt_rx.c"
static int ath10k_htt_rx_get_csum_state(struct sk_buff *skb);
static void ath10k_htt_txrx_compl_task(unsigned long ptr);

static struct sk_buff *
ath10k_htt_rx_find_skb_paddr(struct ath10k *ar, u32 paddr)
{
 struct ath10k_skb_rxcb *rxcb;

 for (rxcb = ({ typeof((&ar->htt.rx_ring.skb_table[(sizeof(paddr) <= 4 ? hash_32_generic(paddr, ( __builtin_constant_p(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) )) : hash_64_generic(paddr, ( __builtin_constant_p(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) )))])->first) ____ptr = ((&ar->htt.rx_ring.skb_table[(sizeof(paddr) <= 4 ? hash_32_generic(paddr, ( __builtin_constant_p(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) )) : hash_64_generic(paddr, ( __builtin_constant_p(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(ar->htt.rx_ring.skb_table) / sizeof((ar->htt.rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((ar->htt.rx_ring.skb_table)), typeof(&(ar->htt.rx_ring.skb_table)[0]))); }))))) )))])->first); ____ptr ? ({ const typeof( ((typeof(*(rxcb)) *)0)->hlist ) *__mptr = (____ptr); (typeof(*(rxcb)) *)( (char *)__mptr - __builtin_offsetof(typeof(*(rxcb)), hlist) );}) : ((void *)0); }); rxcb; rxcb = ({ typeof((rxcb)->hlist.next) ____ptr = ((rxcb)->hlist.next); ____ptr ? ({ const typeof( ((typeof(*(rxcb)) *)0)->hlist ) *__mptr = (____ptr); (typeof(*(rxcb)) *)( (char *)__mptr - __builtin_offsetof(typeof(*(rxcb)), hlist) );}) : ((void *)0); }))
  if (rxcb->paddr == paddr)
   return ({ const typeof( ((struct sk_buff *)0)->cb ) *__mptr = ((void *)rxcb); (struct sk_buff *)( (char *)__mptr - __builtin_offsetof(struct sk_buff, cb) );});

 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 48); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 return ((void *)0);
}

static void ath10k_htt_rx_ring_free(struct ath10k_htt *htt)
{
 struct sk_buff *skb;
 struct ath10k_skb_rxcb *rxcb;
 struct hlist_node *n;
 int i;

 if (htt->rx_ring.in_ord_rx) {
  for ((i) = 0, rxcb = ((void *)0); rxcb == ((void *)0) && (i) < ((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); })))); (i)++) for (rxcb = ({ typeof((&htt->rx_ring.skb_table[i])->first) ____ptr = ((&htt->rx_ring.skb_table[i])->first); ____ptr ? ({ const typeof( ((typeof(*rxcb) *)0)->hlist ) *__mptr = (____ptr); (typeof(*rxcb) *)( (char *)__mptr - __builtin_offsetof(typeof(*rxcb), hlist) );}) : ((void *)0); }); rxcb && ({ n = rxcb->hlist.next; 1; }); rxcb = ({ typeof(n) ____ptr = (n); ____ptr ? ({ const typeof( ((typeof(*rxcb) *)0)->hlist ) *__mptr = (____ptr); (typeof(*rxcb) *)( (char *)__mptr - __builtin_offsetof(typeof(*rxcb), hlist) );}) : ((void *)0); })) {
   skb = ({ const typeof( ((struct sk_buff *)0)->cb ) *__mptr = ((void *)rxcb); (struct sk_buff *)( (char *)__mptr - __builtin_offsetof(struct sk_buff, cb) );});
   dma_unmap_single_attrs(htt->ar->dev, rxcb->paddr, skb->len + skb_tailroom(skb), DMA_FROM_DEVICE, ((void *)0))

                      ;
   hash_del(&rxcb->hlist);
   dev_kfree_skb_any(skb);
  }
 } else {
  for (i = 0; i < htt->rx_ring.size; i++) {
   skb = htt->rx_ring.netbufs_ring[i];
   if (!skb)
    continue;

   rxcb = ATH10K_SKB_RXCB(skb);
   dma_unmap_single_attrs(htt->ar->dev, rxcb->paddr, skb->len + skb_tailroom(skb), DMA_FROM_DEVICE, ((void *)0))

                      ;
   dev_kfree_skb_any(skb);
  }
 }

 htt->rx_ring.fill_cnt = 0;
 __hash_init(htt->rx_ring.skb_table, ((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); })))));
 memset(htt->rx_ring.netbufs_ring, 0,
        htt->rx_ring.size * sizeof(htt->rx_ring.netbufs_ring[0]));
}

static int __ath10k_htt_rx_ring_fill_n(struct ath10k_htt *htt, int num)
{
 struct htt_rx_desc *rx_desc;
 struct ath10k_skb_rxcb *rxcb;
 struct sk_buff *skb;
 dma_addr_t paddr;
 int ret = 0, idx;






 do { bool __cond = !(!((((2048) / 2) - 1) >= 2048 / 2)); extern void __compiletime_assert_101(void) __attribute__((error("BUILD_BUG_ON failed: " "HTT_RX_RING_FILL_LEVEL >= HTT_RX_RING_SIZE / 2"))); if (__cond) __compiletime_assert_101(); do { } while (0); } while (0);

 idx = (( __u32)(__le32)(*htt->rx_ring.alloc_idx.vaddr));
 while (num > 0) {
  skb = dev_alloc_skb(1920 + 8);
  if (!skb) {
   ret = -12;
   goto fail;
  }

  if (!((((unsigned long)skb->data) & ((typeof((unsigned long)skb->data))(8) - 1)) == 0))
   skb_pull(skb,
     ((typeof(skb->data))(((((unsigned long)(skb->data))) + ((typeof(((unsigned long)(skb->data))))(((8))) - 1)) & ~((typeof(((unsigned long)(skb->data))))(((8))) - 1))) -
     skb->data);


  rx_desc = (struct htt_rx_desc *)skb->data;
  rx_desc->attention.flags = (( __le32)(__u32)(0));

  paddr = dma_map_single_attrs(htt->ar->dev, skb->data, skb->len + skb_tailroom(skb), DMA_FROM_DEVICE, ((void *)0))

                           ;

  if (__builtin_expect(!!(dma_mapping_error(htt->ar->dev, paddr)), 0)) {
   dev_kfree_skb_any(skb);
   ret = -12;
   goto fail;
  }

  rxcb = ATH10K_SKB_RXCB(skb);
  rxcb->paddr = paddr;
  htt->rx_ring.netbufs_ring[idx] = skb;
  htt->rx_ring.paddrs_ring[idx] = (( __le32)(__u32)(paddr));
  htt->rx_ring.fill_cnt++;

  if (htt->rx_ring.in_ord_rx) {
   hlist_add_head(&ATH10K_SKB_RXCB(skb)->hlist, &htt->rx_ring.skb_table[(sizeof((u32)paddr) <= 4 ? hash_32_generic((u32)paddr, ( __builtin_constant_p(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) )) : hash_64_generic((u32)paddr, ( __builtin_constant_p(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) ? ( (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) < 1 ? ____ilog2_NaN() : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 63) ? 63 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 62) ? 62 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 61) ? 61 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 60) ? 60 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 59) ? 59 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 58) ? 58 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 57) ? 57 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 56) ? 56 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 55) ? 55 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 54) ? 54 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 53) ? 53 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 52) ? 52 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 51) ? 51 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 50) ? 50 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 49) ? 49 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 48) ? 48 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 47) ? 47 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 46) ? 46 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 45) ? 45 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 44) ? 44 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 43) ? 43 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 42) ? 42 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 41) ? 41 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 40) ? 40 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 39) ? 39 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 38) ? 38 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 37) ? 37 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 36) ? 36 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 35) ? 35 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 34) ? 34 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 33) ? 33 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 32) ? 32 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 31) ? 31 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 30) ? 30 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 29) ? 29 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 28) ? 28 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 27) ? 27 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 26) ? 26 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 25) ? 25 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 24) ? 24 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 23) ? 23 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 22) ? 22 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 21) ? 21 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 20) ? 20 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 19) ? 19 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 18) ? 18 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 17) ? 17 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 16) ? 16 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 15) ? 15 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 14) ? 14 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 13) ? 13 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 12) ? 12 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 11) ? 11 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 10) ? 10 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 9) ? 9 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 8) ? 8 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 7) ? 7 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 6) ? 6 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 5) ? 5 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 4) ? 4 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 3) ? 3 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 2) ? 2 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 1) ? 1 : (((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) <= 4) ? __ilog2_u32(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) : __ilog2_u64(((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); }))))) )))])

                ;
  }

  num--;
  idx++;
  idx &= htt->rx_ring.size_mask;
 }

fail:




 asm volatile("mfence":::"memory");
 *htt->rx_ring.alloc_idx.vaddr = (( __le32)(__u32)(idx));
 return ret;
}

static int ath10k_htt_rx_ring_fill_n(struct ath10k_htt *htt, int num)
{
 do { (void)(&htt->rx_ring.lock); } while (0);
 return __ath10k_htt_rx_ring_fill_n(htt, num);
}

static void ath10k_htt_rx_msdu_buff_replenish(struct ath10k_htt *htt)
{
 int ret, num_deficit, num_to_fill;
# 182 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 spin_lock_bh(&htt->rx_ring.lock);
 num_deficit = htt->rx_ring.fill_level - htt->rx_ring.fill_cnt;
 num_to_fill = ({ typeof(100) _min1 = (100); typeof(num_deficit) _min2 = (num_deficit); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; });
 num_deficit -= num_to_fill;
 ret = ath10k_htt_rx_ring_fill_n(htt, num_to_fill);
 if (ret == -12) {






  mod_timer(&htt->rx_ring.refill_retry_timer, jiffies +
     msecs_to_jiffies(50));
 } else if (num_deficit > 0) {
  mod_timer(&htt->rx_ring.refill_retry_timer, jiffies +
     msecs_to_jiffies(5));
 }
 spin_unlock_bh(&htt->rx_ring.lock);
}

static void ath10k_htt_rx_ring_refill_retry(unsigned long arg)
{
 struct ath10k_htt *htt = (struct ath10k_htt *)arg;

 ath10k_htt_rx_msdu_buff_replenish(htt);
}

int ath10k_htt_rx_ring_refill(struct ath10k *ar)
{
 struct ath10k_htt *htt = &ar->htt;
 int ret;

 spin_lock_bh(&htt->rx_ring.lock);
 ret = ath10k_htt_rx_ring_fill_n(htt, (htt->rx_ring.fill_level -
           htt->rx_ring.fill_cnt));
 spin_unlock_bh(&htt->rx_ring.lock);

 if (ret)
  ath10k_htt_rx_ring_free(htt);

 return ret;
}

void ath10k_htt_rx_free(struct ath10k_htt *htt)
{
 del_timer_sync(&htt->rx_ring.refill_retry_timer);
 tasklet_kill(&htt->txrx_compl_task);

 skb_queue_purge(&htt->rx_compl_q);
 skb_queue_purge(&htt->rx_in_ord_compl_q);
 skb_queue_purge(&htt->tx_fetch_ind_q);

 ath10k_htt_rx_ring_free(htt);

 dma_free_coherent(htt->ar->dev,
     (htt->rx_ring.size *
      sizeof(htt->rx_ring.paddrs_ring)),
     htt->rx_ring.paddrs_ring,
     htt->rx_ring.base_paddr);

 dma_free_coherent(htt->ar->dev,
     sizeof(*htt->rx_ring.alloc_idx.vaddr),
     htt->rx_ring.alloc_idx.vaddr,
     htt->rx_ring.alloc_idx.paddr);

 kfree(htt->rx_ring.netbufs_ring);
}

static inline __attribute__((no_instrument_function)) struct sk_buff *ath10k_htt_rx_netbuf_pop(struct ath10k_htt *htt)
{
 struct ath10k *ar = htt->ar;
 int idx;
 struct sk_buff *msdu;

 do { (void)(&htt->rx_ring.lock); } while (0);

 if (htt->rx_ring.fill_cnt == 0) {
  ath10k_warn(ar, "tried to pop sk_buff from an empty rx ring\n");
  return ((void *)0);
 }

 idx = htt->rx_ring.sw_rd_idx.msdu_payld;
 msdu = htt->rx_ring.netbufs_ring[idx];
 htt->rx_ring.netbufs_ring[idx] = ((void *)0);
 htt->rx_ring.paddrs_ring[idx] = 0;

 idx++;
 idx &= htt->rx_ring.size_mask;
 htt->rx_ring.sw_rd_idx.msdu_payld = idx;
 htt->rx_ring.fill_cnt--;

 dma_unmap_single_attrs(htt->ar->dev, ATH10K_SKB_RXCB(msdu)->paddr, msdu->len + skb_tailroom(msdu), DMA_FROM_DEVICE, ((void *)0))


                    ;
 ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "htt rx netbuf pop: ",
   msdu->data, msdu->len + skb_tailroom(msdu));

 return msdu;
}


static int ath10k_htt_rx_amsdu_pop(struct ath10k_htt *htt,
       struct sk_buff_head *amsdu)
{
 struct ath10k *ar = htt->ar;
 int msdu_len, msdu_chaining = 0;
 struct sk_buff *msdu;
 struct htt_rx_desc *rx_desc;

 do { (void)(&htt->rx_ring.lock); } while (0);

 for (;;) {
  int last_msdu, msdu_len_invalid, msdu_chained;

  msdu = ath10k_htt_rx_netbuf_pop(htt);
  if (!msdu) {
   __skb_queue_purge(amsdu);
   return -2;
  }

  __skb_queue_tail(amsdu, msdu);

  rx_desc = (struct htt_rx_desc *)msdu->data;



  skb_put(msdu, __builtin_offsetof(struct htt_rx_desc, msdu_payload));
  skb_pull(msdu, __builtin_offsetof(struct htt_rx_desc, msdu_payload));
# 321 "drivers/net/wireless/ath/ath10k/htt_rx.c"
  if (!((( __u32)(__le32)(rx_desc->attention.flags))
    & RX_ATTENTION_FLAGS_MSDU_DONE)) {
   __skb_queue_purge(amsdu);
   return -5;
  }

  msdu_len_invalid = !!((( __u32)(__le32)(rx_desc->attention.flags))
     & (RX_ATTENTION_FLAGS_MPDU_LENGTH_ERR |
        RX_ATTENTION_FLAGS_MSDU_LENGTH_ERR));
  msdu_len = ((((( __u32)(__le32)(rx_desc->msdu_start.common.info0))) &
 0x00003fff) >> 0);
  msdu_chained = rx_desc->frag_info.ring2_more_count;

  if (msdu_len_invalid)
   msdu_len = 0;

  skb_trim(msdu, 0);
  skb_put(msdu, ({ typeof(msdu_len) _min1 = (msdu_len); typeof((1920 - (int)sizeof(struct htt_rx_desc))) _min2 = ((1920 - (int)sizeof(struct htt_rx_desc))); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; }));
  msdu_len -= msdu->len;


  while (msdu_chained--) {
   msdu = ath10k_htt_rx_netbuf_pop(htt);
   if (!msdu) {
    __skb_queue_purge(amsdu);
    return -2;
   }

   __skb_queue_tail(amsdu, msdu);
   skb_trim(msdu, 0);
   skb_put(msdu, ({ typeof(msdu_len) _min1 = (msdu_len); typeof(1920) _min2 = (1920); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; }));
   msdu_len -= msdu->len;
   msdu_chaining = 1;
  }

  last_msdu = (( __u32)(__le32)(rx_desc->msdu_end.common.info0)) &
    (1 << 15);

  trace_ath10k_htt_rx_desc(ar, &rx_desc->attention,
      sizeof(*rx_desc) - sizeof(u32));

  if (last_msdu)
   break;
 }

 if (skb_queue_empty(amsdu))
  msdu_chaining = -1;
# 382 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 return msdu_chaining;
}

static struct sk_buff *ath10k_htt_rx_pop_paddr(struct ath10k_htt *htt,
            u32 paddr)
{
 struct ath10k *ar = htt->ar;
 struct ath10k_skb_rxcb *rxcb;
 struct sk_buff *msdu;

 do { (void)(&htt->rx_ring.lock); } while (0);

 msdu = ath10k_htt_rx_find_skb_paddr(ar, paddr);
 if (!msdu)
  return ((void *)0);

 rxcb = ATH10K_SKB_RXCB(msdu);
 hash_del(&rxcb->hlist);
 htt->rx_ring.fill_cnt--;

 dma_unmap_single_attrs(htt->ar->dev, rxcb->paddr, msdu->len + skb_tailroom(msdu), DMA_FROM_DEVICE, ((void *)0))

                    ;
 ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "htt rx netbuf pop: ",
   msdu->data, msdu->len + skb_tailroom(msdu));

 return msdu;
}

static int ath10k_htt_rx_pop_paddr_list(struct ath10k_htt *htt,
     struct htt_rx_in_ord_ind *ev,
     struct sk_buff_head *list)
{
 struct ath10k *ar = htt->ar;
 struct htt_rx_in_ord_msdu_desc *msdu_desc = ev->msdu_descs;
 struct htt_rx_desc *rxd;
 struct sk_buff *msdu;
 int msdu_count;
 bool is_offload;
 u32 paddr;

 do { (void)(&htt->rx_ring.lock); } while (0);

 msdu_count = (( __u16)(__le16)(ev->msdu_count));
 is_offload = !!(ev->info & 0x00000020);

 while (msdu_count--) {
  paddr = (( __u32)(__le32)(msdu_desc->msdu_paddr));

  msdu = ath10k_htt_rx_pop_paddr(htt, paddr);
  if (!msdu) {
   __skb_queue_purge(list);
   return -2;
  }

  __skb_queue_tail(list, msdu);

  if (!is_offload) {
   rxd = (void *)msdu->data;

   trace_ath10k_htt_rx_desc(ar, rxd, sizeof(*rxd));

   skb_put(msdu, sizeof(*rxd));
   skb_pull(msdu, sizeof(*rxd));
   skb_put(msdu, (( __u16)(__le16)(msdu_desc->msdu_len)));

   if (!((( __u32)(__le32)(rxd->attention.flags)) &
         RX_ATTENTION_FLAGS_MSDU_DONE)) {
    ath10k_warn(htt->ar, "tried to pop an incomplete frame, oops!\n");
    return -5;
   }
  }

  msdu_desc++;
 }

 return 0;
}

int ath10k_htt_rx_alloc(struct ath10k_htt *htt)
{
 struct ath10k *ar = htt->ar;
 dma_addr_t paddr;
 void *vaddr;
 size_t size;
 struct timer_list *timer = &htt->rx_ring.refill_retry_timer;

 htt->rx_confused = false;




 htt->rx_ring.size = 2048;
 htt->rx_ring.size_mask = htt->rx_ring.size - 1;
 htt->rx_ring.fill_level = (((2048) / 2) - 1);

 if (!is_power_of_2(htt->rx_ring.size)) {
  ath10k_warn(ar, "htt rx ring size is not power of 2\n");
  return -22;
 }

 htt->rx_ring.netbufs_ring =
  kzalloc(htt->rx_ring.size * sizeof(struct sk_buff *),
   ((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!htt->rx_ring.netbufs_ring)
  goto err_netbuf;

 size = htt->rx_ring.size * sizeof(htt->rx_ring.paddrs_ring);

 vaddr = dma_alloc_coherent(htt->ar->dev, size, &paddr, ((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!vaddr)
  goto err_dma_ring;

 htt->rx_ring.paddrs_ring = vaddr;
 htt->rx_ring.base_paddr = paddr;

 vaddr = dma_alloc_coherent(htt->ar->dev,
       sizeof(*htt->rx_ring.alloc_idx.vaddr),
       &paddr, ((( gfp_t)(0x400000u|0x2000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!vaddr)
  goto err_dma_idx;

 htt->rx_ring.alloc_idx.vaddr = vaddr;
 htt->rx_ring.alloc_idx.paddr = paddr;
 htt->rx_ring.sw_rd_idx.msdu_payld = htt->rx_ring.size_mask;
 *htt->rx_ring.alloc_idx.vaddr = 0;


 do { init_timer_key((((timer))), ((0)), ((void *)0), ((void *)0)); ((timer))->function = ((ath10k_htt_rx_ring_refill_retry)); ((timer))->data = (((unsigned long)htt)); } while (0);

 do { spinlock_check(&htt->rx_ring.lock); do { *(&(&htt->rx_ring.lock)->rlock) = (raw_spinlock_t) { .raw_lock = { { (0) } }, }; } while (0); } while (0);

 htt->rx_ring.fill_cnt = 0;
 htt->rx_ring.sw_rd_idx.msdu_payld = 0;
 __hash_init(htt->rx_ring.skb_table, ((sizeof(htt->rx_ring.skb_table) / sizeof((htt->rx_ring.skb_table)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((htt->rx_ring.skb_table)), typeof(&(htt->rx_ring.skb_table)[0]))); })))));

 skb_queue_head_init(&htt->rx_compl_q);
 skb_queue_head_init(&htt->rx_in_ord_compl_q);
 skb_queue_head_init(&htt->tx_fetch_ind_q);
 atomic_set(&htt->num_mpdus_ready, 0);

 tasklet_init(&htt->txrx_compl_task, ath10k_htt_txrx_compl_task,
       (unsigned long)htt);

 ath10k_dbg(ar, ATH10K_DBG_BOOT, "htt rx ring size %d fill_level %d\n",
     htt->rx_ring.size, htt->rx_ring.fill_level);
 return 0;

err_dma_idx:
 dma_free_coherent(htt->ar->dev,
     (htt->rx_ring.size *
      sizeof(htt->rx_ring.paddrs_ring)),
     htt->rx_ring.paddrs_ring,
     htt->rx_ring.base_paddr);
err_dma_ring:
 kfree(htt->rx_ring.netbufs_ring);
err_netbuf:
 return -12;
}

static int ath10k_htt_rx_crypto_param_len(struct ath10k *ar,
       enum htt_rx_mpdu_encrypt_type type)
{
 switch (type) {
 case HTT_RX_MPDU_ENCRYPT_NONE:
  return 0;
 case HTT_RX_MPDU_ENCRYPT_WEP40:
 case HTT_RX_MPDU_ENCRYPT_WEP104:
  return 4;
 case HTT_RX_MPDU_ENCRYPT_TKIP_WITHOUT_MIC:
 case HTT_RX_MPDU_ENCRYPT_TKIP_WPA:
  return 8;
 case HTT_RX_MPDU_ENCRYPT_AES_CCM_WPA2:
  return 8;
 case HTT_RX_MPDU_ENCRYPT_WEP128:
 case HTT_RX_MPDU_ENCRYPT_WAPI:
  break;
 }

 ath10k_warn(ar, "unsupported encryption type %d\n", type);
 return 0;
}



static int ath10k_htt_rx_crypto_tail_len(struct ath10k *ar,
      enum htt_rx_mpdu_encrypt_type type)
{
 switch (type) {
 case HTT_RX_MPDU_ENCRYPT_NONE:
  return 0;
 case HTT_RX_MPDU_ENCRYPT_WEP40:
 case HTT_RX_MPDU_ENCRYPT_WEP104:
  return 4;
 case HTT_RX_MPDU_ENCRYPT_TKIP_WITHOUT_MIC:
 case HTT_RX_MPDU_ENCRYPT_TKIP_WPA:
  return 4;
 case HTT_RX_MPDU_ENCRYPT_AES_CCM_WPA2:
  return 8;
 case HTT_RX_MPDU_ENCRYPT_WEP128:
 case HTT_RX_MPDU_ENCRYPT_WAPI:
  break;
 }

 ath10k_warn(ar, "unsupported encryption type %d\n", type);
 return 0;
}

struct amsdu_subframe_hdr {
 u8 dst[6];
 u8 src[6];
 __be16 len;
} __attribute__((packed));



static void ath10k_htt_rx_h_rates(struct ath10k *ar,
      struct ieee80211_rx_status *status,
      struct htt_rx_desc *rxd)
{
 struct ieee80211_supported_band *sband;
 u8 cck, rate, bw, sgi, mcs, nss;
 u8 preamble = 0;
 u8 group_id;
 u32 info1, info2, info3;

 info1 = (( __u32)(__le32)(rxd->ppdu_start.info1));
 info2 = (( __u32)(__le32)(rxd->ppdu_start.info2));
 info3 = (( __u32)(__le32)(rxd->ppdu_start.info3));

 preamble = (((info1) & 0xff000000) >> 24);

 switch (preamble) {
 case HTT_RX_LEGACY:



  if (!status->freq)
   return;

  cck = info1 & (1 << 4);
  rate = (((info1) & 0x0000000f) >> 0);
  rate &= ~(1UL << (3));

  sband = &ar->mac.sbands[status->band];
  status->rate_idx = ath10k_mac_hw_rate_to_idx(sband, rate, cck);
  break;
 case HTT_RX_HT:
 case HTT_RX_HT_WITH_TXBF:

  mcs = info2 & 0x1F;
  nss = mcs >> 3;
  bw = (info2 >> 7) & 1;
  sgi = (info3 >> 7) & 1;

  status->rate_idx = mcs;
  status->flag |= RX_FLAG_HT;
  if (sgi)
   status->flag |= RX_FLAG_SHORT_GI;
  if (bw)
   status->flag |= RX_FLAG_40MHZ;
  break;
 case HTT_RX_VHT:
 case HTT_RX_VHT_WITH_TXBF:


  bw = info2 & 3;
  sgi = info3 & 1;
  group_id = (info2 >> 4) & 0x3F;

  if (((group_id) == 0 || (group_id) == 63)) {
   mcs = (info3 >> 4) & 0x0F;
   nss = ((info2 >> 10) & 0x07) + 1;
  } else {
# 666 "drivers/net/wireless/ath/ath10k/htt_rx.c"
   mcs = 0;
   nss = 1;
  }

  if (mcs > 0x09) {
   ath10k_warn(ar, "invalid MCS received %u\n", mcs);
   ath10k_warn(ar, "rxd %08x mpdu start %08x %08x msdu start %08x %08x ppdu start %08x %08x %08x %08x %08x\n",
        (( __u32)(__le32)(rxd->attention.flags)),
        (( __u32)(__le32)(rxd->mpdu_start.info0)),
        (( __u32)(__le32)(rxd->mpdu_start.info1)),
        (( __u32)(__le32)(rxd->msdu_start.common.info0)),
        (( __u32)(__le32)(rxd->msdu_start.common.info1)),
        rxd->ppdu_start.info0,
        (( __u32)(__le32)(rxd->ppdu_start.info1)),
        (( __u32)(__le32)(rxd->ppdu_start.info2)),
        (( __u32)(__le32)(rxd->ppdu_start.info3)),
        (( __u32)(__le32)(rxd->ppdu_start.info4)));

   ath10k_warn(ar, "msdu end %08x mpdu end %08x\n",
        (( __u32)(__le32)(rxd->msdu_end.common.info0)),
        (( __u32)(__le32)(rxd->mpdu_end.info0)));

   ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0),
     "rx desc msdu payload: ",
     rxd->msdu_payload, 50);
  }

  status->rate_idx = mcs;
  status->vht_nss = nss;

  if (sgi)
   status->flag |= RX_FLAG_SHORT_GI;

  switch (bw) {

  case 0:
   break;

  case 1:
   status->flag |= RX_FLAG_40MHZ;
   break;

  case 2:
   status->vht_flag |= RX_VHT_FLAG_80MHZ;
  }

  status->flag |= RX_FLAG_VHT;
  break;
 default:
  break;
 }
}

static struct ieee80211_channel *
ath10k_htt_rx_h_peer_channel(struct ath10k *ar, struct htt_rx_desc *rxd)
{
 struct ath10k_peer *peer;
 struct ath10k_vif *arvif;
 struct cfg80211_chan_def def;
 u16 peer_id;

 do { (void)(&ar->data_lock); } while (0);

 if (!rxd)
  return ((void *)0);

 if (rxd->attention.flags &
     (( __le32)(__u32)(RX_ATTENTION_FLAGS_PEER_IDX_INVALID)))
  return ((void *)0);

 if (!(rxd->msdu_end.common.info0 &
       (( __le32)(__u32)((1 << 14)))))
  return ((void *)0);

 peer_id = ((((( __u32)(__le32)(rxd->mpdu_start.info0))) &
 0x000007ff) >> 0);

 peer = ath10k_peer_find_by_id(ar, peer_id);
 if (!peer)
  return ((void *)0);

 arvif = ath10k_get_arvif(ar, peer->vdev_id);
 if (({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(!arvif); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 748); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); }))
  return ((void *)0);

 if (({ int __ret_warn_on = !!(ath10k_mac_vif_chan(arvif->vif, &def)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 751); __builtin_expect(!!(__ret_warn_on), 0); }))
  return ((void *)0);

 return def.chan;
}

static struct ieee80211_channel *
ath10k_htt_rx_h_vdev_channel(struct ath10k *ar, u32 vdev_id)
{
 struct ath10k_vif *arvif;
 struct cfg80211_chan_def def;

 do { (void)(&ar->data_lock); } while (0);

 for (arvif = ({ const typeof( ((typeof(*arvif) *)0)->list ) *__mptr = ((&ar->arvifs)->next); (typeof(*arvif) *)( (char *)__mptr - __builtin_offsetof(typeof(*arvif), list) );}); &arvif->list != (&ar->arvifs); arvif = ({ const typeof( ((typeof(*(arvif)) *)0)->list ) *__mptr = ((arvif)->list.next); (typeof(*(arvif)) *)( (char *)__mptr - __builtin_offsetof(typeof(*(arvif)), list) );})) {
  if (arvif->vdev_id == vdev_id &&
      ath10k_mac_vif_chan(arvif->vif, &def) == 0)
   return def.chan;
 }

 return ((void *)0);
}

static void
ath10k_htt_rx_h_any_chan_iter(struct ieee80211_hw *hw,
         struct ieee80211_chanctx_conf *conf,
         void *data)
{
 struct cfg80211_chan_def *def = data;

 *def = conf->def;
}

static struct ieee80211_channel *
ath10k_htt_rx_h_any_channel(struct ath10k *ar)
{
 struct cfg80211_chan_def def = {};

 ieee80211_iter_chan_contexts_atomic(ar->hw,
         ath10k_htt_rx_h_any_chan_iter,
         &def);

 return def.chan;
}

static bool ath10k_htt_rx_h_channel(struct ath10k *ar,
        struct ieee80211_rx_status *status,
        struct htt_rx_desc *rxd,
        u32 vdev_id)
{
 struct ieee80211_channel *ch;

 spin_lock_bh(&ar->data_lock);
 ch = ar->scan_channel;
 if (!ch)
  ch = ar->rx_channel;
 if (!ch)
  ch = ath10k_htt_rx_h_peer_channel(ar, rxd);
 if (!ch)
  ch = ath10k_htt_rx_h_vdev_channel(ar, vdev_id);
 if (!ch)
  ch = ath10k_htt_rx_h_any_channel(ar);
 if (!ch)
  ch = ar->tgt_oper_chan;
 spin_unlock_bh(&ar->data_lock);

 if (!ch)
  return false;

 status->band = ch->band;
 status->freq = ch->center_freq;

 return true;
}

static void ath10k_htt_rx_h_signal(struct ath10k *ar,
       struct ieee80211_rx_status *status,
       struct htt_rx_desc *rxd)
{

 status->signal = -95 +
    rxd->ppdu_start.rssi_comb;
 status->flag &= ~RX_FLAG_NO_SIGNAL_VAL;
}

static void ath10k_htt_rx_h_mactime(struct ath10k *ar,
        struct ieee80211_rx_status *status,
        struct htt_rx_desc *rxd)
{






 status->mactime = (( __u32)(__le32)(rxd->ppdu_end.common.tsf_timestamp));
 status->flag |= RX_FLAG_MACTIME_END;
}

static void ath10k_htt_rx_h_ppdu(struct ath10k *ar,
     struct sk_buff_head *amsdu,
     struct ieee80211_rx_status *status,
     u32 vdev_id)
{
 struct sk_buff *first;
 struct htt_rx_desc *rxd;
 bool is_first_ppdu;
 bool is_last_ppdu;

 if (skb_queue_empty(amsdu))
  return;

 first = skb_peek(amsdu);
 rxd = (void *)first->data - sizeof(*rxd);

 is_first_ppdu = !!(rxd->attention.flags &
      (( __le32)(__u32)(RX_ATTENTION_FLAGS_FIRST_MPDU)));
 is_last_ppdu = !!(rxd->attention.flags &
     (( __le32)(__u32)(RX_ATTENTION_FLAGS_LAST_MPDU)));

 if (is_first_ppdu) {

  status->freq = 0;
  status->rate_idx = 0;
  status->vht_nss = 0;
  status->vht_flag &= ~RX_VHT_FLAG_80MHZ;
  status->flag &= ~(RX_FLAG_HT |
      RX_FLAG_VHT |
      RX_FLAG_SHORT_GI |
      RX_FLAG_40MHZ |
      RX_FLAG_MACTIME_END);
  status->flag |= RX_FLAG_NO_SIGNAL_VAL;

  ath10k_htt_rx_h_signal(ar, status, rxd);
  ath10k_htt_rx_h_channel(ar, status, rxd, vdev_id);
  ath10k_htt_rx_h_rates(ar, status, rxd);
 }

 if (is_last_ppdu)
  ath10k_htt_rx_h_mactime(ar, status, rxd);
}

static const char * const tid_to_ac[] = {
 "BE",
 "BK",
 "BK",
 "BE",
 "VI",
 "VI",
 "VO",
 "VO",
};

static char *ath10k_get_tid(struct ieee80211_hdr *hdr, char *out, size_t size)
{
 u8 *qc;
 int tid;

 if (!ieee80211_is_data_qos(hdr->frame_control))
  return "";

 qc = ieee80211_get_qos_ctl(hdr);
 tid = *qc & 0x000f;
 if (tid < 8)
  snprintf(out, size, "tid %d (%s)", tid, tid_to_ac[tid]);
 else
  snprintf(out, size, "tid %d", tid);

 return out;
}

static void ath10k_process_rx(struct ath10k *ar,
         struct ieee80211_rx_status *rx_status,
         struct sk_buff *skb)
{
 struct ieee80211_rx_status *status;
 struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 char tid[32];

 status = IEEE80211_SKB_RXCB(skb);
 *status = *rx_status;

 ath10k_dbg(ar, ATH10K_DBG_DATA,
     "rx skb %p len %u peer %pM %s %s sn %u %s%s%s%s%s %srate_idx %u vht_nss %u freq %u band %u flag 0x%llx fcs-err %i mic-err %i amsdu-more %i\n",
     skb,
     skb->len,
     ieee80211_get_SA(hdr),
     ath10k_get_tid(hdr, tid, sizeof(tid)),
     is_multicast_ether_addr(ieee80211_get_DA(hdr)) ?
       "mcast" : "ucast",
     ((( __u16)(__le16)(hdr->seq_ctrl)) & 0xFFF0) >> 4,
     status->flag == 0 ? "legacy" : "",
     status->flag & RX_FLAG_HT ? "ht" : "",
     status->flag & RX_FLAG_VHT ? "vht" : "",
     status->flag & RX_FLAG_40MHZ ? "40" : "",
     status->vht_flag & RX_VHT_FLAG_80MHZ ? "80" : "",
     status->flag & RX_FLAG_SHORT_GI ? "sgi " : "",
     status->rate_idx,
     status->vht_nss,
     status->freq,
     status->band, status->flag,
     !!(status->flag & RX_FLAG_FAILED_FCS_CRC),
     !!(status->flag & RX_FLAG_MMIC_ERROR),
     !!(status->flag & RX_FLAG_AMSDU_MORE));
 ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "rx skb: ",
   skb->data, skb->len);
 trace_ath10k_rx_hdr(ar, skb->data, skb->len);
 trace_ath10k_rx_payload(ar, skb->data, skb->len);

 ieee80211_rx(ar->hw, skb);
}

static int ath10k_htt_rx_nwifi_hdrlen(struct ath10k *ar,
          struct ieee80211_hdr *hdr)
{
 int len = ieee80211_hdrlen(hdr->frame_control);

 if (!(__builtin_constant_p((ATH10K_FW_FEATURE_NO_NWIFI_DECAP_4ADDR_PADDING)) ? constant_test_bit((ATH10K_FW_FEATURE_NO_NWIFI_DECAP_4ADDR_PADDING), (ar->running_fw->fw_file.fw_features)) : variable_test_bit((ATH10K_FW_FEATURE_NO_NWIFI_DECAP_4ADDR_PADDING), (ar->running_fw->fw_file.fw_features)))
                                            )
  len = ((((len)-1) | ((__typeof__(len))((4)-1)))+1);

 return len;
}

static void ath10k_htt_rx_h_undecap_raw(struct ath10k *ar,
     struct sk_buff *msdu,
     struct ieee80211_rx_status *status,
     enum htt_rx_mpdu_encrypt_type enctype,
     bool is_decrypted)
{
 struct ieee80211_hdr *hdr;
 struct htt_rx_desc *rxd;
 size_t hdr_len;
 size_t crypto_len;
 bool is_first;
 bool is_last;

 rxd = (void *)msdu->data - sizeof(*rxd);
 is_first = !!(rxd->msdu_end.common.info0 &
        (( __le32)(__u32)((1 << 14))));
 is_last = !!(rxd->msdu_end.common.info0 &
       (( __le32)(__u32)((1 << 15))));
# 1005 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 if (__builtin_expect(!!(({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(!is_first); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 1005); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); })), 0))
  return;


 if (__builtin_expect(!!(({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(!(is_first && is_last)); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 1009); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); })), 0))
  return;

 skb_trim(msdu, msdu->len - 4);
# 1021 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 if (!is_decrypted)
  return;





 hdr = (void *)msdu->data;


 if (status->flag & RX_FLAG_IV_STRIPPED)
  skb_trim(msdu, msdu->len -
    ath10k_htt_rx_crypto_tail_len(ar, enctype));


 if ((status->flag & RX_FLAG_MMIC_STRIPPED) &&
     !ieee80211_has_morefrags(hdr->frame_control) &&
     enctype == HTT_RX_MPDU_ENCRYPT_TKIP_WPA)
  skb_trim(msdu, msdu->len - 8);


 if (status->flag & RX_FLAG_IV_STRIPPED) {
  hdr_len = ieee80211_hdrlen(hdr->frame_control);
  crypto_len = ath10k_htt_rx_crypto_param_len(ar, enctype);

  memmove((void *)msdu->data + crypto_len,
   (void *)msdu->data, hdr_len);
  skb_pull(msdu, crypto_len);
 }
}

static void ath10k_htt_rx_h_undecap_nwifi(struct ath10k *ar,
       struct sk_buff *msdu,
       struct ieee80211_rx_status *status,
       const u8 first_hdr[64])
{
 struct ieee80211_hdr *hdr;
 size_t hdr_len;
 u8 da[6];
 u8 sa[6];
# 1074 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 if ((ar->hw_params.hw_4addr_pad == ATH10K_HW_4ADDR_PAD_BEFORE) &&
     ieee80211_has_a4(((struct ieee80211_hdr *)first_hdr)->frame_control)) {



  hdr = (struct ieee80211_hdr *)(msdu->data + 2);



  skb_put(msdu, 2);
 } else {
  hdr = (struct ieee80211_hdr *)(msdu->data);
 }

 hdr_len = ath10k_htt_rx_nwifi_hdrlen(ar, hdr);
 ether_addr_copy(da, ieee80211_get_DA(hdr));
 ether_addr_copy(sa, ieee80211_get_SA(hdr));
 skb_pull(msdu, hdr_len);


 hdr = (struct ieee80211_hdr *)first_hdr;
 hdr_len = ieee80211_hdrlen(hdr->frame_control);
 memcpy(skb_push(msdu, hdr_len), hdr, hdr_len);




 hdr = (struct ieee80211_hdr *)msdu->data;
 ether_addr_copy(ieee80211_get_DA(hdr), da);
 ether_addr_copy(ieee80211_get_SA(hdr), sa);
}

static void *ath10k_htt_rx_h_find_rfc1042(struct ath10k *ar,
       struct sk_buff *msdu,
       enum htt_rx_mpdu_encrypt_type enctype)
{
 struct ieee80211_hdr *hdr;
 struct htt_rx_desc *rxd;
 size_t hdr_len, crypto_len;
 void *rfc1042;
 bool is_first, is_last, is_amsdu;

 rxd = (void *)msdu->data - sizeof(*rxd);
 hdr = (void *)rxd->rx_hdr_status;

 is_first = !!(rxd->msdu_end.common.info0 &
        (( __le32)(__u32)((1 << 14))));
 is_last = !!(rxd->msdu_end.common.info0 &
       (( __le32)(__u32)((1 << 15))));
 is_amsdu = !(is_first && is_last);

 rfc1042 = hdr;

 if (is_first) {
  hdr_len = ieee80211_hdrlen(hdr->frame_control);
  crypto_len = ath10k_htt_rx_crypto_param_len(ar, enctype);

  rfc1042 += ((((hdr_len)-1) | ((__typeof__(hdr_len))((4)-1)))+1) +
      ((((crypto_len)-1) | ((__typeof__(crypto_len))((4)-1)))+1);
 }

 if (is_amsdu)
  rfc1042 += sizeof(struct amsdu_subframe_hdr);

 return rfc1042;
}

static void ath10k_htt_rx_h_undecap_eth(struct ath10k *ar,
     struct sk_buff *msdu,
     struct ieee80211_rx_status *status,
     const u8 first_hdr[64],
     enum htt_rx_mpdu_encrypt_type enctype)
{
 struct ieee80211_hdr *hdr;
 struct ethhdr *eth;
 size_t hdr_len;
 void *rfc1042;
 u8 da[6];
 u8 sa[6];






 rfc1042 = ath10k_htt_rx_h_find_rfc1042(ar, msdu, enctype);
 if (({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(!rfc1042); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 1160); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); }))
  return;


 eth = (struct ethhdr *)msdu->data;
 ether_addr_copy(da, eth->h_dest);
 ether_addr_copy(sa, eth->h_source);
 skb_pull(msdu, sizeof(struct ethhdr));


 memcpy(skb_push(msdu, sizeof(struct rfc1042_hdr)), rfc1042,
        sizeof(struct rfc1042_hdr));


 hdr = (struct ieee80211_hdr *)first_hdr;
 hdr_len = ieee80211_hdrlen(hdr->frame_control);
 memcpy(skb_push(msdu, hdr_len), hdr, hdr_len);




 hdr = (struct ieee80211_hdr *)msdu->data;
 ether_addr_copy(ieee80211_get_DA(hdr), da);
 ether_addr_copy(ieee80211_get_SA(hdr), sa);
}

static void ath10k_htt_rx_h_undecap_snap(struct ath10k *ar,
      struct sk_buff *msdu,
      struct ieee80211_rx_status *status,
      const u8 first_hdr[64])
{
 struct ieee80211_hdr *hdr;
 size_t hdr_len;







 skb_pull(msdu, sizeof(struct amsdu_subframe_hdr));

 hdr = (struct ieee80211_hdr *)first_hdr;
 hdr_len = ieee80211_hdrlen(hdr->frame_control);
 memcpy(skb_push(msdu, hdr_len), hdr, hdr_len);
}

static void ath10k_htt_rx_h_undecap(struct ath10k *ar,
        struct sk_buff *msdu,
        struct ieee80211_rx_status *status,
        u8 first_hdr[64],
        enum htt_rx_mpdu_encrypt_type enctype,
        bool is_decrypted)
{
 struct htt_rx_desc *rxd;
 enum rx_msdu_decap_format decap;
# 1228 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 rxd = (void *)msdu->data - sizeof(*rxd);
 decap = ((((( __u32)(__le32)(rxd->msdu_start.common.info1))) &
 0x00000300) >> 8);

 switch (decap) {
 case RX_MSDU_DECAP_RAW:
  ath10k_htt_rx_h_undecap_raw(ar, msdu, status, enctype,
         is_decrypted);
  break;
 case RX_MSDU_DECAP_NATIVE_WIFI:
  ath10k_htt_rx_h_undecap_nwifi(ar, msdu, status, first_hdr);
  break;
 case RX_MSDU_DECAP_ETHERNET2_DIX:
  ath10k_htt_rx_h_undecap_eth(ar, msdu, status, first_hdr, enctype);
  break;
 case RX_MSDU_DECAP_8023_SNAP_LLC:
  ath10k_htt_rx_h_undecap_snap(ar, msdu, status, first_hdr);
  break;
 }
}

static int ath10k_htt_rx_get_csum_state(struct sk_buff *skb)
{
 struct htt_rx_desc *rxd;
 u32 flags, info;
 bool is_ip4, is_ip6;
 bool is_tcp, is_udp;
 bool ip_csum_ok, tcpudp_csum_ok;

 rxd = (void *)skb->data - sizeof(*rxd);
 flags = (( __u32)(__le32)(rxd->attention.flags));
 info = (( __u32)(__le32)(rxd->msdu_start.common.info1));

 is_ip4 = !!(info & (1 << 10));
 is_ip6 = !!(info & (1 << 11));
 is_tcp = !!(info & (1 << 12));
 is_udp = !!(info & (1 << 13));
 ip_csum_ok = !(flags & RX_ATTENTION_FLAGS_IP_CHKSUM_FAIL);
 tcpudp_csum_ok = !(flags & RX_ATTENTION_FLAGS_TCP_UDP_CHKSUM_FAIL);

 if (!is_ip4 && !is_ip6)
  return 0;
 if (!is_tcp && !is_udp)
  return 0;
 if (!ip_csum_ok)
  return 0;
 if (!tcpudp_csum_ok)
  return 0;

 return 1;
}

static void ath10k_htt_rx_h_csum_offload(struct sk_buff *msdu)
{
 msdu->ip_summed = ath10k_htt_rx_get_csum_state(msdu);
}

static void ath10k_htt_rx_h_mpdu(struct ath10k *ar,
     struct sk_buff_head *amsdu,
     struct ieee80211_rx_status *status)
{
 struct sk_buff *first;
 struct sk_buff *last;
 struct sk_buff *msdu;
 struct htt_rx_desc *rxd;
 struct ieee80211_hdr *hdr;
 enum htt_rx_mpdu_encrypt_type enctype;
 u8 first_hdr[64];
 u8 *qos;
 size_t hdr_len;
 bool has_fcs_err;
 bool has_crypto_err;
 bool has_tkip_err;
 bool has_peer_idx_invalid;
 bool is_decrypted;
 bool is_mgmt;
 u32 attention;

 if (skb_queue_empty(amsdu))
  return;

 first = skb_peek(amsdu);
 rxd = (void *)first->data - sizeof(*rxd);

 is_mgmt = !!(rxd->attention.flags &
       (( __le32)(__u32)(RX_ATTENTION_FLAGS_MGMT_TYPE)));

 enctype = ((((( __u32)(__le32)(rxd->mpdu_start.info0))) &
 0xf0000000) >> 28);




 hdr = (void *)rxd->rx_hdr_status;
 hdr_len = ieee80211_hdrlen(hdr->frame_control);
 memcpy(first_hdr, hdr, hdr_len);




 hdr = (void *)first_hdr;
 qos = ieee80211_get_qos_ctl(hdr);
 qos[0] &= ~0x0080;


 last = skb_peek_tail(amsdu);
 rxd = (void *)last->data - sizeof(*rxd);
 attention = (( __u32)(__le32)(rxd->attention.flags));

 has_fcs_err = !!(attention & RX_ATTENTION_FLAGS_FCS_ERR);
 has_crypto_err = !!(attention & RX_ATTENTION_FLAGS_DECRYPT_ERR);
 has_tkip_err = !!(attention & RX_ATTENTION_FLAGS_TKIP_MIC_ERR);
 has_peer_idx_invalid = !!(attention & RX_ATTENTION_FLAGS_PEER_IDX_INVALID);





 is_decrypted = (enctype != HTT_RX_MPDU_ENCRYPT_NONE &&
   !has_fcs_err &&
   !has_crypto_err &&
   !has_peer_idx_invalid);


 status->flag &= ~(RX_FLAG_FAILED_FCS_CRC |
     RX_FLAG_MMIC_ERROR |
     RX_FLAG_DECRYPTED |
     RX_FLAG_IV_STRIPPED |
     RX_FLAG_ONLY_MONITOR |
     RX_FLAG_MMIC_STRIPPED);

 if (has_fcs_err)
  status->flag |= RX_FLAG_FAILED_FCS_CRC;

 if (has_tkip_err)
  status->flag |= RX_FLAG_MMIC_ERROR;






 if (is_mgmt)
  status->flag |= RX_FLAG_ONLY_MONITOR;

 if (is_decrypted) {
  status->flag |= RX_FLAG_DECRYPTED;

  if (__builtin_expect(!!(!is_mgmt), 1))
   status->flag |= RX_FLAG_IV_STRIPPED |
     RX_FLAG_MMIC_STRIPPED;
}

 for (msdu = (amsdu)->next; msdu != (struct sk_buff *)(amsdu); msdu = msdu->next) {
  ath10k_htt_rx_h_csum_offload(msdu);
  ath10k_htt_rx_h_undecap(ar, msdu, status, first_hdr, enctype,
     is_decrypted);





  if (!is_decrypted)
   continue;
  if (is_mgmt)
   continue;

  hdr = (void *)msdu->data;
  hdr->frame_control &= ~(( __le16)(__u16)(0x4000));
 }
}

static void ath10k_htt_rx_h_deliver(struct ath10k *ar,
        struct sk_buff_head *amsdu,
        struct ieee80211_rx_status *status)
{
 struct sk_buff *msdu;

 while ((msdu = __skb_dequeue(amsdu))) {

  if (skb_queue_empty(amsdu))
   status->flag &= ~RX_FLAG_AMSDU_MORE;
  else
   status->flag |= RX_FLAG_AMSDU_MORE;

  ath10k_process_rx(ar, status, msdu);
 }
}

static int ath10k_unchain_msdu(struct sk_buff_head *amsdu)
{
 struct sk_buff *skb, *first;
 int space;
 int total_len = 0;
# 1430 "drivers/net/wireless/ath/ath10k/htt_rx.c"
 first = __skb_dequeue(amsdu);


 for (skb = (amsdu)->next; skb != (struct sk_buff *)(amsdu); skb = skb->next)
  total_len += skb->len;

 space = total_len - skb_tailroom(first);
 if ((space > 0) &&
     (pskb_expand_head(first, 0, space, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u))) < 0)) {




  __skb_queue_head(amsdu, first);
  return -1;
 }




 while ((skb = __skb_dequeue(amsdu))) {
  skb_copy_from_linear_data(skb, skb_put(first, skb->len),
       skb->len);
  dev_kfree_skb_any(skb);
 }

 __skb_queue_head(amsdu, first);
 return 0;
}

static void ath10k_htt_rx_h_unchain(struct ath10k *ar,
        struct sk_buff_head *amsdu,
        bool chained)
{
 struct sk_buff *first;
 struct htt_rx_desc *rxd;
 enum rx_msdu_decap_format decap;

 first = skb_peek(amsdu);
 rxd = (void *)first->data - sizeof(*rxd);
 decap = ((((( __u32)(__le32)(rxd->msdu_start.common.info1))) &
 0x00000300) >> 8);

 if (!chained)
  return;






 if (decap != RX_MSDU_DECAP_RAW ||
     skb_queue_len(amsdu) != 1 + rxd->frag_info.ring2_more_count) {
  __skb_queue_purge(amsdu);
  return;
 }

 ath10k_unchain_msdu(amsdu);
}

static bool ath10k_htt_rx_amsdu_allowed(struct ath10k *ar,
     struct sk_buff_head *amsdu,
     struct ieee80211_rx_status *rx_status)
{




 if (!rx_status->freq) {
  ath10k_warn(ar, "no channel configured; ignoring frame(s)!\n");
  return false;
 }

 if ((__builtin_constant_p((ATH10K_CAC_RUNNING)) ? constant_test_bit((ATH10K_CAC_RUNNING), (&ar->dev_flags)) : variable_test_bit((ATH10K_CAC_RUNNING), (&ar->dev_flags)))) {
  ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx cac running\n");
  return false;
 }

 return true;
}

static void ath10k_htt_rx_h_filter(struct ath10k *ar,
       struct sk_buff_head *amsdu,
       struct ieee80211_rx_status *rx_status)
{
 if (skb_queue_empty(amsdu))
  return;

 if (ath10k_htt_rx_amsdu_allowed(ar, amsdu, rx_status))
  return;

 __skb_queue_purge(amsdu);
}

static int ath10k_htt_rx_handle_amsdu(struct ath10k_htt *htt)
{
 struct ath10k *ar = htt->ar;
 static struct ieee80211_rx_status rx_status;
 struct sk_buff_head amsdu;
 int ret;

 __skb_queue_head_init(&amsdu);

 spin_lock_bh(&htt->rx_ring.lock);
 if (htt->rx_confused) {
  spin_unlock_bh(&htt->rx_ring.lock);
  return -5;
 }
 ret = ath10k_htt_rx_amsdu_pop(htt, &amsdu);
 spin_unlock_bh(&htt->rx_ring.lock);

 if (ret < 0) {
  ath10k_warn(ar, "rx ring became corrupted: %d\n", ret);
  __skb_queue_purge(&amsdu);



  htt->rx_confused = true;
  return ret;
 }

 ath10k_htt_rx_h_ppdu(ar, &amsdu, &rx_status, 0xffff);
 ath10k_htt_rx_h_unchain(ar, &amsdu, ret > 0);
 ath10k_htt_rx_h_filter(ar, &amsdu, &rx_status);
 ath10k_htt_rx_h_mpdu(ar, &amsdu, &rx_status);
 ath10k_htt_rx_h_deliver(ar, &amsdu, &rx_status);

 return 0;
}

static void ath10k_htt_rx_proc_rx_ind(struct ath10k_htt *htt,
          struct htt_rx_indication *rx)
{
 struct ath10k *ar = htt->ar;
 struct htt_rx_indication_mpdu_range *mpdu_ranges;
 int num_mpdu_ranges;
 int i, mpdu_count = 0;

 num_mpdu_ranges = ((((( __u32)(__le32)(rx->hdr.info1))) &
 0xFF000000) >> 24);
 mpdu_ranges = htt_rx_ind_get_mpdu_ranges(rx);

 ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "htt rx ind: ",
   rx, sizeof(*rx) +
   (sizeof(struct htt_rx_indication_mpdu_range) *
    num_mpdu_ranges));

 for (i = 0; i < num_mpdu_ranges; i++)
  mpdu_count += mpdu_ranges[i].mpdu_count;

 atomic_add(mpdu_count, &htt->num_mpdus_ready);

 tasklet_schedule(&htt->txrx_compl_task);
}

static void ath10k_htt_rx_frag_handler(struct ath10k_htt *htt)
{
 atomic_inc(&htt->num_mpdus_ready);

 tasklet_schedule(&htt->txrx_compl_task);
}

static void ath10k_htt_rx_tx_compl_ind(struct ath10k *ar,
           struct sk_buff *skb)
{
 struct ath10k_htt *htt = &ar->htt;
 struct htt_resp *resp = (struct htt_resp *)skb->data;
 struct htt_tx_done tx_done = {};
 int status = (((resp->data_tx_completion.flags) & 0x07) >> 0);
 __le16 msdu_id;
 int i;

 switch (status) {
 case HTT_DATA_TX_STATUS_NO_ACK:
  tx_done.status = HTT_TX_COMPL_STATE_NOACK;
  break;
 case HTT_DATA_TX_STATUS_OK:
  tx_done.status = HTT_TX_COMPL_STATE_ACK;
  break;
 case HTT_DATA_TX_STATUS_DISCARD:
 case HTT_DATA_TX_STATUS_POSTPONE:
 case HTT_DATA_TX_STATUS_DOWNLOAD_FAIL:
  tx_done.status = HTT_TX_COMPL_STATE_DISCARD;
  break;
 default:
  ath10k_warn(ar, "unhandled tx completion status %d\n", status);
  tx_done.status = HTT_TX_COMPL_STATE_DISCARD;
  break;
 }

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt tx completion num_msdus %d\n",
     resp->data_tx_completion.num_msdus);

 for (i = 0; i < resp->data_tx_completion.num_msdus; i++) {
  msdu_id = resp->data_tx_completion.msdus[i];
  tx_done.msdu_id = (( __u16)(__le16)(msdu_id));
# 1635 "drivers/net/wireless/ath/ath10k/htt_rx.c"
  if (!({ typeof((&htt->txdone_fifo) + 1) __tmp = (&htt->txdone_fifo); typeof(*__tmp->const_type) __val = (tx_done); unsigned int __ret; size_t __recsize = sizeof(*__tmp->rectype); struct __kfifo *__kfifo = &__tmp->kfifo; if (__recsize) __ret = __kfifo_in_r(__kfifo, &__val, sizeof(__val), __recsize); else { __ret = !({ typeof((__tmp) + 1) __tmpq = (__tmp); ({ typeof((__tmpq) + 1) __tmpl = (__tmpq); __tmpl->kfifo.in - __tmpl->kfifo.out; }) > __tmpq->kfifo.mask; }); if (__ret) { ((sizeof(*__tmp) == sizeof(struct __kfifo)) ? ((typeof(__tmp->type))__kfifo->data) : (__tmp->buf) )[__kfifo->in & __tmp->kfifo.mask] = *(typeof(__tmp->type))&__val; __asm__ __volatile__("": : :"memory"); __kfifo->in++; } } __ret; })) {
   ath10k_warn(ar, "txdone fifo overrun, msdu_id %d status %d\n",
        tx_done.msdu_id, tx_done.status);
   ath10k_txrx_tx_unref(htt, &tx_done);
  }
 }
}

static void ath10k_htt_rx_addba(struct ath10k *ar, struct htt_resp *resp)
{
 struct htt_rx_addba *ev = &resp->rx_addba;
 struct ath10k_peer *peer;
 struct ath10k_vif *arvif;
 u16 info0, tid, peer_id;

 info0 = (( __u16)(__le16)(ev->info0));
 tid = (((info0) & 0x000F) >> 0);
 peer_id = (((info0) & 0xFFF0) >> 4);

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx addba tid %hu peer_id %hu size %hhu\n",
     tid, peer_id, ev->window_size);

 spin_lock_bh(&ar->data_lock);
 peer = ath10k_peer_find_by_id(ar, peer_id);
 if (!peer) {
  ath10k_warn(ar, "received addba event for invalid peer_id: %hu\n",
       peer_id);
  spin_unlock_bh(&ar->data_lock);
  return;
 }

 arvif = ath10k_get_arvif(ar, peer->vdev_id);
 if (!arvif) {
  ath10k_warn(ar, "received addba event for invalid vdev_id: %u\n",
       peer->vdev_id);
  spin_unlock_bh(&ar->data_lock);
  return;
 }

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx start rx ba session sta %pM tid %hu size %hhu\n",
     peer->addr, tid, ev->window_size);

 ieee80211_start_rx_ba_session_offl(arvif->vif, peer->addr, tid);
 spin_unlock_bh(&ar->data_lock);
}

static void ath10k_htt_rx_delba(struct ath10k *ar, struct htt_resp *resp)
{
 struct htt_rx_delba *ev = &resp->rx_delba;
 struct ath10k_peer *peer;
 struct ath10k_vif *arvif;
 u16 info0, tid, peer_id;

 info0 = (( __u16)(__le16)(ev->info0));
 tid = (((info0) & 0x000F) >> 0);
 peer_id = (((info0) & 0xFFF0) >> 4);

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx delba tid %hu peer_id %hu\n",
     tid, peer_id);

 spin_lock_bh(&ar->data_lock);
 peer = ath10k_peer_find_by_id(ar, peer_id);
 if (!peer) {
  ath10k_warn(ar, "received addba event for invalid peer_id: %hu\n",
       peer_id);
  spin_unlock_bh(&ar->data_lock);
  return;
 }

 arvif = ath10k_get_arvif(ar, peer->vdev_id);
 if (!arvif) {
  ath10k_warn(ar, "received addba event for invalid vdev_id: %u\n",
       peer->vdev_id);
  spin_unlock_bh(&ar->data_lock);
  return;
 }

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx stop rx ba session sta %pM tid %hu\n",
     peer->addr, tid);

 ieee80211_stop_rx_ba_session_offl(arvif->vif, peer->addr, tid);
 spin_unlock_bh(&ar->data_lock);
}

static int ath10k_htt_rx_extract_amsdu(struct sk_buff_head *list,
           struct sk_buff_head *amsdu)
{
 struct sk_buff *msdu;
 struct htt_rx_desc *rxd;

 if (skb_queue_empty(list))
  return -105;

 if (({ int __ret_warn_on = !!(!skb_queue_empty(amsdu)); if (__builtin_expect(!!(__ret_warn_on), 0)) warn_slowpath_null("drivers/net/wireless/ath/ath10k/htt_rx.c", 1732); __builtin_expect(!!(__ret_warn_on), 0); }))
  return -22;

 while ((msdu = __skb_dequeue(list))) {
  __skb_queue_tail(amsdu, msdu);

  rxd = (void *)msdu->data - sizeof(*rxd);
  if (rxd->msdu_end.common.info0 &
      (( __le32)(__u32)((1 << 15))))
   break;
 }

 msdu = skb_peek_tail(amsdu);
 rxd = (void *)msdu->data - sizeof(*rxd);
 if (!(rxd->msdu_end.common.info0 &
       (( __le32)(__u32)((1 << 15))))) {
  skb_queue_splice_init(amsdu, list);
  return -11;
 }

 return 0;
}

static void ath10k_htt_rx_h_rx_offload_prot(struct ieee80211_rx_status *status,
         struct sk_buff *skb)
{
 struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;

 if (!ieee80211_has_protected(hdr->frame_control))
  return;






 hdr->frame_control &= ~(( __le16)(__u16)(0x4000));
 status->flag |= RX_FLAG_DECRYPTED |
   RX_FLAG_IV_STRIPPED |
   RX_FLAG_MMIC_STRIPPED;
}

static void ath10k_htt_rx_h_rx_offload(struct ath10k *ar,
           struct sk_buff_head *list)
{
 struct ath10k_htt *htt = &ar->htt;
 struct ieee80211_rx_status *status = &htt->rx_status;
 struct htt_rx_offload_msdu *rx;
 struct sk_buff *msdu;
 size_t offset;

 while ((msdu = __skb_dequeue(list))) {




  rx = (void *)msdu->data;

  skb_put(msdu, sizeof(*rx));
  skb_pull(msdu, sizeof(*rx));

  if (skb_tailroom(msdu) < (( __u16)(__le16)(rx->msdu_len))) {
   ath10k_warn(ar, "dropping frame: offloaded rx msdu is too long!\n");
   dev_kfree_skb_any(msdu);
   continue;
  }

  skb_put(msdu, (( __u16)(__le16)(rx->msdu_len)));






  offset = 4 - ((unsigned long)msdu->data & 3);
  skb_put(msdu, offset);
  memmove(msdu->data + offset, msdu->data, msdu->len);
  skb_pull(msdu, offset);





  memset(status, 0, sizeof(*status));
  status->flag |= RX_FLAG_NO_SIGNAL_VAL;

  ath10k_htt_rx_h_rx_offload_prot(status, msdu);
  ath10k_htt_rx_h_channel(ar, status, ((void *)0), rx->vdev_id);
  ath10k_process_rx(ar, status, msdu);
 }
}

static void ath10k_htt_rx_in_ord_ind(struct ath10k *ar, struct sk_buff *skb)
{
 struct ath10k_htt *htt = &ar->htt;
 struct htt_resp *resp = (void *)skb->data;
 struct ieee80211_rx_status *status = &htt->rx_status;
 struct sk_buff_head list;
 struct sk_buff_head amsdu;
 u16 peer_id;
 u16 msdu_count;
 u8 vdev_id;
 u8 tid;
 bool offload;
 bool frag;
 int ret;

 do { (void)(&htt->rx_ring.lock); } while (0);

 if (htt->rx_confused)
  return;

 skb_pull(skb, sizeof(resp->hdr));
 skb_pull(skb, sizeof(resp->rx_in_ord_ind));

 peer_id = (( __u16)(__le16)(resp->rx_in_ord_ind.peer_id));
 msdu_count = (( __u16)(__le16)(resp->rx_in_ord_ind.msdu_count));
 vdev_id = resp->rx_in_ord_ind.vdev_id;
 tid = (((resp->rx_in_ord_ind.info) << 0) & 0x0000001f);
 offload = !!(resp->rx_in_ord_ind.info &
   0x00000020);
 frag = !!(resp->rx_in_ord_ind.info & 0x00000040);

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx in ord vdev %i peer %i tid %i offload %i frag %i msdu count %i\n",
     vdev_id, peer_id, tid, offload, frag, msdu_count);

 if (skb->len < msdu_count * sizeof(*resp->rx_in_ord_ind.msdu_descs)) {
  ath10k_warn(ar, "dropping invalid in order rx indication\n");
  return;
 }




 __skb_queue_head_init(&list);
 ret = ath10k_htt_rx_pop_paddr_list(htt, &resp->rx_in_ord_ind, &list);
 if (ret < 0) {
  ath10k_warn(ar, "failed to pop paddr list: %d\n", ret);
  htt->rx_confused = true;
  return;
 }




 if (offload)
  ath10k_htt_rx_h_rx_offload(ar, &list);

 while (!skb_queue_empty(&list)) {
  __skb_queue_head_init(&amsdu);
  ret = ath10k_htt_rx_extract_amsdu(&list, &amsdu);
  switch (ret) {
  case 0:






   ath10k_htt_rx_h_ppdu(ar, &amsdu, status, vdev_id);
   ath10k_htt_rx_h_filter(ar, &amsdu, status);
   ath10k_htt_rx_h_mpdu(ar, &amsdu, status);
   ath10k_htt_rx_h_deliver(ar, &amsdu, status);
   break;
  case -11:

  default:

   ath10k_warn(ar, "failed to extract amsdu: %d\n", ret);
   htt->rx_confused = true;
   __skb_queue_purge(&list);
   return;
  }
 }
 ath10k_htt_rx_msdu_buff_replenish(htt);
}

static void ath10k_htt_rx_tx_fetch_resp_id_confirm(struct ath10k *ar,
         const __le32 *resp_ids,
         int num_resp_ids)
{
 int i;
 u32 resp_id;

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch confirm num_resp_ids %d\n",
     num_resp_ids);

 for (i = 0; i < num_resp_ids; i++) {
  resp_id = (( __u32)(__le32)(resp_ids[i]));

  ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch confirm resp_id %u\n",
      resp_id);


 }
}

static void ath10k_htt_rx_tx_fetch_ind(struct ath10k *ar, struct sk_buff *skb)
{
 struct ieee80211_hw *hw = ar->hw;
 struct ieee80211_txq *txq;
 struct htt_resp *resp = (struct htt_resp *)skb->data;
 struct htt_tx_fetch_record *record;
 size_t len;
 size_t max_num_bytes;
 size_t max_num_msdus;
 size_t num_bytes;
 size_t num_msdus;
 const __le32 *resp_ids;
 u16 num_records;
 u16 num_resp_ids;
 u16 peer_id;
 u8 tid;
 int ret;
 int i;

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch ind\n");

 len = sizeof(resp->hdr) + sizeof(resp->tx_fetch_ind);
 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_fetch_ind event: buffer too short\n");
  return;
 }

 num_records = (( __u16)(__le16)(resp->tx_fetch_ind.num_records));
 num_resp_ids = (( __u16)(__le16)(resp->tx_fetch_ind.num_resp_ids));

 len += sizeof(resp->tx_fetch_ind.records[0]) * num_records;
 len += sizeof(resp->tx_fetch_ind.resp_ids[0]) * num_resp_ids;

 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_fetch_ind event: too many records/resp_ids\n");
  return;
 }

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch ind num records %hu num resps %hu seq %hu\n",
     num_records, num_resp_ids,
     (( __u16)(__le16)(resp->tx_fetch_ind.fetch_seq_num)));

 if (!ar->htt.tx_q_state.enabled) {
  ath10k_warn(ar, "received unexpected tx_fetch_ind event: not enabled\n");
  return;
 }

 if (ar->htt.tx_q_state.mode == HTT_TX_MODE_SWITCH_PUSH) {
  ath10k_warn(ar, "received unexpected tx_fetch_ind event: in push mode\n");
  return;
 }

 rcu_read_lock();

 for (i = 0; i < num_records; i++) {
  record = &resp->tx_fetch_ind.records[i];
  peer_id = ((((( __u16)(__le16)(record->info))) &
 0x0fff) >> 0);
  tid = ((((( __u16)(__le16)(record->info))) &
 0xf000) >> 12);
  max_num_msdus = (( __u16)(__le16)(record->num_msdus));
  max_num_bytes = (( __u32)(__le32)(record->num_bytes));

  ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch record %i peer_id %hu tid %hhu msdus %zu bytes %zu\n",
      i, peer_id, tid, max_num_msdus, max_num_bytes);

  if (__builtin_expect(!!(peer_id >= ar->htt.tx_q_state.num_peers), 0) ||
      __builtin_expect(!!(tid >= ar->htt.tx_q_state.num_tids), 0)) {
   ath10k_warn(ar, "received out of range peer_id %hu tid %hhu\n",
        peer_id, tid);
   continue;
  }

  spin_lock_bh(&ar->data_lock);
  txq = ath10k_mac_txq_lookup(ar, peer_id, tid);
  spin_unlock_bh(&ar->data_lock);





  if (__builtin_expect(!!(!txq), 0)) {
   ath10k_warn(ar, "failed to lookup txq for peer_id %hu tid %hhu\n",
        peer_id, tid);
   continue;
  }

  num_msdus = 0;
  num_bytes = 0;

  while (num_msdus < max_num_msdus &&
         num_bytes < max_num_bytes) {
   ret = ath10k_mac_tx_push_txq(hw, txq);
   if (ret < 0)
    break;

   num_msdus++;
   num_bytes += ret;
  }

  record->num_msdus = (( __le16)(__u16)(num_msdus));
  record->num_bytes = (( __le32)(__u32)(num_bytes));

  ath10k_htt_tx_txq_recalc(hw, txq);
 }

 rcu_read_unlock();

 resp_ids = ath10k_htt_get_tx_fetch_ind_resp_ids(&resp->tx_fetch_ind);
 ath10k_htt_rx_tx_fetch_resp_id_confirm(ar, resp_ids, num_resp_ids);

 ret = ath10k_htt_tx_fetch_resp(ar,
           resp->tx_fetch_ind.token,
           resp->tx_fetch_ind.fetch_seq_num,
           resp->tx_fetch_ind.records,
           num_records);
 if (__builtin_expect(!!(ret), 0)) {
  ath10k_warn(ar, "failed to submit tx fetch resp for token 0x%08x: %d\n",
       (( __u32)(__le32)(resp->tx_fetch_ind.token)), ret);

 }

 ath10k_htt_tx_txq_sync(ar);
}

static void ath10k_htt_rx_tx_fetch_confirm(struct ath10k *ar,
        struct sk_buff *skb)
{
 const struct htt_resp *resp = (void *)skb->data;
 size_t len;
 int num_resp_ids;

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx fetch confirm\n");

 len = sizeof(resp->hdr) + sizeof(resp->tx_fetch_confirm);
 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_fetch_confirm event: buffer too short\n");
  return;
 }

 num_resp_ids = (( __u16)(__le16)(resp->tx_fetch_confirm.num_resp_ids));
 len += sizeof(resp->tx_fetch_confirm.resp_ids[0]) * num_resp_ids;

 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_fetch_confirm event: resp_ids buffer overflow\n");
  return;
 }

 ath10k_htt_rx_tx_fetch_resp_id_confirm(ar,
            resp->tx_fetch_confirm.resp_ids,
            num_resp_ids);
}

static void ath10k_htt_rx_tx_mode_switch_ind(struct ath10k *ar,
          struct sk_buff *skb)
{
 const struct htt_resp *resp = (void *)skb->data;
 const struct htt_tx_mode_switch_record *record;
 struct ieee80211_txq *txq;
 struct ath10k_txq *artxq;
 size_t len;
 size_t num_records;
 enum htt_tx_mode_switch_mode mode;
 bool enable;
 u16 info0;
 u16 info1;
 u16 threshold;
 u16 peer_id;
 u8 tid;
 int i;

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx tx mode switch ind\n");

 len = sizeof(resp->hdr) + sizeof(resp->tx_mode_switch_ind);
 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_mode_switch_ind event: buffer too short\n");
  return;
 }

 info0 = (( __u16)(__le16)(resp->tx_mode_switch_ind.info0));
 info1 = (( __u16)(__le16)(resp->tx_mode_switch_ind.info1));

 enable = !!(info0 & (1UL << (0)));
 num_records = (((info0) & 0xfffc) >> 2);
 mode = (((info1) & 0x0003) >> 0);
 threshold = (((info1) & 0xfffc) >> 2);

 ath10k_dbg(ar, ATH10K_DBG_HTT,
     "htt rx tx mode switch ind info0 0x%04hx info1 0x%04hx enable %d num records %zd mode %d threshold %hu\n",
     info0, info1, enable, num_records, mode, threshold);

 len += sizeof(resp->tx_mode_switch_ind.records[0]) * num_records;

 if (__builtin_expect(!!(skb->len < len), 0)) {
  ath10k_warn(ar, "received corrupted tx_mode_switch_mode_ind event: too many records\n");
  return;
 }

 switch (mode) {
 case HTT_TX_MODE_SWITCH_PUSH:
 case HTT_TX_MODE_SWITCH_PUSH_PULL:
  break;
 default:
  ath10k_warn(ar, "received invalid tx_mode_switch_mode_ind mode %d, ignoring\n",
       mode);
  return;
 }

 if (!enable)
  return;

 ar->htt.tx_q_state.enabled = enable;
 ar->htt.tx_q_state.mode = mode;
 ar->htt.tx_q_state.num_push_allowed = threshold;

 rcu_read_lock();

 for (i = 0; i < num_records; i++) {
  record = &resp->tx_mode_switch_ind.records[i];
  info0 = (( __u16)(__le16)(record->info0));
  peer_id = (((info0) & 0x0fff) >> 0);
  tid = (((info0) & 0xf000) >> 12);

  if (__builtin_expect(!!(peer_id >= ar->htt.tx_q_state.num_peers), 0) ||
      __builtin_expect(!!(tid >= ar->htt.tx_q_state.num_tids), 0)) {
   ath10k_warn(ar, "received out of range peer_id %hu tid %hhu\n",
        peer_id, tid);
   continue;
  }

  spin_lock_bh(&ar->data_lock);
  txq = ath10k_mac_txq_lookup(ar, peer_id, tid);
  spin_unlock_bh(&ar->data_lock);





  if (__builtin_expect(!!(!txq), 0)) {
   ath10k_warn(ar, "failed to lookup txq for peer_id %hu tid %hhu\n",
        peer_id, tid);
   continue;
  }

  spin_lock_bh(&ar->htt.tx_lock);
  artxq = (void *)txq->drv_priv;
  artxq->num_push_allowed = (( __u16)(__le16)(record->num_max_msdus));
  spin_unlock_bh(&ar->htt.tx_lock);
 }

 rcu_read_unlock();

 ath10k_mac_tx_push_pending(ar);
}

static inline __attribute__((no_instrument_function)) enum nl80211_band phy_mode_to_band(u32 phy_mode)
{
 enum nl80211_band band;

 switch (phy_mode) {
 case MODE_11A:
 case MODE_11NA_HT20:
 case MODE_11NA_HT40:
 case MODE_11AC_VHT20:
 case MODE_11AC_VHT40:
 case MODE_11AC_VHT80:
  band = NL80211_BAND_5GHZ;
  break;
 case MODE_11G:
 case MODE_11B:
 case MODE_11GONLY:
 case MODE_11NG_HT20:
 case MODE_11NG_HT40:
 case MODE_11AC_VHT20_2G:
 case MODE_11AC_VHT40_2G:
 case MODE_11AC_VHT80_2G:
 default:
  band = NL80211_BAND_2GHZ;
 }

 return band;
}

void ath10k_htt_htc_t2h_msg_handler(struct ath10k *ar, struct sk_buff *skb)
{
 bool release;

 release = ath10k_htt_t2h_msg_handler(ar, skb);


 if (release)
  dev_kfree_skb_any(skb);
}

bool ath10k_htt_t2h_msg_handler(struct ath10k *ar, struct sk_buff *skb)
{
 struct ath10k_htt *htt = &ar->htt;
 struct htt_resp *resp = (struct htt_resp *)skb->data;
 enum htt_t2h_msg_type type;


 if (!((((unsigned long)skb->data) & ((typeof((unsigned long)skb->data))(4) - 1)) == 0))
  ath10k_warn(ar, "unaligned htt message, expect trouble\n");

 ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx, msg_type: 0x%0X\n",
     resp->hdr.msg_type);

 if (resp->hdr.msg_type >= ar->htt.t2h_msg_types_max) {
  ath10k_dbg(ar, ATH10K_DBG_HTT, "htt rx, unsupported msg_type: 0x%0X\n max: 0x%0X",
      resp->hdr.msg_type, ar->htt.t2h_msg_types_max);
  return true;
 }
 type = ar->htt.t2h_msg_types[resp->hdr.msg_type];

 switch (type) {
 case HTT_T2H_MSG_TYPE_VERSION_CONF: {
  htt->target_version_major = resp->ver_resp.major;
  htt->target_version_minor = resp->ver_resp.minor;
  complete(&htt->target_version_received);
  break;
 }
 case HTT_T2H_MSG_TYPE_RX_IND:
  ath10k_htt_rx_proc_rx_ind(htt, &resp->rx_ind);
  break;
 case HTT_T2H_MSG_TYPE_PEER_MAP: {
  struct htt_peer_map_event ev = {
   .vdev_id = resp->peer_map.vdev_id,
   .peer_id = (( __u16)(__le16)(resp->peer_map.peer_id)),
  };
  memcpy(ev.addr, resp->peer_map.addr, sizeof(ev.addr));
  ath10k_peer_map_event(htt, &ev);
  break;
 }
 case HTT_T2H_MSG_TYPE_PEER_UNMAP: {
  struct htt_peer_unmap_event ev = {
   .peer_id = (( __u16)(__le16)(resp->peer_unmap.peer_id)),
  };
  ath10k_peer_unmap_event(htt, &ev);
  break;
 }
 case HTT_T2H_MSG_TYPE_MGMT_TX_COMPLETION: {
  struct htt_tx_done tx_done = {};
  int status = (( __u32)(__le32)(resp->mgmt_tx_completion.status));

  tx_done.msdu_id = (( __u32)(__le32)(resp->mgmt_tx_completion.desc_id));

  switch (status) {
  case HTT_MGMT_TX_STATUS_OK:
   tx_done.status = HTT_TX_COMPL_STATE_ACK;
   break;
  case HTT_MGMT_TX_STATUS_RETRY:
   tx_done.status = HTT_TX_COMPL_STATE_NOACK;
   break;
  case HTT_MGMT_TX_STATUS_DROP:
   tx_done.status = HTT_TX_COMPL_STATE_DISCARD;
   break;
  }

  status = ath10k_txrx_tx_unref(htt, &tx_done);
  if (!status) {
   spin_lock_bh(&htt->tx_lock);
   ath10k_htt_tx_mgmt_dec_pending(htt);
   spin_unlock_bh(&htt->tx_lock);
  }
  ath10k_mac_tx_push_pending(ar);
  break;
 }
 case HTT_T2H_MSG_TYPE_TX_COMPL_IND:
  ath10k_htt_rx_tx_compl_ind(htt->ar, skb);
  tasklet_schedule(&htt->txrx_compl_task);
  break;
 case HTT_T2H_MSG_TYPE_SEC_IND: {
  struct ath10k *ar = htt->ar;
  struct htt_security_indication *ev = &resp->security_indication;

  ath10k_dbg(ar, ATH10K_DBG_HTT,
      "sec ind peer_id %d unicast %d type %d\n",
     (( __u16)(__le16)(ev->peer_id)),
     !!(ev->flags & HTT_SECURITY_IS_UNICAST),
     (((ev->flags) & 0x7F) >> 0));
  complete(&ar->install_key_done);
  break;
 }
 case HTT_T2H_MSG_TYPE_RX_FRAG_IND: {
  ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "htt event: ",
    skb->data, skb->len);
  ath10k_htt_rx_frag_handler(htt);
  break;
 }
 case HTT_T2H_MSG_TYPE_TEST:
  break;
 case HTT_T2H_MSG_TYPE_STATS_CONF:
  trace_ath10k_htt_stats(ar, skb->data, skb->len);
  break;
 case HTT_T2H_MSG_TYPE_TX_INSPECT_IND:





  ath10k_warn(ar, "received an unexpected htt tx inspect event\n");
  break;
 case HTT_T2H_MSG_TYPE_RX_ADDBA:
  ath10k_htt_rx_addba(ar, resp);
  break;
 case HTT_T2H_MSG_TYPE_RX_DELBA:
  ath10k_htt_rx_delba(ar, resp);
  break;
 case HTT_T2H_MSG_TYPE_PKTLOG: {
  struct ath10k_pktlog_hdr *hdr =
   (struct ath10k_pktlog_hdr *)resp->pktlog_msg.payload;

  trace_ath10k_htt_pktlog(ar, resp->pktlog_msg.payload,
     sizeof(*hdr) +
     (( __u16)(__le16)(hdr->size)));
  break;
 }
 case HTT_T2H_MSG_TYPE_RX_FLUSH: {



  break;
 }
 case HTT_T2H_MSG_TYPE_RX_IN_ORD_PADDR_IND: {
  skb_queue_tail(&htt->rx_in_ord_compl_q, skb);
  tasklet_schedule(&htt->txrx_compl_task);
  return false;
 }
 case HTT_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND:
  break;
 case HTT_T2H_MSG_TYPE_CHAN_CHANGE: {
  u32 phymode = (( __u32)(__le32)(resp->chan_change.phymode));
  u32 freq = (( __u32)(__le32)(resp->chan_change.freq));

  ar->tgt_oper_chan =
   __ieee80211_get_channel(ar->hw->wiphy, freq);
  ath10k_dbg(ar, ATH10K_DBG_HTT,
      "htt chan change freq %u phymode %s\n",
      freq, ath10k_wmi_phymode_str(phymode));
  break;
 }
 case HTT_T2H_MSG_TYPE_AGGR_CONF:
  break;
 case HTT_T2H_MSG_TYPE_TX_FETCH_IND: {
  struct sk_buff *tx_fetch_ind = skb_copy(skb, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x2000000u)));

  if (!tx_fetch_ind) {
   ath10k_warn(ar, "failed to copy htt tx fetch ind\n");
   break;
  }
  skb_queue_tail(&htt->tx_fetch_ind_q, tx_fetch_ind);
  tasklet_schedule(&htt->txrx_compl_task);
  break;
 }
 case HTT_T2H_MSG_TYPE_TX_FETCH_CONFIRM:
  ath10k_htt_rx_tx_fetch_confirm(ar, skb);
  break;
 case HTT_T2H_MSG_TYPE_TX_MODE_SWITCH_IND:
  ath10k_htt_rx_tx_mode_switch_ind(ar, skb);
  break;
 case HTT_T2H_MSG_TYPE_EN_STATS:
 default:
  ath10k_warn(ar, "htt event (%d) not handled\n",
       resp->hdr.msg_type);
  ath10k_dbg_dump(ar, ATH10K_DBG_HTT_DUMP, ((void *)0), "htt event: ",
    skb->data, skb->len);
  break;
 };
 return true;
}
extern typeof(ath10k_htt_t2h_msg_handler) ath10k_htt_t2h_msg_handler; static const char __kstrtab_ath10k_htt_t2h_msg_handler[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "ath10k_htt_t2h_msg_handler"; extern const struct kernel_symbol __ksymtab_ath10k_htt_t2h_msg_handler; __attribute__((externally_visible)) const struct kernel_symbol __ksymtab_ath10k_htt_t2h_msg_handler __attribute__((__used__)) __attribute__((section("___ksymtab" "" "+" "ath10k_htt_t2h_msg_handler"), unused)) = { (unsigned long)&ath10k_htt_t2h_msg_handler, __kstrtab_ath10k_htt_t2h_msg_handler };

void ath10k_htt_rx_pktlog_completion_handler(struct ath10k *ar,
          struct sk_buff *skb)
{
 trace_ath10k_htt_pktlog(ar, skb->data, skb->len);
 dev_kfree_skb_any(skb);
}
extern typeof(ath10k_htt_rx_pktlog_completion_handler) ath10k_htt_rx_pktlog_completion_handler; static const char __kstrtab_ath10k_htt_rx_pktlog_completion_handler[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "ath10k_htt_rx_pktlog_completion_handler"; extern const struct kernel_symbol __ksymtab_ath10k_htt_rx_pktlog_completion_handler; __attribute__((externally_visible)) const struct kernel_symbol __ksymtab_ath10k_htt_rx_pktlog_completion_handler __attribute__((__used__)) __attribute__((section("___ksymtab" "" "+" "ath10k_htt_rx_pktlog_completion_handler"), unused)) = { (unsigned long)&ath10k_htt_rx_pktlog_completion_handler, __kstrtab_ath10k_htt_rx_pktlog_completion_handler };

static void ath10k_htt_txrx_compl_task(unsigned long ptr)
{
 struct ath10k_htt *htt = (struct ath10k_htt *)ptr;
 struct ath10k *ar = htt->ar;
 struct htt_tx_done tx_done = {};
 struct sk_buff_head rx_ind_q;
 struct sk_buff_head tx_ind_q;
 struct sk_buff *skb;
 unsigned long flags;
 int num_mpdus;

 __skb_queue_head_init(&rx_ind_q);
 __skb_queue_head_init(&tx_ind_q);

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&htt->rx_in_ord_compl_q.lock)); } while (0); } while (0);
 skb_queue_splice_init(&htt->rx_in_ord_compl_q, &rx_ind_q);
 spin_unlock_irqrestore(&htt->rx_in_ord_compl_q.lock, flags);

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&htt->tx_fetch_ind_q.lock)); } while (0); } while (0);
 skb_queue_splice_init(&htt->tx_fetch_ind_q, &tx_ind_q);
 spin_unlock_irqrestore(&htt->tx_fetch_ind_q.lock, flags);






 while (__kfifo_uint_must_check_helper( ({ typeof((&htt->txdone_fifo) + 1) __tmp = (&htt->txdone_fifo); typeof(__tmp->ptr) __val = (&tx_done); unsigned int __ret; const size_t __recsize = sizeof(*__tmp->rectype); struct __kfifo *__kfifo = &__tmp->kfifo; if (__recsize) __ret = __kfifo_out_r(__kfifo, __val, sizeof(*__val), __recsize); else { __ret = !({ typeof((__tmp) + 1) __tmpq = (__tmp); __tmpq->kfifo.in == __tmpq->kfifo.out; }); if (__ret) { *(typeof(__tmp->type))__val = ((sizeof(*__tmp) == sizeof(struct __kfifo)) ? ((typeof(__tmp->type))__kfifo->data) : (__tmp->buf) )[__kfifo->out & __tmp->kfifo.mask]; __asm__ __volatile__("": : :"memory"); __kfifo->out++; } } __ret; }) ))
  ath10k_txrx_tx_unref(htt, &tx_done);

 while ((skb = __skb_dequeue(&tx_ind_q))) {
  ath10k_htt_rx_tx_fetch_ind(ar, skb);
  dev_kfree_skb_any(skb);
 }

 ath10k_mac_tx_push_pending(ar);

 num_mpdus = atomic_read(&htt->num_mpdus_ready);

 while (num_mpdus) {
  if (ath10k_htt_rx_handle_amsdu(htt))
   break;

  num_mpdus--;
  atomic_dec(&htt->num_mpdus_ready);
 }

 while ((skb = __skb_dequeue(&rx_ind_q))) {
  spin_lock_bh(&htt->rx_ring.lock);
  ath10k_htt_rx_in_ord_ind(ar, skb);
  spin_unlock_bh(&htt->rx_ring.lock);
  dev_kfree_skb_any(skb);
 }

 ath10k_htt_rx_msdu_buff_replenish(htt);
}
